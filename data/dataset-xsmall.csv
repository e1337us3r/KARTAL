prompt|labels
Context: An email platform where each user can only view their own emails. Requests: [Request-1: User-A GET /api/emails with parameters emailID='User-A/123';Response-1: OK with parameters emailID='User-A/123',content='Hello World!',date='2023-06-20 10:20:30',sender='def@abc.com',recipient='User-A';Request-2: User-A GET /api/emails with parameters emailID='User-B/123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The email id is wrong or not authorized to view.'];Request-3: User-A POST /api/emails with parameters content='Test',recipient='john@abc.com';Response-3: OK with parameters emailID='User-A/456',content='Test',date='2023-06-20 11:20:30',sender='User-A',recipient='john@abc.com']|0
Context: A messaging app, where each user can only see and edit their own messages and groups. Admins can see and edit all messages and groups. Requests: [Request-1: User-A GET /api/messages with parameters messageID='User-A-123';Response-1: OK with parameters messageID='User-A-123',text='Hello World',sender='User-A',receiver='User-B',timestamp='03-02-2023 11:45 AM';Request-2: User-B GET /api/messages with parameters messageID='User-B-456';Response-2: OK with parameters messageID='User-B-456',text='Hi there',sender='User-B',receiver='User-A',timestamp='03-02-2023 11:45 AM';Request-3: User-A PUT /api/messages with parameters messageID='User-B-456',text='New text';Response-3: OK with parameters messageID='User-B-456',text='New text',sender='User-B',receiver='User-A',timestamp='03-02-2023 11:45 AM']|1
Context: A gym management system where trainers can only view and modify their own workout plan. Requests: [Request-1: Trainer-A POST /workout/api/auth/login with parameters username='trainer1',password='secret';Response-1: Unauthorized with parameters success=false,message='incorrect password';Request-2: Trainer-B POST /workout/api/auth/login with parameters username='trainer2',password='workoutplan';Response-2: OK with parameters sessionID='hjbjhbmmnn...']|2
Context: A social media platform where each user can only post, view and edit their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='User-A/123';Response-1: OK with parameters postID='User-A/123',content='Hello World!',date='2023-06-20 10:20:30';Request-2: User-B GET /api/posts with parameters postID='User-A/123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The post id is wrong or not authorized to view.';Request-3: User-A PUT /api/posts with parameters content='Updated Content'; Response-3: OK with parameters postID='User-A/123',content='Updated Content',date='2023-06-20 10:20:30']|0
Context: A social media app, where each user can only access and post on their own profile. Admins can view and edit all profiles. Requests: [Request-1: User-A GET /api/user with parameters userID='User-A';Response-1: OK with parameters userID='User-A',name='John Doe',age=25,profilePic='Pic-A';Request-2: User-B GET /api/user with parameters userID='User-B';Response-2: OK with parameters userID='User-B',name='Jane Doe',age=23,profilePic='Pic-B';Request-3: User-A GET /api/user with parameters userID='User-B';Response-3: OK with parameters userID='User-B',name='Jane Doe',age=23,profilePic='Pic-B']|1
Context: A project management tool with administrators, project managers, and employees who are managers of projects. Project managers can view and make edits to their own projects. Requests: [Request-1: Employee-C POST /pm/api/auth/login with parameters username='johndoe',password='a1b2c3d4';Response-1: Unauthorized with parameters success=false,message='a1b2c3d4 is incorrect password';Request-2: Project Manager-D POST /pm/api/auth/login with parameters username='sarai',password='admin11';Response-2: OK with parameters token='aVe567...']|2
Context: An online booking system where each user can only book, view and edit their own bookings. Requests: [Request-1: Customer-A GET /api/bookings with parameters bookingID='Customer-A/123';Response-1: OK with parameters bookingID='Customer-A/123',from='New York',to='Paris',date='2024-06-01';Request-2: Customer-B GET /api/bookings with parameters bookingID='Customer-A/123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The booking id is wrong or not authorized to view.';Request-3: Customer-A PUT /api/bookings with parameters bookingID='Customer-A/123',date='2024-06-02';Response-3: OK with parameters bookingID='Customer-A/123',from='New York',to='Paris',date='2024-06-02']|0
Context: A fitness app where each user can only view and edit their own fitness regime. Admins can view and edit all regimes. Requests: [Request-1: User-A GET /api/fitness with parameters userID='User-A';Response-1: OK with parameters userID='User-A',regime=['Exercise-A', 'Exercise-B'],diet=['Food-A','Food-B'],duration='30 minutes';Request-2: User-B GET /api/fitness with parameters userID='User-B';Response-2: OK with parameters userID='User-B',regime=['Exercise-C', 'Exercise-D'],diet=['Food-C','Food-D'],duration='45 minutes';Request-3: User-A GET /api/fitness with parameters userID='User-B';Response-3: OK with parameters userID='User-B',regime=['Exercise-C', 'Exercise-D'],diet=['Food-C','Food-D'],duration='45 minutes']|1
Context: A social media platform with 2 types of users User and Admin where Users can share posts with friends and followers. Admins can view all posts. Requests: [Request-1: User-A PUT /posts with parameters text='hello';Response-1: OK with parameters postID='Post-A',text='hello';Request-2: User-B PUT /posts with parameters text='world';Response-2: OK with parameters postID='Post-B',text='world';Request-3: User-A GET /posts with parameters userID=User-B;Response-3: Forbidden with parameters error='Access to User-B's posts is restricted';]|2
Context: A file sharing app, where each user can only view and download their own files. Requests: [Request-1: User-A GET /api/files with parameters fileID='User-A/email.docx';Response-1: OK with parameters fileID='User-A/email.docx',content='Hello World!',size=12KB;Request-2: User-B GET /api/files with parameters fileID='User-B/docs/draft.docx';Response-2: OK with parameters fileID='User-B/docs/draft.docx', content=['...'],size=1.3MB;Request-3: User-A GET /api/files with parameters fileID='User-B/email.docx';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The file id is wrong or not authorized to view.';Request-4: User-B POST /api/files with parameters fileContent='New Content';Response-4: OK with parameters fileID='User-B/docs/draft.docx',content='New Content',size=1.2MB]|0
Context: A news app where each user can only view and edit their own news feed. Admins can view and edit all news feeds. Requests: [Request-1: User-A GET /api/news with parameters newsID='User-A-123';Response-1: OK with parameters newsID='User-A-123',title='News-A',category='Sports',timestamp='03-02-2023 11:45 AM',content='...';Request-2: User-B GET /api/news with parameters newsID='User-B-456';Response-2: OK with parameters newsID='User-B-456',title='News-B',category='Politics',timestamp='03-02-2023 11:45 AM',content='...';Request-3: User-A GET /api/news with parameters newsID='User-B-456';Response-3: OK with parameters newsID='User-B-456',title='News-B',category='Politics',timestamp='03-02-2023 11:45 AM',content='...']|1
Context: A banking app with 2 types of users Customer and Admin where customers can view and manage their own bank accounts. Admins can view and modify all bank accounts. Requests: [Request-1: Customer-A GET /api/accounts with parameters accountID='Customer-A-Account-1';Response-1: Error with parameters msg='Query Error: SELECT * FROM ACCOUNT WHERE id=Customer-A-Account-1 and balance < -100';Request-2: Customer-B POST /api/transfer with parameters recipient='Customer-A', amount=1000;Response-2: Error with parameters msg='Transaction Error: Failed to transfer $1000 to Customer-A: Insufficient funds in account Customer-B-Account. Available balance is $800';Request-3: Admin GET /api/accounts with parameters accountID='Customer-C-Account-3';Response-3: Error with parameters msg='Query Error: SELECT * FROM ACCOUNT WHERE id=Customer-C-Account-3 and customer_name=Michael' ]|2
Context: An online shopping app, where each customer can only access and modify their own cart. Requests: [Request-1: Customer-A GET /api/cart with parameters cartID='Customer-A';Response-1: OK with parameters cartID='Customer-A',items=[{'name':'product-1','price':10},{'name':'product-2','price':20}];Request-2: Customer-B GET /api/cart with parameters cartID='Customer-A';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The cart id is wrong or not authorized to view.';Request-3: Customer-A PUT /api/cart with parameters cartID='Customer-A',items=[{'name':'product-1','price':10},{'name':'product-2','price':20},{'name':'product-3','price':30}];Response-3: OK with parameters cartID='Customer-A',items=[{'name':'product-1','price':10},{'name':'product-2','price':20},{'name':'product-3','price':30}]|0
Context: Social media app where users can only edit and view their own posts, messages, and profile information. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A'; Response-1: OK with parameters postID='Post-A', title='This is my post', content='Hello world!', author='User-A'; Request-2: User-B GET /api/posts with parameters postID='Post-A'; Response-2: OK with parameters postID='Post-A', title='This is my post', content='Hello world!', author='User-A';]|1
Context: A file storage website where users need to login to upload files. Requests: [Request-1: User-A POST /upload/files with parameters fileName='File.pdf',fileContent=[...];Response-1: Internal server error with parameters message='failed to upload /home/userA/files/File.pdf']|2
Context: A messaging app where each user can only send, receive and delete their own messages. Requests: [Request-1: User-A POST /api/messages with parameters to='User-B',content='Hello World!';Response-1: OK with parameters messageID='User-A/123',date='2023-06-20 10:20:30',from='User-A',to='User-B',content='Hello World!';Request-2: User-B GET /api/messages with parameters messageID='User-A/123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The message id is wrong or not authorized to view.';Request-3: User-A DELETE /api/messages with parameters messageID='User-A/123';Response-3: OK with parameters messageID='User-A/123',status='Deleted']|0
Context: A social media platform where each user can view only their own posts. Requests: [Request-1: User-A GET /posts with parameters postID='Post-A';Response-1: OK with parameters userID='User-B', postID='Post-B', content='Random content 1';Request-2: User-B GET /posts with parameters postID='Post-B';Response-2: OK with parameters userID='User-C', postID='Post-C', content='Random content 2'] |1
"Context: A gaming app with 1 type of users User, who can only play games. Requests: [Request-1: User-A GET /game/2048 with parameters board=[0,2,4,...];Response-1: Internal server error with parameters message='ooops, you just revealed a bug where user info was not properly sanitized: user bio-> """"""""I love chocolate and cats""""""""']"""""""|2
Context: A booking app where each user can only book, view and edit their own bookings. Requests: [Request-1: Customer-A POST /api/bookings with parameters from='New York',to='Paris',date='2024-06-01';Response-1: OK with parameters bookingID='Customer-A/123',from='New York',to='Paris',date='2024-06-01';Request-2: Customer-B GET /api/bookings with parameters bookingID='Customer-A/123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The booking id is wrong or not authorized to view.';Request-3: Customer-A PUT /api/bookings with parameters bookingID='Customer-A/123',date='2024-06-02';Response-3: OK with parameters bookingID='Customer-A/123',from='New York',to='Paris',date='2024-06-02']|0
Context: A messaging app where each user can only view their own conversations. Requests: [Request-1: User-A GET /messages with parameters To='User-B';Response-1: OK with parameters To='User-B', From='User-C', text='Hi there';Request-2: User-B GET /messages with parameters To='User-B';Response-2: OK with parameters To='User-B', From='User-C', text='What are you doing?']|1
"Context: A financial platform with 2 types of users Investor and Adviser. Investors can view and manage their own portfolios. Advisers can view and edit all investor portfolios. Requests: [Request-1: Investor-A GET /financial/portfolio with parameters id='234';Response-1: Unauthorized with parameters success=false, message='Invalid token';Request-2: Investor-A GET /financial/portfolio with parameters id='999';Response-2: Forbidden with parameters success=false, message='you are not authorized to access portfolio id=999';Request-3: Adviser PUT /financial/portfolio with parameters id='234', newContent='{""""""""stock"""""""": """"""""AAPL"""""""", """"""""investment"""""""": """"""""180""""""""}';Response-3: OK with parameters success=true, message='Portfolio with id=234 successfully updated';Request-4: Adviser GET /financial/portfolio with parameters id='log';Response-4: Error with parameters message='Cannot complete sql query SELECT * FROM portfolio WHERE id=log';]"""""""|2
Context: A task management app where each user can only create, view and edit their own tasks. Requests: [Request-1: User-A POST /api/tasks with parameters title='Complete Homework',description='Math and Science',date='2023-06-20 10:20:30';Response-1: OK with parameters taskID='User-A/123',title='Complete Homework',description='Math and Science',date='2023-06-20 10:20:30',status='Open';Request-2: User-B GET /api/tasks with parameters taskID='User-A/123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The task id is wrong or not authorized to view.';Request-3: User-A PUT /api/tasks with parameters taskID='User-A/123',status='In Progress';Response-3: OK with parameters taskID='User-A/123',title='Complete Homework',description='Math and Science',date='2023-06-20 10:20:30',status='In Progress']|0
Context: A voting app where each user can only vote once and only for themselves. Requests: [Request-1: User-A POST /vote with parameters candidate='User-A';Response-1: OK with parameters message='Vote counted';Request-2: User-B POST /vote with parameters candidate='User-A';Response-2: OK with parameters message='Vote counted']|1
"Context: A healthcare app with 2 types of users: Doctor and Patient. Doctors can manage and view their own patients, while Patients can view their own medical records. Requests: [Request-1: Doctor-A PUT /patients with parameters patientID='111', newName='Patient Alpha', newRecord='{""""""""patientID"""""""": """"""""111"""""""", """"""""records"""""""": [{""""""""medicalRecord"""""""": """"""""annual checkup"""""""", """"""""doctor"""""""": """"""""Doctor-A""""""""}, {""""""""medicalRecord"""""""": """"""""injury"""""""", """"""""doctor"""""""": """"""""Doctor-B""""""""}]}';Response-1: OK with parameters success=true, message='Patient 111 updated successfully!';Request-2: Doctor-B DELETE /patients with parameters patientID='999', newContent='{""""""""patientID"""""""": """"""""999"""""""", """"""""records"""""""": [{""""""""medicalRecord"""""""": """"""""miscellaneous"""""""", """"""""doctor"""""""": """"""""Doctor-B""""""""}, {""""""""medicalRecord"""""""": """"""""accident"""""""", """"""""doctor"""""""": """"""""Doctor-C""""""""}]}';Response-2: Forbidden with parameters success=false, message='you are not authorized to access patient with id=999';Request-3: Patient-A PUT /medical with parameters medicalRecordID='567', newContent='{""""""""date"""""""": """"""""25-08-2020"""""""", """"""""symptoms"""""""": """"""""fatigue"""""""", """"""""diagnosis"""""""": """"""""flu""""""""}';Response-3: OK with parameters success=true, message='Medical record 567 updated successfully!';Request-4: Patient-A GET /medical with parameters;Response-4: Forbidden with parameters success=false, message='you are not authorized to access medical records for user with id=User-A_id';Request-5: Doctor-A GET /medical with parameters;Response-5: Error with parameters message='Cannot execute the query SELECT * FROM User-A_id_medical_records WHERE symptom=""""""""headache"""""""" AND date BETWEEN date1 AND date2';]"""""""|2
Context: A social media app where each user can only view and edit their own profile. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters userID='User-A',name='John Doe',email='johndoe@example.com';Request-2: User-B GET /api/profile with parameters userID='User-A';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The user ID is wrong or not authorized to edit.';Request-3: User-A PUT /api/profile with parameters email='newemail@example.com';Response-3: OK with parameters message='Profile updated successfully.'];|0
Context: A social media app where each user can only access and modify their own posts. Other users cannot modify or delete them. Requests: [Request-1: User-A POST /api/posts with parameters content='Hello World!';Response-1: OK with parameters postID='123',content='Hello World!',likes=0;Request-2: User-A PUT /api/posts with parameters postID='456',content='My New Post!';Response-2: OK with parameters postID='456',content='My New Post!',likes=0;Request-3: User-B GET /api/posts with parameters postID='123';Response-3: OK with parameters postID='123',content='Hello World!',likes=0]|1
"Context: A gaming website with 2 types of users: Player and Admin. Players can view and edit their own profiles, while Admins can view and edit all profiles. Requests: [Request-1: Player-A PUT /profiles with parameters profileID='345', newName='New username', newAvatar='vampire.png';Response-1: OK with parameters success=true, message='Profile 345 updated successfully!';Request-2: Player-A DELETE /profiles with parameters profileID='999', newContent='{""""""""password"""""""": """"""""pass123"""""""", """"""""email"""""""": """"""""email@host.com"""""""", """"""""address"""""""": """"""""4253 West street""""""""}';Response-2: Forbidden with parameters success=false, message='you are not authorized to delete profile with id=999';Request-3: Admin POST /profiles with parameters newProfileName='New User', newContent='{""""""""age"""""""": 26, """"""""location"""""""": """"""""Toronto""""""""}';Response-3: OK with parameters success=true, message='New User profile created successfully!';Request-4: Admin GET /profiles with parameters profileID='log';Response-4: Error with parameters message='Cannot complete sql query SELECT * FROM profiles WHERE id=log';]"""""""|2
Context: A gym where each member can reserve a workout machine. Requests: [Request-1: Member-A POST /api/reserve_machine with parameters machineID='1';Response-1: OK with parameters machineID='1',startTime='2023-07-12 16:30:00',endTime='2023-07-12 17:30:00';Request-2: Member-B POST /api/reserve_machine with parameters machineID='2';Response-2: OK with parameters machineID='2',startTime='2023-07-12 16:30:00',endTime='2023-07-12 17:30:00';Request-3: Member-A POST /api/reserve_machine with parameters machineID='2';Response-3:Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='The machine is already reserved.']|0
Context: A social media website where each user can only view and modify their own profile. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters name='User-A',bio='Hello World!',friendsCount=5;Request-2: User-B GET /api/profile with parameters userID='User-A';Response-2: OK with parameters name='User-A',bio='Hello World!',friendsCount=5;Request-3: User-A PUT /api/profile with parameters bio='Hi there!';Response-3: OK with parameters name='User-A',bio='Hi there!',friendsCount=5;]|1
Context: A financial app with 3 types of users Investor, Broker and Admin. Each investor has an investment portfolio which they can view and modify, brokers can only view the investment portfolios of their clients. Admins can view and modify all data. Requests: [Request-1: Investor-A GET /api/portfolio with parameters portfolioID='Portfolio-A';Response-1: Forbidden with parameters message='You cannot modify Portfolio-A as it does not belong to you';Request-2: Broker-A GET /api/portfolio with parameters portfolioID='Portfolio-B';Response-2: OK with parameters portfolioID='Portfolio-B',investments=['Tesla','Facebook','Google'],values=['5','2.5','1.2'];Request-3: Investor-C GET /api/portfolio with parameters portfolioID='Portfolio-D';Response-3: Forbidden with parameters message='You cannot view Portfolio-D as it does not belong to you'].|2
Context: A retail app where customers can view their own order history. Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',totalPrice=12;Request-2: Customer-B GET /api/orders with parameters orderID='Order-B';Response-2: OK with parameters orderID='Order-B',totalPrice=155;Request-3: Customer-A GET /api/orders with parameters orderID='Order-B';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The order id is wrong or not authorized to display.']|0
Context: A business review system app, where reviews and ratings are given for specific businesses but users should not be able to modify others' reviews. Requests: [Request-1: User-A POST /api/business/123/review with parameters rating=4, comment='Nice place';Response-1: OK with parameters reviewID='Review-1234',businessID='Business-123',userID='User-A',rating=4,comment='Nice place';Request-2: User-B POST /api/business/123/review with parameters rating=2, comment='Terrible place, poor customer service';Response-2: OK with parameters reviewID='Review-2345',businessID='Business-123',userID='User-B',rating=2,comment='Terrible place, poor customer service';Request-3: User-A PUT /api/business/123/review with parameters reviewID='Review-2345',rating=1;Response-3: OK with parameters message='Review updated successfully']|1
Context: A web-based tennis club management system with 2 types of users Member and Admin. Members can view their own profile, use the booking system and view tennis court schedules. Admins can view and modify any data. Requests: [Request-1: Member-A GET /api/courts/schedule with parameters date='12/10/21';Response-1: OK with parameters courts=[{id='1',status='Available',time='10-11am'},{id='2',status='Booked',time='11-12am'}];Request-2: Member-B GET /api/profile with parameters id='user-123';Response-2: Unauthorized with parameters success=false,message='Incorrect password';Request-3: Admin PATCH /api/courts/schedule with parameters date='13/10/21',Court-1-time='8:00',Court-2-status='Maintenance';Response-3: OK with parameters message='Successfully updated courts schedule'].|2
Context: A weather app where users can set their preferred location and view the weather forecast. Requests: [Request-1: User-A PUT /api/location with parameters latitude='50.0616',longitude='8.6719';Response-1: OK with parameters location='Frankfurt am Main, Germany';Request-2: User-A GET /api/weather;Response-2: OK with parameters temperature=25°C, humidity=40%, wind='5m/s';Request-3: User-A PUT /api/location with parameters latitude='10',longitude='20';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.', errorDetails='The location is not authorized.']|0
Context: A banking application where only the account holder can view and modify their own transactions. Requests: [Request-1: User-A GET /api/transactions with parameters accountID='Account-123';Response-1: OK with parameters transactionID='Transaction-123',description='Monthly salary',amount=5000;Request-2: User-B GET /api/transactions with parameters accountID='Account-123';Response-2: OK with parameters transactionID='Transaction-123',description='Monthly salary',amount=5000;Request-3: User-A PUT /api/transactions with parameters transactionID='Transaction-2345', amount=1000;Response-3: OK with parameters message='Transaction updated successfully']|1
Context: A social media platform 'FriendsZone' that allows people to connect with one another. Requests: [Request-1: User-A POST /api/send-friend-request with parameters friendID='User-B';Response-1: OK with parameters message='Friend request has been sent successfully';Request-2: User-B POST /api/accept-friend-request with parameters friendID='User-A';Response-2: OK with parameters message='You are now friends with User-A';Request-3: User-A POST /api/send-friend-request with parameters friendID='User-C';Response-3: OK with parameters message='Friend request has been sent successfully';Request-4: User-C GET /api/friend-requests with parameters;Response-4: OK with parameters friendRequests=['User-A'];Request-5: User-C POST /api/accept-friend-request with parameters friendID='User-A';Response-5: Forbidden with parameters message='Cannot accept friend request from User-A as they have already reached the maximum number of friends allowed'].|2
Context: A flight reservation system where each booker can view their own bookings. Requests: [Request-1: Booker-A GET /api/bookings with parameters bookingID='Booking-A';Response-1: OK with parameters bookingID='Booking-A', flightNumber='DL-123';Request-2: Booker-B GET /api/bookings with parameters bookingID='Booking-B';Response-2: OK with parameters bookingID='Booking-B', flightNumber='UA-456';Request-3: Booker-A GET /api/bookings with parameters bookingID='Booking-B';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The booking id is wrong or not authorized to display.']|0
Context: A government portal where each person can only view and modify their own tax returns. Requests: [Request-1: Citizen-A GET /api/tax-returns with parameters citizenID='Citizen-A';Response-1: OK with parameters citizenID='Citizen-A',income=80000,taxPaid=12500;Request-2: Citizen-B GET /api/tax-returns with parameters citizenID='Citizen-A';Response-2: OK with parameters citizenID='Citizen-A',income=80000,taxPaid=12500;Request-3: Citizen-A PUT /api/tax-returns with parameters taxPaid=11000; Response-3: OK with parameters citizenID='Citizen-A',income=80000,taxPaid=11000;]|1
Context: A GPS tracking system with 2 types of users, Driver and Manager. Drivers can view & modify their own routes while Managers can view all data. Requests: [Request-1: Driver-A POST /api/routes with parameters routeID='Route-1',location='28.7041° N, 77.1025° E';Response-1: OK with parameters message='Route-1 added successfully';Request-2: Manager-A GET /api/routes with parameters locationRange='28.740 & 77.020 & 28.686 & 77.054';Response-2: OK with parameters routes=[{routeID='Route-1',location='28.7041° N, 77.1025° E',driver='Driver-A'}, {routeID='Route-2',location='28.7251° N, 77.0177° E',driver='Driver-B'}];Request-3: Driver-A PUT /api/routes with parameters routeID='Route-1',location='22.5726° N, 88.3639° E';Response-3: OK with parameters message='Route-1 modified successfully';Request-4: Manager-B GET /api/routes with parameters locationRange='28.740 & 77.020 & 28.686 & 77.054';Response-4: OK with parameters routes=[];Request-5: Driver-B POST /api/routes with parameters routeID='Route-2',location='4.2105° N, 101.9758° E';Response-5: Forbidden with parameters message='You are not authorized to modify Route-2 as it belongs to Driver-A'].|2
Context: An online rental app where each customer can view their own rental agreements. Requests: [Request-1: Customer-A GET /api/agreements with parameters agreementID='Agreement-A';Response-1: OK with parameters agreementID='Agreement-A',rentalItem='Car-X';Request-2: Customer-B GET /api/agreements with parameters agreementID='Agreement-B';Response-2: OK with parameters agreementID='Agreement-B', rentalItem='Bike-Y';Request-3: Customer-A GET /api/agreements with parameters agreementID='Agreement-B';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.', errorDetails='The agreement id is not authorized to display.']|0
Context: A gaming platform where each player can only view and modify their own game data. Requests: [Request-1: Player-A GET /api/game-data with parameters playerID='Player-A';Response-1: OK with parameters playerID='Player-A',level=10,score=5000,timePlayed=60mins;Request-2: Player-B GET /api/game-data with parameters playerID='Player-A';Response-2: OK with parameters playerID='Player-A',level=10,score=5000,timePlayed=60mins;Request-3: Player-A PUT /api/game-data with parameters score=5500; Response-3: OK with parameters playerID='Player-A',level=10,score=5500,timePlayed=60mins;]|1
"Context: A file sharing app with 2 types of users User and Admin. Users can upload and download their files, while Admins can manage other users' files as well. Requests: [Request-1: User-A GET /files/documents with parameters;Response-1: OK with parameters filenames=['homework.docx','research.pptx','studynotes.doc',...'];Request-2: User-B POST /files/uploads with parameters file='catpictures LOL.jpeg',size=500KB;Response-2: OK with parameters message='File uploaded successfully!';Request-3: Admin GET /files/uploads with parameters;Response-3: Internal Server Error with parameters message='An error occurred in upload(/uploads/step1): this_file_doesnt_exist.so: cannot find the file or directory';Request-4: Admin POST /files/uploads with parameters file='employee_salaries.xlsx',size=2MB;Response-4: Internal Server Error with parameters message='An error occurred in upload(/uploads/step1): Stack trace at file """"""""uploadapp/lib.php"""""""", line 28, in function handle()...'];"""""""|2
Context: A movie streaming app where each user can only view their own watch history. Requests: [Request-1: User-A GET /api/history with parameters movieID='Movie-A';Response-1: OK with parameters movieID='Movie-A',duration='2h 30m',watchTime='2023-07-11 20:12:30';Request-2: User-B GET /api/history with parameters movieID='Movie-B';Response-2: OK with parameters movieID='Movie-B',duration='1h 45m',watchTime='2023-07-11 14:50:00';Request-3: User-A GET /api/history with parameters movieID='Movie-B';Response-3: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.',errorDetails='The movie id is wrong or not authorized to display.']|0
Context: An education platform where each student can only access and modify their own learning data. Requests:[Request-1: Student-A GET /api/learning with parameters studentID='Student-A';Response-1: OK with parameters studentID='Student-A',lessonsCompleted=10,percentageComplete=50,quizScore=80;Request-2: Student-B GET /api/learning with parameters studentID='Student-A';Response-2: OK with parameters studentID='Student-A',lessonsCompleted=10,percentageComplete=50,quizScore=80;Request-3: Student-A PUT /api/learning with parameters quizScore=85; Response-3: OK with parameters studentID='Student-A',lessonsCompleted=10,percentageComplete=50,quizScore=85;]|1
"Context: A blogging app with 3 types of users Writers, Editors and Admins. Writers can write and edit their own blogs, Editors can edit all blogs and Admins have access to all features and users. Requests: [Request-1: Writer-A POST /blogs/new with parameters title='New blog',content='Some interesting topic';Response-1: OK with parameters message='Blog created successfully!';Request-2: Editor-A GET /blogs/all with parameters;Response-2: OK with parameters blogs=[{id:12,title:'New blog',content:'Some interesting topic',author:'Writer-A',editors=[],published=true},...];Request-3: Writer-B GET /blogs/my with parameters;Response-3: OK with parameters blogs=[{id:15,title:'Travel blog',content:'My trip to France',author:'Writer-B',editors:[Editor-C],published=false},...];Request-4: Admin POST /users/delete with parameters userId=23; Response-4: Internal Server Error with parameters message='An error occurred in deletion: duplicate key value violates unique constraint """"""""email"""""""" for key """"""""users_email_key"""""""" 'id' variable of incorrect type string';]"""""""|2
Context: A messaging app where each user can only view conversations that they are part of. Requests: [Request-1: User-A GET /api/conversations with parameters conversationID='Conv-A';Response-1: OK with parameters messages=[Message-1, Message-2];Request-2: User-B GET /api/conversations with parameters conversationID='Conv-B';Response-2: OK with parameters messages=[Message-3];Request-3: User-A GET /api/conversations with parameters conversationID='Conv-B';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='The conversation id is not authorized to display.'] |0
Context: A real estate app where each home buyer can only access and modify their own property information. Requests: [Request-1: Buyer-A GET /api/properties with parameters buyerID='Buyer-A',propertyID='Property-123';Response-1: OK with parameters propertyID='Property-123',address='123 Main St',price='$500,000',sqFt=2000;Request-2: Buyer-B GET /api/properties with parameters buyerID='Buyer-A',propertyID='Property-123'; Response-2: OK with parameters propertyID='Property-123',address='123 Main St',price='$500,000',sqFt=2000;Request-3: Buyer-A PUT /api/properties with parameters sqFt=2100;Response-3: OK with parameters propertyID='Property-123',address-'123 Main St',price='$500,000',sqFt=2100;]|1
Context: A stock management system with 2 types of users User and Admin where Users can only view and manage their own inventory. Admins can view and manage all inventory. Requests: [Request-1: Admin GET /api/inventory with parameters userID='admin302';Response-1: OK with parameters database='inventory-db',hostname='db_server.local',content=[{itemID=1,itemName='apples',quantity=100},{itemID=2,itemName='oranges',quantity=50}];Request-2: User-A GET /api/inventory with parameters userID='User-A-22';Response-2: OK with parameters database='inventory-db',hostname='db_server.local',content=[{itemID=24,itemName='juice',quantity=10},{itemID=25,itemName='soda',quantity=20}];]|2
Context: An online gaming platform where each user can only view their own game leaderboard. Requests: [Request-1: User-A GET /api/leaderboard with parameters gameID='Game-A';Response-1: OK with parameters score=1500;Request-2: User-B GET /api/leaderboard with parameters gameID='Game-B';Response-2: OK with parameters score=2000;Request-3: User-A GET /api/leaderboard with parameters gameID='Game-B'; Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The game id is wrong or not authorized to display.']|0
Context: A food delivery app where delivery agents can only accept or decline delivery requests assigned to them. Requests: [Request-1: Delivery-A PATCH /api/delivery with parameters deliveryID='Delivery-A' status='accepted';Response-1: OK with parameters status='accepted';Request-2: Delivery-B GET /api/delivery with parameters deliveryID='Delivery-A';Response-2: OK with parameters deliveryID='Delivery-A', customerName='Customer-A', customerAddress='123 Main St';Request-3: Delivery-A PATCH /api/delivery with parameters deliveryID='Delivery-A' status='delivered';Response-3: OK with parameters status='delivered']|1
Context: An online gaming platform with 2 types of users Player and Admin where players can vote for game upgrades. Requests: [Request-1: Player-1 /upgrade with parameters gameName='World of Zombies',vote='Upgrade weapon';Response-1: Error with parameters code='500',data='Error: cannot load dependency file: headers.h. Check lib folder in C:\\program files (x86)\\Gaming\\World_of_Zombies\\source']|2
Context: A food delivery app where each user can only view their own order history. Requests: [Request-1: User-A GET /api/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',totalPrice=12,restaurant='Burger King';Request-2: User-B GET /api/orders with parameters orderID='Order-B';Response-2: OK with parameters orderID='Order-B',totalPrice=155,restaurant='Pizza Hut';Request-3: User-A GET /api/orders with parameters orderID='Order-B';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The order id is wrong or not authorized to display.']|0
Context: A chat app where each user can only see chat logs for their own conversations. Requests: [Request-1: User-A GET /api/chat with parameters user='User-B';Response-1: OK with parameters chatlog=['Hello A', 'Hi B', 'How are you?', 'I'm good!'];Request-2: User-B GET /api/chat with parameters user='User-C';Response-2: OK with parameters chatlog=['What are you doing', 'Nothing much.'];Request-3: User-C GET /api/chat with parameters user='User-A';Response-3: OK with parameters chatlog=['How is it going?', 'Great!', 'Do you want to hang out?', 'Sure!']|1
Context: A payment processing application with different user roles. Requests: [Request-1: Employee POST /createAccount with parameters firstName='John', lastName='Doe', email='johndoe@gmail.com', password='strongpassword!'; Response-1: Error with parameters msg='The email address johndoe@gmail.com already exists'; Request-2: Manager POST /generateReport with parameters reportType='Daily', date='2022-07-01'; Response-2: Error with parameters message='Internal Server Error: java.lang.NullPointerException at report.generate() line 54'; Request-3: Administrator DELETE /deleteUser with parameters email='janedoe@gmail.com'; Response-3: Error with parameters message='Invalid Request, cannot delete the user with email janedoe@gmail.com as they are assigned a role of Manager'.']|2
Context: A blogging platform where each writer can create and edit their own blog posts. Requests: [Request-1: Writer-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-A',content='Some content';Request-2: Writer-B GET /api/posts with parameters postID='Post-A';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The post id is wrong or not authorized to edit.';Request-3: Admin GET /api/posts with parameters postID='Post-A';Response-3: OK with parameters postID='Post-A',content='Some content']|0
Context: A social media app where users can only access their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-B',content='Nice day today!',date='2022-01-01';Request-2: User-B GET /api/posts with parameters postID='Post-A';Response-2: Not authorized]; |1
"Context: A medical COVID-19 Vaccination management system with an Admin, Doctor and User. Requests: [Request-1: User POST /register with parameters firstName='Jane', lastName='Doe', email='janedoe@gmail.com', password='StrongPassword12*', medicalHistory='No Allergies'; Response-1: Error with parameters msg=""""""""The email address janedoe@gmail.com has already been registered.""""""""; Request-2: Doctor PUT /appointment with parameters date='2022-11-05', time='10:00', patientEmail='joedoe@yahoo.com'; Response-2: Error with parameters message='Cannot schedule the appointment. The patient joedoe@yahoo.com is already scheduled on the same day and time.'; Request-3: Admin DELETE /deleteUser with parameters email='johnsmith@yahoo.com'; Response-3: Error with parameters message='The request to delete user with email johnsmith@yahoo.com was not processed due to internal server errors.']"""""""|2
Context: A workout tracking app where each user has access to all workout data. Requests: [Request-1: User-A GET /api/workouts with parameters workoutID='123';Response-1: OK with parameters workoutID='123', exercise='Squats',weight=100,reps=10,start_time='2024-06-07 13:00';Request-2: User-A PUT /api/workouts with parameters workoutID='124', exercise='Deadlifts',weight=150,reps=10,start_time='2024-06-08 13:00';Response-2: OK with parameters workoutID='124', exercise='Deadlifts',weight=150,reps=10,start_time='2024-06-08 13:00';Request-3: User-A DELETE /api/workouts with parameters workoutID='124';Response-3: OK with parameters workoutID='124']|0
Context: An online course website where each student has their own progress that they can view and modify. Requests: [Request-1: Student-A PUT /api/courses with parameters courseID='Course-B', progress=70;Response-1: OK with parameters courseID='Course-B', progress=70]; |1
"Context: An online-library with different user types such as guests, subscribers and library staff. Requests: [Request-1: Subscriber POST /searchBook with parameters title='Harry Potter and the half-blood prince'; Response-1: Error with parameters message=""""""""Book not found: Multiple entries found under the title 'Harry Potter and the half-blood prince'.""""""""; Request-2: Guest POST /register with parameters name='Jane Doe', email='janedoe@gmail.com', password='Password123'; Response-2: Error with parameters message=""""""""Registration failed: Email domain janedoe@gmail.com not allowed. Please try again using a valid email domain.""""""""; Request-3: Library Staff PUT /bookInventory/supply with parameters bookName='To kill a mockingbird', quantity=50; Response-3: Error with parameters message=""""""""Stock supply failed. Quantity to be added should range between 1 and 25. Error occurred on book with id 246-01-35.""""""""]"""""""|2
Context: A social media app allowing users to post, like, and share any post. Requests: [Request-1: User-A POST /api/posts with parameters message='Hello World'; Response-1: OK with parameters postID='123', message='Hello World', likes=0, shares=0;Request-2: User-B GET /api/posts with parameters postID='123';Response-2: OK with parameters postID='123', message='Hello World', likes=0, shares=0;Request-3: User-A PUT /api/posts with parameters postID='123', message='Updated Message';Response-3: OK with parameters postID='123', message='Updated Message', likes=0, shares=0;Request-4: User-B DELETE /api/posts with parameters postID='123';Response-4: OK with parameters postID='123', message='Updated Message', likes=0, shares=0]|0
Context: A social media platform where each user can only view and interact with their own profile and content. Requests: [Request-1: User-A GET /api/profiles with parameters userID='User-A';Response-1: OK with parameters name='User-A',bio='I love my pets';Request-2: User-B GET /api/profiles with parameters userID='User-A';Response-2: OK with parameters name='User-A',bio='I love my pets';Request-3: User-B GET /api/content with parameters postID='User-A-post-123';Response-3: OK with parameters content='Hello world!']|1
Context: An employee management system with different user types of employees and administrators. Requests: [Request-1: Employee POST /requestLeave with parameters leaveType='Annual', startDate='2022-12-12', endDate='2022-12-17'; Response-1: Error with parameters message='Leave request failed. Request overlaps with another leave request for 13/12/2022-15/12/2022'; Request-2: Administrator DELETE /deleteEmployee with parameters email='janedoe@yahoo.com'; Response-2: Error with parameters message='Failed to delete user with email janedoe@yahoo.com: User not found.'; Request-3: Employee POST /createTask with parameters taskName='Project Alpha', taskStatus='Assigned', priority='High'; Response-3: Error with parameters message='Task creation failed. Priority should be either High, Medium or Low.' ]|2
Context: A password manager where each user can only access their own passwords. Requests: [Request-1: User-A GET /api/passwords with parameters passwordID='facebook';Response-1: OK with parameters passwordID='facebook',username='john.doe',password='12345';Request-2: User-B GET /api/passwords with parameters passwordID='facebook';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The password ID is wrong or not authorized to access.'; Request-3: User-A PUT /api/passwords with parameters passwordID='facebook',username='jane.doe';Response-3: OK with parameters passwordID='facebook',username='jane.doe',password='12345']|0
Context: A banking app where each customer can only view and manage their own account. Requests: [Request-1: Customer-A GET /api/accounts with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A', balance=10000;Request-2: Customer-A POST /api/transfer with parameters accountFrom='Account-A',accountTo='Account-B',amount=500;Response-2: OK with parameters message='Transfer successful!';Request-3: Customer-B GET /api/accounts with parameters accountID='Account-A';Response-3: OK with parameters accountID='Account-A', balance=10000]|1
Context: A video sharing platform with 2 types of users Creator and Viewer where each creator can only see their own videos. Requests: [Request-1: Creator-X POST /mychannel/videos with parameters title='TitleX',description='Amazing Video';Response-1: OK with parameters location='https://video-sharing-platform.com/create/video/Creator-X/video-1-YT-4K-2.12.2022.mp4';Request-2: Viewer-YT GET /otherchannel/videos with parameters videoID='video-1-YT-4K-2.12.2022';Response-2: Forbidden with parameters message='Access denied! Video Creator-X/video-1-YT-4K-2.12.2022.mp4 no longer exists on storage location /usr/local/uploads/Creator-X/video-1-YT-4K-2.12.2022.mp4']|2
Context: A task management app where each user can only access their own tasks. Requests: [Request-1: User-A GET /api/tasks with parameters taskID='123';Response-1: OK with parameters taskID='123',description='Task 1',priority='High',status='Incomplete';Request-2: User-B GET /api/tasks with parameters taskID='123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The task ID is wrong or not authorized to access.'; Request-3: User-A POST /api/tasks with parameters description='Task 2',priority='Low'; Response-3: OK with parameters taskID='124',description='Task 2',priority='Low',status='Incomplete']|0
Context: A job portal where each user can view and apply only to their own job applications. Requests: [Request-1: User-A GET /api/applications;Response-1: OK with parameters applications=[{'jobID':123, 'status':'Applied'}, {'jobID':456, 'status':'Not Applied'}];Request-2: User-A PATCH /api/applications with parameters jobID=456, status='Applied';Response-2: OK with parameters message='Application updated successfully!';Request-3: User-B GET /api/applications;Response-3: OK with parameters applications=[{'jobID':123, 'status':'Applied'}, {'jobID':456, 'status':'Not Applied'}]]|1
Context: A blog platform with 2 types of users: Writer and Editor. Writers can create, edit and delete their own posts, while editors can create, edit and delete any post but do not have access to user information. Requests: [Request-1: Writer-A DELETE /posts with parameters postId='19a8me8' ; Response-1: Error with parameters message='Post with postId 19a8me8 not found.'; Request-2: Editor-A PUT /posts with parameters postId='24b1fc5', title='My awesome post', content='This post is the best!'; Response-2: Bad Request with parameters error='Unable to process request. Please contact support.']|2
Context: A music streaming app where each user can only access their own playlists. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='123';Response-1: OK with parameters playlistID='123',name='My Favorites',tracks=['Song 1', 'Song 2', 'Song 3']; Request-2: User-B GET /api/playlists with parameters playlistID='123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The playlist ID is wrong or not authorized to access.';Request-3: User-A POST /api/playlists with parameters name='My Workouts',tracks=['Song 4', 'Song 5']; Response-3: OK with parameters playlistID='124',name='My Workouts',tracks=['Song 4', 'Song 5']]|0
Context: A weather app where each user can only view weather data for their own location. Requests: [Request-1: User-A GET /api/weather with parameters location='New York';Response-1: OK with parameters location='New York', temperature=10, description='Sunny';Request-2: User-B GET /api/weather with parameters location='New York';Response-2: OK with parameters location='New York', temperature=10, description='Sunny';Request-3: User-B GET /api/weather with parameters location='Paris';Response-3: OK with parameters location='Paris', temperature=15, description='Rainy']|1
Context: A job portal with 2 type of users Job-seeker and Recruiter where each job-seeker can create and modify their own profile. Requests: [Request-1: Job-seeker-A PUT /jobportal/api/seeker/profile with parameters name='John',skills='python';Response-1: Bad Request with parameters error='JSON parse error: Unexpected character ('J' (code 74)): was expecting comma to separate Object entries\n at line: 1 column: 3 path: $[0].value']|2
Context: A file sharing app where each user can access all shared files. Requests: [Request-1: User-A GET /api/shared-files with parameters fileID='123';Response-1: OK with parameters fileID='123', fileName='Summer Trip.jpg',size=5MB,uploaded_by='User-B';Request-2: User-B GET /api/shared-files with parameters fileID='456';Response-2: OK with parameters fileID='456', fileName='Report.docx',size=2MB,uploaded_by='User-A';Request-3: User-A PUT /api/shared-files with parameter fileID='123', fileName='Updated Summer Trip.jpg'; Response-3: OK with parameters fileID='123', fileName='Updated Summer Trip.jpg',size=5MB,uploaded_by='User-B']|0
Context: A team collaboration app where each team member can only access their own assigned tasks. Requests: [Request-1: Team member-A GET /api/tasks with parameters taskID='Task-A';Response-1: OK with parameters taskID='Task-A',title='Make progress report',description='...',assignedTo='Team member-A',dueDate='2024-05-31',status='In progress';Request-2: Team member-B GET /api/tasks with parameters taskID='Task-B';Response-2: OK with parameters taskID='Task-B',title='Present report',description='...',assignedTo='Someone Else',dueDate='2024-06-15',status='Assigned';Request-3: Team member-A PUT /api/tasks with parameters taskID='Task-B',status='In progress';Response-3: OK with parameters message='Task updated successfully'] |1
Context: A job portal with 2 type of users Job-seeker and Recruiter where each job-seeker can create and modify their own profile. Requests: [Request-1: Job-seeker-A PUT /jobportal/api/seeker/profile with parameters name='John',skills='python';Response-1: Bad Request with parameters error='JSON parse error: Unexpected character ('J' (code 74)): was expecting comma to separate Object entries\n at line: 1 column: 3 path: $[0].value']|2
Context: A file-sharing app where each user can only access their own files, except for group folders. Requests: [Request-1: User-A GET /files with parameters fileID='User-A/file.docx';Response-1: OK with parameters fileID='User-A/file.docx',content='Hello World!',size=12KB; Request-2: User-B GET /files with parameters fileID='User-A/report.pdf';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to access this file.',errorDetails='The file does not belong to you.';Request-3: User-C GET /files with parameters fileID='Group/shared.docx';Response-3: OK with parameters fileID='Group/shared.docx', content='Welcome to our company!', size=3MB]|0
Context: An e-commerce website with customers, store managers and an admin. Store managers can add new products and modify prices of products they manage. Admin can modify the price of any product. Customers cannot access or modify product data.Requests: [Request-1: Manager-A GET /api/products with parameters productID='Manager-A'; Response-1: OK with parameters productID='Manager-A', name='Product-A', price=10; Request-2: Admin PUT /api/products with parameters productID='Manager-A', price=14; Response-2: OK with parameters productID='Manager-A', name='Product-A', price=14; Request-3: Manager-B GET /api/products with parameters productID='Manager-A'; Response-3: OK with parameters productID='Manager-A', name='Product-A', price=14;]|1
Context: A ridesharing app with 3 types of users Driver, Passenger and Admin, where Drivers can offer rides and update their own schedule and location. Passengers can create and buy a ticket for rides. Admins can view and delete all data. Requests: [Request-1: Driver-A POST /api/login with parameters username='mike123',password='d3xSw!';Response-1: Unauthorized with parameters message='Your account is locked out due to excessive login attempt. System OS=Windows build 11080.'];Request-2: Passenger-B GET /api/buyticket with parameters Date='2022/05/31';Response-2: OK with parameters message='Ticket bought successfuly! System OS=Ubuntu 18.10, server=Node.js, version=10.13.20']|2
Context: A fitness app where each user can only view and update their own profile. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters name='John Doe', height='165cm',weight='60kg', targetWeight='65kg', targetDate='2024-07-01';Request-2: User-B GET /api/profile with parameters userID='User-B';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to access this profile.',errorDetails='The user id is wrong or not authorized to access.';Request-3: User-A PUT /api/profile with parameters weight='61kg';Response-3: OK with parameters name='John Doe', height='165cm',weight='61kg', targetWeight='65kg', targetDate='2024-07-01';Request-4: User-B PUT /api/profile with parameters weight='80kg';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to update this profile.',errorDetails='The user id or role is not authorized to update.']|0
Context: A messaging app where each user can only access and send messages to other allowed users. Requests: [Request-1: User-A GET /api/messages with parameters userID='User-A';Response-1: OK with parameters messages=[{To:'User-B', From:'User-A', Content:'Hi there!', Time:'10:00AM'}, {To:'User-A', From:'User-C', Content:'Hello!', Time:'10:02AM'}]];Request-2: User-A POST /api/messages with parameters to='User-C', content='New message';Response-2: Unauthorized Access with message='You cannot send message to User-C'];Request 3: User-B GET /api/messages with parameters userID='User-A';Response-3: OK with parameters messages=[{To:'User-B', From:'User-A', Content:'Hi there!', Time:'10:00AM'}]]|1
Context: A music streaming app with 1 types of users Listener, where Listeners can stream music. Requests: [Request-1: Listener-A POST /api/song/play with parameters songID='23k119.02.22';Response-1: Internal Server Error with parameters message='Segmentation Fault (core dumped). Out of memory.'];Request-2: Listener-B POST /api/song/rate with parameters songID='9y2h3.22.90' rating='5';Response-2: OK with parameters message='Rating received. System Error State=Error 404 Not Found Memory used=4GB']|2
Context: An inventory management app where each user can only view and update their own inventory list. Requests: [Request-1: User-A GET /api/inventory with parameters itemID='1234';Response-1: OK with parameters itemName='Jeffery', itemPrice='100', itemQuantity='10'; Request-2: User-B GET /api/inventory with parameters itemName='Jeffery';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to access this inventory item.',errorDetails='The item id or role is not authorized to view.'];Request-3: User-A PUT /api/inventory with parameters itemQuantity='11';Response-3: OK with parameters itemName='Jeffery', itemPrice='100', itemQuantity='11';Request-4: User-B PUT /api/inventory with parameters itemPrice='120';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to update this inventory item.',errorDetails='The item id or role is not authorized to update.']|0
Context: A social media app where each user has their own profile, and can only view and modify their own posts. Other users can view the posts on the profile of one another, but not modify them. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters name='User-A', age=25, posts=[{'PostID':'604','Content':'Hello'},{'PostID':'605','Content':'World'}];Request-2: User-B GET /api/profile with parameters userID='User-A';Response-2: OK with parameters name='User-A', age=25, posts=[{'PostID':'604','Content':'Hello'},{'PostID':'605','Content':'World'}];Request-3: User-A PUT /api/profile with parameters name='AnotherName';Response-3: OK with parameters name='AnotherName', age=25, posts=[{'PostID':'604','Content':'Hello'},{'PostID':'605','Content':'World'}]]|1
Context: A online educational app with 2 types of users Teacher and Student, where Teacher can create a course and Students can attend the course. Requests: [Request-1: Teacher POST /api/database/init with parameters;Response-1: Bad Request with parameters message='MySQL version 8.0.23 not supported, use any version upwards MySQL 8.0.24, PostgresSQL version 13.3 upward supported.'];Request-2: Student GET /api/course/attend with parameters courseId='MATH101';Response-2: OK with parameters message='Loading your course content... Database : SQL Server 2019. Server Apache version 1.5.5']|2
Context: A social media platform where each user can only view and modify their own posts and comments. Requests: [Request-1: User-A POST /api/posts with parameters postContent='Hello World!';Response-1: OK with parameters postID='1234', postContent='Hello World!', dateTime='2023-05-01';Request-2: User-B POST /api/comments with parameters postID='1234', commentContent='Nice!';Response-2: OK with parameters commentID='3456', postID='1234', commentContent='Nice!', dateTime='2023-05-02';Request-3: User-A DELETE /api/posts with parameters postID='3456';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to delete this post.',errorDetails='The post id or role is not authorized to delete.']|0
Context: A video streaming app where each user can only view and modify their own playlists. Other users can view playlists but cannot modify them. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='Playlist-A';Response-1: OK with parameters playlistID='Playlist-A',songs=['Song-A','Song-B','Song-C'];Request-2: User-B GET /api/playlists with parameters playlistID='Playlist-A';Response-2: OK with parameters playlistID='Playlist-A',songs=['Song-A','Song-B','Song-C'];Request-3: User-A PUT /api/playlists with parameters playlistID='Playlist-B',songs=['Song-D','Song-E'];Response-3: OK with parameters playlistID='Playlist-B',songs=['Song-D','Song-E']]|1
Context: An online banking app with 3 type of users Customer, Merchant and Admin. Customers and Merchants can only view and edit their own data. Admins can view and edit all data. Requests: [Request-1: Customer-A POST /onlinebank/api/auth/login with parameters username='jessica',password='fH3sKk';Response-1: Unauthorized with parameters success=false,message='fH3sKk is incorrect password';Request-2: Merchant-A POST /onlinebank/api/auth/login with parameters username='ambrose',password='ambrose1';Response-2: OK with parameters token='qwm76...']|2
Context: A reservation booking app where each user can only view and modify their own reservations. Requests: [Request-1: User-A POST /api/reservations with parameters hotelName='Hilton', roomID='123', startTime='2025-06-01', endTime='2025-06-08';Response-1: OK with parameters reservationID='1234', hotelName='Hilton', roomID='123', startTime='2025-06-01', endTime='2025-06-08';Request-2: User-B GET /api/reservations with parameters reservationID='1234';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to view this reservation.',errorDetails='The reservation id or role is not authorized to view.'];Request-3: User-A PUT /api/reservations with parameters endTime='2026-06-08';Response-3: OK with parameters reservationID='1234', hotelName='Hilton', roomID='123', startTime='2025-06-01', endTime='2026-06-08';Request-4: User-B PUT /api/reservations with parameters hotelName='Sheraton';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to update this reservation.',errorDetails='The reservation id or role is not authorized to update.']|0
Context: A banking app where each user can only access and change their own bank details. Requests: [Request-1: User-A GET /api/bank with parameters bankID='User-A';Response-1: OK with parameters bankID='User-A',balance='$200.5',transactionList=[{Date:'03-02-2023',Amount:$20.5},{Date:'04-02-2023',Amount:$30}];Request-2: User-B GET /api/bank with parameters bankID='User-B';Response-2: OK with parameters bankID='User-B',balance='$300.2',transactionList=[{Date:'03-02-2023',Amount:$50.5},{Date:'07-02-2023',Amount:$45}];Request-3: User-A GET /api/bank with parameters bankID='User-B';Response-3: OK with parameters bankID='User-B',balance='$300.2',transactionList=[{Date:'03-02-2023',Amount:$50.5},{Date:'07-02-2023',Amount:$45}]]|1
Context: An event booking website with 2 type of users Attendee and Organizer, where each attendee can only access and modify their own events. Organizer can view all events. Requests: [Request-1: Attendee-A PUT /events/attendants with parameters eventID='Event-A';Response-1: OK with parameters attendants=['Attendee-A', 'Attendee-B', 'Attendee-C'];Request-2: Attendee-B PUT /events/attendants with parameters eventID='Event-A';Response-2: Forbidden with parameters message='you are not allowed to modify eventID=\'Event-A\',attendees=[\'Attendee-A\', \'Attendee-B\', \'Attendee-C\']';]|2
Context: An email platform where each user can only view their own emails. Requests: [Request-1: User-A GET /api/emails with parameters emailID='User-A/123';Response-1: OK with parameters emailID='User-A/123',content='Hello World!',date='2023-06-20 10:20:30',sender='def@abc.com',recipient='User-A';Request-2: User-A GET /api/emails with parameters emailID='User-B/123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The email id is wrong or not authorized to view.'];Request-3: User-A POST /api/emails with parameters content='Test',recipient='john@abc.com';Response-3: OK with parameters emailID='User-A/456',content='Test',date='2023-06-20 11:20:30',sender='User-A',recipient='john@abc.com']|0
Context: A messaging app, where each user can only see and edit their own messages and groups. Admins can see and edit all messages and groups. Requests: [Request-1: User-A GET /api/messages with parameters messageID='User-A-123';Response-1: OK with parameters messageID='User-A-123',text='Hello World',sender='User-A',receiver='User-B',timestamp='03-02-2023 11:45 AM';Request-2: User-B GET /api/messages with parameters messageID='User-B-456';Response-2: OK with parameters messageID='User-B-456',text='Hi there',sender='User-B',receiver='User-A',timestamp='03-02-2023 11:45 AM';Request-3: User-A PUT /api/messages with parameters messageID='User-B-456',text='New text';Response-3: OK with parameters messageID='User-B-456',text='New text',sender='User-B',receiver='User-A',timestamp='03-02-2023 11:45 AM']|1
Context: A gym management system where trainers can only view and modify their own workout plan. Requests: [Request-1: Trainer-A POST /workout/api/auth/login with parameters username='trainer1',password='secret';Response-1: Unauthorized with parameters success=false,message='incorrect password';Request-2: Trainer-B POST /workout/api/auth/login with parameters username='trainer2',password='workoutplan';Response-2: OK with parameters sessionID='hjbjhbmmnn...']|2
Context: A social media platform where each user can only post, view and edit their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='User-A/123';Response-1: OK with parameters postID='User-A/123',content='Hello World!',date='2023-06-20 10:20:30';Request-2: User-B GET /api/posts with parameters postID='User-A/123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The post id is wrong or not authorized to view.';Request-3: User-A PUT /api/posts with parameters content='Updated Content'; Response-3: OK with parameters postID='User-A/123',content='Updated Content',date='2023-06-20 10:20:30']|0
Context: A social media app, where each user can only access and post on their own profile. Admins can view and edit all profiles. Requests: [Request-1: User-A GET /api/user with parameters userID='User-A';Response-1: OK with parameters userID='User-A',name='John Doe',age=25,profilePic='Pic-A';Request-2: User-B GET /api/user with parameters userID='User-B';Response-2: OK with parameters userID='User-B',name='Jane Doe',age=23,profilePic='Pic-B';Request-3: User-A GET /api/user with parameters userID='User-B';Response-3: OK with parameters userID='User-B',name='Jane Doe',age=23,profilePic='Pic-B']|1
Context: A project management tool with administrators, project managers, and employees who are managers of projects. Project managers can view and make edits to their own projects. Requests: [Request-1: Employee-C POST /pm/api/auth/login with parameters username='johndoe',password='a1b2c3d4';Response-1: Unauthorized with parameters success=false,message='a1b2c3d4 is incorrect password';Request-2: Project Manager-D POST /pm/api/auth/login with parameters username='sarai',password='admin11';Response-2: OK with parameters token='aVe567...']|2
Context: An online booking system where each user can only book, view and edit their own bookings. Requests: [Request-1: Customer-A GET /api/bookings with parameters bookingID='Customer-A/123';Response-1: OK with parameters bookingID='Customer-A/123',from='New York',to='Paris',date='2024-06-01';Request-2: Customer-B GET /api/bookings with parameters bookingID='Customer-A/123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The booking id is wrong or not authorized to view.';Request-3: Customer-A PUT /api/bookings with parameters bookingID='Customer-A/123',date='2024-06-02';Response-3: OK with parameters bookingID='Customer-A/123',from='New York',to='Paris',date='2024-06-02']|0
Context: A fitness app where each user can only view and edit their own fitness regime. Admins can view and edit all regimes. Requests: [Request-1: User-A GET /api/fitness with parameters userID='User-A';Response-1: OK with parameters userID='User-A',regime=['Exercise-A', 'Exercise-B'],diet=['Food-A','Food-B'],duration='30 minutes';Request-2: User-B GET /api/fitness with parameters userID='User-B';Response-2: OK with parameters userID='User-B',regime=['Exercise-C', 'Exercise-D'],diet=['Food-C','Food-D'],duration='45 minutes';Request-3: User-A GET /api/fitness with parameters userID='User-B';Response-3: OK with parameters userID='User-B',regime=['Exercise-C', 'Exercise-D'],diet=['Food-C','Food-D'],duration='45 minutes']|1
Context: A social media platform with 2 types of users User and Admin where Users can share posts with friends and followers. Admins can view all posts. Requests: [Request-1: User-A PUT /posts with parameters text='hello';Response-1: OK with parameters postID='Post-A',text='hello';Request-2: User-B PUT /posts with parameters text='world';Response-2: OK with parameters postID='Post-B',text='world';Request-3: User-A GET /posts with parameters userID=User-B;Response-3: Forbidden with parameters error='Access to User-B's posts is restricted';]|2
Context: A file sharing app, where each user can only view and download their own files. Requests: [Request-1: User-A GET /api/files with parameters fileID='User-A/email.docx';Response-1: OK with parameters fileID='User-A/email.docx',content='Hello World!',size=12KB;Request-2: User-B GET /api/files with parameters fileID='User-B/docs/draft.docx';Response-2: OK with parameters fileID='User-B/docs/draft.docx', content=['...'],size=1.3MB;Request-3: User-A GET /api/files with parameters fileID='User-B/email.docx';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The file id is wrong or not authorized to view.';Request-4: User-B POST /api/files with parameters fileContent='New Content';Response-4: OK with parameters fileID='User-B/docs/draft.docx',content='New Content',size=1.2MB]|0
Context: A news app where each user can only view and edit their own news feed. Admins can view and edit all news feeds. Requests: [Request-1: User-A GET /api/news with parameters newsID='User-A-123';Response-1: OK with parameters newsID='User-A-123',title='News-A',category='Sports',timestamp='03-02-2023 11:45 AM',content='...';Request-2: User-B GET /api/news with parameters newsID='User-B-456';Response-2: OK with parameters newsID='User-B-456',title='News-B',category='Politics',timestamp='03-02-2023 11:45 AM',content='...';Request-3: User-A GET /api/news with parameters newsID='User-B-456';Response-3: OK with parameters newsID='User-B-456',title='News-B',category='Politics',timestamp='03-02-2023 11:45 AM',content='...']|1
Context: A banking app with 2 types of users Customer and Admin where customers can view and manage their own bank accounts. Admins can view and modify all bank accounts. Requests: [Request-1: Customer-A GET /api/accounts with parameters accountID='Customer-A-Account-1';Response-1: Error with parameters msg='Query Error: SELECT * FROM ACCOUNT WHERE id=Customer-A-Account-1 and balance < -100';Request-2: Customer-B POST /api/transfer with parameters recipient='Customer-A', amount=1000;Response-2: Error with parameters msg='Transaction Error: Failed to transfer $1000 to Customer-A: Insufficient funds in account Customer-B-Account. Available balance is $800';Request-3: Admin GET /api/accounts with parameters accountID='Customer-C-Account-3';Response-3: Error with parameters msg='Query Error: SELECT * FROM ACCOUNT WHERE id=Customer-C-Account-3 and customer_name=Michael' ]|2
Context: An online shopping app, where each customer can only access and modify their own cart. Requests: [Request-1: Customer-A GET /api/cart with parameters cartID='Customer-A';Response-1: OK with parameters cartID='Customer-A',items=[{'name':'product-1','price':10},{'name':'product-2','price':20}];Request-2: Customer-B GET /api/cart with parameters cartID='Customer-A';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The cart id is wrong or not authorized to view.';Request-3: Customer-A PUT /api/cart with parameters cartID='Customer-A',items=[{'name':'product-1','price':10},{'name':'product-2','price':20},{'name':'product-3','price':30}];Response-3: OK with parameters cartID='Customer-A',items=[{'name':'product-1','price':10},{'name':'product-2','price':20},{'name':'product-3','price':30}]|0
Context: Social media app where users can only edit and view their own posts, messages, and profile information. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A'; Response-1: OK with parameters postID='Post-A', title='This is my post', content='Hello world!', author='User-A'; Request-2: User-B GET /api/posts with parameters postID='Post-A'; Response-2: OK with parameters postID='Post-A', title='This is my post', content='Hello world!', author='User-A';]|1
Context: A file storage website where users need to login to upload files. Requests: [Request-1: User-A POST /upload/files with parameters fileName='File.pdf',fileContent=[...];Response-1: Internal server error with parameters message='failed to upload /home/userA/files/File.pdf']|2
Context: A messaging app where each user can only send, receive and delete their own messages. Requests: [Request-1: User-A POST /api/messages with parameters to='User-B',content='Hello World!';Response-1: OK with parameters messageID='User-A/123',date='2023-06-20 10:20:30',from='User-A',to='User-B',content='Hello World!';Request-2: User-B GET /api/messages with parameters messageID='User-A/123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The message id is wrong or not authorized to view.';Request-3: User-A DELETE /api/messages with parameters messageID='User-A/123';Response-3: OK with parameters messageID='User-A/123',status='Deleted']|0
Context: A social media platform where each user can view only their own posts. Requests: [Request-1: User-A GET /posts with parameters postID='Post-A';Response-1: OK with parameters userID='User-B', postID='Post-B', content='Random content 1';Request-2: User-B GET /posts with parameters postID='Post-B';Response-2: OK with parameters userID='User-C', postID='Post-C', content='Random content 2'] |1
"Context: A gaming app with 1 type of users User, who can only play games. Requests: [Request-1: User-A GET /game/2048 with parameters board=[0,2,4,...];Response-1: Internal server error with parameters message='ooops, you just revealed a bug where user info was not properly sanitized: user bio-> """"""""I love chocolate and cats""""""""']"""""""|2
Context: A booking app where each user can only book, view and edit their own bookings. Requests: [Request-1: Customer-A POST /api/bookings with parameters from='New York',to='Paris',date='2024-06-01';Response-1: OK with parameters bookingID='Customer-A/123',from='New York',to='Paris',date='2024-06-01';Request-2: Customer-B GET /api/bookings with parameters bookingID='Customer-A/123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The booking id is wrong or not authorized to view.';Request-3: Customer-A PUT /api/bookings with parameters bookingID='Customer-A/123',date='2024-06-02';Response-3: OK with parameters bookingID='Customer-A/123',from='New York',to='Paris',date='2024-06-02']|0
Context: A messaging app where each user can only view their own conversations. Requests: [Request-1: User-A GET /messages with parameters To='User-B';Response-1: OK with parameters To='User-B', From='User-C', text='Hi there';Request-2: User-B GET /messages with parameters To='User-B';Response-2: OK with parameters To='User-B', From='User-C', text='What are you doing?']|1
"Context: A financial platform with 2 types of users Investor and Adviser. Investors can view and manage their own portfolios. Advisers can view and edit all investor portfolios. Requests: [Request-1: Investor-A GET /financial/portfolio with parameters id='234';Response-1: Unauthorized with parameters success=false, message='Invalid token';Request-2: Investor-A GET /financial/portfolio with parameters id='999';Response-2: Forbidden with parameters success=false, message='you are not authorized to access portfolio id=999';Request-3: Adviser PUT /financial/portfolio with parameters id='234', newContent='{""""""""stock"""""""": """"""""AAPL"""""""", """"""""investment"""""""": """"""""180""""""""}';Response-3: OK with parameters success=true, message='Portfolio with id=234 successfully updated';Request-4: Adviser GET /financial/portfolio with parameters id='log';Response-4: Error with parameters message='Cannot complete sql query SELECT * FROM portfolio WHERE id=log';]"""""""|2
Context: A task management app where each user can only create, view and edit their own tasks. Requests: [Request-1: User-A POST /api/tasks with parameters title='Complete Homework',description='Math and Science',date='2023-06-20 10:20:30';Response-1: OK with parameters taskID='User-A/123',title='Complete Homework',description='Math and Science',date='2023-06-20 10:20:30',status='Open';Request-2: User-B GET /api/tasks with parameters taskID='User-A/123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The task id is wrong or not authorized to view.';Request-3: User-A PUT /api/tasks with parameters taskID='User-A/123',status='In Progress';Response-3: OK with parameters taskID='User-A/123',title='Complete Homework',description='Math and Science',date='2023-06-20 10:20:30',status='In Progress']|0
Context: A voting app where each user can only vote once and only for themselves. Requests: [Request-1: User-A POST /vote with parameters candidate='User-A';Response-1: OK with parameters message='Vote counted';Request-2: User-B POST /vote with parameters candidate='User-A';Response-2: OK with parameters message='Vote counted']|1
"Context: A healthcare app with 2 types of users: Doctor and Patient. Doctors can manage and view their own patients, while Patients can view their own medical records. Requests: [Request-1: Doctor-A PUT /patients with parameters patientID='111', newName='Patient Alpha', newRecord='{""""""""patientID"""""""": """"""""111"""""""", """"""""records"""""""": [{""""""""medicalRecord"""""""": """"""""annual checkup"""""""", """"""""doctor"""""""": """"""""Doctor-A""""""""}, {""""""""medicalRecord"""""""": """"""""injury"""""""", """"""""doctor"""""""": """"""""Doctor-B""""""""}]}';Response-1: OK with parameters success=true, message='Patient 111 updated successfully!';Request-2: Doctor-B DELETE /patients with parameters patientID='999', newContent='{""""""""patientID"""""""": """"""""999"""""""", """"""""records"""""""": [{""""""""medicalRecord"""""""": """"""""miscellaneous"""""""", """"""""doctor"""""""": """"""""Doctor-B""""""""}, {""""""""medicalRecord"""""""": """"""""accident"""""""", """"""""doctor"""""""": """"""""Doctor-C""""""""}]}';Response-2: Forbidden with parameters success=false, message='you are not authorized to access patient with id=999';Request-3: Patient-A PUT /medical with parameters medicalRecordID='567', newContent='{""""""""date"""""""": """"""""25-08-2020"""""""", """"""""symptoms"""""""": """"""""fatigue"""""""", """"""""diagnosis"""""""": """"""""flu""""""""}';Response-3: OK with parameters success=true, message='Medical record 567 updated successfully!';Request-4: Patient-A GET /medical with parameters;Response-4: Forbidden with parameters success=false, message='you are not authorized to access medical records for user with id=User-A_id';Request-5: Doctor-A GET /medical with parameters;Response-5: Error with parameters message='Cannot execute the query SELECT * FROM User-A_id_medical_records WHERE symptom=""""""""headache"""""""" AND date BETWEEN date1 AND date2';]"""""""|2
Context: A social media app where each user can only view and edit their own profile. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters userID='User-A',name='John Doe',email='johndoe@example.com';Request-2: User-B GET /api/profile with parameters userID='User-A';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The user ID is wrong or not authorized to edit.';Request-3: User-A PUT /api/profile with parameters email='newemail@example.com';Response-3: OK with parameters message='Profile updated successfully.'];|0
Context: A social media app where each user can only access and modify their own posts. Other users cannot modify or delete them. Requests: [Request-1: User-A POST /api/posts with parameters content='Hello World!';Response-1: OK with parameters postID='123',content='Hello World!',likes=0;Request-2: User-A PUT /api/posts with parameters postID='456',content='My New Post!';Response-2: OK with parameters postID='456',content='My New Post!',likes=0;Request-3: User-B GET /api/posts with parameters postID='123';Response-3: OK with parameters postID='123',content='Hello World!',likes=0]|1
"Context: A gaming website with 2 types of users: Player and Admin. Players can view and edit their own profiles, while Admins can view and edit all profiles. Requests: [Request-1: Player-A PUT /profiles with parameters profileID='345', newName='New username', newAvatar='vampire.png';Response-1: OK with parameters success=true, message='Profile 345 updated successfully!';Request-2: Player-A DELETE /profiles with parameters profileID='999', newContent='{""""""""password"""""""": """"""""pass123"""""""", """"""""email"""""""": """"""""email@host.com"""""""", """"""""address"""""""": """"""""4253 West street""""""""}';Response-2: Forbidden with parameters success=false, message='you are not authorized to delete profile with id=999';Request-3: Admin POST /profiles with parameters newProfileName='New User', newContent='{""""""""age"""""""": 26, """"""""location"""""""": """"""""Toronto""""""""}';Response-3: OK with parameters success=true, message='New User profile created successfully!';Request-4: Admin GET /profiles with parameters profileID='log';Response-4: Error with parameters message='Cannot complete sql query SELECT * FROM profiles WHERE id=log';]"""""""|2
Context: A gym where each member can reserve a workout machine. Requests: [Request-1: Member-A POST /api/reserve_machine with parameters machineID='1';Response-1: OK with parameters machineID='1',startTime='2023-07-12 16:30:00',endTime='2023-07-12 17:30:00';Request-2: Member-B POST /api/reserve_machine with parameters machineID='2';Response-2: OK with parameters machineID='2',startTime='2023-07-12 16:30:00',endTime='2023-07-12 17:30:00';Request-3: Member-A POST /api/reserve_machine with parameters machineID='2';Response-3:Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='The machine is already reserved.']|0
Context: A social media website where each user can only view and modify their own profile. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters name='User-A',bio='Hello World!',friendsCount=5;Request-2: User-B GET /api/profile with parameters userID='User-A';Response-2: OK with parameters name='User-A',bio='Hello World!',friendsCount=5;Request-3: User-A PUT /api/profile with parameters bio='Hi there!';Response-3: OK with parameters name='User-A',bio='Hi there!',friendsCount=5;]|1
Context: A financial app with 3 types of users Investor, Broker and Admin. Each investor has an investment portfolio which they can view and modify, brokers can only view the investment portfolios of their clients. Admins can view and modify all data. Requests: [Request-1: Investor-A GET /api/portfolio with parameters portfolioID='Portfolio-A';Response-1: Forbidden with parameters message='You cannot modify Portfolio-A as it does not belong to you';Request-2: Broker-A GET /api/portfolio with parameters portfolioID='Portfolio-B';Response-2: OK with parameters portfolioID='Portfolio-B',investments=['Tesla','Facebook','Google'],values=['5','2.5','1.2'];Request-3: Investor-C GET /api/portfolio with parameters portfolioID='Portfolio-D';Response-3: Forbidden with parameters message='You cannot view Portfolio-D as it does not belong to you'].|2
Context: A retail app where customers can view their own order history. Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',totalPrice=12;Request-2: Customer-B GET /api/orders with parameters orderID='Order-B';Response-2: OK with parameters orderID='Order-B',totalPrice=155;Request-3: Customer-A GET /api/orders with parameters orderID='Order-B';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The order id is wrong or not authorized to display.']|0
Context: A business review system app, where reviews and ratings are given for specific businesses but users should not be able to modify others' reviews. Requests: [Request-1: User-A POST /api/business/123/review with parameters rating=4, comment='Nice place';Response-1: OK with parameters reviewID='Review-1234',businessID='Business-123',userID='User-A',rating=4,comment='Nice place';Request-2: User-B POST /api/business/123/review with parameters rating=2, comment='Terrible place, poor customer service';Response-2: OK with parameters reviewID='Review-2345',businessID='Business-123',userID='User-B',rating=2,comment='Terrible place, poor customer service';Request-3: User-A PUT /api/business/123/review with parameters reviewID='Review-2345',rating=1;Response-3: OK with parameters message='Review updated successfully']|1
Context: A web-based tennis club management system with 2 types of users Member and Admin. Members can view their own profile, use the booking system and view tennis court schedules. Admins can view and modify any data. Requests: [Request-1: Member-A GET /api/courts/schedule with parameters date='12/10/21';Response-1: OK with parameters courts=[{id='1',status='Available',time='10-11am'},{id='2',status='Booked',time='11-12am'}];Request-2: Member-B GET /api/profile with parameters id='user-123';Response-2: Unauthorized with parameters success=false,message='Incorrect password';Request-3: Admin PATCH /api/courts/schedule with parameters date='13/10/21',Court-1-time='8:00',Court-2-status='Maintenance';Response-3: OK with parameters message='Successfully updated courts schedule'].|2
Context: A weather app where users can set their preferred location and view the weather forecast. Requests: [Request-1: User-A PUT /api/location with parameters latitude='50.0616',longitude='8.6719';Response-1: OK with parameters location='Frankfurt am Main, Germany';Request-2: User-A GET /api/weather;Response-2: OK with parameters temperature=25°C, humidity=40%, wind='5m/s';Request-3: User-A PUT /api/location with parameters latitude='10',longitude='20';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.', errorDetails='The location is not authorized.']|0
Context: A banking application where only the account holder can view and modify their own transactions. Requests: [Request-1: User-A GET /api/transactions with parameters accountID='Account-123';Response-1: OK with parameters transactionID='Transaction-123',description='Monthly salary',amount=5000;Request-2: User-B GET /api/transactions with parameters accountID='Account-123';Response-2: OK with parameters transactionID='Transaction-123',description='Monthly salary',amount=5000;Request-3: User-A PUT /api/transactions with parameters transactionID='Transaction-2345', amount=1000;Response-3: OK with parameters message='Transaction updated successfully']|1
Context: A social media platform 'FriendsZone' that allows people to connect with one another. Requests: [Request-1: User-A POST /api/send-friend-request with parameters friendID='User-B';Response-1: OK with parameters message='Friend request has been sent successfully';Request-2: User-B POST /api/accept-friend-request with parameters friendID='User-A';Response-2: OK with parameters message='You are now friends with User-A';Request-3: User-A POST /api/send-friend-request with parameters friendID='User-C';Response-3: OK with parameters message='Friend request has been sent successfully';Request-4: User-C GET /api/friend-requests with parameters;Response-4: OK with parameters friendRequests=['User-A'];Request-5: User-C POST /api/accept-friend-request with parameters friendID='User-A';Response-5: Forbidden with parameters message='Cannot accept friend request from User-A as they have already reached the maximum number of friends allowed'].|2
Context: A flight reservation system where each booker can view their own bookings. Requests: [Request-1: Booker-A GET /api/bookings with parameters bookingID='Booking-A';Response-1: OK with parameters bookingID='Booking-A', flightNumber='DL-123';Request-2: Booker-B GET /api/bookings with parameters bookingID='Booking-B';Response-2: OK with parameters bookingID='Booking-B', flightNumber='UA-456';Request-3: Booker-A GET /api/bookings with parameters bookingID='Booking-B';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The booking id is wrong or not authorized to display.']|0
Context: A government portal where each person can only view and modify their own tax returns. Requests: [Request-1: Citizen-A GET /api/tax-returns with parameters citizenID='Citizen-A';Response-1: OK with parameters citizenID='Citizen-A',income=80000,taxPaid=12500;Request-2: Citizen-B GET /api/tax-returns with parameters citizenID='Citizen-A';Response-2: OK with parameters citizenID='Citizen-A',income=80000,taxPaid=12500;Request-3: Citizen-A PUT /api/tax-returns with parameters taxPaid=11000; Response-3: OK with parameters citizenID='Citizen-A',income=80000,taxPaid=11000;]|1
Context: A GPS tracking system with 2 types of users, Driver and Manager. Drivers can view & modify their own routes while Managers can view all data. Requests: [Request-1: Driver-A POST /api/routes with parameters routeID='Route-1',location='28.7041° N, 77.1025° E';Response-1: OK with parameters message='Route-1 added successfully';Request-2: Manager-A GET /api/routes with parameters locationRange='28.740 & 77.020 & 28.686 & 77.054';Response-2: OK with parameters routes=[{routeID='Route-1',location='28.7041° N, 77.1025° E',driver='Driver-A'}, {routeID='Route-2',location='28.7251° N, 77.0177° E',driver='Driver-B'}];Request-3: Driver-A PUT /api/routes with parameters routeID='Route-1',location='22.5726° N, 88.3639° E';Response-3: OK with parameters message='Route-1 modified successfully';Request-4: Manager-B GET /api/routes with parameters locationRange='28.740 & 77.020 & 28.686 & 77.054';Response-4: OK with parameters routes=[];Request-5: Driver-B POST /api/routes with parameters routeID='Route-2',location='4.2105° N, 101.9758° E';Response-5: Forbidden with parameters message='You are not authorized to modify Route-2 as it belongs to Driver-A'].|2
Context: An online rental app where each customer can view their own rental agreements. Requests: [Request-1: Customer-A GET /api/agreements with parameters agreementID='Agreement-A';Response-1: OK with parameters agreementID='Agreement-A',rentalItem='Car-X';Request-2: Customer-B GET /api/agreements with parameters agreementID='Agreement-B';Response-2: OK with parameters agreementID='Agreement-B', rentalItem='Bike-Y';Request-3: Customer-A GET /api/agreements with parameters agreementID='Agreement-B';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.', errorDetails='The agreement id is not authorized to display.']|0
Context: A gaming platform where each player can only view and modify their own game data. Requests: [Request-1: Player-A GET /api/game-data with parameters playerID='Player-A';Response-1: OK with parameters playerID='Player-A',level=10,score=5000,timePlayed=60mins;Request-2: Player-B GET /api/game-data with parameters playerID='Player-A';Response-2: OK with parameters playerID='Player-A',level=10,score=5000,timePlayed=60mins;Request-3: Player-A PUT /api/game-data with parameters score=5500; Response-3: OK with parameters playerID='Player-A',level=10,score=5500,timePlayed=60mins;]|1
"Context: A file sharing app with 2 types of users User and Admin. Users can upload and download their files, while Admins can manage other users' files as well. Requests: [Request-1: User-A GET /files/documents with parameters;Response-1: OK with parameters filenames=['homework.docx','research.pptx','studynotes.doc',...'];Request-2: User-B POST /files/uploads with parameters file='catpictures LOL.jpeg',size=500KB;Response-2: OK with parameters message='File uploaded successfully!';Request-3: Admin GET /files/uploads with parameters;Response-3: Internal Server Error with parameters message='An error occurred in upload(/uploads/step1): this_file_doesnt_exist.so: cannot find the file or directory';Request-4: Admin POST /files/uploads with parameters file='employee_salaries.xlsx',size=2MB;Response-4: Internal Server Error with parameters message='An error occurred in upload(/uploads/step1): Stack trace at file """"""""uploadapp/lib.php"""""""", line 28, in function handle()...'];"""""""|2
Context: A movie streaming app where each user can only view their own watch history. Requests: [Request-1: User-A GET /api/history with parameters movieID='Movie-A';Response-1: OK with parameters movieID='Movie-A',duration='2h 30m',watchTime='2023-07-11 20:12:30';Request-2: User-B GET /api/history with parameters movieID='Movie-B';Response-2: OK with parameters movieID='Movie-B',duration='1h 45m',watchTime='2023-07-11 14:50:00';Request-3: User-A GET /api/history with parameters movieID='Movie-B';Response-3: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.',errorDetails='The movie id is wrong or not authorized to display.']|0
Context: An education platform where each student can only access and modify their own learning data. Requests:[Request-1: Student-A GET /api/learning with parameters studentID='Student-A';Response-1: OK with parameters studentID='Student-A',lessonsCompleted=10,percentageComplete=50,quizScore=80;Request-2: Student-B GET /api/learning with parameters studentID='Student-A';Response-2: OK with parameters studentID='Student-A',lessonsCompleted=10,percentageComplete=50,quizScore=80;Request-3: Student-A PUT /api/learning with parameters quizScore=85; Response-3: OK with parameters studentID='Student-A',lessonsCompleted=10,percentageComplete=50,quizScore=85;]|1
"Context: A blogging app with 3 types of users Writers, Editors and Admins. Writers can write and edit their own blogs, Editors can edit all blogs and Admins have access to all features and users. Requests: [Request-1: Writer-A POST /blogs/new with parameters title='New blog',content='Some interesting topic';Response-1: OK with parameters message='Blog created successfully!';Request-2: Editor-A GET /blogs/all with parameters;Response-2: OK with parameters blogs=[{id:12,title:'New blog',content:'Some interesting topic',author:'Writer-A',editors=[],published=true},...];Request-3: Writer-B GET /blogs/my with parameters;Response-3: OK with parameters blogs=[{id:15,title:'Travel blog',content:'My trip to France',author:'Writer-B',editors:[Editor-C],published=false},...];Request-4: Admin POST /users/delete with parameters userId=23; Response-4: Internal Server Error with parameters message='An error occurred in deletion: duplicate key value violates unique constraint """"""""email"""""""" for key """"""""users_email_key"""""""" 'id' variable of incorrect type string';]"""""""|2
Context: A messaging app where each user can only view conversations that they are part of. Requests: [Request-1: User-A GET /api/conversations with parameters conversationID='Conv-A';Response-1: OK with parameters messages=[Message-1, Message-2];Request-2: User-B GET /api/conversations with parameters conversationID='Conv-B';Response-2: OK with parameters messages=[Message-3];Request-3: User-A GET /api/conversations with parameters conversationID='Conv-B';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='The conversation id is not authorized to display.'] |0
Context: A real estate app where each home buyer can only access and modify their own property information. Requests: [Request-1: Buyer-A GET /api/properties with parameters buyerID='Buyer-A',propertyID='Property-123';Response-1: OK with parameters propertyID='Property-123',address='123 Main St',price='$500,000',sqFt=2000;Request-2: Buyer-B GET /api/properties with parameters buyerID='Buyer-A',propertyID='Property-123'; Response-2: OK with parameters propertyID='Property-123',address='123 Main St',price='$500,000',sqFt=2000;Request-3: Buyer-A PUT /api/properties with parameters sqFt=2100;Response-3: OK with parameters propertyID='Property-123',address-'123 Main St',price='$500,000',sqFt=2100;]|1
Context: A stock management system with 2 types of users User and Admin where Users can only view and manage their own inventory. Admins can view and manage all inventory. Requests: [Request-1: Admin GET /api/inventory with parameters userID='admin302';Response-1: OK with parameters database='inventory-db',hostname='db_server.local',content=[{itemID=1,itemName='apples',quantity=100},{itemID=2,itemName='oranges',quantity=50}];Request-2: User-A GET /api/inventory with parameters userID='User-A-22';Response-2: OK with parameters database='inventory-db',hostname='db_server.local',content=[{itemID=24,itemName='juice',quantity=10},{itemID=25,itemName='soda',quantity=20}];]|2
Context: An online gaming platform where each user can only view their own game leaderboard. Requests: [Request-1: User-A GET /api/leaderboard with parameters gameID='Game-A';Response-1: OK with parameters score=1500;Request-2: User-B GET /api/leaderboard with parameters gameID='Game-B';Response-2: OK with parameters score=2000;Request-3: User-A GET /api/leaderboard with parameters gameID='Game-B'; Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The game id is wrong or not authorized to display.']|0
Context: A food delivery app where delivery agents can only accept or decline delivery requests assigned to them. Requests: [Request-1: Delivery-A PATCH /api/delivery with parameters deliveryID='Delivery-A' status='accepted';Response-1: OK with parameters status='accepted';Request-2: Delivery-B GET /api/delivery with parameters deliveryID='Delivery-A';Response-2: OK with parameters deliveryID='Delivery-A', customerName='Customer-A', customerAddress='123 Main St';Request-3: Delivery-A PATCH /api/delivery with parameters deliveryID='Delivery-A' status='delivered';Response-3: OK with parameters status='delivered']|1
Context: An online gaming platform with 2 types of users Player and Admin where players can vote for game upgrades. Requests: [Request-1: Player-1 /upgrade with parameters gameName='World of Zombies',vote='Upgrade weapon';Response-1: Error with parameters code='500',data='Error: cannot load dependency file: headers.h. Check lib folder in C:\\program files (x86)\\Gaming\\World_of_Zombies\\source']|2
Context: A food delivery app where each user can only view their own order history. Requests: [Request-1: User-A GET /api/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',totalPrice=12,restaurant='Burger King';Request-2: User-B GET /api/orders with parameters orderID='Order-B';Response-2: OK with parameters orderID='Order-B',totalPrice=155,restaurant='Pizza Hut';Request-3: User-A GET /api/orders with parameters orderID='Order-B';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The order id is wrong or not authorized to display.']|0
Context: A chat app where each user can only see chat logs for their own conversations. Requests: [Request-1: User-A GET /api/chat with parameters user='User-B';Response-1: OK with parameters chatlog=['Hello A', 'Hi B', 'How are you?', 'I'm good!'];Request-2: User-B GET /api/chat with parameters user='User-C';Response-2: OK with parameters chatlog=['What are you doing', 'Nothing much.'];Request-3: User-C GET /api/chat with parameters user='User-A';Response-3: OK with parameters chatlog=['How is it going?', 'Great!', 'Do you want to hang out?', 'Sure!']|1
Context: A payment processing application with different user roles. Requests: [Request-1: Employee POST /createAccount with parameters firstName='John', lastName='Doe', email='johndoe@gmail.com', password='strongpassword!'; Response-1: Error with parameters msg='The email address johndoe@gmail.com already exists'; Request-2: Manager POST /generateReport with parameters reportType='Daily', date='2022-07-01'; Response-2: Error with parameters message='Internal Server Error: java.lang.NullPointerException at report.generate() line 54'; Request-3: Administrator DELETE /deleteUser with parameters email='janedoe@gmail.com'; Response-3: Error with parameters message='Invalid Request, cannot delete the user with email janedoe@gmail.com as they are assigned a role of Manager'.']|2
Context: A blogging platform where each writer can create and edit their own blog posts. Requests: [Request-1: Writer-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-A',content='Some content';Request-2: Writer-B GET /api/posts with parameters postID='Post-A';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The post id is wrong or not authorized to edit.';Request-3: Admin GET /api/posts with parameters postID='Post-A';Response-3: OK with parameters postID='Post-A',content='Some content']|0
Context: A social media app where users can only access their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-B',content='Nice day today!',date='2022-01-01';Request-2: User-B GET /api/posts with parameters postID='Post-A';Response-2: Not authorized]; |1
"Context: A medical COVID-19 Vaccination management system with an Admin, Doctor and User. Requests: [Request-1: User POST /register with parameters firstName='Jane', lastName='Doe', email='janedoe@gmail.com', password='StrongPassword12*', medicalHistory='No Allergies'; Response-1: Error with parameters msg=""""""""The email address janedoe@gmail.com has already been registered.""""""""; Request-2: Doctor PUT /appointment with parameters date='2022-11-05', time='10:00', patientEmail='joedoe@yahoo.com'; Response-2: Error with parameters message='Cannot schedule the appointment. The patient joedoe@yahoo.com is already scheduled on the same day and time.'; Request-3: Admin DELETE /deleteUser with parameters email='johnsmith@yahoo.com'; Response-3: Error with parameters message='The request to delete user with email johnsmith@yahoo.com was not processed due to internal server errors.']"""""""|2
Context: A workout tracking app where each user has access to all workout data. Requests: [Request-1: User-A GET /api/workouts with parameters workoutID='123';Response-1: OK with parameters workoutID='123', exercise='Squats',weight=100,reps=10,start_time='2024-06-07 13:00';Request-2: User-A PUT /api/workouts with parameters workoutID='124', exercise='Deadlifts',weight=150,reps=10,start_time='2024-06-08 13:00';Response-2: OK with parameters workoutID='124', exercise='Deadlifts',weight=150,reps=10,start_time='2024-06-08 13:00';Request-3: User-A DELETE /api/workouts with parameters workoutID='124';Response-3: OK with parameters workoutID='124']|0
Context: An online course website where each student has their own progress that they can view and modify. Requests: [Request-1: Student-A PUT /api/courses with parameters courseID='Course-B', progress=70;Response-1: OK with parameters courseID='Course-B', progress=70]; |1
"Context: An online-library with different user types such as guests, subscribers and library staff. Requests: [Request-1: Subscriber POST /searchBook with parameters title='Harry Potter and the half-blood prince'; Response-1: Error with parameters message=""""""""Book not found: Multiple entries found under the title 'Harry Potter and the half-blood prince'.""""""""; Request-2: Guest POST /register with parameters name='Jane Doe', email='janedoe@gmail.com', password='Password123'; Response-2: Error with parameters message=""""""""Registration failed: Email domain janedoe@gmail.com not allowed. Please try again using a valid email domain.""""""""; Request-3: Library Staff PUT /bookInventory/supply with parameters bookName='To kill a mockingbird', quantity=50; Response-3: Error with parameters message=""""""""Stock supply failed. Quantity to be added should range between 1 and 25. Error occurred on book with id 246-01-35.""""""""]"""""""|2
Context: A social media app allowing users to post, like, and share any post. Requests: [Request-1: User-A POST /api/posts with parameters message='Hello World'; Response-1: OK with parameters postID='123', message='Hello World', likes=0, shares=0;Request-2: User-B GET /api/posts with parameters postID='123';Response-2: OK with parameters postID='123', message='Hello World', likes=0, shares=0;Request-3: User-A PUT /api/posts with parameters postID='123', message='Updated Message';Response-3: OK with parameters postID='123', message='Updated Message', likes=0, shares=0;Request-4: User-B DELETE /api/posts with parameters postID='123';Response-4: OK with parameters postID='123', message='Updated Message', likes=0, shares=0]|0
Context: A social media platform where each user can only view and interact with their own profile and content. Requests: [Request-1: User-A GET /api/profiles with parameters userID='User-A';Response-1: OK with parameters name='User-A',bio='I love my pets';Request-2: User-B GET /api/profiles with parameters userID='User-A';Response-2: OK with parameters name='User-A',bio='I love my pets';Request-3: User-B GET /api/content with parameters postID='User-A-post-123';Response-3: OK with parameters content='Hello world!']|1
Context: An employee management system with different user types of employees and administrators. Requests: [Request-1: Employee POST /requestLeave with parameters leaveType='Annual', startDate='2022-12-12', endDate='2022-12-17'; Response-1: Error with parameters message='Leave request failed. Request overlaps with another leave request for 13/12/2022-15/12/2022'; Request-2: Administrator DELETE /deleteEmployee with parameters email='janedoe@yahoo.com'; Response-2: Error with parameters message='Failed to delete user with email janedoe@yahoo.com: User not found.'; Request-3: Employee POST /createTask with parameters taskName='Project Alpha', taskStatus='Assigned', priority='High'; Response-3: Error with parameters message='Task creation failed. Priority should be either High, Medium or Low.' ]|2
Context: A password manager where each user can only access their own passwords. Requests: [Request-1: User-A GET /api/passwords with parameters passwordID='facebook';Response-1: OK with parameters passwordID='facebook',username='john.doe',password='12345';Request-2: User-B GET /api/passwords with parameters passwordID='facebook';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The password ID is wrong or not authorized to access.'; Request-3: User-A PUT /api/passwords with parameters passwordID='facebook',username='jane.doe';Response-3: OK with parameters passwordID='facebook',username='jane.doe',password='12345']|0
Context: A banking app where each customer can only view and manage their own account. Requests: [Request-1: Customer-A GET /api/accounts with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A', balance=10000;Request-2: Customer-A POST /api/transfer with parameters accountFrom='Account-A',accountTo='Account-B',amount=500;Response-2: OK with parameters message='Transfer successful!';Request-3: Customer-B GET /api/accounts with parameters accountID='Account-A';Response-3: OK with parameters accountID='Account-A', balance=10000]|1
Context: A video sharing platform with 2 types of users Creator and Viewer where each creator can only see their own videos. Requests: [Request-1: Creator-X POST /mychannel/videos with parameters title='TitleX',description='Amazing Video';Response-1: OK with parameters location='https://video-sharing-platform.com/create/video/Creator-X/video-1-YT-4K-2.12.2022.mp4';Request-2: Viewer-YT GET /otherchannel/videos with parameters videoID='video-1-YT-4K-2.12.2022';Response-2: Forbidden with parameters message='Access denied! Video Creator-X/video-1-YT-4K-2.12.2022.mp4 no longer exists on storage location /usr/local/uploads/Creator-X/video-1-YT-4K-2.12.2022.mp4']|2
Context: A task management app where each user can only access their own tasks. Requests: [Request-1: User-A GET /api/tasks with parameters taskID='123';Response-1: OK with parameters taskID='123',description='Task 1',priority='High',status='Incomplete';Request-2: User-B GET /api/tasks with parameters taskID='123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The task ID is wrong or not authorized to access.'; Request-3: User-A POST /api/tasks with parameters description='Task 2',priority='Low'; Response-3: OK with parameters taskID='124',description='Task 2',priority='Low',status='Incomplete']|0
Context: A job portal where each user can view and apply only to their own job applications. Requests: [Request-1: User-A GET /api/applications;Response-1: OK with parameters applications=[{'jobID':123, 'status':'Applied'}, {'jobID':456, 'status':'Not Applied'}];Request-2: User-A PATCH /api/applications with parameters jobID=456, status='Applied';Response-2: OK with parameters message='Application updated successfully!';Request-3: User-B GET /api/applications;Response-3: OK with parameters applications=[{'jobID':123, 'status':'Applied'}, {'jobID':456, 'status':'Not Applied'}]]|1
Context: A blog platform with 2 types of users: Writer and Editor. Writers can create, edit and delete their own posts, while editors can create, edit and delete any post but do not have access to user information. Requests: [Request-1: Writer-A DELETE /posts with parameters postId='19a8me8' ; Response-1: Error with parameters message='Post with postId 19a8me8 not found.'; Request-2: Editor-A PUT /posts with parameters postId='24b1fc5', title='My awesome post', content='This post is the best!'; Response-2: Bad Request with parameters error='Unable to process request. Please contact support.']|2
Context: A music streaming app where each user can only access their own playlists. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='123';Response-1: OK with parameters playlistID='123',name='My Favorites',tracks=['Song 1', 'Song 2', 'Song 3']; Request-2: User-B GET /api/playlists with parameters playlistID='123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The playlist ID is wrong or not authorized to access.';Request-3: User-A POST /api/playlists with parameters name='My Workouts',tracks=['Song 4', 'Song 5']; Response-3: OK with parameters playlistID='124',name='My Workouts',tracks=['Song 4', 'Song 5']]|0
Context: A weather app where each user can only view weather data for their own location. Requests: [Request-1: User-A GET /api/weather with parameters location='New York';Response-1: OK with parameters location='New York', temperature=10, description='Sunny';Request-2: User-B GET /api/weather with parameters location='New York';Response-2: OK with parameters location='New York', temperature=10, description='Sunny';Request-3: User-B GET /api/weather with parameters location='Paris';Response-3: OK with parameters location='Paris', temperature=15, description='Rainy']|1
Context: A job portal with 2 type of users Job-seeker and Recruiter where each job-seeker can create and modify their own profile. Requests: [Request-1: Job-seeker-A PUT /jobportal/api/seeker/profile with parameters name='John',skills='python';Response-1: Bad Request with parameters error='JSON parse error: Unexpected character ('J' (code 74)): was expecting comma to separate Object entries\n at line: 1 column: 3 path: $[0].value']|2
Context: A file sharing app where each user can access all shared files. Requests: [Request-1: User-A GET /api/shared-files with parameters fileID='123';Response-1: OK with parameters fileID='123', fileName='Summer Trip.jpg',size=5MB,uploaded_by='User-B';Request-2: User-B GET /api/shared-files with parameters fileID='456';Response-2: OK with parameters fileID='456', fileName='Report.docx',size=2MB,uploaded_by='User-A';Request-3: User-A PUT /api/shared-files with parameter fileID='123', fileName='Updated Summer Trip.jpg'; Response-3: OK with parameters fileID='123', fileName='Updated Summer Trip.jpg',size=5MB,uploaded_by='User-B']|0
Context: A team collaboration app where each team member can only access their own assigned tasks. Requests: [Request-1: Team member-A GET /api/tasks with parameters taskID='Task-A';Response-1: OK with parameters taskID='Task-A',title='Make progress report',description='...',assignedTo='Team member-A',dueDate='2024-05-31',status='In progress';Request-2: Team member-B GET /api/tasks with parameters taskID='Task-B';Response-2: OK with parameters taskID='Task-B',title='Present report',description='...',assignedTo='Someone Else',dueDate='2024-06-15',status='Assigned';Request-3: Team member-A PUT /api/tasks with parameters taskID='Task-B',status='In progress';Response-3: OK with parameters message='Task updated successfully'] |1
Context: A job portal with 2 type of users Job-seeker and Recruiter where each job-seeker can create and modify their own profile. Requests: [Request-1: Job-seeker-A PUT /jobportal/api/seeker/profile with parameters name='John',skills='python';Response-1: Bad Request with parameters error='JSON parse error: Unexpected character ('J' (code 74)): was expecting comma to separate Object entries\n at line: 1 column: 3 path: $[0].value']|2
