prompt|labels
Context: A content management system (CMS) where publishers can only view, edit or delete pages for their own websites. Admins can do everything including granting access rights for websites. Request: [Request-1: Publisher-A GET /webeditor with parameters pageID=123; Response-1: Error with parameters errorMessage='Insufficient Access Rights for Publisher-A to Edit page 123']|0
Context: a database system with 2 type of users Audience and Moderator,where Moderator can view and update Audience details for their own department. Requests: [Request-1: Moderator-A GET /Audiences with parameters departmentID='A';Response-1: OK with parameters Audience-ID='Emp-123', name='John Doe', designation='Software Engineer', salary=5000;Request-2: Moderator-B GET /Audiences with parameters departmentID='B';Response-2: OK with parameters Audience-ID='Emp-456', name='Jane Doe', designation='Business Analyst', salary=6000;Request-3: Moderator-B PUT /Audiences with parameters Audience-ID='Emp-123', salary=5500;Response-3: OK with parameters message='Salary updated successfully']|1
Context: A web-based calendar app for scheduling appointments - users can only see their own agenda. Requests: [Request-1: User-A GET /agenda with parameters date='10-10-2022';Response-1: Error with parameters reason='Database error: could not connect to MySQL: boathouse.local'];|2
Context: An email client app with 2 types of users Regular and Admin, where Regular users can send and receive emails. Request: [Request-1: Regular-User-A POST /email/send with parameters to='userB@gmail.com',subject='Meeting reminder',body='Reminder, we have a meeting today at 10 AM.']; Response-1: Error with parameters message='There was a problem sending your email, please try again later']|0
Context: a banking web application with 1 type of users Consumer, where they can book their own flights. Requests: [Request-1: Consumer-A POST /integration/folder/flights with parameters from='New York', to='Paris', date='2024-06-01'; Response-1: OK with parameters flightID='123', from='New York', to='Paris',date='2024-06-01', price=1200; Request-2: Consumer-B POST /integration/folder/flights with parameters from='San Francisco', to='Tokyo', date='2024-06-15'; Response-2: OK with parameters flightID='456', from='San Francisco', to='Tokyo',date='2024-06-15', price=2000; Request-3: Consumer-A DELETE /integration/folder/flights with parameters flightID='456'; Response-3: OK with parameters]|1
Context: A travel insurance website with types of insurance packages. Customers can purchase the packages. Requests: [Request-1: Customer-A POST /travel/insurance/packages with parameters package='VIP';Response-1: Internal Server Error with parameters message='cannot link to payment service provider - bankservice.com']|2
Context: A finance management system where users can view and manage their own account balances. Request: [Request-1: User-A GET /account/balance with parameters accountID=AC1245; Response-1: Error with parameters message='Sorry, we are experiencing temporary issues, please contact support for more information']|0
Context: An online course platform with 3 types of users User, User2 and Editor. User and User2 can only view and edit their own data. Editor can view and edit all data. Requests: [Request-1: User-A GET /workshop//service/shop/orders with parameters orderID='User-A';Response-1: OK with parameters orderID='User-A',totalPrice=12,items.1.name='ball',items.2.price=1;Request-2: User-B GET /workshop//service/shop/orders with parameters orderID='User-B';Response-2: OK with parameters orderID='User-B',totalPrice=155,items.1.name='hand',items.2.price=55;Request-3: User-A GET /workshop//service/shop/orders with parameters orderID='User-B';Response-3: OK with parameters orderID='User-B',totalPrice=155,items.1.name='hand',items.2.price=55]|1
Context: A healthcare platform with 2 type of users Patient and Doctor, where patients can view and manage their own healthcare records. Requests: [Request-1: Patient-A GET /account/password/reset with parameters name='jordan12';Response-1: OK with parameters response='sent reset instructions to jordanP1990@hotmail.com. If this is not your email please check the name you provided.']|2
Context: A healthcare booking app with 2 types of users Patient and Doctor, where Patients can schedule appointments with doctors. Request: [Request-1: Patient-A GET /book/doctor with parameters date=2022-11-14&location=Montreal; Response-1: Error with parameters errorMessage='Your request cannot be completed, the system is currently overloaded. Please try again later']|0
Context: A Sales reporting website in which Persons can share files with other Persons or public. Only the owner of a file should be able to modify its attributes.;Request-1: Person-A POST /integration/bff/files with parameters content='Example content', access=public;Response-1: OK with parameters url='/files/public/12345/';Request-2: Person-B GET /integration/bff/files with parameters fileId='12345';Response-2: OK with parameters content='Example content', access=public;Request-3: Person-B PUT /integration/bff/files with parameters fileId='12345', content='Modified content';Response-3: 200 Ok with parameters fileId='12345',content='Modified content',access=public;Request-4: Person-A PUT /integration/bff/files with parameters fileId='12345', access=private;Response-4: OK with parameters url='/files/private/12345/';Request-5: Person-B GET /integration/bff/files with parameters fileId='12345';Response-5: Not Found with parameters errorCode=404,errorMessage='The file was not found.'|1
Context: A messaging app where users can send message to each other, messages are signed and verified using keys exchanged when users initiate a conversation. Requests: [Request-1: User-2 GET /messages/august with parameters; Response-1: Error message with parameters msg='cannot generate keys, private key: a76e76c860680e56baddea679bf25e5859aa96392b5ae5922740b1d849ae8285, public key: 8e44e3ad5c3f9a46aadcb0cd5baae2f4 per user: User-2'];|2
Context: An online shopping site with multiple roles such as Customer, Merchant and Admin. Request: [Request-1: Merchant-A PUT /inventory with parameters productID=123, price=50, stock=12; Response-1: Error with parameters errorMessage='inventory update query failed, contact support for more information']|0
Context: a hotel reservation with 3 type of users Players, Player2s and Expert. The Players can create posts and see their own published/unpublished articles. Player2s can edit their own posts and all Players' posts, but cannot change the status of the posts. Experts can edit anyone's articles and set the status for each one.;Request-1: Player-A GET /view//posts;Response-1: OK with parameters posts=['Post-1', 'Post-2'];Request-2: Player2-A GET /view//posts;Response-2: OK with parameters posts=['Post-1', 'Post-2', 'Post-3'];Request-3: Player2-B PATCH /view//posts with parameters postID='Post-2',content='Updated Content',status='drafted';Response-3: OK with parameters postID='Post-2',content='Updated Content', status='drafted';Request-4: Expert PATCH /view//posts with parameters postID='Post-2',content='Another Updated Content',status='published';Response-4: OK with parameters postID='Post-2',content='Another Updated Content', status='published’]|1
Context: An e-commerce app with 1 type of users Customer where each customer can only view and modify their own data. Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='Order-A';Response-1: Internal Server Error with parameters stackTrace='file '/app/src/main/java/com/example/testDBmanager.java', line 500, column 10: SELECT * From users WHERE username ='user123'';]|2
Context: A medicine delivery application with 2 types of users Pharmacist and Distributor. Distributors can view their delivery history and delivery status. Requests: [Request-1: Distributor-A GET /api/delivery with parameters deliveryID='delivery-1';Response-1: Error with parameters msg='Delivery not found: delivery-1'];[Request-2: Distributor-A GET /api/delivery with parameters deliveryID='delivery-2';Response-2: Error with parameters msg='There was an error in retrieving the status of your delivery']|0
Context: A network service where reviews and ratings are given for specific businesses but Employees should not be able to modify others' reviews.Request-1: Employee-A POST /external/service/business/123/review with parameters rating=4, comment='Nice place';Response-1: OK with parameters reviewID='Review-1234',businessID='Business-123',EmployeeID='Employee-A',rating=4,comment='Nice place';Request-2: Employee-B POST /external/service/business/123/review with parameters rating=2, comment='Terrible place, poor customer service';Response-2: OK with parameters reviewID='Review-2345',businessID='Business-123',EmployeeID='Employee-B',rating=2,comment='Terrible place, poor customer service';Request-3: Employee-A PUT /external/service/business/123/review with parameters reviewID='Review-2345',rating=1;Response-3: OK with parameters message='Review updated successfully’|1
Context: An online dating app with 2 types of users User and Admin, where Users can only view and interact with their own matches. Requests: [Request-1: User-A POST /matches with parameters id='1234', name='Jane', age=22;Response-1: OK with parameters message='We couldn't generate any matches for you at this time'], [Request-2: User-A GET /matches with parameters id='1234';Response-2: Error with parameters message='Database error: Invalid SQL query: SELECT * FROM matches WHERE user_id = 1234'], [Request-3: Admin DELETE /matches with parameters id='1234';Response-3: Error with parameters message='Invalid GUID id.']  |2
Context: A social networking website with 2 types of users User and Moderator. Moderators can view and delete posts of all users. Requests: [Request-1: Moderator POST /api/posts with parameters message='This is a post';Response-1: Error with parameters msg='Post not created due to inappropriate content']|0
Context: A network service with 2 type of users Customer and Moderator for advertisements where each Customer can only see their own listings. Moderators can view and delete all listings. Requests: [Request-1: Customer-A Patch /market/Customer/[Customer-A-id]/items/[Customer-A-itemId] with parameters name='Item-A';Response-1: OK with parameters itemId='Customer-A-itemId',name='Item-A',price=10.5,quantity=103;Request-2: Customer-A Get /market/Customer/[Customer-A-id]/items/[Customer-B-itemId] with parameters;Response-2: OK with parameters itemId='Customer-B-itemId',name='Item-B',price=303.8,quantity=52;]|1
Context: A messaging app with 2 types of users User and Admin where users can chat with each other. Chats are encrypted end-to-end. Requests: [Request-1: User-1 /messages/sent with parameters filter='spam'; Response-1: Error with parameters message='process was terminated due to uncaught signal 11 (Segmentation fault)'];|2
Context: Transportation App with 2 types of users Driver and Rider, where Riders can view their trip history. Requests: [Request-1: Rider-A GET /api/trips with parameters tripID='trip-1';Response-1: Error with parameters msg='Trip not found: trip-1'];[Request-2: Rider-A POST /api/trips/cancel with parameters tripId='trip-2';Response-2: Error with parameters msg='Trip cannot be cancelled at this time due to connectivity issues']|0
Context: an ecommerce app with 2 type of users Customer and Owner where each Customer can only access and modify their own orders. Owner can view all orders. Requests: [Request-1: Customer-A GET /view/drive/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Customer-B GET /view/drive/orders with parameters orderID='Order-A';Response-2: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Completed';Request-3: Customer-A PUT /view/drive/orders with parameters status='Refunded';Response-3: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Refunded';Request-4: Customer-B PUT /view/drive/orders with parameters orderID='Order-A',status='Delivered';Response-4: Created with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-5: Owner GET /view/drive/orders with parameters orderID='Order-A';Response-5: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered']|1
Context: A music streaming app with 1 type of users Customer. Requests: [Request-1: Customer-A POST /streaming/pay with parameters cardNumber='1234123412341234',cvv='567',amount='9.99';Response-1: Error with parameters message='cardNumber=1234123412341234, cvv=567 are invalid'];|2
Context: A job portal with 2 types of users Job Seeker and Recruiter. Job seekers can view their applications. Requests: [Request-1: Job Seeker-A GET /api/applications with parameters applicationID='application-A';Response-1: Error with parameters message='Application not found for 'jobAId''];|0
Context: an ecommerce app with 2 type of users Clerk and Expert, where each Clerk can only view and download their own files. Experts cannot view Clerk files. Requests: [Request-1: Clerk-A GET //store/files with parameters fileID='Clerk-A/email.docx';Response-1: OK with parameters fileID='Clerk-A/email.docx',content='Hello World!',size=12KB;Request-2: Clerk-B GET //store/files with parameters fileID='Clerk-B/photos/beach.jpg';Response-2: OK with parameters fileID='Clerk-B/photos/beach.jpg', content ['...'],size=2MB;Request-3: Clerk-A POST //store/files with parameters fileContent='New Content';Response-3: OK with parameters fileID='Clerk-A/email.docx',content='New Content',size=10KB;Request-4: Clerk-B POST //store/files with parameters fileContent='New Content';Response-4: OK with parameters fileID='Clerk-B/photos/beach.jpg',content='New Content',size=1.5MB;Request-5: Expert GET //store/files with parameters fileID='Clerk-A/email.docx';Response-5: OK with parameters fileID='Clerk-A/email.docx',content='Hello World!',size=12KB]|1
Context: A social media app with 2 type of users User and Admin where users can DM each other. Requests: [Request-1: User-A POST /messages/send with parameters to='User-B',content='hello!';Response-1: Error with parameters message='unhandled-packet: Invalid packet format. Unable to parse packet']|2
Context: A ride-sharing app with 2 types of users Driver and Passenger. Passengers can view their ride history. Requests: [Request-1: Passenger-A GET /api/rides with parameters rideID='ride-1';Response-1: Error with parameters msg='Ride not found: ride-1'];[Request-2: Passenger-A GET /api/rides with parameters rideID='ride-2';Response-2: Error with parameters msg='Error fetching route data for ride: ride-2']|0
Context: An inventory management system with 2 type of users Person and Manager, where Persons can view and manage their own healthcare records. Requests: [Request-1: Person-A GET /healthcare with parameters PersonID='Person-A';Response-1: OK with parameters PersonID='Person-A', prescriptions=['Medicine A', 'Medicine B'], pastAppointments=[{'Manager': 'Dr. Johnson', 'Date': '05-05-2023'}, {'Manager': 'Dr. Smith', 'Date': '10-10-2023'}];Request-2: Person-B GET /healthcare with parameters PersonID='Person-B';Response-2: OK with parameters PersonID='Person-B', prescriptions=['Medicine C', 'Medicine D'], pastAppointments=[{'Manager': 'Dr. Williams', 'Date': '06-06-2023'}, {'Manager': 'Dr. Brown', 'Date': '12-12-2023'}];Request-3: Person-A POST /healthcare with parameters PersonID='Person-B', prescription='Medicine C';Response-3: OK with parameters message='Prescription added successfully']|1
Context: A job portal with 2 type of users Job-seeker and Recruiter where each job-seeker can create and modify their own profile. Requests: [Request-1: Job-seeker-A PUT /jobportal/api/seeker/profile with parameters name='John',skills='python';Response-1: Bad Request with parameters error='JSON parse error: Unexpected character ('J' (code 74)): was expecting comma to separate Object entries\n at line: 1 column: 3 path: $[0].value']|2
Context: An online bank website with 2 types of users Customer and Admin, where Customers can access personal account details and transactions and transfer money. Requests: [Request-1: Customer-A POST /api/transfer with parameters to='customerB',amount='500';Response-1: Error with parameters msg='Transaction failed due to insufficient balance in customerA\'s account'];[Request-2: Customer-A POST /api/transfer with parameters to='employee',amount='100';Response-2: Error with parameters msg='Transaction failed due to invalid recipient account type']|0
Context: A Sales reporting website with 2 type of users Student and Manager,where Manager can view and update Student details for their own department. Requests: [Request-1: Manager-A GET /Students with parameters departmentID='A';Response-1: OK with parameters Student-ID='Emp-123', name='John Doe', designation='Software Engineer', salary=5000;Request-2: Manager-B GET /Students with parameters departmentID='B';Response-2: OK with parameters Student-ID='Emp-456', name='Jane Doe', designation='Business Analyst', salary=6000;Request-3: Manager-B PUT /Students with parameters Student-ID='Emp-123', salary=5500;Response-3: OK with parameters message='Salary updated successfully']|1
Context: An online banking app with 1 type of users Customer. Requests: [Request-1: Customer-A POST /banking/fundTransfer with parameters fromAccount='1234567890',toAccount='0987654321',amount='10000';Response-1: Error 404 with parameters message='toAccount=0987654321 does not exist in our records']|2
Context: An online streaming application with two types of users: Regular and Premium. Regular users have limited access to content while premium users can view all content. Requests: [Request-1: Regular-A POST /api/signup with parameters email='johndoe@gmail.com', password='P@ssw0rd';Response-1: OK with parameters message='Congratulations, you have signed up for a regular account! Please check your email for a validation link. You will not be able to access premium content with a regular account.';Request-2: Premium-A GET /api/premium/video with parameters videoId='1234';Response-2: OK with parameters video='https://www.premiumvideos.com/1234', paymentStatus='paid';]|0
Context: A voting app with 1 type of users Employee, where they can book their own flights. Requests: [Request-1: Employee-A POST //system/flights with parameters from='New York', to='Paris', date='2024-06-01'; Response-1: OK with parameters flightID='123', from='New York', to='Paris',date='2024-06-01', price=1200; Request-2: Employee-B POST //system/flights with parameters from='San Francisco', to='Tokyo', date='2024-06-15'; Response-2: OK with parameters flightID='456', from='San Francisco', to='Tokyo',date='2024-06-15', price=2000; Request-3: Employee-A DELETE //system/flights with parameters flightID='456'; Response-3: OK with parameters]|1
Context: A video sharing platform with 2 types of users Creator and Viewer where each creator can only see their own videos. Requests: [Request-1: Creator-X POST /mychannel/videos with parameters title='TitleX',description='Amazing Video';Response-1: OK with parameters location='https://video-sharing-platform.com/create/video/Creator-X/video-1-YT-4K-2.12.2022.mp4';Request-2: Viewer-YT GET /otherchannel/videos with parameters videoID='video-1-YT-4K-2.12.2022';Response-2: Forbidden with parameters message='Access denied! Video Creator-X/video-1-YT-4K-2.12.2022.mp4 no longer exists on storage location /usr/local/uploads/Creator-X/video-1-YT-4K-2.12.2022.mp4']|2
Context: A real estate app with two types of users: Home Seekers and home owners. Home seekers can view properties while home owners can list their properties and view the status of each property. Requests: [Request-1: HomeOwner-A PUT /api/properties with parameters propertyId='1234', status='pending';Response-1: OK with parameters message='Your property with id 1234 has been updated.', email='johndoe@gmail.com';]|0
Context: A messaging app with 3 types of users Player, Player2 and Executive. Player and Player2 can only view and edit their own data. Executive can view and edit all data. Requests: [Request-1: Player-A GET /workshop/integration/service/shop/orders with parameters orderID='Player-A';Response-1: OK with parameters orderID='Player-A',totalPrice=12,items.1.name='ball',items.2.price=1;Request-2: Player-B GET /workshop/integration/service/shop/orders with parameters orderID='Player-B';Response-2: OK with parameters orderID='Player-B',totalPrice=155,items.1.name='hand',items.2.price=55;Request-3: Player-A GET /workshop/integration/service/shop/orders with parameters orderID='Player-B';Response-3: OK with parameters orderID='Player-B',totalPrice=155,items.1.name='hand',items.2.price=55]|1
Context: An online gaming platform with 2 types of users Player and Admin where players can vote for game upgrades. Requests: [Request-1: Player-1 /upgrade with parameters gameName='World of Zombies',vote='Upgrade weapon';Response-1: Error with parameters code='500',data='Error: cannot load dependency file: headers.h. Check lib folder in C:\\program files (x86)\\Gaming\\World_of_Zombies\\source']|2
Context: An online community platform with two types of users: Regular and Moderator. Regular users have limited access to content while moderators can view and delete all content. Requests: [Request-1: Regular-A GET /api/posts with parameters postId='007';Response-1: OK with parameters postDetails={'title':'How to Invest in Bitcoin','category':'Personal Finance','date':'09/01/2022','author':'Jane Doe', 'content':'blah blah blah'}, commentCount=3;Request-2: Regular-A DELETE /api/posts with parameters postId='007';Response-2: Forbidden with parameters message='You do not have sufficient permissions to delete a post.';Request-3: Moderator-A DELETE /api/posts with parameters postId='007';Response-3: OK with parameters message='Post ID 007 has been deleted.';]|0
Context: A network service in which Travellers can share files with other Travellers or public. Only the owner of a file should be able to modify its attributes.;Request-1: Traveller-A POST /content/push/files with parameters content='Example content', access=public;Response-1: OK with parameters url='/files/public/12345/';Request-2: Traveller-B GET /content/push/files with parameters fileId='12345';Response-2: OK with parameters content='Example content', access=public;Request-3: Traveller-B PUT /content/push/files with parameters fileId='12345', content='Modified content';Response-3: 200 Ok with parameters fileId='12345',content='Modified content',access=public;Request-4: Traveller-A PUT /content/push/files with parameters fileId='12345', access=private;Response-4: OK with parameters url='/files/private/12345/';Request-5: Traveller-B GET /content/push/files with parameters fileId='12345';Response-5: Not Found with parameters errorCode=404,errorMessage='The file was not found.'|1
Context: A stock management system with 2 types of users User and Admin where Users can only view and manage their own inventory. Admins can view and manage all inventory. Requests: [Request-1: Admin GET /api/inventory with parameters userID='admin302';Response-1: OK with parameters database='inventory-db',hostname='db_server.local',content=[{itemID=1,itemName='apples',quantity=100},{itemID=2,itemName='oranges',quantity=50}];Request-2: User-A GET /api/inventory with parameters userID='User-A-22';Response-2: OK with parameters database='inventory-db',hostname='db_server.local',content=[{itemID=24,itemName='juice',quantity=10},{itemID=25,itemName='soda',quantity=20}];]|2
Context: A ride-sharing app with two types of users: Driver and Passenger. Drivers can only access their own earnings while passengers can only view their own ride history. Requests: [Request-1: Passenger-A GET /api/rides with parameters rideId='012345';Response-1: OK with parameters rideDetails={'carType':'sedan','driverName':'Joe','fare':12.50,'start':'2022-09-01T12:00:00Z','end':'2022-09-01T12:15:00Z'}, paymentStatus='paid';Request-2: Passenger-A POST /api/rides with parameters destination='work';Response-2: Bad Request with parameters message='Invalid payload. The destination value must be a valid address.';]|0
Context: a file sharing system with 3 type of users Users, User2s and Seller. The Users can create posts and see their own published/unpublished articles. User2s can edit their own posts and all Users' posts, but cannot change the status of the posts. Sellers can edit anyone's articles and set the status for each one.;Request-1: User-A GET /backend/folder/posts;Response-1: OK with parameters posts=['Post-1', 'Post-2'];Request-2: User2-A GET /backend/folder/posts;Response-2: OK with parameters posts=['Post-1', 'Post-2', 'Post-3'];Request-3: User2-B PATCH /backend/folder/posts with parameters postID='Post-2',content='Updated Content',status='drafted';Response-3: OK with parameters postID='Post-2',content='Updated Content', status='drafted';Request-4: Seller PATCH /backend/folder/posts with parameters postID='Post-2',content='Another Updated Content',status='published';Response-4: OK with parameters postID='Post-2',content='Another Updated Content', status='published’]|1
Context: A blogging app with 3 types of users Writers, Editors and Admins. Writers can write and edit their own blogs, Editors can edit all blogs and Admins have access to all features and users. Requests: [Request-1: Writer-A POST /blogs/new with parameters title='New blog',content='Some interesting topic';Response-1: OK with parameters message='Blog created successfully!';Request-2: Editor-A GET /blogs/all with parameters;Response-2: OK with parameters blogs=[{id:12,title:'New blog',content:'Some interesting topic',author:'Writer-A',editors=[],published=true},...];Request-3: Writer-B GET /blogs/my with parameters;Response-3: OK with parameters blogs=[{id:15,title:'Travel blog',content:'My trip to France',author:'Writer-B',editors:[Editor-C],published=false},...];Request-4: Admin POST /users/delete with parameters userId=23; Response-4: Internal Server Error with parameters message='An error occurred in deletion: duplicate key value violates unique constraint """"""""email"""""""" for key """"""""users_email_key"""""""" 'id' variable of incorrect type string';]"""""""|2
Context: A stock trading app with 2 types of users: Trader and Administrator where traders can only view their own portfolio while administrators can view all portfolios. Requests: [Request-1: Trader-A GET /api/portfolio with parameters accountId='A12345';Response-1: OK with parameters equities=[{'symbol':'AAPL','shares':10,'currentPrice':144.40,'totalValue':1444.00},{'symbol':'TSLA','shares':2,'currentPrice':773.60,'totalValue':1547.20}], balance=9876.54;Request-2: Administrator GET /api/portfolio with parameters;Response-2: OK with parameters portfolios=[{'accountId':'A12345','equities':[{'symbol':'AAPL','shares':10,'currentPrice':144.40,'totalValue':1444.00},{'symbol':'TSLA','shares':2,'currentPrice':773.60,'totalValue':1547.20}], balance=9876.54}, {'accountId':'B54321','equities':[{'symbol':'AMZN','shares':3,'currentPrice':3723.54,'totalValue':11170.62}], balance=23456.78}]|0
Context: an stats dashboard for a mobile app where reviews and ratings are given for specific businesses but Clerks should not be able to modify others' reviews.Request-1: Clerk-A POST /drive/backend/business/123/review with parameters rating=4, comment='Nice place';Response-1: OK with parameters reviewID='Review-1234',businessID='Business-123',ClerkID='Clerk-A',rating=4,comment='Nice place';Request-2: Clerk-B POST /drive/backend/business/123/review with parameters rating=2, comment='Terrible place, poor customer service';Response-2: OK with parameters reviewID='Review-2345',businessID='Business-123',ClerkID='Clerk-B',rating=2,comment='Terrible place, poor customer service';Request-3: Clerk-A PUT /drive/backend/business/123/review with parameters reviewID='Review-2345',rating=1;Response-3: OK with parameters message='Review updated successfully’|1
Context: A file sharing app with 2 types of users User and Admin. Users can upload and download their files, while Admins can manage other users' files as well. Requests: [Request-1: User-A GET /files/documents with parameters;Response-1: OK with parameters filenames=['homework.docx','research.pptx','studynotes.doc',...'];Request-2: User-B POST /files/uploads with parameters file='catpictures LOL.jpeg',size=500KB;Response-2: OK with parameters message='File uploaded successfully!';Request-3: Admin GET /files/uploads with parameters;Response-3: Internal Server Error with parameters message='An error occurred in upload(/uploads/step1): this_file_doesnt_exist.so: cannot find the file or directory';Request-4: Admin POST /files/uploads with parameters file='employee_salaries.xlsx',size=2MB;Response-4: Internal Server Error with parameters message='An error occurred in upload(/uploads/step1): Stack trace at file """"""""uploadapp/lib.php"""""""", line 28, in function handle()...'];"""""""|2
Context: A mobile banking app with 2 types of users: Customer and Administrator where customers can view their account balance and transaction history. Requests: [Request-1: Customer-A GET /api/account with parameters accountId='A12345';Response-1: OK with parameters balance='123.45', history=['09/01/2022 - Deposit: $50.00','09/05/2022 - Bill Payment: $10.00'], accountType='savings';Request-2: Customer-A POST /api/account/forgotpassword with parameters email='jenny123@gmail.com';Response-2: OK with parameters message='We sent a password reset email to jenny123@gmail.com. Please check your inbox and follow the instructions to reset your password.';]|0
Context: A social networking app with 2 type of users Member and Executive for advertisements where each Member can only see their own listings. Executives can view and delete all listings. Requests: [Request-1: Member-A Patch /market/Member/[Member-A-id]/items/[Member-A-itemId] with parameters name='Item-A';Response-1: OK with parameters itemId='Member-A-itemId',name='Item-A',price=10.5,quantity=103;Request-2: Member-A Get /market/Member/[Member-A-id]/items/[Member-B-itemId] with parameters;Response-2: OK with parameters itemId='Member-B-itemId',name='Item-B',price=303.8,quantity=52;]|1
Context: A web-based tennis club management system with 2 types of users Member and Admin. Members can view their own profile, use the booking system and view tennis court schedules. Admins can view and modify any data. Requests: [Request-1: Member-A GET /api/courts/schedule with parameters date='12/10/21';Response-1: OK with parameters courts=[{id='1',status='Available',time='10-11am'},{id='2',status='Booked',time='11-12am'}];Request-2: Member-B GET /api/profile with parameters id='user-123';Response-2: Unauthorized with parameters success=false,message='Incorrect password';Request-3: Admin PATCH /api/courts/schedule with parameters date='13/10/21',Court-1-time='8:00',Court-2-status='Maintenance';Response-3: OK with parameters message='Successfully updated courts schedule'].|2
Context: An online banking app with 3 types of users Regular, Premium and Admin. Users can view and perform transactions on their own bank accounts. Admins can view and perform transactions on all bank accounts. Requests: [Request-1: Premium POST /bank/transfer with parameters to='828682828', amount=2000; Response-1: Unauthorized with parameters success=false, message='you do not have sufficient balance in your account, balance: $1500. Transfer failed'];|0
Context: An inventory management system with 2 type of users Developer and Owner where each Developer can only access and modify their own orders. Owner can view all orders. Requests: [Request-1: Developer-A GET /integration//orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Developer-B GET /integration//orders with parameters orderID='Order-A';Response-2: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Completed';Request-3: Developer-A PUT /integration//orders with parameters status='Refunded';Response-3: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Refunded';Request-4: Developer-B PUT /integration//orders with parameters orderID='Order-A',status='Delivered';Response-4: Created with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-5: Owner GET /integration//orders with parameters orderID='Order-A';Response-5: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered']|1
Context: A gaming website with 2 types of users: Player and Admin. Players can view and edit their own profiles, while Admins can view and edit all profiles. Requests: [Request-1: Player-A PUT /profiles with parameters profileID='345', newName='New username', newAvatar='vampire.png';Response-1: OK with parameters success=true, message='Profile 345 updated successfully!';Request-2: Player-A DELETE /profiles with parameters profileID='999', newContent='{""""""""password"""""""": """"""""pass123"""""""", """"""""email"""""""": """"""""email@host.com"""""""", """"""""address"""""""": """"""""4253 West street""""""""}';Response-2: Forbidden with parameters success=false, message='you are not authorized to delete profile with id=999';Request-3: Admin POST /profiles with parameters newProfileName='New User', newContent='{""""""""age"""""""": 26, """"""""location"""""""": """"""""Toronto""""""""}';Response-3: OK with parameters success=true, message='New User profile created successfully!';Request-4: Admin GET /profiles with parameters profileID='log';Response-4: Error with parameters message='Cannot complete sql query SELECT * FROM profiles WHERE id=log';]"""""""|2
Context: A social media app with 2 types of users User and Admin, where Users can only view and modify their own posts. Admins can view and modify all posts. Requests: [Request-1: User-A GET /posts with parameters postId='1234';Response-1: Error with parameters message='Post not found.'], [Request-2: User-B POST /posts with parameters title='My vacation', body='I had a great time at the beach!'; Response-2: Error with parameters message='Post title cannot contain special characters.'], [Request-3: Admin PUT /posts with parameters postId='1234', title='Updated title', body='Updated body';Response-3: OK with parameters message='Post successfully updated.'] |0
Context: An inventory management system with 2 type of users Employee and Admin, where each Employee can only view and download their own files. Admins cannot view Employee files. Requests: [Request-1: Employee-A GET /integration/external/files with parameters fileID='Employee-A/email.docx';Response-1: OK with parameters fileID='Employee-A/email.docx',content='Hello World!',size=12KB;Request-2: Employee-B GET /integration/external/files with parameters fileID='Employee-B/photos/beach.jpg';Response-2: OK with parameters fileID='Employee-B/photos/beach.jpg', content ['...'],size=2MB;Request-3: Employee-A POST /integration/external/files with parameters fileContent='New Content';Response-3: OK with parameters fileID='Employee-A/email.docx',content='New Content',size=10KB;Request-4: Employee-B POST /integration/external/files with parameters fileContent='New Content';Response-4: OK with parameters fileID='Employee-B/photos/beach.jpg',content='New Content',size=1.5MB;Request-5: Admin GET /integration/external/files with parameters fileID='Employee-A/email.docx';Response-5: OK with parameters fileID='Employee-A/email.docx',content='Hello World!',size=12KB]|1
Context: A healthcare app with 2 types of users: Doctor and Patient. Doctors can manage and view their own patients, while Patients can view their own medical records. Requests: [Request-1: Doctor-A PUT /patients with parameters patientID='111', newName='Patient Alpha', newRecord='{""""""""patientID"""""""": """"""""111"""""""", """"""""records"""""""": [{""""""""medicalRecord"""""""": """"""""annual checkup"""""""", """"""""doctor"""""""": """"""""Doctor-A""""""""}, {""""""""medicalRecord"""""""": """"""""injury"""""""", """"""""doctor"""""""": """"""""Doctor-B""""""""}]}';Response-1: OK with parameters success=true, message='Patient 111 updated successfully!';Request-2: Doctor-B DELETE /patients with parameters patientID='999', newContent='{""""""""patientID"""""""": """"""""999"""""""", """"""""records"""""""": [{""""""""medicalRecord"""""""": """"""""miscellaneous"""""""", """"""""doctor"""""""": """"""""Doctor-B""""""""}, {""""""""medicalRecord"""""""": """"""""accident"""""""", """"""""doctor"""""""": """"""""Doctor-C""""""""}]}';Response-2: Forbidden with parameters success=false, message='you are not authorized to access patient with id=999';Request-3: Patient-A PUT /medical with parameters medicalRecordID='567', newContent='{""""""""date"""""""": """"""""25-08-2020"""""""", """"""""symptoms"""""""": """"""""fatigue"""""""", """"""""diagnosis"""""""": """"""""flu""""""""}';Response-3: OK with parameters success=true, message='Medical record 567 updated successfully!';Request-4: Patient-A GET /medical with parameters;Response-4: Forbidden with parameters success=false, message='you are not authorized to access medical records for user with id=User-A_id';Request-5: Doctor-A GET /medical with parameters;Response-5: Error with parameters message='Cannot execute the query SELECT * FROM User-A_id_medical_records WHERE symptom=""""""""headache"""""""" AND date BETWEEN date1 AND date2';]"""""""|2
Context: A banking platform with 3 types of users Customer, Teller and Manager. Customers can only view and make transactions with their own accounts. Tellers can view and make transactions on all customer accounts. Managers can view all transactions and manage accounts. Requests: [Request-1: Teller-A POST /transactions with parameters amount='100', debitAccount='1234', creditAccount='5678';Response-1: Error with parameters message='Invalid debit account number.'], [Request-2: Customer-A GET /accounts with parameters accountNumber='5678';Response-2: OK with parameters message='Your account balance is $10,000.'], [Request-3: Manager DELETE /users with parameters userId='2345'; Response-3: Error with parameters message='User not found.'], [Request-4: Customer-B POST /transactions with parameters amount='50', debitAccount='5678', creditAccount='2345';Response-4: Error with parameters message='Insufficient funds in account 5678.'] |0
Context: A web app for ordering food online with 2 type of users Customer and Admin, where Customers can view and manage their own healthcare records. Requests: [Request-1: Customer-A GET /healthcare with parameters CustomerID='Customer-A';Response-1: OK with parameters CustomerID='Customer-A', prescriptions=['Medicine A', 'Medicine B'], pastAppointments=[{'Admin': 'Dr. Johnson', 'Date': '05-05-2023'}, {'Admin': 'Dr. Smith', 'Date': '10-10-2023'}];Request-2: Customer-B GET /healthcare with parameters CustomerID='Customer-B';Response-2: OK with parameters CustomerID='Customer-B', prescriptions=['Medicine C', 'Medicine D'], pastAppointments=[{'Admin': 'Dr. Williams', 'Date': '06-06-2023'}, {'Admin': 'Dr. Brown', 'Date': '12-12-2023'}];Request-3: Customer-A POST /healthcare with parameters CustomerID='Customer-B', prescription='Medicine C';Response-3: OK with parameters message='Prescription added successfully']|1
Context: A financial platform with 2 types of users Investor and Adviser. Investors can view and manage their own portfolios. Advisers can view and edit all investor portfolios. Requests: [Request-1: Investor-A GET /financial/portfolio with parameters id='234';Response-1: Unauthorized with parameters success=false, message='Invalid token';Request-2: Investor-A GET /financial/portfolio with parameters id='999';Response-2: Forbidden with parameters success=false, message='you are not authorized to access portfolio id=999';Request-3: Adviser PUT /financial/portfolio with parameters id='234', newContent='{""""""""stock"""""""": """"""""AAPL"""""""", """"""""investment"""""""": """"""""180""""""""}';Response-3: OK with parameters success=true, message='Portfolio with id=234 successfully updated';Request-4: Adviser GET /financial/portfolio with parameters id='log';Response-4: Error with parameters message='Cannot complete sql query SELECT * FROM portfolio WHERE id=log';]"""""""|2
Context: An online dating app with 2 types of users User and Admin, where Users can only view and interact with their own matches. Requests: [Request-1: User-A POST /matches with parameters id='1234', name='Jane', age=22;Response-1: OK with parameters message='We couldn't generate any matches for you at this time'], [Request-2: User-A GET /matches with parameters id='1234';Response-2: Error with parameters message='Database error: Invalid SQL query: SELECT * FROM matches WHERE user_id = 1234'], [Request-3: Admin DELETE /matches with parameters id='1234';Response-3: Error with parameters message='Invalid GUID id.']  |0
Context: A hotel booking system with 2 type of users Engineer and Moderator,where Moderator can view and update Engineer details for their own department. Requests: [Request-1: Moderator-A GET /Engineers with parameters departmentID='A';Response-1: OK with parameters Engineer-ID='Emp-123', name='John Doe', designation='Software Engineer', salary=5000;Request-2: Moderator-B GET /Engineers with parameters departmentID='B';Response-2: OK with parameters Engineer-ID='Emp-456', name='Jane Doe', designation='Business Analyst', salary=6000;Request-3: Moderator-B PUT /Engineers with parameters Engineer-ID='Emp-123', salary=5500;Response-3: OK with parameters message='Salary updated successfully']|1
Context: A gaming app with 1 type of users User, who can only play games. Requests: [Request-1: User-A GET /game/2048 with parameters board=[0,2,4,...];Response-1: Internal server error with parameters message='ooops, you just revealed a bug where user info was not properly sanitized: user bio-> """"""""I love chocolate and cats""""""""']"""""""|2
Context: An online payment system used for bill payments. Requests: [Request-1: User-A POST /confirm-payment with parameters biller='XYZ',accountNumber='1234',amount='15.75';Response-1: Error with parameters message='transaction failed due to temporary issues, please try again later.']|0
Context: A flight booking portal with 1 type of users Person, where they can book their own flights. Requests: [Request-1: Person-A POST /store/push/flights with parameters from='New York', to='Paris', date='2024-06-01'; Response-1: OK with parameters flightID='123', from='New York', to='Paris',date='2024-06-01', price=1200; Request-2: Person-B POST /store/push/flights with parameters from='San Francisco', to='Tokyo', date='2024-06-15'; Response-2: OK with parameters flightID='456', from='San Francisco', to='Tokyo',date='2024-06-15', price=2000; Request-3: Person-A DELETE /store/push/flights with parameters flightID='456'; Response-3: OK with parameters]|1
Context: A file storage website where users need to login to upload files. Requests: [Request-1: User-A POST /upload/files with parameters fileName='File.pdf',fileContent=[...];Response-1: Internal server error with parameters message='failed to upload /home/userA/files/File.pdf']|2
Context: A stock trading platform with 1 type of users Investor. Requests: [Request-1: Investor-A POST /trade/list with parameters stock='TSLA',quantity='10',price='560';Response-1: Error with parameter message='""""""""ticker"""""""":""""""""TSLA"""""""",""""""""errorMessage"""""""":""""""""invalid price"""""""",""""""""errorTicket"""""""":""""""""7fuALUZGADC3NSLWDb+G+4V9va8j9jKq4WqJ0RkrElo="""""""",""""""""orderType"""""""":""""""""Buy/Mkt"""""""",""""""""subsidiaryId"""""""":1,""""""""accountId"""""""":13,""""""""isDirected"""""""":false'];"""""""|0
Context: A web app for ordering food online with 3 types of users Customer, Customer2 and Admin. Customer and Customer2 can only view and edit their own data. Admin can view and edit all data. Requests: [Request-1: Customer-A GET /workshop/external/push/shop/orders with parameters orderID='Customer-A';Response-1: OK with parameters orderID='Customer-A',totalPrice=12,items.1.name='ball',items.2.price=1;Request-2: Customer-B GET /workshop/external/push/shop/orders with parameters orderID='Customer-B';Response-2: OK with parameters orderID='Customer-B',totalPrice=155,items.1.name='hand',items.2.price=55;Request-3: Customer-A GET /workshop/external/push/shop/orders with parameters orderID='Customer-B';Response-3: OK with parameters orderID='Customer-B',totalPrice=155,items.1.name='hand',items.2.price=55]|1
Context: A banking app with 2 types of users Customer and Admin where customers can view and manage their own bank accounts. Admins can view and modify all bank accounts. Requests: [Request-1: Customer-A GET /api/accounts with parameters accountID='Customer-A-Account-1';Response-1: Error with parameters msg='Query Error: SELECT * FROM ACCOUNT WHERE id=Customer-A-Account-1 and balance < -100';Request-2: Customer-B POST /api/transfer with parameters recipient='Customer-A', amount=1000;Response-2: Error with parameters msg='Transaction Error: Failed to transfer $1000 to Customer-A: Insufficient funds in account Customer-B-Account. Available balance is $800';Request-3: Admin GET /api/accounts with parameters accountID='Customer-C-Account-3';Response-3: Error with parameters msg='Query Error: SELECT * FROM ACCOUNT WHERE id=Customer-C-Account-3 and customer_name=Michael' ]|2
Context: An ecommerce app with 2 types of users Customer and Seller, where sellers can add/edit/delete their own products and view their own orders. Customers can only view products and place orders. Requests: [Request-1: Seller-A PUT /ecommerce/api/products with parameters productName='Product-A',units='10';Response-1: Error with parameters message='There was an error processing your request.'];|0
Context: A messaging app in which Students can share files with other Students or public. Only the owner of a file should be able to modify its attributes.;Request-1: Student-A POST /external//files with parameters content='Example content', access=public;Response-1: OK with parameters url='/files/public/12345/';Request-2: Student-B GET /external//files with parameters fileId='12345';Response-2: OK with parameters content='Example content', access=public;Request-3: Student-B PUT /external//files with parameters fileId='12345', content='Modified content';Response-3: 200 Ok with parameters fileId='12345',content='Modified content',access=public;Request-4: Student-A PUT /external//files with parameters fileId='12345', access=private;Response-4: OK with parameters url='/files/private/12345/';Request-5: Student-B GET /external//files with parameters fileId='12345';Response-5: Not Found with parameters errorCode=404,errorMessage='The file was not found.'|1
Context: A messaging app with 2 types of users User and Admin where Users can chat with each other. Chats are encrypted end-to-end. Requests: [Request-1: User-1 /messages/august/search with parameters terms='who should win eurovison?';Response-1: Error with parameters message='Cannot complete operation. Query limit exceeded';Request-2: User-1 /messages/august/search with parameters terms=""""""""I don't like the new emoji"""""""";Response-2; Error with parameters message='No messages found for this account';]"""""""|2
Context: An online library where users can read books. Requests: [Request-1: User-A GET /library/books with parameters bookID='book-123';Response-1: Error with parameters message='book is not available at the moment.'];|0
Context: A messaging app with 3 type of users Engineers, Engineer2s and Owner. The Engineers can create posts and see their own published/unpublished articles. Engineer2s can edit their own posts and all Engineers' posts, but cannot change the status of the posts. Owners can edit anyone's articles and set the status for each one.;Request-1: Engineer-A GET /store/server/posts;Response-1: OK with parameters posts=['Post-1', 'Post-2'];Request-2: Engineer2-A GET /store/server/posts;Response-2: OK with parameters posts=['Post-1', 'Post-2', 'Post-3'];Request-3: Engineer2-B PATCH /store/server/posts with parameters postID='Post-2',content='Updated Content',status='drafted';Response-3: OK with parameters postID='Post-2',content='Updated Content', status='drafted';Request-4: Owner PATCH /store/server/posts with parameters postID='Post-2',content='Another Updated Content',status='published';Response-4: OK with parameters postID='Post-2',content='Another Updated Content', status='published’]|1
Context: A project management tool with administrators, project managers, and employees who are managers of projects. Project managers can view and make edits to their own projects. Requests: [Request-1: Employee-C POST /pm/api/auth/login with parameters username='johndoe',password='a1b2c3d4';Response-1: Unauthorized with parameters success=false,message='a1b2c3d4 is incorrect password';Request-2: Project Manager-D POST /pm/api/auth/login with parameters username='sarai',password='admin11';Response-2: OK with parameters token='aVe567...']|2
Context: A supply chain management app with 2 type of users Client and Distributor where clients and distributors can only view and modify their own orders. Requests: [Request-1: Distributor-A GET /orders with parameters orderId='order-123';Response-1: OK with parameters orderId='order-123', items=['item-2431'], shipment='Shipment-A1', details='order placed by Client-10']; [Request-2: Client-1 GET /orders with parameters orderId='order-124';Response-2: Forbidden with parameters error='Invalid access']|0
Context: an stats dashboard for a mobile app where reviews and ratings are given for specific businesses but Engineers should not be able to modify others' reviews.Request-1: Engineer-A POST /backend/server/business/123/review with parameters rating=4, comment='Nice place';Response-1: OK with parameters reviewID='Review-1234',businessID='Business-123',EngineerID='Engineer-A',rating=4,comment='Nice place';Request-2: Engineer-B POST /backend/server/business/123/review with parameters rating=2, comment='Terrible place, poor customer service';Response-2: OK with parameters reviewID='Review-2345',businessID='Business-123',EngineerID='Engineer-B',rating=2,comment='Terrible place, poor customer service';Request-3: Engineer-A PUT /backend/server/business/123/review with parameters reviewID='Review-2345',rating=1;Response-3: OK with parameters message='Review updated successfully’|1
Context: A gym management system where trainers can only view and modify their own workout plan. Requests: [Request-1: Trainer-A POST /workout/api/auth/login with parameters username='trainer1',password='secret';Response-1: Unauthorized with parameters success=false,message='incorrect password';Request-2: Trainer-B POST /workout/api/auth/login with parameters username='trainer2',password='workoutplan';Response-2: OK with parameters sessionID='hjbjhbmmnn...']|2
Context: An online banking app with 1 type of users Customer. Requests: [Request-1: Customer-A POST /banking/fundTransfer with parameters fromAccount='1234567890',toAccount='0987654321',amount='10000';Response-1: Error 404 with parameters message='toAccount=0987654321 does not exist in our records']|0
Context: A web app for ordering food online with 2 type of users Person and Owner for advertisements where each Person can only see their own listings. Owners can view and delete all listings. Requests: [Request-1: Person-A Patch /market/Person/[Person-A-id]/items/[Person-A-itemId] with parameters name='Item-A';Response-1: OK with parameters itemId='Person-A-itemId',name='Item-A',price=10.5,quantity=103;Request-2: Person-A Get /market/Person/[Person-A-id]/items/[Person-B-itemId] with parameters;Response-2: OK with parameters itemId='Person-B-itemId',name='Item-B',price=303.8,quantity=52;]|1
Context: An event booking website with 2 type of users Attendee and Organizer, where each attendee can only access and modify their own events. Organizer can view all events. Requests: [Request-1: Attendee-A PUT /events/attendants with parameters eventID='Event-A';Response-1: OK with parameters attendants=['Attendee-A', 'Attendee-B', 'Attendee-C'];Request-2: Attendee-B PUT /events/attendants with parameters eventID='Event-A';Response-2: Forbidden with parameters message='you are not allowed to modify eventID=\'Event-A\',attendees=[\'Attendee-A\', \'Attendee-B\', \'Attendee-C\']';]|2
Context: A ticket booking app with 2 types of users: User and Moderator. Users can view and book concert tickets, while Moderators can view and remove fake or illegal tickets. Requests: [Request-1: User-A GET /concert with parameters performer='Taylor Swift'; Response-1: Bad Request with parameters message='No concert found for Taylor Swift'; Request-2: Moderator-A DELETE /tickets with parameters id='55500001'; Response-2: Error with parameters message='Ticket with id=55500001 cannot be removed.']|0
Context: A hobby social network with 2 type of users Traveller and Manager where each Traveller can only access and modify their own orders. Manager can view all orders. Requests: [Request-1: Traveller-A GET /view/v1/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Traveller-B GET /view/v1/orders with parameters orderID='Order-A';Response-2: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Completed';Request-3: Traveller-A PUT /view/v1/orders with parameters status='Refunded';Response-3: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Refunded';Request-4: Traveller-B PUT /view/v1/orders with parameters orderID='Order-A',status='Delivered';Response-4: Created with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-5: Manager GET /view/v1/orders with parameters orderID='Order-A';Response-5: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered']|1
Context: An online banking app with 3 type of users Customer, Merchant and Admin. Customers and Merchants can only view and edit their own data. Admins can view and edit all data. Requests: [Request-1: Customer-A POST /onlinebank/api/auth/login with parameters username='jessica',password='fH3sKk';Response-1: Unauthorized with parameters success=false,message='fH3sKk is incorrect password';Request-2: Merchant-A POST /onlinebank/api/auth/login with parameters username='ambrose',password='ambrose1';Response-2: OK with parameters token='qwm76...']|2
Context: An e-learning app with 2 types of users: Student and Teacher. Students can access and complete courses and view their grades, while Teachers can view and grade student submissions. Requests: [Request-1: Student-A GET /grades with parameters course='Maths'; Response-1: OK with parameters message='Your grade for Math is A+.'; Request-2: Teacher-A POST /submissions with parameters title='Project submission', comments='Great job!', grade='A+'; Response-2: OK with parameters message='Submission has been graded successfully.']|0
Context: A network service with 2 type of users Developer and Seller, where each Developer can only view and download their own files. Sellers cannot view Developer files. Requests: [Request-1: Developer-A GET /backend/graph/files with parameters fileID='Developer-A/email.docx';Response-1: OK with parameters fileID='Developer-A/email.docx',content='Hello World!',size=12KB;Request-2: Developer-B GET /backend/graph/files with parameters fileID='Developer-B/photos/beach.jpg';Response-2: OK with parameters fileID='Developer-B/photos/beach.jpg', content ['...'],size=2MB;Request-3: Developer-A POST /backend/graph/files with parameters fileContent='New Content';Response-3: OK with parameters fileID='Developer-A/email.docx',content='New Content',size=10KB;Request-4: Developer-B POST /backend/graph/files with parameters fileContent='New Content';Response-4: OK with parameters fileID='Developer-B/photos/beach.jpg',content='New Content',size=1.5MB;Request-5: Seller GET /backend/graph/files with parameters fileID='Developer-A/email.docx';Response-5: OK with parameters fileID='Developer-A/email.docx',content='Hello World!',size=12KB]|1
Context: A online educational app with 2 types of users Teacher and Student, where Teacher can create a course and Students can attend the course. Requests: [Request-1: Teacher POST /api/database/init with parameters;Response-1: Bad Request with parameters message='MySQL version 8.0.23 not supported, use any version upwards MySQL 8.0.24, PostgresSQL version 13.3 upward supported.'];Request-2: Student GET /api/course/attend with parameters courseId='MATH101';Response-2: OK with parameters message='Loading your course content... Database : SQL Server 2019. Server Apache version 1.5.5']|2
Context: An audio streaming app with 2 types of users: Subscriber and Admin. Subscribers can access and listen to music according to their subscription plan, while Admins have full access to view, modify and delete music according to their license agreement. Requests: [Request-1: Subscriber-A GET /library with parameters title='Best 2022 songs'; Response-1: Error with parameters message='Title not found'; Request-2: Admin-A DELETE /library with parameters title='Cancelled license songs'; Response-2: OK with parameters message='The songs were deleted successfully.']|0
Context: an stats dashboard for a mobile app with 2 type of users Employee and Manager, where Employees can view and manage their own healthcare records. Requests: [Request-1: Employee-A GET /healthcare with parameters EmployeeID='Employee-A';Response-1: OK with parameters EmployeeID='Employee-A', prescriptions=['Medicine A', 'Medicine B'], pastAppointments=[{'Manager': 'Dr. Johnson', 'Date': '05-05-2023'}, {'Manager': 'Dr. Smith', 'Date': '10-10-2023'}];Request-2: Employee-B GET /healthcare with parameters EmployeeID='Employee-B';Response-2: OK with parameters EmployeeID='Employee-B', prescriptions=['Medicine C', 'Medicine D'], pastAppointments=[{'Manager': 'Dr. Williams', 'Date': '06-06-2023'}, {'Manager': 'Dr. Brown', 'Date': '12-12-2023'}];Request-3: Employee-A POST /healthcare with parameters EmployeeID='Employee-B', prescription='Medicine C';Response-3: OK with parameters message='Prescription added successfully']|1
Context: A music streaming app with 1 types of users Listener, where Listeners can stream music. Requests: [Request-1: Listener-A POST /api/song/play with parameters songID='23k119.02.22';Response-1: Internal Server Error with parameters message='Segmentation Fault (core dumped). Out of memory.'];Request-2: Listener-B POST /api/song/rate with parameters songID='9y2h3.22.90' rating='5';Response-2: OK with parameters message='Rating received. System Error State=Error 404 Not Found Memory used=4GB']|2
Context: A hotel booking app with 2 types of users: Guest and Manager. Guests can view and book rooms, while Managers can view and modify rooms information. Requests: [Request-1: Guest-A GET /available-rooms with parameters date='November 12, 2022'; Response-1: Bad Request with parameters message='Unable to find data for November 12, 2022.'; Request-2: Manager-A PUT /rooms with parameters roomId='100', name='Deluxe Room', beds='2', price='200'; Response-2: OK with parameters message='Room information has been updated successfully.']|0
Context: An online payment system with 2 type of users Player and Owner,where Owner can view and update Player details for their own department. Requests: [Request-1: Owner-A GET /Players with parameters departmentID='A';Response-1: OK with parameters Player-ID='Emp-123', name='John Doe', designation='Software Engineer', salary=5000;Request-2: Owner-B GET /Players with parameters departmentID='B';Response-2: OK with parameters Player-ID='Emp-456', name='Jane Doe', designation='Business Analyst', salary=6000;Request-3: Owner-B PUT /Players with parameters Player-ID='Emp-123', salary=5500;Response-3: OK with parameters message='Salary updated successfully']|1
Context: A ridesharing app with 3 types of users Driver, Passenger and Admin, where Drivers can offer rides and update their own schedule and location. Passengers can create and buy a ticket for rides. Admins can view and delete all data. Requests: [Request-1: Driver-A POST /api/login with parameters username='mike123',password='d3xSw!';Response-1: Unauthorized with parameters message='Your account is locked out due to excessive login attempt. System OS=Windows build 11080.'];Request-2: Passenger-B GET /api/buyticket with parameters Date='2022/05/31';Response-2: OK with parameters message='Ticket bought successfuly! System OS=Ubuntu 18.10, server=Node.js, version=10.13.20']|2
Context: An online shopping app with 2 types of users: Customer and Admin. Customers can view and purchase products, while Admins have full access to add, edit and delete products. Requests: [Request-1: Customer-A GET /products with parameters category='books'; Response-1: OK with parameters message='The following books are available: ...'; Request-2: Admin-A PUT /products with parameters name='Book name', price='29.99', description='Book description'; Response-2: Error with parameters message='Unable to add product. Please try again.']|0
Context: An inventory management system with 1 type of users Consumer, where they can book their own flights. Requests: [Request-1: Consumer-A POST /drive/bff/flights with parameters from='New York', to='Paris', date='2024-06-01'; Response-1: OK with parameters flightID='123', from='New York', to='Paris',date='2024-06-01', price=1200; Request-2: Consumer-B POST /drive/bff/flights with parameters from='San Francisco', to='Tokyo', date='2024-06-15'; Response-2: OK with parameters flightID='456', from='San Francisco', to='Tokyo',date='2024-06-15', price=2000; Request-3: Consumer-A DELETE /drive/bff/flights with parameters flightID='456'; Response-3: OK with parameters]|1
Context: A dating app with 2 types of users Free and Premium, where Premium users can access all features. Requests: [Request-1: Free-User-A POST /api/login with parameters email='micheal@gmail.com',password='123456';Response-1: Internal Server Error with parameters message='A database error has occured. Check logs for details. server=PostgresSQL, version=13.2'];Request-2: Premium-User-B GET /api/benefit with parameters;Response-2: OK with parameters message='Welcome to our app. Enjoy your Premium plan subscription. server=Apache, version=2.4.4(Default PHP version: 7.3.27)']|2
Context: A messaging app with 2 types of users: Sender and Receiver. Senders can send messages to receivers. Requests: [Request-1: Sender-A POST /send-message with parameters recipient='Receiver-B' message='How are you?'; Response-1: Error with parameters message='Error: connection refused'; Request-2: Sender-B POST /send-message with parameters recipient='Receiver-C' message='I need to talk to you'; Response-2: OK with parameters message='Message sent successfully.']|0
Context: A Sales reporting website with 3 types of users Player, Player2 and Moderator. Player and Player2 can only view and edit their own data. Moderator can view and edit all data. Requests: [Request-1: Player-A GET /workshop/server/open/shop/orders with parameters orderID='Player-A';Response-1: OK with parameters orderID='Player-A',totalPrice=12,items.1.name='ball',items.2.price=1;Request-2: Player-B GET /workshop/server/open/shop/orders with parameters orderID='Player-B';Response-2: OK with parameters orderID='Player-B',totalPrice=155,items.1.name='hand',items.2.price=55;Request-3: Player-A GET /workshop/server/open/shop/orders with parameters orderID='Player-B';Response-3: OK with parameters orderID='Player-B',totalPrice=155,items.1.name='hand',items.2.price=55]|1
Context: An online store app with 2 types of users Customer and Admin, where each customer can only view and manage their own orders. Admins can view and manage all orders. Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',totalPrice=70.99,shippingAddress='NYC 22nd floor',paymentStatus='Paid';Request-2: Admin GET /api/orders with parameters orderID='Order-A';Response-2: Bad Request with parameters error='Failed to execute query SELECT * FROM orders WHERE orderID=Order-A'']|2
Context: A social media app with 2 types of users: Registered User and Moderator. Registered Users can create, share, and edit their own posts, while Moderators can view and delete content violating the terms of service. Requests: [Request-1: Registered User-A POST /create-post with parameters title='My Birthday', content='Best day ever!'; Response-1: OK with parameters message='Your post has been created successfully.'; Request-2: Moderator-A DELETE /users-with-violating-posts with parameters postId='42'; Response-2: Error with parameters message='Post with postId 42 has been deleted.';]|0
Context: a database system in which Users can share files with other Users or public. Only the owner of a file should be able to modify its attributes.;Request-1: User-A POST /backend/bff/files with parameters content='Example content', access=public;Response-1: OK with parameters url='/files/public/12345/';Request-2: User-B GET /backend/bff/files with parameters fileId='12345';Response-2: OK with parameters content='Example content', access=public;Request-3: User-B PUT /backend/bff/files with parameters fileId='12345', content='Modified content';Response-3: 200 Ok with parameters fileId='12345',content='Modified content',access=public;Request-4: User-A PUT /backend/bff/files with parameters fileId='12345', access=private;Response-4: OK with parameters url='/files/private/12345/';Request-5: User-B GET /backend/bff/files with parameters fileId='12345';Response-5: Not Found with parameters errorCode=404,errorMessage='The file was not found.'|1
Context: A messaging app with 2 types of users User and Admin where Users can chat with each other. Chats are encrypted end-to-end.Requests: [Request-1: User-1 /messages/single/search with parameters terms='who should win election2022?';Response-1: Error with parameters msg='query error, the SQL statement contains a syntax error -  select * from messages where message like '%election2022?' ']|2
Context: A fitness tracking app with 2 types of users: Regular User and Coach. Regular users can see and modify their own fitness information and Coaches can see information about all their trainees. Requests: [Request-1: Regular User-A GET /workouts with parameters date='November 11, 2022'; Response-1: OK with parameters message='Your records show no activity on November 11, 2022.'; Request-2: Coach-A GET /workouts with parameters date='November 11, 2022'; Response-2: Bad Request with parameters error='No trainees recorded activity on November 11, 2022.']|0
Context: A flight booking portal with 3 type of users Workers, Worker2s and Seller. The Workers can create posts and see their own published/unpublished articles. Worker2s can edit their own posts and all Workers' posts, but cannot change the status of the posts. Sellers can edit anyone's articles and set the status for each one.;Request-1: Worker-A GET /integration/open/posts;Response-1: OK with parameters posts=['Post-1', 'Post-2'];Request-2: Worker2-A GET /integration/open/posts;Response-2: OK with parameters posts=['Post-1', 'Post-2', 'Post-3'];Request-3: Worker2-B PATCH /integration/open/posts with parameters postID='Post-2',content='Updated Content',status='drafted';Response-3: OK with parameters postID='Post-2',content='Updated Content', status='drafted';Request-4: Seller PATCH /integration/open/posts with parameters postID='Post-2',content='Another Updated Content',status='published';Response-4: OK with parameters postID='Post-2',content='Another Updated Content', status='published’]|1
Context: An online marketplace with 2 type of users Seller and Buyer for advertisements where each seller can only see their own listings. Admins can view and delete all listings.Requests: [Request-1: Seller-A Patch /market/seller/[Seller-A-id]/items/[Seller-A-itemId] with parameters name='Item-A';Response-1: OK with parameters itemId='Seller-A-itemId',name='Item-A',price=3.99,quantity=172;Request-2: Admin GET /market/seller/[Seller-A-id]/items/[Seller-A-itemId] with parameters;Response-2: Bad Request with parameters message='syntax error in query: invalid SQL syntax near ',='Seller-A-id'"""""""");"""""""|2
Context: A financial management system with 3 types of users: Customer, Manager and Admin. Customers and Managers can only view their own budget and financial information and cannot edit it. Admins can view and edit all data. Requests: [Request-1: Customer-A GET /budget with parameters month='September 2022'; Response-1: OK with parameters message='You have exceeded your monthly budget of $1500'; Request-2: Manager-B GET /budget with parameters month='September 2022'; Response-2: OK with parameters message='The total budget for the department is $20000 and $17000 has been spent';]|0
Context: A web app for ordering food online where reviews and ratings are given for specific businesses but Audiences should not be able to modify others' reviews.Request-1: Audience-A POST /graph/system/business/123/review with parameters rating=4, comment='Nice place';Response-1: OK with parameters reviewID='Review-1234',businessID='Business-123',AudienceID='Audience-A',rating=4,comment='Nice place';Request-2: Audience-B POST /graph/system/business/123/review with parameters rating=2, comment='Terrible place, poor customer service';Response-2: OK with parameters reviewID='Review-2345',businessID='Business-123',AudienceID='Audience-B',rating=2,comment='Terrible place, poor customer service';Request-3: Audience-A PUT /graph/system/business/123/review with parameters reviewID='Review-2345',rating=1;Response-3: OK with parameters message='Review updated successfully’|1
Context: Travel booking website with 1 type of users Customer, where customers book their own flights.Requests: [Request-1: Customer-A PUT /store/login with parameters email='johndoe@gmail.com',password='ABCfoo';Response-1: Bad Request with parameters code='400',error='php-hash-lib: cannot hash, algorithm not supported']|2
Context: A remote language-learning platform with different user types of students and instructors. Requests: [Request-1: Instructor POST /createLesson with parameters lessonTitle='Introduction to Swahili Language',lessonDescription='Swahili Lesson 1: Alphabet'; Response-1: Error with parameters message='Failed to create lesson. Instructor is not allowed to create new lessons.'; Request-2: Student POST /bookSession with parameters sessionDate='2022-11-11', sessionTime='9:00', instructorEmail='instructor1@gmail.com'; Response-2: Error with parameters message='Failed to book lesson. The provided session time is not available. Please choose another time. Available times are [9:30, 10:00, 10:30].'; Request-3: Instructor POST /createAssignment with parameters lessonID='125', assignmentDescription='Swahili Writing Exercise',dueDate='2022-02-02'; Response-3: Error with parameters message='Failed to create assignment. Lesson document with ID 125 not found.' ]|0
Context: a task management tool with 2 type of users Person and Manager for advertisements where each Person can only see their own listings. Managers can view and delete all listings. Requests: [Request-1: Person-A Patch /market/Person/[Person-A-id]/items/[Person-A-itemId] with parameters name='Item-A';Response-1: OK with parameters itemId='Person-A-itemId',name='Item-A',price=10.5,quantity=103;Request-2: Person-A Get /market/Person/[Person-A-id]/items/[Person-B-itemId] with parameters;Response-2: OK with parameters itemId='Person-B-itemId',name='Item-B',price=303.8,quantity=52;]|1
Context: A food ordering app with 2 type of users Customer and Restaurant where each customer can only access and modify their own orders. Restaurant can view all orders.Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Customer-B GET /api/orders with parameters orderID='Order-A';Response-2: Forbidden with parameters results='you are not authorized to view orderID=\'Order-A\',menu=[\'pizza\',\'coke\'],status=\'Delivered\'';]|2
Context: A customer service platform with different user types of customers and administrators. Requests: [Request-1: Customer POST /createTicket with parameters issue='Hacked Account'; Response-1: Error with parameters message='Failed to create ticket. Empty description field.'; Request-2: Administrator PUT /assignAgent with parameters ticketId='654', agentEmail='agent1@yourcompany.com'; Response-2: Error with parameters message='Failed to assign agent with email agent1@yourcompany.com to Ticket ID 654: Invalid AgentID.'; Request-3: Customer POST /changePassword with parameters oldPassword='ABC123', newPassword='Password456!'; Response-3: Error with parameters message='Password change failed. Invalid old password.' ]|0
Context: An online payment system with 2 type of users Member and Expert where each Member can only access and modify their own orders. Expert can view all orders. Requests: [Request-1: Member-A GET /backend/service/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Member-B GET /backend/service/orders with parameters orderID='Order-A';Response-2: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Completed';Request-3: Member-A PUT /backend/service/orders with parameters status='Refunded';Response-3: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Refunded';Request-4: Member-B PUT /backend/service/orders with parameters orderID='Order-A',status='Delivered';Response-4: Created with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-5: Expert GET /backend/service/orders with parameters orderID='Order-A';Response-5: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered']|1
Context: A healthcare platform with 2 type of users Patient and Doctor, where patients can view and manage their own healthcare records.Requests: [Request-1: Patient-A GET /account/password/reset with parameters name='misty23';Response-1: OK with parameters response='sent reset instructions to misty@gmail.com. If this is not your email please check the name you provided.']|2
Context: A streaming platform with different user types of subscribers and administrators. Requests: [Request-1: Subscriber POST /searchMovie with parameters movieTitle='Money Heist', genre='Action'; Response-1: Error with parameters message='Could not find movie. The Genre Action is not supported'; Request-2: Subscriber POST /addMovieToPlaylist with parameters movieId='2456cb', playlistName='My Watch List'; Response-2: Error with parameters message='Error: Cannot add to playlist. The movieID 2456cb is not valid.'; Request-3: Administrator PUT /awardWinner with parameters nominationID='23457', awardCategory='Best Actor in a Limited Series'; Response-3: Error with parameters message='Failed to award winner. Nomination ID 23457 does not exist.' ]|0
Context: an stats dashboard for a mobile app with 2 type of users Member and Editor, where each Member can only view and download their own files. Editors cannot view Member files. Requests: [Request-1: Member-A GET /folder/push/files with parameters fileID='Member-A/email.docx';Response-1: OK with parameters fileID='Member-A/email.docx',content='Hello World!',size=12KB;Request-2: Member-B GET /folder/push/files with parameters fileID='Member-B/photos/beach.jpg';Response-2: OK with parameters fileID='Member-B/photos/beach.jpg', content ['...'],size=2MB;Request-3: Member-A POST /folder/push/files with parameters fileContent='New Content';Response-3: OK with parameters fileID='Member-A/email.docx',content='New Content',size=10KB;Request-4: Member-B POST /folder/push/files with parameters fileContent='New Content';Response-4: OK with parameters fileID='Member-B/photos/beach.jpg',content='New Content',size=1.5MB;Request-5: Editor GET /folder/push/files with parameters fileID='Member-A/email.docx';Response-5: OK with parameters fileID='Member-A/email.docx',content='Hello World!',size=12KB]|1
Context: Travel booking website with 1 type of users Customer, where customers book their own flights. Requests: [Request-1: Customer-A PUT /flights/spain/barcelona/book with parameters name='PabloM1',date='28.09.2022';Response-1: Internal Server Error with parameters message='Transaction failed: Could not complete payment transaction.']Context: A school management system where teachers can only view and modify their own grades and attendance records.Requests: [Request-1: Teacher-A POST /school/records/security/check with parameters credential='jdoe',password='A2B1C';Response-1: Forbidden with parameters details='account not found, did you mean j.doe@school.edu?']|2
Context: A banking application with customer and administrator user types. Requests: [Request-1: Customer POST /updateAccount with parameters firstName='Jane', lastName='Doe', address='221B Baker Street, London', contact='08021234567'; Response-1: Error with parameters message='Invalid Address Provided. Please provide a valid Address in the format - Number, Street name, City, Country.'; Request-2: Customer POST /moneyTransfer with parameters amount=5000, recipient='johndoe1@yahoo.com', transferReason='Family Support'; Response-2: Error with parameters message='Transfer Error - Invalid Transaction Amount. Transaction Amount exceeds available balance.'; Request-3: Administrator DELETE /deleteCustomer with parameters email='johndoe@hotmail.com'; Response-3: Error with parameters message='The customer with email john...@hotmail.com was not found in the customer database.' ]|0
Context: A network service with 2 type of users Audience and Privilaged-User, where Audiences can view and manage their own healthcare records. Requests: [Request-1: Audience-A GET /healthcare with parameters AudienceID='Audience-A';Response-1: OK with parameters AudienceID='Audience-A', prescriptions=['Medicine A', 'Medicine B'], pastAppointments=[{'Privilaged-User': 'Dr. Johnson', 'Date': '05-05-2023'}, {'Privilaged-User': 'Dr. Smith', 'Date': '10-10-2023'}];Request-2: Audience-B GET /healthcare with parameters AudienceID='Audience-B';Response-2: OK with parameters AudienceID='Audience-B', prescriptions=['Medicine C', 'Medicine D'], pastAppointments=[{'Privilaged-User': 'Dr. Williams', 'Date': '06-06-2023'}, {'Privilaged-User': 'Dr. Brown', 'Date': '12-12-2023'}];Request-3: Audience-A POST /healthcare with parameters AudienceID='Audience-B', prescription='Medicine C';Response-3: OK with parameters message='Prescription added successfully']|1
Context: An ecommerce app with 3 types of users Customer, Merchant and Admin. Customers and Merchants can only view and edit their own data. Requests: [Request-1: Customer-A POST /workshop/api/auth/login with parameters username='mikey',password='123';Response-1: Unauthorized with parameters success=false,message='123 is incorrect password';Request-2: Customer-B POST /workshop/api/auth/login with parameters username='beatrice',password='123123';Response-2: OK with parameters token='xyz123...']|2
Context: A travel e-commerce platform with different user roles of Visitors, Travel agents and Administrators. Requests: [Request-1: Travel agent POST /bookingRequest with parameters origin='Lagos', destination='Nairobi', travelDate='2022-10-18', passengerCount=2; Response-1: Error with parameters message=""""""""Booking request failed. Invalid passenger count for the travel date.""""""""; Request-2: Administrator GET /generateReport with parameters reportYear='2022'; Response-2: Error with parameters message=""""""""Unable to fetch requested report. Invalid year parameter: 20220.""""""""; Request-3: Visitor POST /register with parameters username='janedoe1', email='janedoe1@gmail.com', password='123Password!'; Response-3: Error with parameters message=""""""""Registration failed. Invalid username, alphanumeric characters only.""""""""]"""""""|0
Context: A voting app with 2 type of users User and Owner,where Owner can view and update User details for their own department. Requests: [Request-1: Owner-A GET /Users with parameters departmentID='A';Response-1: OK with parameters User-ID='Emp-123', name='John Doe', designation='Software Engineer', salary=5000;Request-2: Owner-B GET /Users with parameters departmentID='B';Response-2: OK with parameters User-ID='Emp-456', name='Jane Doe', designation='Business Analyst', salary=6000;Request-3: Owner-B PUT /Users with parameters User-ID='Emp-123', salary=5500;Response-3: OK with parameters message='Salary updated successfully']|1
Context: A health records storage app with 2 types of users User and Admin, where each user can only view and upload their own data. Admins cannot view user data. Requests: [Request-1: User-A GET /api/records/heartrate with parameters date=2022-10-20;Response-1: Error with parameters details='Internal server error: cannot retrieve data from database schema.heartrate']|2
Context: A banking app with 2 types of users Customer and Bank Officer where customers can view their account details. Bank Officers can view all accounts. Requests: [Request-1: Customer-1 /account/summary with parameters accountId='012345';Response-1: Forbidden with parameters error='invalid token for account 012345']|0
Context: a database system with 1 type of users Engineer, where they can book their own flights. Requests: [Request-1: Engineer-A POST /open/server/flights with parameters from='New York', to='Paris', date='2024-06-01'; Response-1: OK with parameters flightID='123', from='New York', to='Paris',date='2024-06-01', price=1200; Request-2: Engineer-B POST /open/server/flights with parameters from='San Francisco', to='Tokyo', date='2024-06-15'; Response-2: OK with parameters flightID='456', from='San Francisco', to='Tokyo',date='2024-06-15', price=2000; Request-3: Engineer-A DELETE /open/server/flights with parameters flightID='456'; Response-3: OK with parameters]|1
Context: An ecommerce app with 3 types of users Customer, Merchant and Admin. Requests: [Request-1: Customer-A POST /workshop/api/auth/login with parameters username='johnsmith@auction.com',password='password';Response-1: Unauthorized with parameters success=false,message='johnsmith@auction.com account does not exist';Request-2: Customer-B GET /workshop/api/product/[productId] with parameters productId=12345;Response-2: Forbidden with parameters message='only merchants are authorized to view this product.']|2
Context: A finance app with 2 types of users User and Finance Officer, where users can view their financial transactions. Requests: [Request-1: User-1 /finance/history with parameters accountId='17930';Response-1: Forbidden with parameters error='invalid credentials for account 17930']|0
Context: An online payment system with 3 types of users Developer, Developer2 and Editor. Developer and Developer2 can only view and edit their own data. Editor can view and edit all data. Requests: [Request-1: Developer-A GET /workshop/store/drive/shop/orders with parameters orderID='Developer-A';Response-1: OK with parameters orderID='Developer-A',totalPrice=12,items.1.name='ball',items.2.price=1;Request-2: Developer-B GET /workshop/store/drive/shop/orders with parameters orderID='Developer-B';Response-2: OK with parameters orderID='Developer-B',totalPrice=155,items.1.name='hand',items.2.price=55;Request-3: Developer-A GET /workshop/store/drive/shop/orders with parameters orderID='Developer-B';Response-3: OK with parameters orderID='Developer-B',totalPrice=155,items.1.name='hand',items.2.price=55]|1
Context: A messaging app with 2 types of users User and Admin where Users can chat with each other. Chats are encrypted end-to-end. Requests: [Request-1: User-1 /messages/august/search with parameters terms='who should win eurovison?';Response-1: Error with parameters msg='cannot serialize response {command: 'SELECT',rowCount: 3,oid: null,rows:[{ id: 1, name: 'John', age: 25 },{ id: 2, name: 'Jane', age: 30 },{ id: 3, name: 'Sam', age: 35 }],fields: [{ name: 'id', tableID: 123, columnID: 1, dataTypeID: 23 },{ name: 'name', tableID: 123, columnID: 2, dataTypeID: 25 },{ name: 'age', tableID: 123, columnID: 3, dataTypeID: 23 },commandComplete: 'slct * fr tb lim 3 }'] |2
Context: A social media platform with 2 types of users User and Admin where Users can only view and modify their own posts. Admins can view every post. Requests: [Request-1: User-1 /post/history with parameters postId='ABCD';Response-1: Forbidden with parameters error='account not found for post with id ABCD']|0
Context: A school management system in which Employees can share files with other Employees or public. Only the owner of a file should be able to modify its attributes.;Request-1: Employee-A POST /v1/view/files with parameters content='Example content', access=public;Response-1: OK with parameters url='/files/public/12345/';Request-2: Employee-B GET /v1/view/files with parameters fileId='12345';Response-2: OK with parameters content='Example content', access=public;Request-3: Employee-B PUT /v1/view/files with parameters fileId='12345', content='Modified content';Response-3: 200 Ok with parameters fileId='12345',content='Modified content',access=public;Request-4: Employee-A PUT /v1/view/files with parameters fileId='12345', access=private;Response-4: OK with parameters url='/files/private/12345/';Request-5: Employee-B GET /v1/view/files with parameters fileId='12345';Response-5: Not Found with parameters errorCode=404,errorMessage='The file was not found.'|1
Context: An online marketplace with 2 type of users Seller and Buyer for advertisements where each seller can only see their own listings. Admins can view and delete all listings. Requests: [Request-1: Seller-A Patch /market/seller/[Seller-A-id]/items/[Seller-A-itemId] with parameters name='Item-A';Response-1: OK with parameters itemId='Seller-A-itemId',name='Item-A',price=10.5,quantity=103;Request-2: Seller-B Get /market/seller/[Seller-A-id]/items/[Seller-B-itemId] with parameters;Response-2: Forbidden with parameters status='unsuccessful',reason='request to http://internal-service:4568 returned gateway timeout']|2
Context: An online shopping app with 2 types of users Buyer and Seller. Buyers can view and purchase available items, while Sellers can add their own items to sell. Requests: [Request-1: Buyer-A GET /items with parameters filter='beauty';Response-1: OK with parameters items=[{id:1001,name:'Lipstick', description:'A red lipstick', price:15, seller:'Seller-A'},{id:1005,name:'Foundation', description:'With SPF', price:30, seller:'Seller-B'},...];Request-2: Seller-A POST /items/add with parameters name='Nailpolish',description='Blue nailpolish',price=10;Response-2: OK with parameters message='Items added successfully!';Request-3: Seller-A GET /items with parameters filter='beauty';Response-3: OK with parameters items=[{id:1001,name:'Lipstick', description:'A red lipstick', price:15, seller:'Seller-A'},{id:1004,name:'Eyeshadow', description:'Golden shimmer', price:20, seller:'Seller-A'},...];Request-4: Buyer-A POST /items/cart with parameters itemId='1007', quantity=2; Response-4: Internal Server Error with parameters message='An error occurred in adding to cart: method 'GET' is not allowed for path '/items';Request-5: Buyer-A GET /items/cart with parameters;Response 5: OK with parameters items=[{id:1001,name:'Lipstick', description:'A red lipstick', price:15,  seller:'Seller-A',quantity=1}, {id:1007,name:'Blush', description:'Soft pink blush', price:25, seller:'Seller-B',quantity=2}',...];]|0
Context: An online payment system with 3 type of users Players, Player2s and Expert. The Players can create posts and see their own published/unpublished articles. Player2s can edit their own posts and all Players' posts, but cannot change the status of the posts. Experts can edit anyone's articles and set the status for each one.;Request-1: Player-A GET /bff/content/posts;Response-1: OK with parameters posts=['Post-1', 'Post-2'];Request-2: Player2-A GET /bff/content/posts;Response-2: OK with parameters posts=['Post-1', 'Post-2', 'Post-3'];Request-3: Player2-B PATCH /bff/content/posts with parameters postID='Post-2',content='Updated Content',status='drafted';Response-3: OK with parameters postID='Post-2',content='Updated Content', status='drafted';Request-4: Expert PATCH /bff/content/posts with parameters postID='Post-2',content='Another Updated Content',status='published';Response-4: OK with parameters postID='Post-2',content='Another Updated Content', status='published’]|1
Context: Travel booking website with 1 type of users Customer, where customers book their own flights. Requests: [Request-1: Customer-A PUT /store/login with parameters email='micheal@gmail.com',password='ABC';Response-1: Bad Request with parameters code='400',error='php-hash-lib: cannot hash, digest size surpassed']|2
Context: An invoicing app with 3 types of user Customer, Staff and Admin. Customers can view their own invoices and pay them while staff members can view all invoices, create new ones and mark as paid. Admins have access to all app functionalities. Requests: [Request-1: Staff-A POST /invoices with parameters customerId=12,amount=1000,date='2022-10-01';Response-1: OK with parameters message='The invoice has been created successfully';Request-2: Admin GET /users with parameters;Response-2: OK with parameters users=[{id:'1234',name:'Admin',surname:'User',role:'admin',password:'$2b$10$MNBI8UbMhwKjseymc/Je..(hash value)'}{id:'12',name:'John',surname:'Doe',role:'Staff',password:'$2b$10$6AtsoDixJ1gKZZ9zmDz1r.(hash value)'},{id:'10',name:'Jane',surname:'Smith',role:'Customer',password:'$2b$10$/m1Y7WcU2QdqwUCTKh5b7f(uhash value)'}];Request-3: Staff-B POST /payInvoice with parameters invoiceId=12;Response-3: OK with parameters message='The invoice #12 has been marked as paid';Request-4: Customer-A GET /invoices with parameters;Response-4: OK with parameters invoices=[{id:10299,amount:1000,status:PAID, date_paid:'2022-10-10',customer:'Customer-A',staff:'Staff-A'},...]];|0
Context: A voting app where reviews and ratings are given for specific businesses but Customers should not be able to modify others' reviews.Request-1: Customer-A POST /bff/service/business/123/review with parameters rating=4, comment='Nice place';Response-1: OK with parameters reviewID='Review-1234',businessID='Business-123',CustomerID='Customer-A',rating=4,comment='Nice place';Request-2: Customer-B POST /bff/service/business/123/review with parameters rating=2, comment='Terrible place, poor customer service';Response-2: OK with parameters reviewID='Review-2345',businessID='Business-123',CustomerID='Customer-B',rating=2,comment='Terrible place, poor customer service';Request-3: Customer-A PUT /bff/service/business/123/review with parameters reviewID='Review-2345',rating=1;Response-3: OK with parameters message='Review updated successfully’|1
Context: A food ordering app with 2 type of users Customer and Restaurant where each customer can only access and modify their own orders. Restaurant can view all orders. Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Customer-B GET /api/orders with parameters orderID='Order-A';Response-2: Forbidden with parameters results='you are not allowed to view orderID=\'Order-A\',menu=[\'pizza\',\'coke\'],status=\'Completed\'';]|2
Context: A video streaming app with 2 types of users, Subscriber and Content Creator. Subscribers can watch videos of content creators, while content creators can upload and edit their own videos. Requests: [Request-1: POST subscriber/login with parameters email='lisa.smith@gmail.com',password='lisapwd';Response-1: OK with parameters message='Welcome, Lisa!'; Request-2: ContentCreator-A PUT /videos with parameters title='How to make a perfect cup of tea',thumbnail='mov034-15.jpg', file='cupoftea.mov';Response-2: Unauthorized with parameters error='credentials not found for unauthenticated user'; Request-3: ContentCreator-B PUT /videos with parameters title='DIY Greenhouse',thumbnail='mov034-15.jpg', file='greenhouse.mov';Response-3: Unauthorized with parameters error='credentials not found for unauthenticated user'; ]|0
Context: A school management system with 2 type of users Member and Admin for advertisements where each Member can only see their own listings. Admins can view and delete all listings. Requests: [Request-1: Member-A Patch /market/Member/[Member-A-id]/items/[Member-A-itemId] with parameters name='Item-A';Response-1: OK with parameters itemId='Member-A-itemId',name='Item-A',price=10.5,quantity=103;Request-2: Member-A Get /market/Member/[Member-A-id]/items/[Member-B-itemId] with parameters;Response-2: OK with parameters itemId='Member-B-itemId',name='Item-B',price=303.8,quantity=52;]|1
Context: A cloud-based storage app with 2 type of users User and Admin, where each user can only view and download their own files. Admins cannot view user files. Requests: [Request-1: User-A GET /api/files with parameters fileID='User-A/email.docx';Response-1: OK with parameters fileID='User-A/email.docx',content='Hello World!',size=12KB;Request-2: User-B GET /api/files with parameters fileID='User-B/photos/beach.jpg';Response-2: OK with parameters fileID='User-B/photos/beach.jpg', content ['...'],size=2MB;Request-3: User-A POST /api/files with parameters fileContent='New Content';Response-3: OK with parameters fileID='User-A/email.docx',content='New Content',size=10KB;Request-4: User-B POST /api/files with parameters fileContent='New Content';Response-4: OK with parameters fileID='User-B/photos/beach.jpg',content='New Content',size=1.5MB;Request-5: Admin GET /api/files with parameters fileID='User-A/email.docx';Response-5: OK with parameters message='Cannot parse email.docx: 'from=User-A@gmail.com to=lover@gmail.com title=Secret body=6s76sad/&TA29' is missing quotes']|2
Context: A healthcare app with 3 types of users Staff, Doctors and Patients. Staff members can add new patients to the system, patients can view their own medical records, and doctors can view all medical records. Requests:[Request-1: Staff-A POST /addPatient with parameters name='David',email='david@gmail.com',dob='1992-01-01',address='234 Main St', ssn='327-24-4158';Response-1: OK with parameters message='New patient added successfully! Patient ID: 111';Request-2: Doctor-A GET /allPatients with parameters;Response-2: OK with parameters patients=[{ssn='327-24-4158',name='David',email='david@gmail.com',dob='1992-01-01',address='234 Main St',gender='Male',medical_history=[{date:'2020-01-01',diagnosis:'Flu'},...]];Request-3: Patient-A GET /medicalHistory with parameters;Response-3: OK with parameters medical_history=[{date:'2020-01-01',diagnosis:'Flu'},...];Request-4: Patient-B GET /medicalHistory with parameters;Response-4: Forbidden with parameters error='Patient is not authorized to access a medical record'; |0
Context: A web app for ordering food online with 2 type of users Audience and Boss where each Audience can only access and modify their own orders. Boss can view all orders. Requests: [Request-1: Audience-A GET /integration/v1/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Audience-B GET /integration/v1/orders with parameters orderID='Order-A';Response-2: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Completed';Request-3: Audience-A PUT /integration/v1/orders with parameters status='Refunded';Response-3: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Refunded';Request-4: Audience-B PUT /integration/v1/orders with parameters orderID='Order-A',status='Delivered';Response-4: Created with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-5: Boss GET /integration/v1/orders with parameters orderID='Order-A';Response-5: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered']|1
Context: A healthcare platform with 2 type of users Patient and Doctor, where patients can view and manage their own healthcare records. Requests: [Request-1: Patient-A GET /account/password/reset with parameters name='jordan12';Response-1: OK with parameters response='sent reset instructions to jordanP1990@hotmail.com. If this is not your email please check the name you provided.']|2
Context: A ticket sales app with 2 types of users Guest and Admin where Guest can buy tickets for shows, take part in events. Admins can view all user accounts, and available events. Requests: [Request-1: Guest-A POST /events/booking with parameters guest_name='Tina',guest_email='tina@gmail.com',ticket_count=4;Response-1: OK with parameters message='Success! Please check your email tina@gmail.com for your ticket. Event:',eventName='Theatre Night',eventDate='20-10-2022';Request-2: Guest-B POST /events/booking with parameters guest_name='Stuart',guest_email='tina@hotmail.com',ticket_count=5;Response-2: OK with parameters message='Success! Please check your email tina@hotmail.com for your ticket. Event:',eventName='Theatre Night',eventDate='20-10-2022';Request-3: Admin GET /events/available with parameters;Response-3: OK with parameters events=['Theatre Night','Halloween Parade','Rock Concert'],accounts={'Tina':'tina@gmail.com', 'Stuart':'tina@hotmail.com'};]|0
Context: A hotel booking system with 2 type of users Person and Executive, where each Person can only view and download their own files. Executives cannot view Person files. Requests: [Request-1: Person-A GET /external/push/files with parameters fileID='Person-A/email.docx';Response-1: OK with parameters fileID='Person-A/email.docx',content='Hello World!',size=12KB;Request-2: Person-B GET /external/push/files with parameters fileID='Person-B/photos/beach.jpg';Response-2: OK with parameters fileID='Person-B/photos/beach.jpg', content ['...'],size=2MB;Request-3: Person-A POST /external/push/files with parameters fileContent='New Content';Response-3: OK with parameters fileID='Person-A/email.docx',content='New Content',size=10KB;Request-4: Person-B POST /external/push/files with parameters fileContent='New Content';Response-4: OK with parameters fileID='Person-B/photos/beach.jpg',content='New Content',size=1.5MB;Request-5: Executive GET /external/push/files with parameters fileID='Person-A/email.docx';Response-5: OK with parameters fileID='Person-A/email.docx',content='Hello World!',size=12KB]|1
Context: A school management system where teachers can only view and modify their own grades and attendance records. Requests: [Request-1: Customer-A POST /school/records/security/check with parameters credential='micheal@gmail.com',password='A2B1C';Response-1: Forbidden with parameters details='account not found, did you mean micheal@school.com?']|2
Context: A banking app with 3 types of users Customer, Manager and Admin. Customers can view their own account balances and transactions. Managers can view accounts of their own branch. Admins can view all accounts and perform admin functions. Requests: [Request-1: Manager-A GET /accounts/1045830145/balance;Response-1: Unauthorized with parameters success=false,message='Unauthorized: 2045780368 is not authorized to access account 1045830145';Request-2: Admin GET /accounts/1045830145/transactions with parameters;Response-2: OK with parameters transactions=[{time:'2022-10-10T10:23:31',amount:150.00,type:['DEBIT','TRANSFER'],description:'Transfer to Customer-A',account:1045830145, account_owner: 'Customer-A',transaction_id:1146894},...]]|0
Context: A hobby social network with 2 type of users Member and Admin, where Members can view and manage their own healthcare records. Requests: [Request-1: Member-A GET /healthcare with parameters MemberID='Member-A';Response-1: OK with parameters MemberID='Member-A', prescriptions=['Medicine A', 'Medicine B'], pastAppointments=[{'Admin': 'Dr. Johnson', 'Date': '05-05-2023'}, {'Admin': 'Dr. Smith', 'Date': '10-10-2023'}];Request-2: Member-B GET /healthcare with parameters MemberID='Member-B';Response-2: OK with parameters MemberID='Member-B', prescriptions=['Medicine C', 'Medicine D'], pastAppointments=[{'Admin': 'Dr. Williams', 'Date': '06-06-2023'}, {'Admin': 'Dr. Brown', 'Date': '12-12-2023'}];Request-3: Member-A POST /healthcare with parameters MemberID='Member-B', prescription='Medicine C';Response-3: OK with parameters message='Prescription added successfully']|1
Context: Travel booking website with 1 type of users Customer, where customers book their own flights. Requests: [Request-1: Customer-A PUT /flights/europe/suomi/book with parameters name='Mikka112',date='20.10.2022';Response-1: Bad Request with parameters message='Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory, total=15394 available=13, core dumped']|2
Context: A hospital management system with two types of users, Nurse and Doctor. Nurses can view and modify patient records, while Doctors can view all patient records. Requests:[Request-1: Nurse-A POST /api/add-patient with parameters name='John Smith',dob='1980-10-14',diagnosis='Flu';Response-1: OK with parameters message='John Smith added successfully';Request-2: Nurse-A GET /api/view-record with parameters userID='Patient-1';Response-2: OK with parameters patientName='John Smith',nextAppointment='2021-11-05',diagnosis='Flu';Request-3: Doctor-A GET /api/patient-records with parameters;Response-3: OK with parameters patientsList=[{name='John Smith',id='Patient-1',updatedAt='2021-10-15T22:34:00.613Z'},{name='Jane Doe',id='Patient-2',updatedAt='2021-06-20T12:30:00.626Z'}];Request-4: Nurse-B POST /api/add-patient with parameters name='Alexis Fernandez',dob='1981-06-21';Response-4: Bad Request with parameters error='Missing diagnosis';Request-5: Doctor-B GET /api/view-record with parameters userID='Patient-2';Response-5: OK with parameters patientName='Jane Doe',nextAppointment='2021-11-30',diagnosis='Cancer'].|0
Context: A hobby social network with 2 type of users Worker and Boss,where Boss can view and update Worker details for their own department. Requests: [Request-1: Boss-A GET /Workers with parameters departmentID='A';Response-1: OK with parameters Worker-ID='Emp-123', name='John Doe', designation='Software Engineer', salary=5000;Request-2: Boss-B GET /Workers with parameters departmentID='B';Response-2: OK with parameters Worker-ID='Emp-456', name='Jane Doe', designation='Business Analyst', salary=6000;Request-3: Boss-B PUT /Workers with parameters Worker-ID='Emp-123', salary=5500;Response-3: OK with parameters message='Salary updated successfully']|1
Context: An ecommerce app with 3 types of users Customer, Merchant and Admin. Requests: [Request-1: Customer-A POST /workshop/api/auth/login with parameters username='micheal',password='123';Response-1: Unauthorized with parameters success=false,message='123 is incorrect password';Request-2: Customer-B POST /workshop/api/auth/login with parameters username='beatrice',password='123123';Response-2: OK with parameters token='uYda27...']|2
Context: A weather website with two types of users, Advertiser and Registered User. Advertisers can create and place ads on the website, while registered users can view weather information for different cities. Requests: [Request-1: User-A POST /api/register with parameters username='james',email='james123@gmail.com',password='12345';Response-1: OK with parameters message='Registration successful';Request-2: Advertiser-A POST /api/ads with parameters width='375',height='50',image='myAd.png',link='https://www.google.com';Response-2: OK with parameters message='Ad successfully created';Request-3: User-A GET /api/cities with parameters zipCode='12345';Response-3: OK with parameters cities=['New York','Boston','Miami'];Request-4: RegisteredUser-B GET /api/city-weather with parameters city='New York';Response-4: OK with parameters temperature=25,uvIndex='moderate',windSpeed='17km/h',description='Sunny';Request-5: Advertiser-A PUT /api/ads with parameters addID='Ad-1',width='500',height='120',image='updatedImage.png',link='https://www.yahoo.com';Response-5: OK with parameters message='Ad successfully updated'].|0
Context: A hotel booking system with 1 type of users Developer, where they can book their own flights. Requests: [Request-1: Developer-A POST /external/folder/flights with parameters from='New York', to='Paris', date='2024-06-01'; Response-1: OK with parameters flightID='123', from='New York', to='Paris',date='2024-06-01', price=1200; Request-2: Developer-B POST /external/folder/flights with parameters from='San Francisco', to='Tokyo', date='2024-06-15'; Response-2: OK with parameters flightID='456', from='San Francisco', to='Tokyo',date='2024-06-15', price=2000; Request-3: Developer-A DELETE /external/folder/flights with parameters flightID='456'; Response-3: OK with parameters]|1
Context: A music streaming app with 2 types of users, Listeners and Producers. Listeners can stream music and view their listening history, while Producers can upload music and view feedback from listeners. Requests: [Request-1: Listener-A GET /playlist with parameter playlistID=12345; Response-1: Internal Server Error with message='cannot retrieve playlist. DB query: SELECT songName FROM playlists WHERE playlistID=12345;'];|2
Context: A food delivery app with 2 types of users, Customer and Admin. Customers can place orders and track their delivery, while Admins can view and modify any data. Requests: [Request-1: Customer-A POST /api/order with parameters restaurantID='Restaurant-B',code='Coupon-a1b2c3d';Response-1: OK with parameters message='Your order has been received';Request-2: Customer-A GET /api/order-status with parameters orderID='Order-1';Response-2: OK with parameters status='Preparing';Request-3: Admin GET /api/orders with parameters;Response-3: OK with parameters orderList=[{id='Order-1',customer='Customer-A',status='Preparing',restaurantID='Restaurant-B',promoCode='Coupon-a1b2c3d'}];Request-4: Customer-B POST /api/order with parameters restaurantID='Restaurant-C',code='null';Response-4: Bad Request with parameters error='Invalid promo code';Request-5: Customer-A GET /api/order-details with parameters orderID='Order-1';Response-5: OK with parameters orderDetails=[{id='Item-1',name='Pizza',quantity='1',price='10'},{id='Item-2',name='Coke',quantity='2',price='1.5'}]]. |0
Context: A hobby social network with 3 types of users Employee, Employee2 and Manager. Employee and Employee2 can only view and edit their own data. Manager can view and edit all data. Requests: [Request-1: Employee-A GET /workshop/open/folder/shop/orders with parameters orderID='Employee-A';Response-1: OK with parameters orderID='Employee-A',totalPrice=12,items.1.name='ball',items.2.price=1;Request-2: Employee-B GET /workshop/open/folder/shop/orders with parameters orderID='Employee-B';Response-2: OK with parameters orderID='Employee-B',totalPrice=155,items.1.name='hand',items.2.price=55;Request-3: Employee-A GET /workshop/open/folder/shop/orders with parameters orderID='Employee-B';Response-3: OK with parameters orderID='Employee-B',totalPrice=155,items.1.name='hand',items.2.price=55]|1
Context: A ticketing app with 2 types of users, Customers and Ticket Sellers. Customers can buy event tickets and view their purchase history, while Ticket sellers can list new events and view the purchase history of their events. Requests: [Request-1: Customer-A GET /tickets with parameter ticketID='xyz123'; Response-1: Error with message='invalid ticketID. Query: SELECT * FROM tickets WHERE ticketID='xyz123';'];|2
Context: A video conferencing app that allows people to communicate with one another. Requests: [Request-1: User-A POST /api/call-contact with parameters contactID='User-B';Response-1: OK with parameters message='Connecting you to User-B';Request-2: User-B POST /api/receive-call with parameters callerID='User-A';Response-2: OK with parameters message='You are talking to User-A';Request-3: User-C POST /api/call-contact with parameters contactID='User-B';Response-3: Forbidden with parameters message='Cannot call User-B as they have put you on their blocked list';Request-4: User-A GET /api/call-details with parameters callID='1234';Response-4: OK with parameters duration='120',callStatus='Completed';Request-5: User-C POST /api/blocked-users with parameters user-ID='User-B';Response-5: OK with parameters message='You have successfully blocked User-B'].|0
Context: A voting app in which Travellers can share files with other Travellers or public. Only the owner of a file should be able to modify its attributes.;Request-1: Traveller-A POST /integration/push/files with parameters content='Example content', access=public;Response-1: OK with parameters url='/files/public/12345/';Request-2: Traveller-B GET /integration/push/files with parameters fileId='12345';Response-2: OK with parameters content='Example content', access=public;Request-3: Traveller-B PUT /integration/push/files with parameters fileId='12345', content='Modified content';Response-3: 200 Ok with parameters fileId='12345',content='Modified content',access=public;Request-4: Traveller-A PUT /integration/push/files with parameters fileId='12345', access=private;Response-4: OK with parameters url='/files/private/12345/';Request-5: Traveller-B GET /integration/push/files with parameters fileId='12345';Response-5: Not Found with parameters errorCode=404,errorMessage='The file was not found.'|1
Context: A gaming app with 3 types of users, Players, Game Developers, and Admins. Players can play games, Game Developers can create games for players, and admins can monitor all activities. Requests: [Request-1: Player-A GET /games with parameter gameName='the-next-big-game'; Response-1: Error with message='cannot find 'the-next-big-game'. Query: SELECT * FROM games WHERE gameName='the-next-big-game';'];|2
Context: An online store that sells software with a database backend. Users can purchase and download software that they have licensed. Requests: [Request-1: User-A POST /api/purchase-software with parameters softwareID='Microsoft-Office-2021';Response-1: OK with parameters message='You have successfully licensed Microsoft-Office-2021';Request-2: User-A GET /api/my-purchases with parameters;Response-2: OK with parameters purchases=['Microsoft-Office-2021'];Request-3: Admin GET /api/purchases/all with parameters;Response-3: OK with parameters purchases=['Microsoft-Office-2021','Windows 10','Adobe-Photoshop'];Request-4: User-B POST /api/purchase-software with parameters softwareID='Oracle-DATABASE';Response-4: OK with parameters message='You have successfully licensed Oracle-DATABASE';Request-5: User-B GET /api/my-purchases with parameters;Response-5: Internal server error with parameters details='Cannot download Oracle-DATABASE as user authentication failed'].|0
Context: An online payment system with 3 type of users Audiences, Audience2s and Privilaged-User. The Audiences can create posts and see their own published/unpublished articles. Audience2s can edit their own posts and all Audiences' posts, but cannot change the status of the posts. Privilaged-Users can edit anyone's articles and set the status for each one.;Request-1: Audience-A GET /drive/server/posts;Response-1: OK with parameters posts=['Post-1', 'Post-2'];Request-2: Audience2-A GET /drive/server/posts;Response-2: OK with parameters posts=['Post-1', 'Post-2', 'Post-3'];Request-3: Audience2-B PATCH /drive/server/posts with parameters postID='Post-2',content='Updated Content',status='drafted';Response-3: OK with parameters postID='Post-2',content='Updated Content', status='drafted';Request-4: Privilaged-User PATCH /drive/server/posts with parameters postID='Post-2',content='Another Updated Content',status='published';Response-4: OK with parameters postID='Post-2',content='Another Updated Content', status='published’]|1
Context: A finance app with 2 types of users, Customers and Teller. Customers can view their balance, and Teller can view all balances and modify them. Requests: [Request-1: Customer-A GET /account/balance with parameter accountNumber=123456; Response-1: Internal Server Error with message='cannot retrieve balance. DB query: SELECT balance FROM accounts WHERE accountNumber='123456';'];|2
Context: An online taxi booking with 2 types of users: Driver and Rider. Drivers can view, edit and accept bookings, while Riders can book rides and view their history. Requests: [Request-1: Rider-A PUT /rides with parameters rideID='111', newStart='Toronto', newDestination='Montreal', newPrice=120;Response-1: OK with parameters success=true, message='Ride 111 updated successfully!';Request-2: Rider-A GET /rides with parameters rideID='999';Response-2: Not Found with parameters success=false, message='Ride with id=999 not found';Request-3: Driver-B PUT /bookings with parameters bookingID='888', newStart='Montreal', newDestination='Toronto', newPrice=120, newDuration=100;Response-3: Unauthorized with parameters success=false, message='Invalid driver token';Request-4: Driver-B DELETE /bookings with parameters bookingID='444', newContent='{""""""""status"""""""": """"""""cancelled""""""""}';Response-4: OK with parameters success=true, message='Booking 444 cancelled successfully!'; Request-5: Driver-C PUT /bookings with parameters bookingID=""""""""555""""""""; Response-5: Forbidden with parameters success=false, message='you are not authorized to accept booking with id=555';]"""""""|0
Context: A flight booking portal where reviews and ratings are given for specific businesses but Engineers should not be able to modify others' reviews.Request-1: Engineer-A POST /view/folder/business/123/review with parameters rating=4, comment='Nice place';Response-1: OK with parameters reviewID='Review-1234',businessID='Business-123',EngineerID='Engineer-A',rating=4,comment='Nice place';Request-2: Engineer-B POST /view/folder/business/123/review with parameters rating=2, comment='Terrible place, poor customer service';Response-2: OK with parameters reviewID='Review-2345',businessID='Business-123',EngineerID='Engineer-B',rating=2,comment='Terrible place, poor customer service';Request-3: Engineer-A PUT /view/folder/business/123/review with parameters reviewID='Review-2345',rating=1;Response-3: OK with parameters message='Review updated successfully’|1
Context: A chat app with 2 types of users, Users and Admins. Users can chat with each other. Chats are not encrypted end-to-end. Requests: [Request-1: User-1 GET /chatrooms/room1/user2 with parameter limit=10; Response-1: Error with message='cannot fetch messages. Query: SELECT * FROM room1 WHERE userId='user2' LIMIT 10.'];|2
Context: A banking system with 2 types of users: User and Manager. Users can manage and view their own accounts, while Managers can view and edit all accounts. Requests: [Request-1: User-A PUT /accounts with parameters accountId='345', newName='New name', newPIN='1234';Response-1: OK with parameters success=true, message='Account 345 updated successfully!';Request-2: User-A PUT /accounts with parameters accountId='999', newName='Other account name', newPIN='0987';Response-2: Forbidden with parameters success=false, message='you are not authorized to access account with id=999';Request-3: Manager DELETE /accounts with parameters accountId='111', newContent='{""""""""balance"""""""": 200}';Response-3: OK with parameters success=true, message='Account 111 deleted successfully!';Request-4: Manager POST /accounts with parameters newAccountName='Company account', newContent='{""""""""balance"""""""": 5000}';Response-4: OK with parameters success=true, message='Company account created successfully!';]"""""""|0
Context: A messaging app with 2 type of users Worker and Executive for advertisements where each Worker can only see their own listings. Executives can view and delete all listings. Requests: [Request-1: Worker-A Patch /market/Worker/[Worker-A-id]/items/[Worker-A-itemId] with parameters name='Item-A';Response-1: OK with parameters itemId='Worker-A-itemId',name='Item-A',price=10.5,quantity=103;Request-2: Worker-A Get /market/Worker/[Worker-A-id]/items/[Worker-B-itemId] with parameters;Response-2: OK with parameters itemId='Worker-B-itemId',name='Item-B',price=303.8,quantity=52;]|1
Context: A healthcare app with 2 types of users, Patients and Doctors, where Patients can view and manage their own healthcare records. Requests: [Request-1: Patient-A /account/password/reset with parameters name='micheal'; Response-1: OK with parameters response='sent reset instructions to [micheal's email]. If this is not your email please check the name you provided.']; |2
Context: An e-learning platform with 2 types of users Student and Teacher. Students can access and modify their own courses, while teachers can view and edit all courses. Requests: [Request-1: Student-A PUT /courses with parameters courseID='34', newName='JavaScript', newMaterial='[{""""""""slides"""""""": """"""""Introduction to JavaScript"""""""", """"""""videoUrl"""""""": """"""""/videos/javaTutorial"""""""", """"""""quiz"""""""": """"""""Test your skills""""""""}]';Response-1: OK with parameters success=true, message='Course 34 updated successfully!';Request-2: Student-A GET /courses with parameters courseID='23';Response-2: Forbidden with parameters success=false, message='you are not authorized to access course with id=23';Request-3: Teacher DELETE /courses with parameters courseID='100', removedContent='{""""""""slides"""""""": """"""""Basic HTML"""""""", """"""""videoUrl"""""""": """"""""/videos/htmlTutorial""""""""}';Response-3: OK with parameters success=true, message='Course 100 deleted successfully!';Request-4: Teacher POST /courses with parameters newCourseName='React Crash Course', newContent='[{""""""""slides"""""""": """"""""Introduction to React"""""""", """"""""videoUrl"""""""": """"""""/videos/reactTutorial"""""""", """"""""quiz"""""""": """"""""Test your skills""""""""}]';Response-4: OK with parameters success=true, message='React Crash Course created successfully!';]"""""""|0
Context: A flight booking portal with 2 type of users Employee and Executive where each Employee can only access and modify their own orders. Executive can view all orders. Requests: [Request-1: Employee-A GET /open//orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Employee-B GET /open//orders with parameters orderID='Order-A';Response-2: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Completed';Request-3: Employee-A PUT /open//orders with parameters status='Refunded';Response-3: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Refunded';Request-4: Employee-B PUT /open//orders with parameters orderID='Order-A',status='Delivered';Response-4: Created with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-5: Executive GET /open//orders with parameters orderID='Order-A';Response-5: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered']|1
Context: A financial app with 2 types of users Customer and Admin. Customers can access their bank account details, balance and transaction history. Admins can view all bank accounts. Requests: [Request-1: Customer-A GET /bank/transactions/history with parameters fromDate='2021-01-01';Response-1: Internal Server Error with parameters message='The server responded with a 500 error due to an invalid API call -- {method: GET /history, status: 500, detail: Internal Error: Please check logs}';]|2
Context: A social media app with 2 types of users User and Admin. Users can view, edit and delete their own posts. Admins can view all posts and delete any. Requests: [Request-1: User-A GET /posts/123 with parameters;Response-1: Not Found with parameters message='Post with id=123 not found';Request-2: User-A GET /posts/MyUnpublishedPost with parameters;Response-2: Not Found with parameters message='Post with title=MyUnpublishedPost not found';Request-3: Admin GET /posts/others/456 with parameters;Response-3: OK with parameters post='[{""""""""title"""""""": """"""""Another User's Post"""""""", """"""""content"""""""": """"""""This is a test post"""""""", """"""""author"""""""": """"""""Another User"""""""", """"""""privacySetting"""""""": """"""""public""""""""}]';Request-4: Admin GET /posts/others/all with parameters;Response-4: OK with parameters posts='[{""""""""title"""""""": """"""""User A's Post"""""""", """"""""content"""""""": """"""""This is a sensitive post"""""""", """"""""author"""""""": """"""""User A"""""""", """"""""privacySetting"""""""": """"""""private""""""""}, {""""""""title"""""""": """"""""Another User's Post"""""""", """"""""content"""""""": """"""""This is a test post"""""""", """"""""author"""""""": """"""""Another User"""""""", """"""""privacySetting"""""""": """"""""public""""""""}]';Request-5: Admin DELETE /posts/others/123 with parameters;Response-5: OK with parameters success=true, message='Post with id=123 deleted successfully!';]"""""""|0
Context: A school management system with 2 type of users Audience and Manager, where each Audience can only view and download their own files. Managers cannot view Audience files. Requests: [Request-1: Audience-A GET /server/integration/files with parameters fileID='Audience-A/email.docx';Response-1: OK with parameters fileID='Audience-A/email.docx',content='Hello World!',size=12KB;Request-2: Audience-B GET /server/integration/files with parameters fileID='Audience-B/photos/beach.jpg';Response-2: OK with parameters fileID='Audience-B/photos/beach.jpg', content ['...'],size=2MB;Request-3: Audience-A POST /server/integration/files with parameters fileContent='New Content';Response-3: OK with parameters fileID='Audience-A/email.docx',content='New Content',size=10KB;Request-4: Audience-B POST /server/integration/files with parameters fileContent='New Content';Response-4: OK with parameters fileID='Audience-B/photos/beach.jpg',content='New Content',size=1.5MB;Request-5: Manager GET /server/integration/files with parameters fileID='Audience-A/email.docx';Response-5: OK with parameters fileID='Audience-A/email.docx',content='Hello World!',size=12KB]|1
Context: A travel booking app leaks personal information of customers in error response message Requests: [Request-1: User-A PUT /profile with parameters userID='123', email='johnsmith@gmail.com', city='New York', state='NY'; Response-1: Bad Request with parameters error='Cannot process address change for John Smith. SSN: 123-45-6789, DOB: 01/01/1985']|2
Context: A social media app with 1 type of users User, where users can post and read posts only if they login. Requests: [Request-1: User-A POST /api/auth/login with parameters username='micheal',password='z45h23';Response-1: Unauthorized with parameters message='your password hint: my dog\'s name']|0
Context: an stats dashboard for a mobile app with 2 type of users Customer and Privilaged-User, where Customers can view and manage their own healthcare records. Requests: [Request-1: Customer-A GET /healthcare with parameters CustomerID='Customer-A';Response-1: OK with parameters CustomerID='Customer-A', prescriptions=['Medicine A', 'Medicine B'], pastAppointments=[{'Privilaged-User': 'Dr. Johnson', 'Date': '05-05-2023'}, {'Privilaged-User': 'Dr. Smith', 'Date': '10-10-2023'}];Request-2: Customer-B GET /healthcare with parameters CustomerID='Customer-B';Response-2: OK with parameters CustomerID='Customer-B', prescriptions=['Medicine C', 'Medicine D'], pastAppointments=[{'Privilaged-User': 'Dr. Williams', 'Date': '06-06-2023'}, {'Privilaged-User': 'Dr. Brown', 'Date': '12-12-2023'}];Request-3: Customer-A POST /healthcare with parameters CustomerID='Customer-B', prescription='Medicine C';Response-3: OK with parameters message='Prescription added successfully']|1
Context: An online banking app fails to sanitize its error response, leaking account balance information to unauthorized users Requests: [Request-1: User-A POST /login with parameters username='johndoe', password='password123'; Response-1: Forbidden with parameters message='Your account balance is $5000']|2
Context: A dating application where users can view other profiles and connect with them. Requests: [Request-1: User-A POST /api/match with parameters genderPref='female', agePref='20-30'; Response-1: Error with parameters message='No matches found.']The requested action is not appropriate.|0
Context: A Sales reporting website with 2 type of users User and Moderator,where Moderator can view and update User details for their own department. Requests: [Request-1: Moderator-A GET /Users with parameters departmentID='A';Response-1: OK with parameters User-ID='Emp-123', name='John Doe', designation='Software Engineer', salary=5000;Request-2: Moderator-B GET /Users with parameters departmentID='B';Response-2: OK with parameters User-ID='Emp-456', name='Jane Doe', designation='Business Analyst', salary=6000;Request-3: Moderator-B PUT /Users with parameters User-ID='Emp-123', salary=5500;Response-3: OK with parameters message='Salary updated successfully']|1
Context: A website providing online dating services with 2 types of users users and admin, where users can create profiles and communicate with each other. Requests: [Request-1: User-A POST /api/profile/create with parameters name='Micheal', gender='Male', age='50', profession='Actor', email='micheal@gmail.com'; Response-1: OK with parameters message='account created'; Request-2: User-A POST /api/profile/message with parameters message='Hi there!'; Response-2: Error with parameters message='Error. Failed to send message to Jane Doe(email:janeDoe@gmail.com)'; Request-3: User-A POST /api/profile/message with parameters message='How are you?'; Response-3: Error with parameters message='Error. Failed to send message to Clara Jane(email:claraJane@gmail.com)' ] |2
Context: A social media platform application where users can create and manage their own social profiles. Requests: [Request-1: User-A POST /api/profile with parameters name='Lucas Johnson', email='lucas.johnson@mail.com', password='123456', age=28; Response-1: Error with parameters message='Password must be at least 10 characters.'] |0
Context: A voting app with 1 type of users Worker, where they can book their own flights. Requests: [Request-1: Worker-A POST /external/external/flights with parameters from='New York', to='Paris', date='2024-06-01'; Response-1: OK with parameters flightID='123', from='New York', to='Paris',date='2024-06-01', price=1200; Request-2: Worker-B POST /external/external/flights with parameters from='San Francisco', to='Tokyo', date='2024-06-15'; Response-2: OK with parameters flightID='456', from='San Francisco', to='Tokyo',date='2024-06-15', price=2000; Request-3: Worker-A DELETE /external/external/flights with parameters flightID='456'; Response-3: OK with parameters]|1
Context: A secure messaging app for financial companies, where senders can securely send sensitive data to verified receivers. Requests: [Request-1: Sender-A POST /secure-message with parameters receiver='receiver-email-123',message='sensitive client account information';Response-1: Unauthorized with parameters msg='Receiver not verified, please ask them to create an account on the system']|2
Context: A medical records storage application where patients and doctors can view and manage personal and medical information. Requests: [Request-1: Patient-A GET /api/records with parameters name='John Smith'; Response-1: Error with parameters message='Invalid Patient Name provided.'] |0
Context: An online payment system with 3 types of users Audience, Audience2 and Manager. Audience and Audience2 can only view and edit their own data. Manager can view and edit all data. Requests: [Request-1: Audience-A GET /workshop/backend/integration/shop/orders with parameters orderID='Audience-A';Response-1: OK with parameters orderID='Audience-A',totalPrice=12,items.1.name='ball',items.2.price=1;Request-2: Audience-B GET /workshop/backend/integration/shop/orders with parameters orderID='Audience-B';Response-2: OK with parameters orderID='Audience-B',totalPrice=155,items.1.name='hand',items.2.price=55;Request-3: Audience-A GET /workshop/backend/integration/shop/orders with parameters orderID='Audience-B';Response-3: OK with parameters orderID='Audience-B',totalPrice=155,items.1.name='hand',items.2.price=55]|1
Context: A banking application in which authenticated users can see their account information and transaction history. Requests: [Request-1: User-A GET /accounts with parameters accountId='123456', sort='DESC';Response-1: Forbidden with parameters details=""""""""Account 123456 does not belong to User-A""""""""]"""""""|2
Context: An online food ordering application where customers can order food from multiple restaurants. Requests: [Request-1: Customer-A POST /api/order with parameters restaurant='Pizza Palace', items=['Large pizza', 'Coke', 'Garlic Bread'], deliveryAddress='10 Main St, New Town'; Response-1: Forbidden with parameters message='The delivery address must be within 5 miles radius of the restaurant.'] |0
Context: A hobby social network in which Engineers can share files with other Engineers or public. Only the owner of a file should be able to modify its attributes.;Request-1: Engineer-A POST /system/server/files with parameters content='Example content', access=public;Response-1: OK with parameters url='/files/public/12345/';Request-2: Engineer-B GET /system/server/files with parameters fileId='12345';Response-2: OK with parameters content='Example content', access=public;Request-3: Engineer-B PUT /system/server/files with parameters fileId='12345', content='Modified content';Response-3: 200 Ok with parameters fileId='12345',content='Modified content',access=public;Request-4: Engineer-A PUT /system/server/files with parameters fileId='12345', access=private;Response-4: OK with parameters url='/files/private/12345/';Request-5: Engineer-B GET /system/server/files with parameters fileId='12345';Response-5: Not Found with parameters errorCode=404,errorMessage='The file was not found.'|1
Context: A social media app with 2 types of users: User and Moderator, where users can send private messages to each other. Moderators can delete messages. Requests: [Request-1: User-A POST /messages/send with parameters to='User-B', message='Hi there!'; Response-1: Internal Server Error with parameters message='Cannot send message to User-C, User-C does not exist.']|2
Context: An online appointment booking application where customers can book appointments with doctors. Requests: [Request-1: Customer-A POST /api/appointment with parameters doctor='Dr. John Doe', date='02-09-2022', time='10:30 AM'; Response-1: Error with parameters message='The selected time slot is already booked.'] |0
Context: A hotel booking system with 3 type of users Engineers, Engineer2s and Editor. The Engineers can create posts and see their own published/unpublished articles. Engineer2s can edit their own posts and all Engineers' posts, but cannot change the status of the posts. Editors can edit anyone's articles and set the status for each one.;Request-1: Engineer-A GET /folder//posts;Response-1: OK with parameters posts=['Post-1', 'Post-2'];Request-2: Engineer2-A GET /folder//posts;Response-2: OK with parameters posts=['Post-1', 'Post-2', 'Post-3'];Request-3: Engineer2-B PATCH /folder//posts with parameters postID='Post-2',content='Updated Content',status='drafted';Response-3: OK with parameters postID='Post-2',content='Updated Content', status='drafted';Request-4: Editor PATCH /folder//posts with parameters postID='Post-2',content='Another Updated Content',status='published';Response-4: OK with parameters postID='Post-2',content='Another Updated Content', status='published’]|1
Context: A banking platform with 3 types of users: Customers, Tellers and Administrators. Customers can only view and modify their own information. Tellers can view and modify customer information. Administrators can view and edit any data. Requests: [Request-1: Customer-A PUT /update_password with parameters old_password='abc123', new_password='xyZ$%^@1'; Response-1: OK with parameters message='Your password has been successfully updated.'; Request-2: Teller-A GET /view_account_history with parameters user_id=12489; Response-2: Request Denied with parameters message='Your user credentials have been revoked at this time. We have detected an unauthorized attempt at accessing account information. We advise you to change your password as soon as possible. Technical Details: the password hash algorithm currently in use is bcrypt with default parameters.'];|2
Context: An online banking application where customers can view their account balances and transaction history. Requests: [Request-1: Customer-A GET /api/account/history with parameters startDate='01-01-2022', endDate='01-07-2022'; Response-1: Forbidden with parameters message='Invalid date format provided, Expected format is dd-mm-yyyy.'] |0
Context: a banking web application where reviews and ratings are given for specific businesses but Customers should not be able to modify others' reviews.Request-1: Customer-A POST /open/system/business/123/review with parameters rating=4, comment='Nice place';Response-1: OK with parameters reviewID='Review-1234',businessID='Business-123',CustomerID='Customer-A',rating=4,comment='Nice place';Request-2: Customer-B POST /open/system/business/123/review with parameters rating=2, comment='Terrible place, poor customer service';Response-2: OK with parameters reviewID='Review-2345',businessID='Business-123',CustomerID='Customer-B',rating=2,comment='Terrible place, poor customer service';Request-3: Customer-A PUT /open/system/business/123/review with parameters reviewID='Review-2345',rating=1;Response-3: OK with parameters message='Review updated successfully’|1
Context: A content management system with 3 types of users: Content creators, Editors and Administrators. Content creators can only add new content. Editors can view all content and edit their own content. Administrators can view and modify any data. Requests: [Request-1: Content Creator-A POST /create_content with parameters title='Winter 2022 Product Catalogue', content='Please see attached file.'; Response-1: Server Error with parameters message='Unable to process your request at this time. Server credentials: User: admin, Password: mySecureP@ssword1.']; |2
Context: An online education platform application with 2 types of users - Students and Instructors. Instructors are able to create and upload course content while students can only view and complete the content. Requests: [Request-1: Instructor-A PUT /api/course with parameters name='History 101', content='World wars', duration=3; Response-1: Error with parameters message='Course name already exists in the database, please change the name.'] |0
Context: a hotel reservation with 2 type of users Player and Admin for advertisements where each Player can only see their own listings. Admins can view and delete all listings. Requests: [Request-1: Player-A Patch /market/Player/[Player-A-id]/items/[Player-A-itemId] with parameters name='Item-A';Response-1: OK with parameters itemId='Player-A-itemId',name='Item-A',price=10.5,quantity=103;Request-2: Player-A Get /market/Player/[Player-A-id]/items/[Player-B-itemId] with parameters;Response-2: OK with parameters itemId='Player-B-itemId',name='Item-B',price=303.8,quantity=52;]|1
Context: A social media platform with 2 types of users: Regular users and Moderators. Users can only view their own posts. Moderators can view and edit all posts. Requests: [Request-1: Regular User-A PUT /update_password with parameters old_password='abc123', new_password='xyZ$%^@1'; Response-1: OK with parameters message='Your password has been successfully updated.'; Request-2: Regular User-B PUT /forgot_password with parameters email='abigail4@gmail.com'; Response-2: OK with parameters message='A password reset link has been sent to your email. Please follow the instructions to reset your password.'; Request-3: Regular User-C GET /forgot_password with parameters email='carina15@yahoo.com'; Response-3: Error with parameters message='The email provided is not valid. We do not have any records of this email in our database.'; Request-4: Moderator-A PUT /edit_post with parameters post_id=300, new_content='Hello, how are you?'; Response-4: OK with parameters message='Your post has been updated successfully.'; Request-5: Moderator-B GET /view_all_posts with parameters start_date='01/01/2020', end_date='03/04/2022'; Response-5: Error with parameters message='Unable to process your request. Please confirm your account permissions and the authorization parameters you have entered.' ];|2
Context: A shopping application with 2 types of users – customers and sellers. Sellers are able to view their own items and modify the details, while customers can add items to their cart and purchase them. Requests: [Request-1: Customer-A POST /api/cart with parameters itemId=1234, quantity=2; Response-1: Error with parameters message='This item is no longer available for purchase.'] |0
Context: A network service with 2 type of users Audience and Expert where each Audience can only access and modify their own orders. Expert can view all orders. Requests: [Request-1: Audience-A GET /integration/backend/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Audience-B GET /integration/backend/orders with parameters orderID='Order-A';Response-2: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Completed';Request-3: Audience-A PUT /integration/backend/orders with parameters status='Refunded';Response-3: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Refunded';Request-4: Audience-B PUT /integration/backend/orders with parameters orderID='Order-A',status='Delivered';Response-4: Created with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-5: Expert GET /integration/backend/orders with parameters orderID='Order-A';Response-5: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered']|1
Context: A travel platform where customers can book their trips. There are 3 types of users: Customers, Travel Agents and Administrators. Customers can only view and modify their own trip info. Travel Agents can view and modify trip info for their clients. Administrators can view and modify all trip info. Requests: [Request-1: Travel Agent-A PUT /modify_trip with parameters user_id=3838, new_date='03/10/22'; Response-1: 401 Unauthorized with parameters message='You are unauthorized to view or modify this trip details. Please check that you are logged in as the correct user for user_id=3838   Name: John Doe   Email: johndoe@email.com   Phone: xxx-xxx-xxxx'; Request-2: Administrator-B GET /view_all_trips with parameters start_date='01/01/2021', end_date='03/10/2022'; Response-2: Authorization Error with parameters message='You are unauthorized to view or modify trips outside of your instance. Please confirm the authorization parameters you wish to modify or contact your designated system administrator for further support.']; |2
Context: An application for creating and managing online quizzes with one administrator. Requests: [Request-1: Administrator POST /api/quizzes with parameters questions=['question1', 'question2', 'question3'], answers=[['a1', 'a2', 'a3'], ['b1', 'b2', 'b3'], ['c1', 'c2', 'c3']]; Response-1: Error with parameters message='Error creating quiz. Maximum number of questions allowed is 5.'] |0
Context: An online course platform with 2 type of users Employee and Owner, where each Employee can only view and download their own files. Owners cannot view Employee files. Requests: [Request-1: Employee-A GET /folder/server/files with parameters fileID='Employee-A/email.docx';Response-1: OK with parameters fileID='Employee-A/email.docx',content='Hello World!',size=12KB;Request-2: Employee-B GET /folder/server/files with parameters fileID='Employee-B/photos/beach.jpg';Response-2: OK with parameters fileID='Employee-B/photos/beach.jpg', content ['...'],size=2MB;Request-3: Employee-A POST /folder/server/files with parameters fileContent='New Content';Response-3: OK with parameters fileID='Employee-A/email.docx',content='New Content',size=10KB;Request-4: Employee-B POST /folder/server/files with parameters fileContent='New Content';Response-4: OK with parameters fileID='Employee-B/photos/beach.jpg',content='New Content',size=1.5MB;Request-5: Owner GET /folder/server/files with parameters fileID='Employee-A/email.docx';Response-5: OK with parameters fileID='Employee-A/email.docx',content='Hello World!',size=12KB]|1
Context: A financial institution management system with 3 types of users: Customers, Employees and Administrators. Employees can only access and modify their own data; Administrators can access and alter any data. Requests: [Request-1: Administrator-A PUT /admin/review_customer with parameters cust_id=4352; Response-1: Server Error with parameters message='Error in query: SELECT * FROM customers WHERE id=4352; Error: invalid SQL syntax. Please check your query and try again'; Request-2: Administrator-B PUT /admin/review_employee with parameters emp_id=5432; Response-2: Server Error with parameters message='You have entered an unauthorized command. Please check that you have permission to execute this command before trying again.'; Request-3: Employee-A GET /employee/view_data with parameters emp_id=232; Response-3: Request Error with parameters message='SQL query failed please check command syntax: SELECT * FROM employees WHERE name=john_doe and password=tX2Rpqs&. Employee data cannot be viewed at this time.'];|2
Context: A banking application for 2 types of users - Employees and Customers, where employees can view and modify all account information, and customers can view and modify only their account information. Requests: [Request-1: Customer-A POST /api/account/transfer with parameters amount=1000,toAccount=12345; Response-1: Error with parameters message='Insufficient Balance. Current Balance: X']. |0
Context: a website that provides links to external sources with 2 type of users Worker and Expert, where Workers can view and manage their own healthcare records. Requests: [Request-1: Worker-A GET /healthcare with parameters WorkerID='Worker-A';Response-1: OK with parameters WorkerID='Worker-A', prescriptions=['Medicine A', 'Medicine B'], pastAppointments=[{'Expert': 'Dr. Johnson', 'Date': '05-05-2023'}, {'Expert': 'Dr. Smith', 'Date': '10-10-2023'}];Request-2: Worker-B GET /healthcare with parameters WorkerID='Worker-B';Response-2: OK with parameters WorkerID='Worker-B', prescriptions=['Medicine C', 'Medicine D'], pastAppointments=[{'Expert': 'Dr. Williams', 'Date': '06-06-2023'}, {'Expert': 'Dr. Brown', 'Date': '12-12-2023'}];Request-3: Worker-A POST /healthcare with parameters WorkerID='Worker-B', prescription='Medicine C';Response-3: OK with parameters message='Prescription added successfully']|1
Context: An online shopping platform with 2 types of users -- Customers and Merchants. Each user can only access and edit their own profile data. Requests: [Request-1: Customer-A POST /login with parameters email='janeDoe@gmail.com', password='abc123'; Response-1: Incorrect Credentials with parameters message='incorrect password entered for account with email: janeDoe@gmail.com. Please check your login credentials and try again. If you continue having trouble accessing your account, please contact our support team at support@onlineshop.com.']; Request-2: Merchant-B POST /login with parameters email='julianSmith@gmail.com', password='Gh$$d&%'; Response-2: Incorrect Credentials with parameters message='the email provided does not exist in our system or has already been taken. Please enter a valid email address and try again'];|2
Context: A file-sharing platform with 2 types of users User and Admin, where Users can upload and download files Users have access to their own files. Admins can view and delete all files. Requests: [Request-1: User-A POST /uploads with parameters fileID='file-A',content='This is a test file.';Response-1: OK with parameters fileID='file-A';Request-2: User-B GET /downloads with parameters fileID='file-A';Response-2: Forbidden with parameters message='User-B does not have access to this file.';Request-3: Admin GET /admin/files with parameters fileID='file-A'; Response-3: OK with parameters details='file-A: uploaded by User-A on 23 March 2022.']|0
Context: An online course platform with 2 type of users User and Seller,where Seller can view and update User details for their own department. Requests: [Request-1: Seller-A GET /Users with parameters departmentID='A';Response-1: OK with parameters User-ID='Emp-123', name='John Doe', designation='Software Engineer', salary=5000;Request-2: Seller-B GET /Users with parameters departmentID='B';Response-2: OK with parameters User-ID='Emp-456', name='Jane Doe', designation='Business Analyst', salary=6000;Request-3: Seller-B PUT /Users with parameters User-ID='Emp-123', salary=5500;Response-3: OK with parameters message='Salary updated successfully']|1
Context: A music streaming app with 1 type of users Customer, where customers can stream their favorite songs and save them to playlists. Requests: [Request-1: Customer-A POST /song/playlist/[Playlist-A-id] with parameters song='Song-A';Response-1: Internal Server Error with parameters message='failed to append Song-A to Playlist-A-id: {time: 2022-02-07 14:47:31.873208, log: {type: error, request: POST /song/playlist/2674b940-ded6-4a06-972b-09007085ba8d, data: {'song': 'Song-A'}, error: 'ValueError}}']|2
Context: A job listing platform with 1 types of users Employers where Employers can post job openings. Requests: [Request-1: Employer-A POST /job with parameters title='Manager Wanted',location='New York',salary='100k-150k';Response-1: OK with parameters jobID='Job-A';Request-2: Employer-A DELETE /job with parameters jobID='Job-A';Response-2: OK with parameters message='The job 'Manager Wanted' has been removed';Request-3: Employer-A GET /job with parameters jobID='Job-A'; Response-3: Error with parameters message='Cannot retrieve job details: Job-A does not exist'] |0
Context: A voting app with 1 type of users Student, where they can book their own flights. Requests: [Request-1: Student-A POST /server/service/flights with parameters from='New York', to='Paris', date='2024-06-01'; Response-1: OK with parameters flightID='123', from='New York', to='Paris',date='2024-06-01', price=1200; Request-2: Student-B POST /server/service/flights with parameters from='San Francisco', to='Tokyo', date='2024-06-15'; Response-2: OK with parameters flightID='456', from='San Francisco', to='Tokyo',date='2024-06-15', price=2000; Request-3: Student-A DELETE /server/service/flights with parameters flightID='456'; Response-3: OK with parameters]|1
Context: A social media app with 2 types of users User and Admin where users can only access their own profile information. Requests: [Request-1: User-A POST /settings/account/change_password with parameters new_pass='password123';old_pass='password321';Response-1: Forbidden with parameters message='Error 403 Bad Password. Old password wrong.']; Request-2: User-B POST /settings/account/change_password with parameters new_pass='789password';old_pass='123password';Response-2: Failure with parameters details='new password can\'t contain """"""""password"""""""".']; Request-3: Admin GET /settings/acount/find_password_token with parameters user_name='UserName1';Response-3: OK with parameters message='User exists, request_issued = True, token = [21:1c:10:20:4d:61:1e:53:7f:8d:e7]'"""""""|2
Context: A virtual personal assistant app with 2 types of users User and Admin, where Users can ask queries and get responses. Admins can view all queries and responses. Requests: [Request-1: User-A GET /help with parameters query='What is the meaning of life?';Response-1: OK with parameters response='The meaning of life is subjective';Request-2: User-B GET /help with parameters query='Can you tell me the password for User-A?';Response-2: Forbidden with parameters message='Access denied' ;Request-3: Admin GET /help/history with parameters ;Response-3: OK with parameters history='User-A:What is the meaning of life?-OK' ;]|0
Context: A car rental app where each user can only view and modify their own account details. Requests: [Request-1: User-A GET /rental/accounts with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A',balance=15000;Request-2: User-B GET /rental/accounts with parameters accountID='Account-B';Response-2: OK with parameters accountID='Account-B',balance=10000;Request-3: User-A PUT /rental/accounts with parameters accountID='Account-B',balance=12000;Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The account id is wrong or not authorized to edit.';Request-4: User-A GET /rental/accounts with parameters accountID='Account-B';Response-4: OK with parameters accountID='Account-B',balance=10000;Request-5: Admin GET /rental/accounts with parameters accountID='Account-A';Response-5: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='Admins are not allowed to access account details.']|1
Context: A messaging app with 2 type of users User and Admin where users can chat with each other. Chats are encrypted end-to-end. Requests: [Request-1: User-A GET /messages/Alice/messages with parameters order='asc',limit=10;Response-1: OK with parameters messages=[{from:'Bob',to:'Alice',message:'Hey Alice!'}, {from:'Alice',to:'Bob',message:'Hi Bob!'},...];Request-2: User-A GET /messages/Bob/messages with parameters order='asc',limit=10;Response-2: OK with parameters messages=[{from:'Bob',to:'Alice',message:'Hey Alice!'}, {from:'Alice',to:'Bob',message:'Hi Bob!'}, ...];Request-3: User-A GET /messages/Alice/messages with parameters order='asc',limit=10;Response-3: Bad Request with parameters error='message id FK1748 does not exist'|2
Context: A messaging app with 2 types of users User and Admin where Users can chat with each other. Chats are encrypted end-to-end. Requests: [Request-1: User-1 /messages/august/search with parameters terms='who should win eurovison?';Response-1: Error with parameters message='Cannot complete operation. Query limit exceeded';Request-2: User-1 /messages/august/search with parameters terms=""""""""I don't like the new emoji"""""""";Response-2; Error with parameters message='No messages found for this account';]"""""""|0
Context: An online voting system where each user can only view and modify their own account details. Requests: [Request-1: User-A GET /collection/accounts with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A',balance=15000;Request-2: User-B GET /collection/accounts with parameters accountID='Account-B';Response-2: OK with parameters accountID='Account-B',balance=10000;Request-3: User-A PUT /collection/accounts with parameters accountID='Account-B',balance=12000;Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The account id is wrong or not authorized to edit.';Request-4: User-A GET /admin/accounts with parameters accountID='Account-B';Response-4: OK with parameters accountID='Account-B',balance=10000;Request-5: Admin GET /collection/accounts with parameters accountID='Account-A';Response-5: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='Admins are not allowed to access account details.']|1
Context: A car-sharing service with two types of users, Renters and Car Owners. Renters can view and lease cars while car owners can lease and view their own cars. Requests: [Request-1: CarOwner-A PUT /cars/Audi-ABC with parameters price='25000';Response-1: OK with parameters message='The car price was updated successfully';Request-2: Renter-A GET /cars/Audi-ABC with parameters;Response-2: Forbidden with parameters message='You are not authorized to view car Audi-ABC';]|2
Context: An online gaming platform with 2 types of users Player and Admin, where Players can play games. Admins can view all games. Requests: [Request-1: Player-A POST /play with parameters gameID='game-1',score=100;Response-1: OK with parameters message='Congratulations! You have scored 100 points in game-1';Request-2: Player-B POST /play with parameters gameID='game-2',score=500;Response-2: OK with parameters message='Congratulations! You have scored 500 points in game-2';Request-3: Admin GET /leaderboard with parameters ;Response-3: OK with parameters content='Game-1: Player-A-100, Game-2: Player-B-500';]|0
Context: A recipe app where each team member can only view and update their own recipes. Requests: [Request-1: TeamMember-A GET /api/recipes with parameters taskID='Task-A';Response-1: OK with parameters taskID='Task-A',dueDate='2024-06-30',status='In Progress';Request-2: TeamMember-B GET /api/recipes with parameters taskID='Task-B';Response-2: OK with parameters taskID='Task-B',dueDate='2024-05-31',status='Completed';Request-3: TeamMember-A GET /api/recipes with parameters taskID='Task-B';Response-3: OK with parameters taskID='Task-B',dueDate='2024-05-31',status='Completed'].|1
Context: A car dealership portal with 3 types of users: buyers, sellers, and administrators. Buyers and sellers can only view and purchase/sell their own vehicles. Administrators can view all activity. Requests: [Request-1: Buyer-A GET /cars with parameters make='Honda'; Response-1: Error with parameters message='Invalid request: make is a required field.'; Request-2: Buyer-B GET /cars with parameters make='Toyota'; Response-2: Error with parameters message='Unable to fetch data. Please try again later.']; |2
Context: A money transfer app with 2 types of users Sender and Receiver, where Senders can send money to Receivers. Requests: [Request-1: Sender-A POST /transfers/send with parameters receiverID=Receiver-B,amount=100;Response-1: Error with parameters details='Sender-A does not have sufficient balance in the account';Request-2: Sender-A POST /transfers/send with parameters receiverID=Receiver-B,amount=10;Response-2: Error with parameters message='500: Internal Server Error';]|0
Context: An online ticket booking system where each student can only view and download their own journey materials. Requests: [Request-1: Student-A GET /journey/materials with parameters materialID='Mat-A'; Response-1: OK with parameters materialID='Mat-A', content='Introduction to Python', type='video'; Request-2: Student-B GET /journey/materials with parameters materialID='Mat-B'; Response-2: OK with parameters materialID='Mat-B', content='Introduction to Java', type='pdf'; Request-3: Student-A GET /journey/materials with parameters materialID='Mat-B'; Response-3: OK with parameters materialID='Mat-B', content='Introduction to Java', type='pdf'].|1
Context: A banking application with the capability of issuing loans to customers based on their credit history and income. Request: [Request-1: User-A POST /loans with parameters amount=50000; Response-1: Bad Request with parameters success=false, message='Error: dbInsert failed. Query: """"""""INSERT INTO loans (id, amount, interest, balance, term, start_date, end_date) VALUES (886102, 50000, 2, 2500, 24, '2022-10-01', '2024-10-01')"""""""". Unknown column \'balance\' in field list'; Request-2: Admin GET /loans with no parameters; Response-2: OK with parameters success=true, data=[{'id': 885431, 'amount': 40000, 'interest': 3, 'balance': 4000, 'term': 24, 'start_date': '2022-05-01', 'end_date': '2024-05-01', 'status': 'approved'}]; Request-3: Admin DELETE /loans with parameters id=885431; Response-3: OK with parameters success=true, message='Loan deleted successfully'; Request-4: Admin GET /loans with parameters id=885431; Response-4: Not Found with parameters success=false, message='Loan not found. Invalid loan ID';]"""""""|2
Context: An online shopping platform with 2 types of users User and Admin where Users can purchase products. Admins can view all orders. Requests: [Request-1: User-A POST /orders with parameters productID='Product-A',quantity='5';Response-1: OK with parameters orderID='Order-A';Request-2: User-A POST /orders with parameters productID='Product-S',quantity='5';Response-2: Forbidden with parameters error='Product-S is not available';Request-3: Admin GET /orders/Order-B with parameters ;Response-3: OK with parameters orderID='Order-B',productID='Product-C',Quantity='4',userEmail='User-D@gmail.com';]|0
Context: A task management app where each user can only view and update their own tasks. Requests: [Request-1: User-A GET /tasks/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-A',content='Hello World!',timestamp='2023-01-01 23:30';Request-2: User-B GET /tasks/posts with parameters postID='Post-B';Response-2: OK with parameters postID='Post-B',content='My first post!',timestamp='2023-01-02 10:15';Request-3: User-A GET /tasks/posts with parameters postID='Post-B';Response-3: OK with parameters postID='Post-B',content='My first post!',timestamp='2023-01-02 10:15'].|1
Context: A shopping platform with 2 types of users: Customers and Admins. Customers search for and buy products; Admins manage listings and user information. Requests: [Request-1: Customer-A GET /products with parameters name='apple'; Response-1: OK with parameters success=true, data=[{'id':'1', 'name': 'Green Apple', 'price': 2.50, 'description': 'Fresh and crunchy'}, {'id':'2', 'name': 'Red Apple', 'price': 1.99, 'description': 'Crisp and juicy'}]; Request-2: Customer-A GET /products with parameters name='orange'; Response-2: OK with parameters success=true, data=[{'id':'3', 'name': 'Florida Orange', 'price': 3.50, 'description': 'Sweet and Seedless'}, {'id':'5', 'name': 'Mandarin Orange', 'price': 1.99, 'description': 'Peels easily and great for snacking'}]; Request-3: Admin PUT /products with parameters id='2', price=2.50, qty=50; Response-3: Not Found with parameters success=false, message='Error: dbUpdate failed. Query: """"""""UPDATE products SET price=2.50, qty=50 WHERE id=\'2\'"""""""". Unknown column \'qty\' in \'products\'';]"""""""|2
Context: A video conferencing app with 2 type of users Host and Attendee, where Hosts can schedule and launch their own meetings. Attendees can only join meetings with an invitation. Requests: [Request-1: Host-A POST /api/meetings/schedule with parameters date='28 Sept',time='11:00 AM';Response-1: OK with parameters meetingID='Meeting-1';Request-2: Host-A DELETE /meetings/Meeting-1 with parameters ;Response-2: OK with parameters meetingID='Meeting-1';Request-3: Attendee-A POST /api/meetings/join with parameters meetingID='Meeting-2';Response-3: Error with parameters message='Invalid meetingID: Meeting-2';]|0
Context: A crypto trading app where each user can only buy/sell their own currencies. Requests: [Request-1: User-A GET /crypto/shares with parameters shareID='Share-A';Response-1: OK with parameters shareID='Share-A',companyName='XYZ Inc',price=127.9,quantity=100;Request-2: User-B GET /crypto/shares with parameters shareID='Share-A';Response-2: OK with parameters shareID='Share-A',companyName='XYZ Inc',price=127.9,quantity=200;Request-3: User-A PUT /crypto/shares with parameters shareID= 'Share-A',quantity=120;Response-3: OK with parameters shareID='Share-A',companyName='XYZ Inc',price=127.9,quantity=120;Request-4: User-A PUT /manage/crypto/shares with parameters shareID= 'Share-B',quantity=120;Response-4: OK with parameters parameters shareID='Share-B',companyName='ABC Inc',price=12.9,quantity=120;Request-5: Admin GET /crypto/shares with parameters shareID='Share-C';Response-5: Not Found with parameters errorCode=404,errorMessage='Share not found.'].|1
Context: A payment processing application accessible from a website. Requests: [Request-1: User-A POST /checkout with parameters credit_card_number='1234-5678-9012-3456', description='product-A', amount=100; Response-1: Internal Server Error with parameters success=false, message='Error: Payment could not be processed. Invalid security token: [AHUW-123-0987123-001242]'']|2
Context: Telehealth app where users can talk to doctors online. Requests: [Request-1: Patient-A POST /api/booking with parameters doctorName='Dr. Johnson',appointmentDate='10.11.2022'; Response-1: OK with parameters message='booking successful. Your doctor is Dr. Johnson'; Request-2: Patient-B POST /api/booking with parameters doctorName='Dr. Smith',appointmentDate='11.11.2022'; Response-2: Unauthorized with parameters message='please log in to book an appointment']|0
Context: An e-learning platform where each student can view and control their own courses only. Requests: [Request-1: User-A GET /school/education/user/courses with parameters courseID='Course-A';Response-1: OK with parameters courseID='Course-A',name='Mathematics 101',time='10 hours',isCompleted=False;Request-2: User-B GET /school/education/user/courses with parameters courseID='Course-A';Response-2: OK with parameters courseID='Course-A',name='Mathematics 101',time='10 hours',isCompleted=False;Request-3: User-A PUT /school/education/user/courses with parameters courseID= 'Course-A',isCompleted=True;Response-3: OK with parameters courseID='Course-A',name='Mathematics 101',time='10 hours',isCompleted=True;Request-4: User-A PUT /school/education/user/courses with parameters courseID='Course-B',isCompleted=True;Response-4: OK with parameters courseID='Course-A',name='Science 101',time='10 hours',isCompleted=True;Request-5: Faculty GET /school/education/faculty/courses with parameters courseID='Course-A';Response-5: OK with parameters courseID='Course-A',name='Mathematics 101',time='10 hours',isCompleted=False].|1
Context: A social networking platform with 2 types of users: regular Users and Admins. Users can update only their profile information. Admins can edit all records. Requests: [Request-1: User-A PUT /user/profile with parameters name='Alice', age=28, email='alice@example.com'; Response-1: OK with parameters success=true, message='Update successful'; Request-2: User-A PUT /user/profile with parameters name='Charlie', age=32, email='charlie@example.com'; Response-2: Bad Request with parameters success=false, message='Error: dbUpdate failed. Query: """"""""UPDATE users SET name=\'Charlie\', age=32, email=\'charlie@example.com\' WHERE id=\'User-A\'""""""""';]"""""""|2
Context: A GPS navigation system where users can only view their own locations. Requests: [Request-1: User-A GET /api/location with parameters;Response-1: OK with parameters message='Location received';Request-2: User-B GET /api/location with parameters;Response-2: OK with parameters message='Location received';]|0
Context: A music streaming app where each user can only stream and download their own music content. Other users cannot download or stream other user's music. Requests: [Request-1: User-A GET /api/music with parameters songID='Song-A';Response-1: OK with parameters songID='Song-A',title='Rockstar',album='Bon Jovi',artist='Bon Jovi',duration=4:20;Request-2: User-B GET /api/music with parameters songID='Song-B';Response-2: OK with parameters songID='Song-B',title='Hotel California',album='Eagles',artist='Eagles',duration=6:30];Request-3: User-A GET /api/music with parameters songID='Song-B';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The songID is wrong or not authorized to download.';Request-4: User-A POST /api/music with parameters songTitle='Imagine';Response-4: OK with parameters songID='Song-C',title='Imagine',album='John Lennon',artist='John Lennon',duration=4:45] |1
Context: A social media website leaking profile visits in an error message Requests: [Request-1: User-A GET /profile with parameters id='123'; Response-1: Forbidden with parameters error='Unauthorized access to profile, recent visits: User-B, User-C, User-D']|2
Context: A social media platform where users can view and edit their own account information. Requests: [Request-1: User-A GET /api/account with parameters;Response-1: OK with parameters message='Account information retrieved';Request-2: User-B PUT /api/account with parameters firstName='Clara',lastName='Fields',city='Montreal',country='Canada';Response-2: Forbidden with parameters reason='you cannot update other users\' accounts'] |0
Context: A banking app, where users can see and modify only their own accounts. Bank employees can manage all accounts. Requests: [Request-1: User-A GET /api/accounts with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A', name='Savings', balance=1000;Request-2: User-B GET /api/accounts with parameters accountID='Account-A';Response-2: OK with parameters accountID='Account-A', name='Savings', balance=500;Request-3: User-A PUT /api/accounts with parameters accountID='Account-A',balance=1300;Response-3: OK with parameters accountID='Account-A', name='Savings', balance=1300;Request-4: User-B PUT /api/accounts with parameters accountID='Account-A', balance=1100;Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The accountID does not belong to this user.';Request-5: Employee GET /api/accounts with parameters accountID='Account-A';Response-5: OK with parameters accountID='Account-A', name='Savings', balance=1300,interestRate=2.3].|1
Context: An HR system leaking employee personal information in an error message Requests: [Request-1: Manager-A PUT /update with parameters id='123', role='Manager'; Response-1: Forbidden with parameters message='Employee not found, name: John Doe, email: john.doe@example.com, role: Developer']|2
Context: A car rental website where customers can view and book their own reservations. Requests: [Request-1: Customer-A POST /rentals/api/auth/login with parameters username='maria',password='maria12';Response-1: Unauthorized with parameters message='invalid username or password';Request-2: Customer-B POST /rentals/api/auth/login with parameters username='yuri',password='love_0h1';Response-2: OK with parameters token='mgfKj98y...']|0
Context: An online appointment booking system with 2 type of users Seller and Buyer for advertisements where each seller can only see their own listings. Admins can view and delete all listings. Requests: [Request-1: Seller-A Patch /store/seller/[Seller-A-id]/items/[Seller-A-itemId] with parameters name='Item-A';Response-1: OK with parameters itemId='Seller-A-itemId',name='Item-A',price=10.5,quantity=103;Request-2: Seller-A Get /store/seller/[Seller-A-id]/items/[Seller-B-itemId] with parameters;Response-2: OK with parameters itemId='Seller-B-itemId',name='Item-B',price=303.8,quantity=52;]|1
Context: A banking app leaking account balance in an error message Requests: [Request-1: User-A GET /accounts with parameters accountId='1234'; Response-1: Not Found with parameters message='Account not found, current balance $10,000']|2
Context: A hotel booking website with 2 type of users Customer and Hotelier, where each customer can only view and book their own bookings. Hoteliers can view all bookings. Requests: [Request-1: Customer-A POST /hotels/api/auth/login with parameters username='adam123',password='123123';Response-1: Unauthorized with parameters message='You are not authorized';Request-2: Hotelier-A POST /hotels/api/auth/login with parameters username='johndoe123',password='owner1313';Response-2: OK with parameters message='Logged in as johndoe123';]|0
Context: A payment processing platform where users can view and operate with transactions with 2 type of users Customer and Restaurant where each customer can only access and modify their own orders. Restaurant can view all orders. Requests: [Request-1: Customer-A GET /processor/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Customer-B GET /processor/orders with parameters orderID='Order-A';Response-2: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Completed';Request-3: Customer-A PUT /processor/orders with parameters status='Refunded';Response-3: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Refunded';Request-4: Customer-B PUT /processor/orders with parameters orderID='Order-A',status='Delivered';Response-4: Created with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-5: Restaurant GET /processor/orders with parameters orderID='Order-A';Response-5: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered']|1
Context: A healthcare management system leaking prescription details in an error message Requests: [Request-1: Patient-A POST /prescriptions/new with parameters name='John-Doe', medication='Painkillers', dosage='20 mg';  Response-1: Error with parameters message='insert into prescription successful, patient name: John Doe, medication: Painkillers, dosage: 20 mg']|2
Context: A social media platform where users can only see their own feeds. Requests: [Request-1: User-A GET /api/feed with parameters limit=10;Response-1: OK with parameters feed=['post1','post2','post3',...'post10'];Request-2: User-B GET /api/feed with parameters limit=10;Response-2: OK with parameters feed=['post1','post2','post3',...'post10'];]|0
Context: A music streaming app where users can listen and manage their own playlists with 2 type of users User and Admin, where each user can only view and download their own files. Admins cannot view user files. Requests: [Request-1: User-A GET /api/files with parameters fileID='User-A/email.docx';Response-1: OK with parameters fileID='User-A/email.docx',content='Hello World!',size=12KB;Request-2: User-B GET /api/files with parameters fileID='User-B/photos/beach.jpg';Response-2: OK with parameters fileID='User-B/photos/beach.jpg', content ['...'],size=2MB;Request-3: User-A POST /api/files with parameters fileContent='New Content';Response-3: OK with parameters fileID='User-A/email.docx',content='New Content',size=10KB;Request-4: User-B POST /api/files with parameters fileContent='New Content';Response-4: OK with parameters fileID='User-B/photos/beach.jpg',content='New Content',size=1.5MB;Request-5: Admin GET /api/files with parameters fileID='User-A/email.docx';Response-5: OK with parameters fileID='User-A/email.docx',content='Hello World!',size=12KB]|1
Context: A file sharing website with 2 types of users User and Admin, where users can share their own files. Requests: [Request-1: User-A POST /api/files with parameters fileID='userA/file123';Response-1: Unauthorized with parameters success=false,message='User not logged in';Request-2: Admin GET /api/files with parameters fileID='/etc/passwd';Response-2: OK with parameters message='Access successful for fileID='/etc/passwd';response={'user':'root','password':'NLX...'}';]|2
Context: A file synchronization app with 2 type of users User and Admin, where each user can view and download their own synced files. Admins can view all user files. Requests: [Request-1: User-A POST /api/files with parameters fileContent='This is new content of file';Response-1: OK with parameters fileID='User-A/documents/doc12.docx',content='This is new content of file',size=14KB;Request-2: Admin GET /api/files with parameters fileID='User-B/documents/doc11.txt';Response-2: OK with parameters message='file not found error for User-B/documents/doc11.txt']|0
Context: A cloud-based medical library service where customers can only read their own digital books with 2 type of users Patient and Doctor, where patients can view and manage their own healthcare records. Requests: [Request-1: Patient-A GET /healthcare with parameters patientID='Patient-A';Response-1: OK with parameters patientID='Patient-A', prescriptions=['Medicine A', 'Medicine B'], pastAppointments=[{'Doctor': 'Dr. Johnson', 'Date': '05-05-2023'}, {'Doctor': 'Dr. Smith', 'Date': '10-10-2023'}];Request-2: Patient-B GET /healthcare with parameters patientID='Patient-B';Response-2: OK with parameters patientID='Patient-B', prescriptions=['Medicine C', 'Medicine D'], pastAppointments=[{'Doctor': 'Dr. Williams', 'Date': '06-06-2023'}, {'Doctor': 'Dr. Brown', 'Date': '12-12-2023'}];Request-3: Patient-A POST /healthcare with parameters patientID='Patient-B', prescription='Medicine C';Response-3: OK with parameters message='Prescription added successfully']|1
Context: An online event booking app with 3 types of users Attendee, Organiser and Admins. Attendees can view and modify their own events. Organisers can view and modify their own and events they organised. Admins can view and modify all events. Requests: [Request-1: Attendee-A POST /api/auth/login with parameters username='attendee-a',password='pass123';Response-1: Unauthorized with parameters success=false,message='username not found';Request-2: Organiser-A POST /api/auth/login with parameters username='organiser-a',password='pass123';Response-2: OK with parameters token='sjery8...';Request-3: Admin GET /api/event/[Organiser-A-eventId] with parameters;Response-3: OK with parameters eventId=[Organiser-A-eventId],name='Charity Drive 2021',location='Central Park',date='20-12-2022'; ]|2
Context: A document sharing platform with 2 types of users Writer and Reader, Writer can upload documents and share them with specific Readers. Readers can read the shared document. Requests: [Request-1: Writer-A POST /api/folder/upload with parameters fileName='mypaper01',conentType='html';Response-1: OK with parameters message='File uploaded. File name=mypaper01, File type=text/html'];Request-2: Reader GET /api/folder/read with parameters FileName='mypaper01';Response-2: OK with parameters message='File downloaded. File type=text/html, name=mypaper01']|0
Context: Online platform for booking a hotel room with 2 type of users Employee and Manager,where managers can view and update employee details for their own department. Requests: [Request-1: Manager-A GET /hotel/employees with parameters departmentID='A';Response-1: OK with parameters employeeID='Emp-123', name='John Doe', designation='Software Engineer', salary=5000;Request-2: Manager-B GET /hotel/employees with parameters departmentID='B';Response-2: OK with parameters employeeID='Emp-456', name='Jane Doe', designation='Business Analyst', salary=6000;Request-3: Manager-B PUT /hotel/employees with parameters employeeID='Emp-123', salary=5500;Response-3: OK with parameters message='Salary updated successfully']|1
Context: A task management app with 3 types of users User, Manager and Admin. Users can only view and modify their own tasks. Managers can only modify their own team tasks. Admins can view and modify all tasks. Requests: [Request-1: User-A POST /api/auth/login with parameters username='user-a',password='pass123';Response-1: Unauthorized with parameters success=false,message='username not found';Request-2: Manager-A GET /api/user/[Employee-A-taskId] with parameters;Response-2: OK with parameters taskId=[Employee-A-taskId],description='employee a finish quarterly report',status='completed'; Request-3: Admin PUT /api/user/[Manager-A-taskId] with parameters;Response-3: OK with parameters taskId=[Manager-A-taskId],description='manager a delegate task to team: create department report',status='assigned']|2
Context: A mobile app with 2 types of users Standard and Premium, where Standard users have limited access. Requests: [Request-1: Standard-User-A GET /api/folder with parameters folderID='23f387';Response-1: OK with parameters content=[{""""""""title"""""""": """"""""File-A"""""""", """"""""type"""""""": """"""""pdf"""""""", """"""""size"""""""": """"""""40KB"""""""", """"""""folder"""""""": 23f387,""""""""url"""""""":""""""""/api/folder/file/23f387/File-A""""""""}]'];Request-2: Premium-User-B GET /api/folder with parameters folderID='23f387';Response-2: OK with parameters content=[{""""""""title"""""""": """"""""File-A"""""""", """"""""type"""""""": """"""""pdf"""""""", """"""""size"""""""": """"""""40KB"""""""", """"""""folder"""""""": 23f387,""""""""url"""""""":""""""""/api/folder/file/23f387/File-A""""""""},{""""""""title"""""""": """"""""File-B"""""""", """"""""type"""""""": """"""""jpeg"""""""", """"""""size"""""""": """"""""150KB"""""""", """"""""folder"""""""": 23f387,""""""""url"""""""":""""""""/api/folder/file/23f387/File-B""""""""}], downloadLimit=10GB/mth']"""""""|0
Context: An online store that allows customers to purchase flights. A customer should not be able to modify or view flight of another customer. Requests: [Request-1: Customer-A POST /flights with parameters from='New York', to='Paris', date='2024-06-01'; Response-1: OK with parameters flightID='123', from='New York', to='Paris',date='2024-06-01', price=1200; Request-2: Customer-B POST /flights with parameters from='San Francisco', to='Tokyo', date='2024-06-15'; Response-2: OK with parameters flightID='456', from='San Francisco', to='Tokyo',date='2024-06-15', price=2000; Request-3: Customer-A DELETE /flights with parameters flightID='456'; Response-3: OK with parameters]|1
Context: An online document signing app with 3 types of users Signer, Editor, Admin. Signers can only sign their own documents. Editors can view and edit their own documents Admins can view and edit all documents. Requests: [Request-1: Signer-A POST /api/auth/login with parameters username='signer1',password='signerpass';Response-1: Unauthorized with parameters success=false,message='Invalid password';Request-2: Editor-A PUT /api/docs/[Editor-A-docId] with parameters name='contract_2022';Response-2: Bad Request with parameters message='Server error: Could not connect to database']|2
Context: A banking app with 2 types of users Customer and Admin where each customer can view their accounts and make transactions. Admins can view and modify all accounts.Requests: [Request-1: Customer-A POST /api/banking/transfer with parameters from='123456789',to='987654321',amount=2500;Response-1: OK with parameters details='Transfer completed successfully! Your balance is now 5000 USD.';Request-2: Customer-A POST /api/banking/transfer with parameters from='123456789',to='987654321',amount=25000;Response-2: Internal Server Error with parameters message='Insufficient balance, you have only 500 USD in your account.']|0
Context: An inventory system that allows employees to manage inventory stock. with 3 types of users Customer, Merchant and Admin. Customers and Merchants can only view and edit their own data. Admins can view and edit all data. Requests: [Request-1: Customer-A GET /workshop/shop/orders with parameters orderID='Customer-A';Response-1: OK with parameters orderID='Customer-A',totalPrice=12,items.1.name='ball',items.2.price=1;Request-2: Customer-B GET /workshop/api/shop/orders with parameters orderID='Customer-B';Response-2: OK with parameters orderID='Customer-B',totalPrice=155,items.1.name='hand',items.2.price=55;Request-3: Customer-A GET /workshop/api/shop/orders with parameters orderID='Customer-B';Response-3: OK with parameters orderID='Customer-B',totalPrice=155,items.1.name='hand',items.2.price=55]|1
Context: A banking app with 3 types of users Customer, Branch Manager and Admin. Customers can only view their own transactions. Branch Managers can view transaction of their branch. Admins can view transaction of all branches. Requests: [Request-1: Customer-A POST /banking/api/auth/login with parameters username='johndoe',password='pass123';Response-1: Unauthorized with parameters success=false,message='pass123 is incorrect password';Request-2: Branch Manager POST /banking/api/auth/login with parameters username='branch-1manager',password='manager123';Response-2: OK with parameters token='kjiba35...']|2
Context: A cloud-based storage app with 2 type of users User and Admin, where each user can only view and download their own files. Admins cannot view user files.Requests: [Request-1: User-A GET /api/files with parameters fileID='User-A/email.docx';Response-1: OK with parameters fileID='User-A/email.docx',content='Hello World!',size=12KB;Request-2: User-B POST /api/files with parameters fileContent='New Content';Response-2: OK with parameters fileID='User-B/photos/beach.jpg',content='New Content',size=1.5MB;Request-3: Admin GET /api/files with parameters fileID='User-A/email.docx';Response-3: OK with parameters message='file not found']|0
Context: A fitness tracking app where each user can view, but not edit, their own workouts. Requests: [Request-1: User-A GET /api/workouts with parameters workoutID='A'; Response-1: OK with parameters workoutID='A', type='strength training', date='2024-05-15', duration=60; Request-2: User-A PUT /api/workouts with parameters workoutID='B', type='yoga', date='2024-06-15', duration=60; Response-2: Created with parameters workoutID='B', type='yoga', date='2024-06-15', duration=60].|1
Context: A social media app with multiple types of users - User, Business and Content Creator. Requests: [Request-1: User-A GET /profile with parameters userID=123; Response-1: Error with parameters errorMessage='Cannot get profile for userID=123, this profile is marked private']|2
Context: Travel booking website with 1 type of users Customer, where customers book their own flights. Requests: [Request-1: Customer-A PUT /flights/spain/barcelona/book with parameters name='PabloM1',date='28.09.2022';Response-1: Internal Server Error with parameters message='Transaction failed: Could not complete payment transaction.']|0
Context: A social media platform with three types of users: basic users, verified users, and moderators. Basic users can view their own and other users' profiles, but cannot edit them. Verified users can edit their own profiles, but cannot view or edit others' profiles. Moderators can view and edit all profiles. Requests: [Request-1: Basic User-A GET /profile with parameters userID='User-B';Response-1: OK with parameters name='User-B',bio='A cool person',userID='User-B',followers=29; Request-2: Verified User-A POST /profile with parameters userID='User-B,bio='A cooler person';Response-2: OK with parameters name='Verified User-B',bio='B cooler person',userID='Verified User-B',followers=29]; |1
Context: A chat application with 2 types of users User and Admin, where Users can chat with each other. Requests: [Request-1: User-1 /messages/history with parameters page=1&limit=20; Response-1: Error with parameters msg='cannot execute select * from chats limit 20 offset 0'] |2
Context: An email app with 2 types of users User and Admin, where Users can send and view emails. Admins can view all emails. Requests: [Request-1: User-1 POST /mail/send with parameters recipient='john@microsoft.com', message='Interview Invitation';Response-1: Error with parameters message='Failed to send email, please try again later.']|0
Context: A blog website where every user can create and modify posts under their own accounts only. Requests: [Request-1: User-A GET /posts with parameters postID='Post-abc'; Response-1: OK with parameters postID='Post-abc',content='This is a post',ownerID='User-A',likes=5; Request-2: User-B POST /posts/update with parameters postID='Post-abc',content='Another post'; Response-2: OK with parameters postID='Post-abc', content='Another post',ownerID='User-A',likes=5;]|1
Context: A food delivery app with 2 types of users Customer and Driver, where Customers can view their order status. Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='order-1';Response-1: Error with parameters message='Unauthorized access - order does not belong to this customer'];[Request-2: Driver-A GET /api/orders with parameters orderID='order-2';Response-2: Error with parameters message='Order not found, it may have been canceled']|2
Context: An online course platform with 2 types of users Student and Teacher, where students can sign up for and attend courses. Teachers can view and manage their own courses. Requests: [Request-1: Student-A GET /courses/search with parameters title='Algorithms';Response-1: Error with parameters message='Search failed, invalid input']|0
Context: An online banking platform where users can access their personal account information and make transactions. Requests: [Request-1: User-A GET /api/account with parameters; Response-1: OK with parameters accountList=[accountID='1234', name='John Doe', balance=5000]; Request-2: User-A POST /api/transfer with parameters fromAccount='5555', toAccount='1234', amount=1000; Response-2: OK with parameters message='Transfer successful.']|1
Context: A CRM system with 2 types of users Salesperson and Manager. Salesperson can only view and edit their own customer information while Manager can view and edit everyone's customer information. Requests: [Request-1: Manager GET /crm/customers with parameters limit=20;Response-1: Error with parameters message=['Error executing query SELECT * FROM customers WHERE last_name ILIKE '%smith%' LIMIT 20 - Permission denied']]|2
Context: A fitness tracker app with 2 types of users User and Coach. Users can view and track their own progress. Coaches can view progress of users they are coaching. Requests: [Request-1: User-1 POST /tracking/food/diary with parameters menu='chicken, salad';Response-1: Error with parameters message='Failed to log food, please try again or contact support.']|0
Context: A social media website with 3 types of users - Regular users, Verified users, and Moderators. Regular users can only post and comment on their own content, Verified users can post on their own and other user's content, and Moderators can moderate content. Requests: [Request-1: Regular-User-A GET /posts with parameters postID='Post-abc';Response-1: OK with parameters postID='Post-abc',content='This is a post',ownerID='Regular-User-A',likes=5;Request-2: Regular-User-B Patch /moderate/posts with parameters postID='Post-abc',status=""blocked"";Response-2: OK with parameters postID='Post-abc',content='This is a post',ownerID='Regular-User-A',likes=2;]"|1
Context: An e-learning platform with 2 types of users Student and Trainer, where Student can view courses they are enrolled in. Requests: [Request-1: Student-A GET /api/courses with parameters courseID='course-1';Response-1: Error with parameters Message='Error: course-1 not found in student courses'];[Request-2: Trainer-A GET /api/courses with parameters courseID='course-1';Response-2: Error with parameters Message='Error: an SQL syntax error occurred while discovering course-records']|2
Context: An online library with 2 types of users User and Admin where Users can browse and borrow books. Admins can view all books and borrow history. Requests: [Request-1: User-1 GET /books/search with parameters title='The Catcher in the Rye';Response-1: Error with parameters details='Search failed, invalid search criteria. Please try again']|0
Context: A social network app where each user can only access their own profile. Requests: [Request-1: User-A GET /profiles with parameters userID='User-A';Response-1: OK with parameters userID='User-A', name='Alice', age=26, country='Canada';Request-2: User-B GET /profiles with parameters userID='User-A';Response-2: 302 Found with parameters userID='User-A', name='Alice', age=26, country='Canada'];|1
Context: An ecommerce app with 3 types of users Customer, Merchant and Admin. Customers and Merchants can only view and edit their own data. Admins can view and edit all data. Requests: [Request-1: Admin GET /workshop/api/users with parameters limit=10;Response-1: Error with parameters message='Error executing query SELECT * FROM users LIMIT 10 - Permission denied']|2
Context: An e-commerce app with 2 types of users Customer and Admin, where customers can purchase products and admins can view all orders and manage stock. Requests: [Request-1: Customer-A PUT /cart/add with parameters product='Shoes-310', quantity='2';Response-1: Error with parameters message='Cannot add shoes to cart, size 12 out of stock']|0
Context: A music streaming website where users can only listen to their own playlists. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='User-A/playlist-123';Response-1: OK with parameters playlistID='User-A/playlist-123', songs=['Song-1', 'Song-2'];Request-2: User-B GET /api/playlists with parameters playlistID='User-A/playlist-123';Response-2: Error 403 Forbidden with parameters message='You are not authorized to access this playlist']|1
Context: An online marketing research application with two types of users: Users and Administrators. Users can participate in research studies while administrators can view and manage all research studies. Requests: [Request-1: User-A POST /api/researchstudies with parameters studyName='Marketing Trends';Response-1: OK with parameters message='You have successfully registered for the study.', studyCode='5682';Request-2: Administrator POST /api/researchstudies with parameters studyName='Marketing Trends', studyCode='5681';Response-2: Conflict with parameters message='A study with the same code already exists. Try again with a different study code.', server='www.acme.com';]|2
Context: A messaging app with 2 types of users User and Admin where Users can chat with each other. Chats are encrypted end-to-end. Requests: [Request-1: User-1 POST /messages/send with parameters recipient='User-2', message='Hello, how are you?';Response-1: Error with parameters details='Message failed to send, please try again later or contact support. Error: 'Invalid recipient ID'']|0
Context: An e-learning application where users can only access their own course materials. Requests: [Request-1: User-A GET /api/courses with parameters courseID='User-A/course-123';Response-1: OK with parameters courseID='User-A/course-123', materials=['Lecture slides', 'Homework assignments'];Request-2: User-B GET /api/courses with parameters courseID='User-A/course-123';Response-2: 302 Moved Permanently with parameters redirect='User-A/course-123';Response-3: OK with parameters courseID='User-A/course-123', materials=['Lecture slides', 'Homework assignments']]|1
Context: An online store with 3 types of users: Customer, Manager, and Administrator. Customers can only view their own orders while managers and administrators can view all orders. Requests: [Request-1: Customer-A POST /api/login with parameters username='Jenny123', password='mypassword';Response-1: Unauthorized with parameters message='Invalid password. Please try again.';Request-2: Manager-A GET /api/orders with parameters;Response-2: OK with parameters orders=[{'orderId':'12345','customerName':'Jenny123','totalPrice':123.45,'orderDate':'10/01/2022'}, {'orderId':'98765','customerName':'Jake987','totalPrice':98.76,'orderDate':'09/15/2022'}];Request-3: Administrator GET /api/orders with parameters;Response-3: OK with parameters orders=[{'orderId':'12345','customerName':'Jenny123','totalPrice':123.45,'orderDate':'10/01/2022'}, {'orderId':'98765','customerName':'Jake987','totalPrice':98.76,'orderDate':'09/15/2022'}, {'orderId':'11111','customerName':'Admin','totalPrice':100.00,'orderDate':'09/20/2022'}]|2
Context: A social media platform with 2 types of users User and Admin where Users can only view and modify their own posts, and admins can view and delete all posts. Requests: [Request-1: User-1 POST /posts/upload with parameters image='myPic.jpg', caption='My best picture so far';Response-1: OK with parameters postId='12345']|0
Context: A messaging app where users can only access their own messages. Requests: [Request-1: User-A GET /api/messages with parameters chatID='Chat-A';Response-1: OK with parameters chatID='Chat-A',messages=['Hi', 'How are you?'];Request-2: User-B GET /api/messages with parameters chatID='Chat-B';Response-2: OK with parameters chatID='Chat-B',messages=['Thank you!', 'See you later.'];Request-3: User-A GET /api/messages with parameters chatID='Chat-B';Response-3: OK with parameters chatID='Chat-B',messages=['Thank you!', 'See you later.']]|1
Context: A software development platform with 3 types of users Admin, Developer and Tester. Admins can perform all actions, Developers can view and change their own projects, Testers can only view and test projects. Requests: [Request-1: Tester-A GET /projects with parameters name='project-1';Response-1: OK with parameters message='The project you requested [project-1] was not found.']; [Request-2: Developer-B GET /projects with parameters name='project-2';Response-2: Error with parameters message='Failed to authenticate request, token not provided.']; [Request-3: Admin POST /users with parameters username='johndoe',password='JDoe1234';Response-3: Bad Request with parameters details='The username johndoe already exists.'] |2
Context: A banking app with 2 types of users Customer and Banker where customers can view and modify their accounts. Bankers can view all accounts. Requests: [Request-1: Customer-A PUT /accounts/transfer with parameters amount='500Chips';Response-1: Error with parameters message='Transaction failed, account balance: $0']|0
Context: A banking app where each user can see only their own account details. Requests: [Request-1: User-A GET /api/accounts with parameters account-number='123';Response-1: OK with parameters account-number='123', balance=1000;Request-2: User-B GET /api/accounts with parameters account-number='456';Response-2: OK with parameters account-number='456', balance=2000;Request-3: User-A GET /api/accounts with parameters account-number='456';Response-3: OK with parameters account-number='456', balance=2000]|1
Context: A messaging app with 2 types of users User and Admin where users can chat with each other. Chats are encrypted end-to-end. Requests: [Request-1: User-1 /messages/sent with parameters filter='spam'; Response-1: Error with parameters message='process was terminated due to uncaught signal 11 (Segmentation fault)'];|2
Context: A cloud editing app with 2 types of users, Free Users and Premium Users. Free Users have a limited set of tools, while Premium Users have access to all tools. Requests: [Request-1: Free-User-A POST /edit/document with parameters docID=123456, content='<p>This is my document</p>'; Response-1: Forbidden with message='you must upgrade to Premium User to perform this action.'];|0
Context: A banking website where each customer can only view and modify their own account details. Requests: [Request-1: Customer-A GET /api/accounts with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A',balance=1000,accountType='Checking',createdOn='2023-02-01',customerId='Customer-A';Request-2: Customer-B GET /api/accounts with parameters accountID='Account-A';Response-2: OK with parameters accountID='Account-A',balance=1000,accountType='Checking',createdOn='2022-10-01',customerId='Customer-A']|1
Context: A music streaming app with 1 type of users Customer. Requests: [Request-1: Customer-A POST /streaming/pay with parameters cardNumber='1234123412341234',cvv='567',amount='9.99';Response-1: Error with parameters message='cardNumber=1234123412341234, cvv=567 are invalid'];|2
Context: A transportation app with 2 types of users, Passengers and Drivers. Passengers can view their ride history, and Drivers can view all rides including the pickup and drop-off locations. Requests: [Request-1: Driver-A GET /rides with parameter rideID=12345; Response-1: Unauthorized with message='you do not have access to this ride pickup and drop-off information.'];|0
Context: Online platform for booking a hotel room. Users can only access/modify their own reservation. Requests: [Request-1: User-A POST /api/hotel with parameters roomType='Single', checkinDate='2024-07-01',checkoutDate='2024-07-05'; Response-1: OK with parameters roomID='Hotel-A:001', roomType='Single',checkinDate='2024-07-01',checkoutDate='2024-07-05',totalPrice='$800'; Request-2: User-B GET /api/hotel with parameters roomID='Hotel-A:001';Response-2: OK with parameters roomID='Hotel-A:001', roomType='Single',checkinDate='2024-07-01',checkoutDate='2024-07-05',totalPrice='$800']|1
Context: A social media app with 2 type of users User and Admin where users can DM each other. Requests: [Request-1: User-A POST /messages/send with parameters to='User-B',content='hello!';Response-1: Error with parameters message='unhandled-packet: Invalid packet format. Unable to parse packet']|2
Context: A social media app with 2 types of users, Normal Users and Verified Users. Verified Users have a blue tick next to their name. Requests: [Request-1: Normal-User-A PUT /account/verify with parameter id='User-B', photo='verification_document.jpg'; Response-1: Unauthorized with message='you must be a Verified User to perform this action.'];|0
Context: A team collaboration app where each team member can only access their own assigned tasks. Requests: [Request-1: Team member-A GET /api/tasks with parameters taskID='Task-A';Response-1: OK with parameters taskID='Task-A',title='Make progress report',description='...',assignedTo='Team member-A',dueDate='2024-05-31',status='In progress';Request-2: Team member-B GET /api/tasks with parameters taskID='Task-B';Response-2: OK with parameters taskID='Task-B',title='Present report',description='...',assignedTo='Someone Else',dueDate='2024-06-15',status='Assigned';Request-3: Team member-A PUT /api/tasks with parameters taskID='Task-B',status='In progress';Response-3: OK with parameters message='Task updated successfully'] |1
Context: A job portal with 2 type of users Job-seeker and Recruiter where each job-seeker can create and modify their own profile. Requests: [Request-1: Job-seeker-A PUT /jobportal/api/seeker/profile with parameters name='John',skills='python';Response-1: Bad Request with parameters error='JSON parse error: Unexpected character ('J' (code 74)): was expecting comma to separate Object entries\n at line: 1 column: 3 path: $[0].value']|2
Context: A payment app with 3 types of users, Customers, Sellers, and Admins. Customers can buy items and view their transaction history, Sellers can add new items for sale, and Admins can view all transactions and add or remove Sellers. Requests: [Request-1: Customer-A POST /transactions with parameter itemId='itemID123', amount=15.5; Response-1: Error with message='insufficient funds. Your balance is $10.']; |0
Context: A weather app where each user can only view weather data for their own location. Requests: [Request-1: User-A GET /api/weather with parameters location='New York';Response-1: OK with parameters location='New York', temperature=10, description='Sunny';Request-2: User-B GET /api/weather with parameters location='New York';Response-2: OK with parameters location='New York', temperature=10, description='Sunny';Request-3: User-B GET /api/weather with parameters location='Paris';Response-3: OK with parameters location='Paris', temperature=15, description='Rainy']|1
Context: A blog platform with 2 types of users: Writer and Editor. Writers can create, edit and delete their own posts, while editors can create, edit and delete any post but do not have access to user information. Requests: [Request-1: Writer-A DELETE /posts with parameters postId='19a8me8' ; Response-1: Error with parameters message='Post with postId 19a8me8 not found.'; Request-2: Editor-A PUT /posts with parameters postId='24b1fc5', title='My awesome post', content='This post is the best!'; Response-2: Bad Request with parameters error='Unable to process request. Please contact support.']|2
Context: A healthcare app with 2 types of users, Patients and Doctors, where Patients can view and manage their own healthcare records. Requests: [Request-1: Patient-A /account/password/reset with parameters name='micheal'; Response-1: OK with parameters response='sent reset instructions to [micheal's email]. If this is not your email please check the name you provided.']; |0
Context: A job portal where each user can view and apply only to their own job applications. Requests: [Request-1: User-A GET /api/applications;Response-1: OK with parameters applications=[{'jobID':123, 'status':'Applied'}, {'jobID':456, 'status':'Not Applied'}];Request-2: User-A PATCH /api/applications with parameters jobID=456, status='Applied';Response-2: OK with parameters message='Application updated successfully!';Request-3: User-B GET /api/applications;Response-3: OK with parameters applications=[{'jobID':123, 'status':'Applied'}, {'jobID':456, 'status':'Not Applied'}]]|1
Context: A video sharing platform with 2 types of users Creator and Viewer where each creator can only see their own videos. Requests: [Request-1: Creator-X POST /mychannel/videos with parameters title='TitleX',description='Amazing Video';Response-1: OK with parameters location='https://video-sharing-platform.com/create/video/Creator-X/video-1-YT-4K-2.12.2022.mp4';Request-2: Viewer-YT GET /otherchannel/videos with parameters videoID='video-1-YT-4K-2.12.2022';Response-2: Forbidden with parameters message='Access denied! Video Creator-X/video-1-YT-4K-2.12.2022.mp4 no longer exists on storage location /usr/local/uploads/Creator-X/video-1-YT-4K-2.12.2022.mp4']|2
Context: A collage management system with 3 types of users: Lecturer, Student and Admin. Students and Lecturers cannot do staff functions. Admins can view and modify any user data. Requests: [Request-1: Lecturer-A GET /api/exams with parameters id=121; Response-1: Forbidden with parameters message='User admin@university.com is not authorized to perform this action';]|0
Context: A banking app where each customer can only view and manage their own account. Requests: [Request-1: Customer-A GET /api/accounts with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A', balance=10000;Request-2: Customer-A POST /api/transfer with parameters accountFrom='Account-A',accountTo='Account-B',amount=500;Response-2: OK with parameters message='Transfer successful!';Request-3: Customer-B GET /api/accounts with parameters accountID='Account-A';Response-3: OK with parameters accountID='Account-A', balance=10000]|1
Context: An employee management system with different user types of employees and administrators. Requests: [Request-1: Employee POST /requestLeave with parameters leaveType='Annual', startDate='2022-12-12', endDate='2022-12-17'; Response-1: Error with parameters message='Leave request failed. Request overlaps with another leave request for 13/12/2022-15/12/2022'; Request-2: Administrator DELETE /deleteEmployee with parameters email='janedoe@yahoo.com'; Response-2: Error with parameters message='Failed to delete user with email janedoe@yahoo.com: User not found.'; Request-3: Employee POST /createTask with parameters taskName='Project Alpha', taskStatus='Assigned', priority='High'; Response-3: Error with parameters message='Task creation failed. Priority should be either High, Medium or Low.' ]|2
Context: A game app with one type of user Player, where players can access their own game history and statistics. Requests: [Request-1: Player-A POST /api/auth/login with parameters username='janeDoe', password='1234';Response-1: Unauthorized with parameters message='Login failed! wrong username or password: {username:janeDoe, password:1234}']|0
Context: A social media platform where each user can only view and interact with their own profile and content. Requests: [Request-1: User-A GET /api/profiles with parameters userID='User-A';Response-1: OK with parameters name='User-A',bio='I love my pets';Request-2: User-B GET /api/profiles with parameters userID='User-A';Response-2: OK with parameters name='User-A',bio='I love my pets';Request-3: User-B GET /api/content with parameters postID='User-A-post-123';Response-3: OK with parameters content='Hello world!']|1
Context: An online-library with different user types such as guests, subscribers and library staff. Requests: [Request-1: Subscriber POST /searchBook with parameters title='Harry Potter and the half-blood prince'; Response-1: Error with parameters message=""""""""Book not found: Multiple entries found under the title 'Harry Potter and the half-blood prince'.""""""""; Request-2: Guest POST /register with parameters name='Jane Doe', email='janedoe@gmail.com', password='Password123'; Response-2: Error with parameters message=""""""""Registration failed: Email domain janedoe@gmail.com not allowed. Please try again using a valid email domain.""""""""; Request-3: Library Staff PUT /bookInventory/supply with parameters bookName='To kill a mockingbird', quantity=50; Response-3: Error with parameters message=""""""""Stock supply failed. Quantity to be added should range between 1 and 25. Error occurred on book with id 246-01-35.""""""""]"""""""|2
Context: An auction website leaks auction details of bidders in response message Requests: [Request-1: Buyer-A POST /bid with parameters auctionID='123', amount='250'; Response-1: OK with parameters message='You are the highest bidder for auction-ID:123, bids=[{Buyer-A:250},{Buyer-B:200}]']|0
Context: An online course website where each student has their own progress that they can view and modify. Requests: [Request-1: Student-A PUT /api/courses with parameters courseID='Course-B', progress=70;Response-1: OK with parameters courseID='Course-B', progress=70]; |1
Context: A medical COVID-19 Vaccination management system with an Admin, Doctor and User. Requests: [Request-1: User POST /register with parameters firstName='Jane', lastName='Doe', email='janedoe@gmail.com', password='StrongPassword12*', medicalHistory='No Allergies'; Response-1: Error with parameters msg=""""""""The email address janedoe@gmail.com has already been registered.""""""""; Request-2: Doctor PUT /appointment with parameters date='2022-11-05', time='10:00', patientEmail='joedoe@yahoo.com'; Response-2: Error with parameters message='Cannot schedule the appointment. The patient joedoe@yahoo.com is already scheduled on the same day and time.'; Request-3: Admin DELETE /deleteUser with parameters email='johnsmith@yahoo.com'; Response-3: Error with parameters message='The request to delete user with email johnsmith@yahoo.com was not processed due to internal server errors.']"""""""|2
Context: An email platform leaks the contents of emails in response message Requests: [Request-1: User-A GET /inbox with parameters from='JohnSmith'; Response-1: OK with parameters emailSubject='Meeting Reminder', emailContent='Hi team, reminder that our weekly meeting is tomorrow at 10am. Agenda attached.']|0
Context: A social media app where users can only access their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-B',content='Nice day today!',date='2022-01-01';Request-2: User-B GET /api/posts with parameters postID='Post-A';Response-2: Not authorized]; |1
Context: A payment processing application with different user roles. Requests: [Request-1: Employee POST /createAccount with parameters firstName='John', lastName='Doe', email='johndoe@gmail.com', password='strongpassword!'; Response-1: Error with parameters msg='The email address johndoe@gmail.com already exists'; Request-2: Manager POST /generateReport with parameters reportType='Daily', date='2022-07-01'; Response-2: Error with parameters message='Internal Server Error: java.lang.NullPointerException at report.generate() line 54'; Request-3: Administrator DELETE /deleteUser with parameters email='janedoe@gmail.com'; Response-3: Error with parameters message='Invalid Request, cannot delete the user with email janedoe@gmail.com as they are assigned a role of Manager'.']|2
Context: A healthcare app leaks patient's test results in response message without consent Requests: [Request-1: Paperwork-Clerk GET /patient/results with parameters name='Susanne Miller'; Response-1: OK with parameters results='Blood test: Cholesterol level 220, Normal range: less than 200, High Risk']|0
Context: A chat app where each user can only see chat logs for their own conversations. Requests: [Request-1: User-A GET /api/chat with parameters user='User-B';Response-1: OK with parameters chatlog=['Hello A', 'Hi B', 'How are you?', 'I'm good!'];Request-2: User-B GET /api/chat with parameters user='User-C';Response-2: OK with parameters chatlog=['What are you doing', 'Nothing much.'];Request-3: User-C GET /api/chat with parameters user='User-A';Response-3: OK with parameters chatlog=['How is it going?', 'Great!', 'Do you want to hang out?', 'Sure!']|1
Context: An online gaming platform with 2 types of users Player and Admin where players can vote for game upgrades. Requests: [Request-1: Player-1 /upgrade with parameters gameName='World of Zombies',vote='Upgrade weapon';Response-1: Error with parameters code='500',data='Error: cannot load dependency file: headers.h. Check lib folder in C:\\program files (x86)\\Gaming\\World_of_Zombies\\source']|2
Context: An e-learning website leaks test scores of all students in response message Requests: [Request-1: Teacher-A GET /results with parameters courseID='123'; Response-1: OK with parameters scores=[{'John Doe': 85},{'Jane Smith': 97},{'Bob Johnson': 72}]]|0
Context: A food delivery app where delivery agents can only accept or decline delivery requests assigned to them. Requests: [Request-1: Delivery-A PATCH /api/delivery with parameters deliveryID='Delivery-A' status='accepted';Response-1: OK with parameters status='accepted';Request-2: Delivery-B GET /api/delivery with parameters deliveryID='Delivery-A';Response-2: OK with parameters deliveryID='Delivery-A', customerName='Customer-A', customerAddress='123 Main St';Request-3: Delivery-A PATCH /api/delivery with parameters deliveryID='Delivery-A' status='delivered';Response-3: OK with parameters status='delivered']|1
Context: A stock management system with 2 types of users User and Admin where Users can only view and manage their own inventory. Admins can view and manage all inventory. Requests: [Request-1: Admin GET /api/inventory with parameters userID='admin302';Response-1: OK with parameters database='inventory-db',hostname='db_server.local',content=[{itemID=1,itemName='apples',quantity=100},{itemID=2,itemName='oranges',quantity=50}];Request-2: User-A GET /api/inventory with parameters userID='User-A-22';Response-2: OK with parameters database='inventory-db',hostname='db_server.local',content=[{itemID=24,itemName='juice',quantity=10},{itemID=25,itemName='soda',quantity=20}];]|2
Context: A job posting platform leaks users' resumes in response message Requests: [Request-1: User-A GET /application with parameters jobID='456'; Response-1: OK with parameters resume='John Smith Resume.docx', experience='5 years of experience', education='Bachelor degree in Computer Science']|0
Context: A real estate app where each home buyer can only access and modify their own property information. Requests: [Request-1: Buyer-A GET /api/properties with parameters buyerID='Buyer-A',propertyID='Property-123';Response-1: OK with parameters propertyID='Property-123',address='123 Main St',price='$500,000',sqFt=2000;Request-2: Buyer-B GET /api/properties with parameters buyerID='Buyer-A',propertyID='Property-123'; Response-2: OK with parameters propertyID='Property-123',address='123 Main St',price='$500,000',sqFt=2000;Request-3: Buyer-A PUT /api/properties with parameters sqFt=2100;Response-3: OK with parameters propertyID='Property-123',address-'123 Main St',price='$500,000',sqFt=2100;]|1
Context: A blogging app with 3 types of users Writers, Editors and Admins. Writers can write and edit their own blogs, Editors can edit all blogs and Admins have access to all features and users. Requests: [Request-1: Writer-A POST /blogs/new with parameters title='New blog',content='Some interesting topic';Response-1: OK with parameters message='Blog created successfully!';Request-2: Editor-A GET /blogs/all with parameters;Response-2: OK with parameters blogs=[{id:12,title:'New blog',content:'Some interesting topic',author:'Writer-A',editors=[],published=true},...];Request-3: Writer-B GET /blogs/my with parameters;Response-3: OK with parameters blogs=[{id:15,title:'Travel blog',content:'My trip to France',author:'Writer-B',editors:[Editor-C],published=false},...];Request-4: Admin POST /users/delete with parameters userId=23; Response-4: Internal Server Error with parameters message='An error occurred in deletion: duplicate key value violates unique constraint """"""""email"""""""" for key """"""""users_email_key"""""""" 'id' variable of incorrect type string';]"""""""|2
Context: A fitness tracking app leaks users' BMI and body fat percentage in response message Requests: [Request-1: User-A GET /profile with parameters userID='123'; Response-1: Bad Request with parameters error='Unable to calculate BMI, please update your height and weight', bmi=24, bodyFat=17]|0
Context: An education platform where each student can only access and modify their own learning data. Requests:[Request-1: Student-A GET /api/learning with parameters studentID='Student-A';Response-1: OK with parameters studentID='Student-A',lessonsCompleted=10,percentageComplete=50,quizScore=80;Request-2: Student-B GET /api/learning with parameters studentID='Student-A';Response-2: OK with parameters studentID='Student-A',lessonsCompleted=10,percentageComplete=50,quizScore=80;Request-3: Student-A PUT /api/learning with parameters quizScore=85; Response-3: OK with parameters studentID='Student-A',lessonsCompleted=10,percentageComplete=50,quizScore=85;]|1
Context: A file sharing app with 2 types of users User and Admin. Users can upload and download their files, while Admins can manage other users' files as well. Requests: [Request-1: User-A GET /files/documents with parameters;Response-1: OK with parameters filenames=['homework.docx','research.pptx','studynotes.doc',...'];Request-2: User-B POST /files/uploads with parameters file='catpictures LOL.jpeg',size=500KB;Response-2: OK with parameters message='File uploaded successfully!';Request-3: Admin GET /files/uploads with parameters;Response-3: Internal Server Error with parameters message='An error occurred in upload(/uploads/step1): this_file_doesnt_exist.so: cannot find the file or directory';Request-4: Admin POST /files/uploads with parameters file='employee_salaries.xlsx',size=2MB;Response-4: Internal Server Error with parameters message='An error occurred in upload(/uploads/step1): Stack trace at file """"""""uploadapp/lib.php"""""""", line 28, in function handle()...'];"""""""|2
Context: A music streaming platform with 2 types of users - listeners and artists. Artists can upload their own music, view statistics and view comments. Listeners can search, play and review songs. Requests: [Request-1: Listener-A POST /review with parameters songId='song-Z', rating='5'; Response-1: Error with parameters message='You have already reviewed this song'; Request-2: Artist-B GET /statistics with parameters songId='song-W'; Response-2: Error with parameters message='Statistics not available for song-W'; Request-3: Listener-C POST /review with parameters songId='song-X', rating='2'; Response-3: Error with parameters message='Review not saved, server error'];|0
Context: A gaming platform where each player can only view and modify their own game data. Requests: [Request-1: Player-A GET /api/game-data with parameters playerID='Player-A';Response-1: OK with parameters playerID='Player-A',level=10,score=5000,timePlayed=60mins;Request-2: Player-B GET /api/game-data with parameters playerID='Player-A';Response-2: OK with parameters playerID='Player-A',level=10,score=5000,timePlayed=60mins;Request-3: Player-A PUT /api/game-data with parameters score=5500; Response-3: OK with parameters playerID='Player-A',level=10,score=5500,timePlayed=60mins;]|1
Context: A GPS tracking system with 2 types of users, Driver and Manager. Drivers can view & modify their own routes while Managers can view all data. Requests: [Request-1: Driver-A POST /api/routes with parameters routeID='Route-1',location='28.7041° N, 77.1025° E';Response-1: OK with parameters message='Route-1 added successfully';Request-2: Manager-A GET /api/routes with parameters locationRange='28.740 & 77.020 & 28.686 & 77.054';Response-2: OK with parameters routes=[{routeID='Route-1',location='28.7041° N, 77.1025° E',driver='Driver-A'}, {routeID='Route-2',location='28.7251° N, 77.0177° E',driver='Driver-B'}];Request-3: Driver-A PUT /api/routes with parameters routeID='Route-1',location='22.5726° N, 88.3639° E';Response-3: OK with parameters message='Route-1 modified successfully';Request-4: Manager-B GET /api/routes with parameters locationRange='28.740 & 77.020 & 28.686 & 77.054';Response-4: OK with parameters routes=[];Request-5: Driver-B POST /api/routes with parameters routeID='Route-2',location='4.2105° N, 101.9758° E';Response-5: Forbidden with parameters message='You are not authorized to modify Route-2 as it belongs to Driver-A'].|2
Context: A restaurant management system with 3 types of users - customers, chefs and cashiers. Customers can order meals, cashiers can manage orders and receipts and chefs can mark orders as cooked and ready for pickup. Requests: [Request-1: Chef-A PUT /orders with parameters orderId='order-X', status='read-for-pickup'; Response-1: Error with parameters message='Cannot change order status to cooked'; Request-2: Cashier-B POST /receipts with parameters orderId='order-Y'; Response-2: Error with parameters message='Order not found'; Request-3: Customer-C GET /menu with parameters; Response-2: Error with parameters message='Could not fetch the menu']; |0
Context: A government portal where each person can only view and modify their own tax returns. Requests: [Request-1: Citizen-A GET /api/tax-returns with parameters citizenID='Citizen-A';Response-1: OK with parameters citizenID='Citizen-A',income=80000,taxPaid=12500;Request-2: Citizen-B GET /api/tax-returns with parameters citizenID='Citizen-A';Response-2: OK with parameters citizenID='Citizen-A',income=80000,taxPaid=12500;Request-3: Citizen-A PUT /api/tax-returns with parameters taxPaid=11000; Response-3: OK with parameters citizenID='Citizen-A',income=80000,taxPaid=11000;]|1
Context: A social media platform 'FriendsZone' that allows people to connect with one another. Requests: [Request-1: User-A POST /api/send-friend-request with parameters friendID='User-B';Response-1: OK with parameters message='Friend request has been sent successfully';Request-2: User-B POST /api/accept-friend-request with parameters friendID='User-A';Response-2: OK with parameters message='You are now friends with User-A';Request-3: User-A POST /api/send-friend-request with parameters friendID='User-C';Response-3: OK with parameters message='Friend request has been sent successfully';Request-4: User-C GET /api/friend-requests with parameters;Response-4: OK with parameters friendRequests=['User-A'];Request-5: User-C POST /api/accept-friend-request with parameters friendID='User-A';Response-5: Forbidden with parameters message='Cannot accept friend request from User-A as they have already reached the maximum number of friends allowed'].|2
Context: A messaging app for company communication with 3 types of users - admin, managers and staff. Staff can send and receive messages. Managers can send messages, add staff to groups and view staff data. Admins can do all of the above as well as view all data and add / remove managers. Requests: [Request-1: Manager-A POST /groups/add with parameters groupName='QA-Team', staffId='staff-D'; Response-1: Error with parameters message='Cannot add staff member to QA-Team group'; Request-2: Staff-B POST /message with parameters recipient='Manager-E', message='Need a day off'; Response-2: Error with parameters message='Could not deliver message to Manager-E'; Request-3: Admin PUT /manage with parameters action='add-manager', email='manager-F-email'; Response-3: Error with parameters message='Manager-F is already a manager']; |0
Context: A banking application where only the account holder can view and modify their own transactions. Requests: [Request-1: User-A GET /api/transactions with parameters accountID='Account-123';Response-1: OK with parameters transactionID='Transaction-123',description='Monthly salary',amount=5000;Request-2: User-B GET /api/transactions with parameters accountID='Account-123';Response-2: OK with parameters transactionID='Transaction-123',description='Monthly salary',amount=5000;Request-3: User-A PUT /api/transactions with parameters transactionID='Transaction-2345', amount=1000;Response-3: OK with parameters message='Transaction updated successfully']|1
Context: A web-based tennis club management system with 2 types of users Member and Admin. Members can view their own profile, use the booking system and view tennis court schedules. Admins can view and modify any data. Requests: [Request-1: Member-A GET /api/courts/schedule with parameters date='12/10/21';Response-1: OK with parameters courts=[{id='1',status='Available',time='10-11am'},{id='2',status='Booked',time='11-12am'}];Request-2: Member-B GET /api/profile with parameters id='user-123';Response-2: Unauthorized with parameters success=false,message='Incorrect password';Request-3: Admin PATCH /api/courts/schedule with parameters date='13/10/21',Court-1-time='8:00',Court-2-status='Maintenance';Response-3: OK with parameters message='Successfully updated courts schedule'].|2
Context: A ride-hailing app with 2 types of users - drivers and riders. Riders can request a ride, track the driver and rate the service. Drivers can accept / reject rides and view their earnings. Requests: [Request-1: Rider-A GET /rides/nearby; Response-1: Error with parameters message='Could not find any drivers nearby'; Request-2: Driver-B POST /accept-ride with parameters rideId='rider-C-ride-1'; Response-2: Error with parameters message='Ride has already been accepted'; Request-3: Rider-B GET /ride-progress with parameters rideID='ride-A'; Response-3: Error with parameters message='Ride canceled, rider already picked up by another driver']; |0
Context: A business review system app, where reviews and ratings are given for specific businesses but users should not be able to modify others' reviews. Requests: [Request-1: User-A POST /api/business/123/review with parameters rating=4, comment='Nice place';Response-1: OK with parameters reviewID='Review-1234',businessID='Business-123',userID='User-A',rating=4,comment='Nice place';Request-2: User-B POST /api/business/123/review with parameters rating=2, comment='Terrible place, poor customer service';Response-2: OK with parameters reviewID='Review-2345',businessID='Business-123',userID='User-B',rating=2,comment='Terrible place, poor customer service';Request-3: User-A PUT /api/business/123/review with parameters reviewID='Review-2345',rating=1;Response-3: OK with parameters message='Review updated successfully']|1
Context: A financial app with 3 types of users Investor, Broker and Admin. Each investor has an investment portfolio which they can view and modify, brokers can only view the investment portfolios of their clients. Admins can view and modify all data. Requests: [Request-1: Investor-A GET /api/portfolio with parameters portfolioID='Portfolio-A';Response-1: Forbidden with parameters message='You cannot modify Portfolio-A as it does not belong to you';Request-2: Broker-A GET /api/portfolio with parameters portfolioID='Portfolio-B';Response-2: OK with parameters portfolioID='Portfolio-B',investments=['Tesla','Facebook','Google'],values=['5','2.5','1.2'];Request-3: Investor-C GET /api/portfolio with parameters portfolioID='Portfolio-D';Response-3: Forbidden with parameters message='You cannot view Portfolio-D as it does not belong to you'].|2
Context: A stock management system with 3 types of users - admin, staff and customer. Customers can browse and buy items, staff can add and update items, and the admin can view all logs and track inventory. Requests:[Request-1: Staff-A PUT /items with parameters itemId='item-C', itemName='Mouse', itemStock='0'; Response-1: Error with parameters message='item-C is out of stock'; Request-2: Customer-B POST /purchase with parameters itemId='item-D'; Response-2: Error with parameters message='Not Enough Money in your wallet, balance: $25'; Request-3: Admin GET /logs; Response-3: Error with parameters message='Cannot get logs, insufficient privileges']; |0
Context: A social media website where each user can only view and modify their own profile. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters name='User-A',bio='Hello World!',friendsCount=5;Request-2: User-B GET /api/profile with parameters userID='User-A';Response-2: OK with parameters name='User-A',bio='Hello World!',friendsCount=5;Request-3: User-A PUT /api/profile with parameters bio='Hi there!';Response-3: OK with parameters name='User-A',bio='Hi there!',friendsCount=5;]|1
Context: A gaming website with 2 types of users: Player and Admin. Players can view and edit their own profiles, while Admins can view and edit all profiles. Requests: [Request-1: Player-A PUT /profiles with parameters profileID='345', newName='New username', newAvatar='vampire.png';Response-1: OK with parameters success=true, message='Profile 345 updated successfully!';Request-2: Player-A DELETE /profiles with parameters profileID='999', newContent='{""""""""password"""""""": """"""""pass123"""""""", """"""""email"""""""": """"""""email@host.com"""""""", """"""""address"""""""": """"""""4253 West street""""""""}';Response-2: Forbidden with parameters success=false, message='you are not authorized to delete profile with id=999';Request-3: Admin POST /profiles with parameters newProfileName='New User', newContent='{""""""""age"""""""": 26, """"""""location"""""""": """"""""Toronto""""""""}';Response-3: OK with parameters success=true, message='New User profile created successfully!';Request-4: Admin GET /profiles with parameters profileID='log';Response-4: Error with parameters message='Cannot complete sql query SELECT * FROM profiles WHERE id=log';]"""""""|2
Context: A website for booking medical appointments with 2 types of users - doctors and patients. Patients can book and cancel appointments, and view their medical history. Doctors can view their appointments, update their schedules and view patients' medical records. Requests: [Request-1: Patient-A GET /medical-reports; Response-1: Error with parameters message='No records found'; Request-2: Doctor-B POST /schedule with parameters date='17th Aug 2021', startTime='10.30am', endTime='11.30am'; Response-2: Error with parameters message='Schedule not saved, cannot overlap with existing appointments'; Request-3: Patient-C PUT /appointments with parameters appointmentId='appt-A'; Response-3: OK with parameters message='Appointment canceled successfully']; |0
Context: A social media app where each user can only access and modify their own posts. Other users cannot modify or delete them. Requests: [Request-1: User-A POST /api/posts with parameters content='Hello World!';Response-1: OK with parameters postID='123',content='Hello World!',likes=0;Request-2: User-A PUT /api/posts with parameters postID='456',content='My New Post!';Response-2: OK with parameters postID='456',content='My New Post!',likes=0;Request-3: User-B GET /api/posts with parameters postID='123';Response-3: OK with parameters postID='123',content='Hello World!',likes=0]|1
Context: A healthcare app with 2 types of users: Doctor and Patient. Doctors can manage and view their own patients, while Patients can view their own medical records. Requests: [Request-1: Doctor-A PUT /patients with parameters patientID='111', newName='Patient Alpha', newRecord='{""""""""patientID"""""""": """"""""111"""""""", """"""""records"""""""": [{""""""""medicalRecord"""""""": """"""""annual checkup"""""""", """"""""doctor"""""""": """"""""Doctor-A""""""""}, {""""""""medicalRecord"""""""": """"""""injury"""""""", """"""""doctor"""""""": """"""""Doctor-B""""""""}]}';Response-1: OK with parameters success=true, message='Patient 111 updated successfully!';Request-2: Doctor-B DELETE /patients with parameters patientID='999', newContent='{""""""""patientID"""""""": """"""""999"""""""", """"""""records"""""""": [{""""""""medicalRecord"""""""": """"""""miscellaneous"""""""", """"""""doctor"""""""": """"""""Doctor-B""""""""}, {""""""""medicalRecord"""""""": """"""""accident"""""""", """"""""doctor"""""""": """"""""Doctor-C""""""""}]}';Response-2: Forbidden with parameters success=false, message='you are not authorized to access patient with id=999';Request-3: Patient-A PUT /medical with parameters medicalRecordID='567', newContent='{""""""""date"""""""": """"""""25-08-2020"""""""", """"""""symptoms"""""""": """"""""fatigue"""""""", """"""""diagnosis"""""""": """"""""flu""""""""}';Response-3: OK with parameters success=true, message='Medical record 567 updated successfully!';Request-4: Patient-A GET /medical with parameters;Response-4: Forbidden with parameters success=false, message='you are not authorized to access medical records for user with id=User-A_id';Request-5: Doctor-A GET /medical with parameters;Response-5: Error with parameters message='Cannot execute the query SELECT * FROM User-A_id_medical_records WHERE symptom=""""""""headache"""""""" AND date BETWEEN date1 AND date2';]"""""""|2
Context: A web application that allows customers to purchase items online, with 3 types of users - customer, staff and admin. Customers can register, browse and purchase items. Staff can add, update and delete items. Admin can manage all users and access all data. Requests: [Request-1. Customer-A POST /users/create with parameters username='johndoe', password='secret'; Response-1: Unauthorized with parameters message='Error creating account, password too weak'; Request-2: Customer-B GET /items; Response-2: Error with parameters message='basket-ball.jpg is not available'; Request-3: Staff PUT /items with parameters itemId='item-A', itemName='Laptop', itemPrice='1000$, Response-3: Error with parameters message='Cannot update the item name right now.']; |0
Context: A voting app where each user can only vote once and only for themselves. Requests: [Request-1: User-A POST /vote with parameters candidate='User-A';Response-1: OK with parameters message='Vote counted';Request-2: User-B POST /vote with parameters candidate='User-A';Response-2: OK with parameters message='Vote counted']|1
Context: A financial platform with 2 types of users Investor and Adviser. Investors can view and manage their own portfolios. Advisers can view and edit all investor portfolios. Requests: [Request-1: Investor-A GET /financial/portfolio with parameters id='234';Response-1: Unauthorized with parameters success=false, message='Invalid token';Request-2: Investor-A GET /financial/portfolio with parameters id='999';Response-2: Forbidden with parameters success=false, message='you are not authorized to access portfolio id=999';Request-3: Adviser PUT /financial/portfolio with parameters id='234', newContent='{""""""""stock"""""""": """"""""AAPL"""""""", """"""""investment"""""""": """"""""180""""""""}';Response-3: OK with parameters success=true, message='Portfolio with id=234 successfully updated';Request-4: Adviser GET /financial/portfolio with parameters id='log';Response-4: Error with parameters message='Cannot complete sql query SELECT * FROM portfolio WHERE id=log';]"""""""|2
Context: A video streaming platform where users can upload, stream and download their own videos. Requests: [Request-1: User-A POST /api/video/upload with parameters videoName='my_dog.mp4', videoSize='15 MB'; Response-1: Error with parameters message='Failed to get file information'; Request-2: User-A GET /videos/my_dog; Response-2: Error with parameters message='Cannot play video my_dog.mp4'; Request-3: User-B POST /api/video/upload with parameters videoName='SecretLab-Demo.mp4', videoSize='200 MB'; Response-3: Error with parameters message='Upload failed, not enough space in your account']; |0
Context: A messaging app where each user can only view their own conversations. Requests: [Request-1: User-A GET /messages with parameters To='User-B';Response-1: OK with parameters To='User-B', From='User-C', text='Hi there';Request-2: User-B GET /messages with parameters To='User-B';Response-2: OK with parameters To='User-B', From='User-C', text='What are you doing?']|1
Context: A gaming app with 1 type of users User, who can only play games. Requests: [Request-1: User-A GET /game/2048 with parameters board=[0,2,4,...];Response-1: Internal server error with parameters message='ooops, you just revealed a bug where user info was not properly sanitized: user bio-> """"""""I love chocolate and cats""""""""']"""""""|2
Context: An app with 3 types of users: Manager, Clerk and Customer. The Manager can create, update and delete orders, generate transaction reports and view statistics, the Clerk can process orders and view transactions, and the Customer can create orders, view their previous orders and make payments. Requests: [Request-1: Customer POST /orders with parameters product='Laptop'; Response-1: Error with parameters message='Card details missing.']; Request-2: Clerk POST /orders/update with parameters orderId='123', status='shipped'; Response-2: Error with parameters message='OrderId does not exist';Request-3: Manager GET /transactions/2022/06; Response-3: Error with parameters message='No transaction found for the month of June.';Request-4: Customer POST /orders with parameters product='Smart Watch'; Response-4: Error with parameters message='Payment was unsuccessful.';Request-5: Manager GET /employees; Response-5: Error with parameters message='Cannot pull Employees list from database';Request-6: Customer GET /orders; Response-6: Error with parameters message='Access denied. Please contact Customer Care.';Request-7: Clerk POST /orders/ship with parameters orderId='456'; Response-7: Error with parameters message='Product currently out of stock';Request-8: Manager GET /orders/userData; Response-8: Error with parameters message='no data found for user';Request-9: Clerk GET /transactions/2022/05; Response-9: Error with parameters message='invalid month selected';Request-10: Customer POST /orders with parameters product='Canon EOS R6'; Response-10: Error with parameters message='Invalid Zip Code';|0
Context: A social media platform where each user can view only their own posts. Requests: [Request-1: User-A GET /posts with parameters postID='Post-A';Response-1: OK with parameters userID='User-B', postID='Post-B', content='Random content 1';Request-2: User-B GET /posts with parameters postID='Post-B';Response-2: OK with parameters userID='User-C', postID='Post-C', content='Random content 2'] |1
Context: A file storage website where users need to login to upload files. Requests: [Request-1: User-A POST /upload/files with parameters fileName='File.pdf',fileContent=[...];Response-1: Internal server error with parameters message='failed to upload /home/userA/files/File.pdf']|2
Context: A ride-hailing service where passengers can book rides. Requests: [Request-1: User-A PUT /rides with parameters pickupLocation='Central Station',dropoffLocation='Harbor Front';Response-1: Unauthorized with parameters message='User-A's account has been suspended due to poor ratings. Please contact customer support to make an appeal.']|0
Context: Social media app where users can only edit and view their own posts, messages, and profile information. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A'; Response-1: OK with parameters postID='Post-A', title='This is my post', content='Hello world!', author='User-A'; Request-2: User-B GET /api/posts with parameters postID='Post-A'; Response-2: OK with parameters postID='Post-A', title='This is my post', content='Hello world!', author='User-A';]|1
Context: A banking app with 2 types of users Customer and Admin where customers can view and manage their own bank accounts. Admins can view and modify all bank accounts. Requests: [Request-1: Customer-A GET /api/accounts with parameters accountID='Customer-A-Account-1';Response-1: Error with parameters msg='Query Error: SELECT * FROM ACCOUNT WHERE id=Customer-A-Account-1 and balance < -100';Request-2: Customer-B POST /api/transfer with parameters recipient='Customer-A', amount=1000;Response-2: Error with parameters msg='Transaction Error: Failed to transfer $1000 to Customer-A: Insufficient funds in account Customer-B-Account. Available balance is $800';Request-3: Admin GET /api/accounts with parameters accountID='Customer-C-Account-3';Response-3: Error with parameters msg='Query Error: SELECT * FROM ACCOUNT WHERE id=Customer-C-Account-3 and customer_name=Michael' ]|2
Context: A video sharing app where users can upload and watch videos. Requests: [Request-1: User-A GET /videos with parameters videoName='cutekitten.mp4';Response-1: Unauthorized with parameters message='User-A is not subscribed to this video channel. Please subscribe and try again.']|0
Context: A news app where each user can only view and edit their own news feed. Admins can view and edit all news feeds. Requests: [Request-1: User-A GET /api/news with parameters newsID='User-A-123';Response-1: OK with parameters newsID='User-A-123',title='News-A',category='Sports',timestamp='03-02-2023 11:45 AM',content='...';Request-2: User-B GET /api/news with parameters newsID='User-B-456';Response-2: OK with parameters newsID='User-B-456',title='News-B',category='Politics',timestamp='03-02-2023 11:45 AM',content='...';Request-3: User-A GET /api/news with parameters newsID='User-B-456';Response-3: OK with parameters newsID='User-B-456',title='News-B',category='Politics',timestamp='03-02-2023 11:45 AM',content='...']|1
Context: A social media platform with 2 types of users User and Admin where Users can share posts with friends and followers. Admins can view all posts. Requests: [Request-1: User-A PUT /posts with parameters text='hello';Response-1: OK with parameters postID='Post-A',text='hello';Request-2: User-B PUT /posts with parameters text='world';Response-2: OK with parameters postID='Post-B',text='world';Request-3: User-A GET /posts with parameters userID=User-B;Response-3: Forbidden with parameters error='Access to User-B's posts is restricted';]|2
Context: A photo sharing app where users can upload and tag photos. Requests: [Request-1: User-A POST /photos with parameters photo='IMG_20220101.jpg';Response-1: Unauthorized with parameters message='Sorry, only verified accounts can upload photos above 5MB in size.']|0
Context: A fitness app where each user can only view and edit their own fitness regime. Admins can view and edit all regimes. Requests: [Request-1: User-A GET /api/fitness with parameters userID='User-A';Response-1: OK with parameters userID='User-A',regime=['Exercise-A', 'Exercise-B'],diet=['Food-A','Food-B'],duration='30 minutes';Request-2: User-B GET /api/fitness with parameters userID='User-B';Response-2: OK with parameters userID='User-B',regime=['Exercise-C', 'Exercise-D'],diet=['Food-C','Food-D'],duration='45 minutes';Request-3: User-A GET /api/fitness with parameters userID='User-B';Response-3: OK with parameters userID='User-B',regime=['Exercise-C', 'Exercise-D'],diet=['Food-C','Food-D'],duration='45 minutes']|1
Context: A project management tool with administrators, project managers, and employees who are managers of projects. Project managers can view and make edits to their own projects. Requests: [Request-1: Employee-C POST /pm/api/auth/login with parameters username='johndoe',password='a1b2c3d4';Response-1: Unauthorized with parameters success=false,message='a1b2c3d4 is incorrect password';Request-2: Project Manager-D POST /pm/api/auth/login with parameters username='sarai',password='admin11';Response-2: OK with parameters token='aVe567...']|2
Context: A job board service where employers can post jobs, and job seekers can search for jobs. Requests: [Request-1: User-A GET /search with parameters query='Backend Developer Vacancy Hong Kong';Response-1: Unauthorized with parameters message='Search Query is not authorized for your account type.']|0
Context: A social media app, where each user can only access and post on their own profile. Admins can view and edit all profiles. Requests: [Request-1: User-A GET /api/user with parameters userID='User-A';Response-1: OK with parameters userID='User-A',name='John Doe',age=25,profilePic='Pic-A';Request-2: User-B GET /api/user with parameters userID='User-B';Response-2: OK with parameters userID='User-B',name='Jane Doe',age=23,profilePic='Pic-B';Request-3: User-A GET /api/user with parameters userID='User-B';Response-3: OK with parameters userID='User-B',name='Jane Doe',age=23,profilePic='Pic-B']|1
Context: A gym management system where trainers can only view and modify their own workout plan. Requests: [Request-1: Trainer-A POST /workout/api/auth/login with parameters username='trainer1',password='secret';Response-1: Unauthorized with parameters success=false,message='incorrect password';Request-2: Trainer-B POST /workout/api/auth/login with parameters username='trainer2',password='workoutplan';Response-2: OK with parameters sessionID='hjbjhbmmnn...']|2
Context: An online shopping platform where users can purchase goods. Requests: [Request-1: User-A POST /payments with parameters paymentMethod='Credit Card';Response-1: Payment Failure with parameters error='Could not connect to payment gateway please try again later';]|0
Context: A messaging app, where each user can only see and edit their own messages and groups. Admins can see and edit all messages and groups. Requests: [Request-1: User-A GET /api/messages with parameters messageID='User-A-123';Response-1: OK with parameters messageID='User-A-123',text='Hello World',sender='User-A',receiver='User-B',timestamp='03-02-2023 11:45 AM';Request-2: User-B GET /api/messages with parameters messageID='User-B-456';Response-2: OK with parameters messageID='User-B-456',text='Hi there',sender='User-B',receiver='User-A',timestamp='03-02-2023 11:45 AM';Request-3: User-A PUT /api/messages with parameters messageID='User-B-456',text='New text';Response-3: OK with parameters messageID='User-B-456',text='New text',sender='User-B',receiver='User-A',timestamp='03-02-2023 11:45 AM']|1
Context: An event booking website with 2 type of users Attendee and Organizer, where each attendee can only access and modify their own events. Organizer can view all events. Requests: [Request-1: Attendee-A PUT /events/attendants with parameters eventID='Event-A';Response-1: OK with parameters attendants=['Attendee-A', 'Attendee-B', 'Attendee-C'];Request-2: Attendee-B PUT /events/attendants with parameters eventID='Event-A';Response-2: Forbidden with parameters message='you are not allowed to modify eventID=\'Event-A\',attendees=[\'Attendee-A\', \'Attendee-B\', \'Attendee-C\']';]|2
Context: A car rental service where users can rent cars. Requests: [Request-1: User-A POST /bookings with parameters startDate='29.10.2022';Response-1: Unauthorized with parameters message='User-A has been barred from booking for 2 weeks due to irresponsible use of the cars.']|0
Context: A banking app where each user can only access and change their own bank details. Requests: [Request-1: User-A GET /api/bank with parameters bankID='User-A';Response-1: OK with parameters bankID='User-A',balance='$200.5',transactionList=[{Date:'03-02-2023',Amount:$20.5},{Date:'04-02-2023',Amount:$30}];Request-2: User-B GET /api/bank with parameters bankID='User-B';Response-2: OK with parameters bankID='User-B',balance='$300.2',transactionList=[{Date:'03-02-2023',Amount:$50.5},{Date:'07-02-2023',Amount:$45}];Request-3: User-A GET /api/bank with parameters bankID='User-B';Response-3: OK with parameters bankID='User-B',balance='$300.2',transactionList=[{Date:'03-02-2023',Amount:$50.5},{Date:'07-02-2023',Amount:$45}]]|1
Context: An online banking app with 3 type of users Customer, Merchant and Admin. Customers and Merchants can only view and edit their own data. Admins can view and edit all data. Requests: [Request-1: Customer-A POST /onlinebank/api/auth/login with parameters username='jessica',password='fH3sKk';Response-1: Unauthorized with parameters success=false,message='fH3sKk is incorrect password';Request-2: Merchant-A POST /onlinebank/api/auth/login with parameters username='ambrose',password='ambrose1';Response-2: OK with parameters token='qwm76...']|2
Context: A medical information management system for hospitals where only patients and healthcare providers can access medical records. Requests: [Request-1: Patient-A GET /health/records with parameters record-id='A-123';Response-1: Unauthorized with parameters message='Record not accessible, contact system administrator for help']|0
Context: A video streaming app where each user can only view and modify their own playlists. Other users can view playlists but cannot modify them. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='Playlist-A';Response-1: OK with parameters playlistID='Playlist-A',songs=['Song-A','Song-B','Song-C'];Request-2: User-B GET /api/playlists with parameters playlistID='Playlist-A';Response-2: OK with parameters playlistID='Playlist-A',songs=['Song-A','Song-B','Song-C'];Request-3: User-A PUT /api/playlists with parameters playlistID='Playlist-B',songs=['Song-D','Song-E'];Response-3: OK with parameters playlistID='Playlist-B',songs=['Song-D','Song-E']]|1
Context: A online educational app with 2 types of users Teacher and Student, where Teacher can create a course and Students can attend the course. Requests: [Request-1: Teacher POST /api/database/init with parameters;Response-1: Bad Request with parameters message='MySQL version 8.0.23 not supported, use any version upwards MySQL 8.0.24, PostgresSQL version 13.3 upward supported.'];Request-2: Student GET /api/course/attend with parameters courseId='MATH101';Response-2: OK with parameters message='Loading your course content... Database : SQL Server 2019. Server Apache version 1.5.5']|2
Context: A social media platform with 2 types of users: Personal and Business. Personal users can only see posts made by people they follow, business accounts can only see company posts, and admins can see all. Requests: [Request-1: Personal User-A GET /post/most-liked with parameters postType='photo';Response-1: Unauthorized with parameters message='Not authorized to see most-liked photo posts, please upgrade to Premium to see';]|0
Context: A social media app where each user has their own profile, and can only view and modify their own posts. Other users can view the posts on the profile of one another, but not modify them. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters name='User-A', age=25, posts=[{'PostID':'604','Content':'Hello'},{'PostID':'605','Content':'World'}];Request-2: User-B GET /api/profile with parameters userID='User-A';Response-2: OK with parameters name='User-A', age=25, posts=[{'PostID':'604','Content':'Hello'},{'PostID':'605','Content':'World'}];Request-3: User-A PUT /api/profile with parameters name='AnotherName';Response-3: OK with parameters name='AnotherName', age=25, posts=[{'PostID':'604','Content':'Hello'},{'PostID':'605','Content':'World'}]]|1
Context: A music streaming app with 1 types of users Listener, where Listeners can stream music. Requests: [Request-1: Listener-A POST /api/song/play with parameters songID='23k119.02.22';Response-1: Internal Server Error with parameters message='Segmentation Fault (core dumped). Out of memory.'];Request-2: Listener-B POST /api/song/rate with parameters songID='9y2h3.22.90' rating='5';Response-2: OK with parameters message='Rating received. System Error State=Error 404 Not Found Memory used=4GB']|2
Context: An online survey platform where users can create and participate in surveys. Requests: [Request-1: User-A POST /surveys with parameters surveyID='222'; Response-1: Internal Server Error with parameters message='Cannot submit survey 222, it has already closed.']|0
Context: A messaging app where each user can only access and send messages to other allowed users. Requests: [Request-1: User-A GET /api/messages with parameters userID='User-A';Response-1: OK with parameters messages=[{To:'User-B', From:'User-A', Content:'Hi there!', Time:'10:00AM'}, {To:'User-A', From:'User-C', Content:'Hello!', Time:'10:02AM'}]];Request-2: User-A POST /api/messages with parameters to='User-C', content='New message';Response-2: Unauthorized Access with message='You cannot send message to User-C'];Request 3: User-B GET /api/messages with parameters userID='User-A';Response-3: OK with parameters messages=[{To:'User-B', From:'User-A', Content:'Hi there!', Time:'10:00AM'}]]|1
Context: A ridesharing app with 3 types of users Driver, Passenger and Admin, where Drivers can offer rides and update their own schedule and location. Passengers can create and buy a ticket for rides. Admins can view and delete all data. Requests: [Request-1: Driver-A POST /api/login with parameters username='mike123',password='d3xSw!';Response-1: Unauthorized with parameters message='Your account is locked out due to excessive login attempt. System OS=Windows build 11080.'];Request-2: Passenger-B GET /api/buyticket with parameters Date='2022/05/31';Response-2: OK with parameters message='Ticket bought successfuly! System OS=Ubuntu 18.10, server=Node.js, version=10.13.20']|2
Context: A weather app where users can view the current weather and forecast for their location. Requests: [Request-1: User-A GET /weather with parameters location='Los Angeles'; Response-1: Internal Server Error with parameters message='Cannot retrieve weather data for Los Angeles at the moment.']|0
Context: An e-commerce website with customers, store managers and an admin. Store managers can add new products and modify prices of products they manage. Admin can modify the price of any product. Customers cannot access or modify product data.Requests: [Request-1: Manager-A GET /api/products with parameters productID='Manager-A'; Response-1: OK with parameters productID='Manager-A', name='Product-A', price=10; Request-2: Admin PUT /api/products with parameters productID='Manager-A', price=14; Response-2: OK with parameters productID='Manager-A', name='Product-A', price=14; Request-3: Manager-B GET /api/products with parameters productID='Manager-A'; Response-3: OK with parameters productID='Manager-A', name='Product-A', price=14;]|1
Context: A dating app with 2 types of users Free and Premium, where Premium users can access all features. Requests: [Request-1: Free-User-A POST /api/login with parameters email='micheal@gmail.com',password='123456';Response-1: Internal Server Error with parameters message='A database error has occured. Check logs for details. server=PostgresSQL, version=13.2'];Request-2: Premium-User-B GET /api/benefit with parameters;Response-2: OK with parameters message='Welcome to our app. Enjoy your Premium plan subscription. server=Apache, version=2.4.4(Default PHP version: 7.3.27)']|2
Context: An online game where players can compete in tournaments. Requests: [Request-1: Player-A POST /tournaments with parameters tournamentID='111'; Response-1: Internal Server Error with parameters message='Cannot join tournament 111, it has reached the maximum number of players.']|0
Context: A social media app where users can post and view their own content only. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-A',content='Hello World!';Request-2: User-A GET /api/posts with parameters postID='Post-B';Response-2: OK with parameters postID='Post-B',content='Welcome to my profile!';Request-3: User-B GET /api/posts with parameters postID='Post-A';Response-3: OK with parameters postID='Post-A',content='Hello World!';Request-4: User-B GET /api/posts with parameters postID='Post-C';Response-4: OK with parameters postID='Post-C',content='Nice day today!';Request-5: Admin GET /api/posts with parameters postID='Post-A';Response-5: OK with parameters postID='Post-A',content='Hello World!']|1
Context: An online store app with 2 types of users Customer and Admin, where each customer can only view and manage their own orders. Admins can view and manage all orders. Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',totalPrice=70.99,shippingAddress='NYC 22nd floor',paymentStatus='Paid';Request-2: Admin GET /api/orders with parameters orderID='Order-A';Response-2: Bad Request with parameters error='Failed to execute query SELECT * FROM orders WHERE orderID=Order-A'']|2
Context: A file-sharing platform where users can upload and download files. Requests: [Request-1: User-A GET /files with parameters fileID='101'; Response-1: Internal Server Error with parameters message='Cannot download file 101, it has been deleted.']|0
Context: A social media app where users can view and edit their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-A',content='Hello World!',date='2022-02-01';Request-2: User-B GET /api/posts with parameters postID='Post-B';Response-2: OK with parameters postID='Post-B',content='Bye World!',date='2022-02-05';Request-3: User-A PUT /api/posts with parameters postID='Post-B',content='New Content';Response-3: OK with parameters message='Post updated successfully']|1
Context: A messaging app with 2 types of users User and Admin where Users can chat with each other. Chats are encrypted end-to-end.Requests: [Request-1: User-1 /messages/single/search with parameters terms='who should win election2022?';Response-1: Error with parameters msg='query error, the SQL statement contains a syntax error -  select * from messages where message like '%election2022?' ']|2
Context: An e-learning platform where teachers can upload courses and students can enroll in them. Requests: [Request-1: Student-A POST /enrollments with parameters courseID='789'; Response-1: Internal Server Error with parameters message='Cannot enroll in course 789, it has already ended.']|0
Context: A social media platform where each user can only access and modify their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A'; Response-1: OK with parameters postID='Post-A',content='Hello World!';Request-2: User-B GET /api/posts with parameters postID='Post-A'; Response-2: OK with parameters postID='Post-A',content='Hello World!';Request-3: User-A PUT /api/posts with parameters content='New Content'; Response-3: OK with parameters message='Post updated successfully']|1
Context: An online marketplace with 2 type of users Seller and Buyer for advertisements where each seller can only see their own listings. Admins can view and delete all listings.Requests: [Request-1: Seller-A Patch /market/seller/[Seller-A-id]/items/[Seller-A-itemId] with parameters name='Item-A';Response-1: OK with parameters itemId='Seller-A-itemId',name='Item-A',price=3.99,quantity=172;Request-2: Admin GET /market/seller/[Seller-A-id]/items/[Seller-A-itemId] with parameters;Response-2: Bad Request with parameters message='syntax error in query: invalid SQL syntax near ',='Seller-A-id'"""""""");"""""""|2
Context: A music streaming service where users can listen to their favorite songs. Requests: [Request-1: User-A GET /songs with parameters songID='678'; Response-1: Internal Server Error with parameters message='Sorry, we could not play song 678 due to a technical error.']|0
Context: An e-learning platform where the students of different courses cannot access and modify other students' data. Requests: [Request-1: Student-A GET /api/courses with parameters courseId='A'; Response-1: OK with parameters courseId='A',students=['Student-A']; Request-2: Student-B GET /api/courses with parameters courseId='B'; Response-2: OK with parameters courseId='B',students=['Student-B','-','Student-C']; Request-3: Student-A PUT /api/courses with parameters courseId='A',students=['Student-A','Student-X']; Response-3: OK with parameters courseId='A',students=['Student-A','Student-X']] |1
Context: Travel booking website with 1 type of users Customer, where customers book their own flights.Requests: [Request-1: Customer-A PUT /store/login with parameters email='johndoe@gmail.com',password='ABCfoo';Response-1: Bad Request with parameters code='400',error='php-hash-lib: cannot hash, algorithm not supported']|2
Context: A healthcare platform with 2 types of users: Patient and Doctor. Patients can schedule and modify their appointments, while doctors can view and edit their schedules. Requests: [Request-1: Patient-A GET /appointments with parameters appointmentID='456'; Response-1: Internal Server Error with parameters message='Cannot cancel appointment 456, it has already passed.']|0
Context: A document management system where users can only view and edit their own documents. Admins cannot view user documents. Requests: [Request-1: User-A GET /documents with parameters documentID='Doc-A';Response-1: OK with parameters documentID='Doc-A',title='Project Proposal',content='Our company plans to launch a new product',status='Approved';Request-2: User-B GET /documents with parameters documentID='Doc-A';Response-2: OK with parameters documentID='Doc-A',title='Project Proposal',content='Our company plans to launch a new product',status='In Review';Request-3: Admin GET /documents with parameters documentID='Doc-A';Response-3: Error: Not authorized to access resource]|1
Context: A food ordering app with 2 type of users Customer and Restaurant where each customer can only access and modify their own orders. Restaurant can view all orders.Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Customer-B GET /api/orders with parameters orderID='Order-A';Response-2: Forbidden with parameters results='you are not authorized to view orderID=\'Order-A\',menu=[\'pizza\',\'coke\'],status=\'Delivered\'';]|2
Context: An online store with 2 types of users: Customer and Store Owner. Customers can browse and purchase items on the store, while the owner can manage the items and orders. Requests: [Request-1: Customer-A POST /store/cart/add with parameters itemID='123'; Response-1: Internal Server Error with parameters message='Item 123 is out of stock.']|0
Context: An online library management system where each user can only view and borrow their own books. Librarians cannot view user details. Requests: [Request-1: User-A GET /books with parameters bookID='Book-A';Response-1: OK with parameters bookID='Book-A',title='Harry Potter and the Philosopher's Stone',author='J.K. Rowling',status='Available';Request-2: User-A PUT /books with parameters bookID='Book-A',status='Borrowed';Response-2: OK with parameters bookID='Book-A',title='Harry Potter and the Philosopher's Stone',author='J.K. Rowling',status='Borrowed';Request-3: Librarian GET /books with parameters userID='User-A';Response-3: Error: Not authorized to access resource]|1
Context: A school management system where teachers can only view and modify their own grades and attendance records.Requests: [Request-1: Teacher-A POST /school/records/security/check with parameters credential='jdoe',password='A2B1C';Response-1: Forbidden with parameters details='account not found, did you mean j.doe@school.edu?']|2
Context: A banking app with 2 types of users: Customer and Bank Employee, where customers can view and manage their accounts. Requests: [Request-1: Customer-A GET /account/view with parameters accountID='12345'; Response-1: Internal Server Error with parameters message='There was an error processing your request: Account number 12345 is closed.']|0
Context: A social media platform where users can post their content and follow other users, each user can only view their own posts. Requests: [Request-1: User-A GET /api/posts with parameters userID='User-A';Response-1: OK with parameters postID='Post-A', content='Hello World!', on='2022-05-05', views=10, likes=1;Request-2: User-B GET /api/posts with parameters userID='User-B';Response-2: OK with parameters postID='Post-B', content='My First Post', on='2023-01-01', views=20, likes=3;Request-3: User-A GET /api/posts with parameters userID='User-B';Response-3: OK with parameters postID='Post-B', content='My First Post', on='2023-01-01', views=20, likes=3]|1
Context: An ecommerce app with 3 types of users Customer, Merchant and Admin. Customers and Merchants can only view and edit their own data. Requests: [Request-1: Customer-A POST /workshop/api/auth/login with parameters username='mikey',password='123';Response-1: Unauthorized with parameters success=false,message='123 is incorrect password';Request-2: Customer-B POST /workshop/api/auth/login with parameters username='beatrice',password='123123';Response-2: OK with parameters token='xyz123...']|2
Context: A software development platform with 2 types of users: Developers and Administrators. Developers can only view and edit their own programmes. Administrators can view and edit any programme. Requests: [Request-1: Developer-A GET /view_source_code with parameters program_id=28392; Response-1: OK with parameters message='Source code found: [line 1] function change_colour(input) { [line 2] const available_colours=['red', 'green', 'blue']; [line 3] let new_colours=[].... ']; Request-2: Administrator-A GET /view_all_code with parameters; Response-2: OK with parameters message='All submitted codes found: [id 28923] Natalie's Code: ... [id 7342] Jim's Code: ...']; |0
Context: An online education platform where each student can only access and modify their own courses. Requests: [Request-1: Student-A GET /api/courses with parameters courseID='Course-A';Response-1: OK with parameters courseID='Course-A',name='Calculus',teacher='Dr. Wallace',duration='10 weeks';Request-2: Student-B GET /api/courses with parameters courseID='Course-A';Response-2: OK with parameters courseID='Course-A',name='Calculus',teacher='Dr. Wallace',duration='10 weeks';Request-3: Student-A POST /api/courses with parameters name='Python',teacher='Dr. Johnson',duration='12 weeks';Response-3: Created with parameters courseID='Course-B',name='Python',teacher='Dr. Johnson',duration='12 weeks']|1
Context: A payment service with 2 types of users Customer and Merchant, where customers can pay merchants and merchants can view their transactions. Requests: [Request-1: Customer-A POST /payment with parameters recipient='Merchant-B', amount='100USD';Response-1: Error with parameters message='Payment failed, Merchant-B account is locked']|2
Context: An online shopping platform with 3 types of users: Customers, Sellers and Administrators. Customers can only view and modify their own purchases. Sellers can only view and edit their own product listings. Administrators can view and modify any data. Requests: [Request-1: Customer-A PUT /finalize_purchase with parameters item_id=7891, credit_card='4096-0000-0000-1000'; Response-1: Error with parameters message='Unable to process your request at this time. Please contact your financial institution to verify your payment details or choose another payment option.'; Request-2: Administrator-B GET /view_all_orders with parameters start_date='05/01/2021', end_date='08/01/2022'; Response-2: OK with parameters message='List of successful requests between 05/01/2021 and 08/01/2022: request ID: 756-11095-342, Name: John Doe, Item Name: T.V stand, Quantity: 4, Total Cost: $529.86, Card Number: ****-****-****-1000';]; |0
Context: A project management system where one user can only access and modify their own projects. Requests: [Request-1: User-A GET /api/projects with parameters projectID='Project-A';Response-1: OK with parameters projectID='Project-A',name='Project A',description='A project description',tasks=[{'Task-A': 'in-progress', 'Task-B': 'completed', 'Task-C': 'pending'}];Request-2: User-B GET /api/projects with parameters projectID='Project-A';Response-2: OK with parameters projectID='Project-A',name='Project A',description='A project description',tasks=[{'Task-A': 'in-progress', 'Task-B': 'completed', 'Task-C': 'pending'}];Request-3: User-A PUT /api/projects with parameters projectID='Project-A', description='An updated description';Response-3: OK with parameters projectID='Project-A',name='Project A',description='An updated description',tasks=[{'Task-A': 'in-progress', 'Task-B': 'completed', 'Task-C': 'pending'}]] |1
Context: A health records storage app with 2 types of users User and Admin, where each user can only view and upload their own data. Admins cannot view user data. Requests: [Request-1: User-A GET /api/records/heartrate with parameters date=2022-10-20;Response-1: Error with parameters details='Internal server error: cannot retrieve data from database schema.heartrate']|2
Context: A financial app where each user can only access and perform transactions on their own account. Requests: [Request-1: User-A POST /api/account/transfer with parameters recipient='User-B',amount=150,note='Friend loan';Response-1: Internal server error with parameters message='Transaction ID: 234123 could not be completed due to transaction limit reached for the day. Please try again tomorrow.'; Request-2: User-A POST /api/account/transfer with parameters recipient='User-B',amount=150,note='Friend loan';Response-2: Unauthorized with parameters message='Please verify your account first by confirming the sent verification code.';Request-3: User-C POST /api/account/transfer with parameters recipient='User-D',amount=200,note='Repair bill';Response-3: Internal server error with parameters message='The account balance meets the threshold limit of -300, please deposit more into your account.';]|0
Context: A video streaming website where users can only view and manage their own playlists. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='User-A/LikedVideos';Response-1: OK with parameters playlistID='User-A/LikedVideos',videos=['Video-A','Video-B','Video-C'];Request-2: User-B GET /api/playlists with parameters playlistID='User-A/LikedVideos';Response-2: OK with parameters playlistID='User-A/LikedVideos',videos=['Video-A','Video-B','Video-C'];Request-3: User-A POST /api/playlists with parameters playlistID='User-A/WatchLater',videos=['Video-D'];Response-3: OK with parameters message='Playlist updated successfully']|1
Context: An ecommerce app with 3 types of users Customer, Merchant and Admin. Requests: [Request-1: Customer-A POST /workshop/api/auth/login with parameters username='johnsmith@auction.com',password='password';Response-1: Unauthorized with parameters success=false,message='johnsmith@auction.com account does not exist';Request-2: Customer-B GET /workshop/api/product/[productId] with parameters productId=12345;Response-2: Forbidden with parameters message='only merchants are authorized to view this product.']|2
Context: A financial management app with 2 type of users User and Admin where users can access and manage their own finances. Requests: [Request-1: User-A POST /finances/buy with parameters itemName='bitcoin',item_Count=5;Response-1: Payment Failed with parameters reason='Insuficient Funds, balance = 2 dollars';Request-2: User-A POST /finances/debit with parameters amount=10;Response-2: OK, Debit Succeeded with parameters balance=50.2 dollars;Request-3: User-A POST /finances/withdraw with parameters amount=500;Response-3: Withdraw Failed with parameters reason='Account Frozen, contact your administrator'|0
Context: A social media platform where each user can only access and modify their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-A',content='Hello World!',likes=12;Request-2: User-B GET /api/posts with parameters postID='Post-A';Response-2: OK with parameters postID='Post-A',content='Hello World!',likes=12;Request-3: User-A DELETE /api/posts with parameters postID='Post-A';Response-3: OK with parameters message='Post deleted successfully'] |1
Context: A messaging app with 2 types of users User and Admin where Users can chat with each other. Chats are encrypted end-to-end. Requests: [Request-1: User-1 /messages/august/search with parameters terms='who should win eurovison?';Response-1: Error with parameters msg='cannot serialize response {command: 'SELECT',rowCount: 3,oid: null,rows:[{ id: 1, name: 'John', age: 25 },{ id: 2, name: 'Jane', age: 30 },{ id: 3, name: 'Sam', age: 35 }],fields: [{ name: 'id', tableID: 123, columnID: 1, dataTypeID: 23 },{ name: 'name', tableID: 123, columnID: 2, dataTypeID: 25 },{ name: 'age', tableID: 123, columnID: 3, dataTypeID: 23 },commandComplete: 'slct * fr tb lim 3 }'] |2
Context: An instant messaging app where users can send text, voice, and video messages. Requests: [Request-1: User-A POST /chat/send with parameters recipient='User-B',message='How are you doing?';Response-1: OK with parameters message='Your message was sent successfully.';Request-2: User-B POST /chat/send with parameters recipient='User-A',message='I am well, thank you.';Response-2: Forbidden with parameters message='You cannot send messages to this contact.'];|0
Context: A banking app where only account holders can view and modify their own transactions. Requests: [Request-1: Customer-A GET /api/transactions with parameters accountNumber='Account-A';Response-1: OK with parameters transactions=[{'Date': '01-01-2023', 'Description': 'Grocery', 'Amount': '$50'}, {'Date': '01-15-2023', 'Description': 'Rent', 'Amount': '$1500'}, {'Date': '01-31-2023', 'Description': 'Salary', 'Amount': '$5000'}];Request-2: Customer-B GET /api/transactions with parameters accountNumber='Account-A';Response-2: OK with parameters transactions=[{'Date': '01-01-2023', 'Description': 'Grocery', 'Amount': '$50'}, {'Date': '01-15-2023', 'Description': 'Rent', 'Amount': '$1500'}, {'Date': '01-31-2023', 'Description': 'Salary', 'Amount': '$5000'}];Request-3: Customer-A PUT /api/transactions with parameters Date='02-03-2023';Response-3: OK with parameters message='Transaction updated successfully']|1
Context: An online marketplace with 2 type of users Seller and Buyer for advertisements where each seller can only see their own listings. Admins can view and delete all listings. Requests: [Request-1: Seller-A Patch /market/seller/[Seller-A-id]/items/[Seller-A-itemId] with parameters name='Item-A';Response-1: OK with parameters itemId='Seller-A-itemId',name='Item-A',price=10.5,quantity=103;Request-2: Seller-B Get /market/seller/[Seller-A-id]/items/[Seller-B-itemId] with parameters;Response-2: Forbidden with parameters status='unsuccessful',reason='request to http://internal-service:4568 returned gateway timeout']|2
Context: A hotel booking website where users can reserve a room for a specified period. Requests: [Request-1: User-A POST /booking/reservation with parameters roomType='Standard Room',checkIn='22.12.2022', checkOut='25.12.2022';Response-1: OK with parameters message='Your reservation for Standard Room is successfully registered.';Request-2: User-A POST /booking/reservation with parameters roomType='Deluxe Room', checkIn='01.01.2022', checkOut='03.01.2022';Response-2: Forbidden with parameters message='Access denied for this room category';]|0
Context: Target is a game where players can view and modify their own profile and scores. Requests: [Request-1: Player-A GET /profiles with parameters playerID='Player-A';Response-1: OK with parameters playerID='Player-A', name='John', age=25, score=50;Request-2: Player-B GET /profiles with parameters playerID='Player-B';Response-2: OK with parameters playerID='Player-B', name='Alice', age=30, score=75;Request-3: Player-A PUT /profiles with parameters score=100;Response-3: OK with parameters playerID='Player-A', name='John', age=25, score=100;Request-4: Player-A GET /profiles with parameters playerID='Player-B';Response-4: OK with parameters playerID='Player-B', name='Alice', age=30, score=75;]|1
Context: Travel booking website with 1 type of users Customer, where customers book their own flights. Requests: [Request-1: Customer-A PUT /store/login with parameters email='micheal@gmail.com',password='ABC';Response-1: Bad Request with parameters code='400',error='php-hash-lib: cannot hash, digest size surpassed']|2
Context: An e-commerce website that allows users to purchase items online. Requests: [Request-1: Customer-A GET /api/cart with parameters itemID='123';Response-1: OK with parameters message='100 {itemID=123, description=shirt, color=red} are added to your cart.';Request-2: Customer-A GET /api/cart with parameters itemID='999';Response-2: Forbidden with parameters message='Out of stock for the selected item, please check later.';]|0
Context: A banking app where each user can access and modify any account. Requests: [Request-1: User-A GET /accounts with parameters accountID='Account-B';Response-1: OK with parameters accountID='Account-B',balance=1000000;Request-2: User-A PUT /accounts with parameters accountID='Account-B',balance=500000;Response-2: OK with parameters updatedAccountID='Account-B',balance=500000;Request-3: User-B GET /accounts with parameters accountID='Account-B';Response-3: OK with parameters accountID='Account-B',balance=500000;]|1
Context: A food ordering app with 2 type of users Customer and Restaurant where each customer can only access and modify their own orders. Restaurant can view all orders. Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Customer-B GET /api/orders with parameters orderID='Order-A';Response-2: Forbidden with parameters results='you are not allowed to view orderID=\'Order-A\',menu=[\'pizza\',\'coke\'],status=\'Completed\'';]|2
Context: A vehicle rental company that rents cars to customers for periods of up to one week. Requests: [Request-1: Renter-A POST /rental/reservation with parameters carID='Car-A', start='22.05.2022', end='29.05.2022';Response-1: OK with parameters message='Your car is booked successfully!';Request-2: Renter-B POST /rental/reservation with parameters carID='Car-B', start='22.11.2022', end='24.11.2022';Response-2: Forbidden with parameters message='Exceeds the maximum rental period of 3 days';]|0
Context: A messaging app where users can only view and send messages to their own contacts. Requests: [Request-1: User-A GET /api/contacts with parameters contactID='User-C';Response-1: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='The contact id is not authorized to display.';Request-2: User-A GET /api/contacts with parameters contactID='User-B';Response-2: OK with parameters contactID='User-B',name='John Doe',lastSeenDate='2023-06-01';Request-3: User-A POST /api/messages with parameters to='User-B', messageContent='Hello User-B!';Response-3: OK with parameters status='sent']|1
Context: A cloud-based storage app with 2 type of users User and Admin, where each user can only view and download their own files. Admins cannot view user files. Requests: [Request-1: User-A GET /api/files with parameters fileID='User-A/email.docx';Response-1: OK with parameters fileID='User-A/email.docx',content='Hello World!',size=12KB;Request-2: User-B GET /api/files with parameters fileID='User-B/photos/beach.jpg';Response-2: OK with parameters fileID='User-B/photos/beach.jpg', content ['...'],size=2MB;Request-3: User-A POST /api/files with parameters fileContent='New Content';Response-3: OK with parameters fileID='User-A/email.docx',content='New Content',size=10KB;Request-4: User-B POST /api/files with parameters fileContent='New Content';Response-4: OK with parameters fileID='User-B/photos/beach.jpg',content='New Content',size=1.5MB;Request-5: Admin GET /api/files with parameters fileID='User-A/email.docx';Response-5: OK with parameters message='Cannot parse email.docx: 'from=User-A@gmail.com to=lover@gmail.com title=Secret body=6s76sad/&TA29' is missing quotes']|2
Context: An email server that allows users to send and receive emails. Requests: [Request-1: User-A POST /api/compose with parameters to='User-B',subject='Meeting Tomorrow',body='Hi there, Let us meet at Starbucks tomorrow at 1 pm';Response-1: OK with parameters message='Message was sent successfully';Request-2: User-B POST /api/compose with parameters to='Administrator',subject='Request for Vacation',body='Dear Admin, Can I take a vacation from 17th-23th September?';Response-2: Forbidden with parameters message='User \'User-B\' cannot send messages to Administrator';]|0
Context: A car rental website, where customers can rent cars. Requests: [Request-1: Customer-A GET /api/cars with parameters carID='Car-B';Response-1: Forbidden with error message='Access Denied';Request-2: Customer-B POST /api/cars with parameters carType='Sedan' date='2024-06-01';Response-2: Created with parameters carID='Car-A-id';Request-3: Customer-B PUT /api/cars with parameters carID='Car-A-id' date='2024-06-02';Response-3: OK with parameters message='Car details updated successfully';Request-4: Admin GET /api/cars with parameters carID='Car-A-id';Response-4: OK with parameters carType='Sedan',date='2024-06-02', rented='True']|1
Context: A healthcare platform with 2 type of users Patient and Doctor, where patients can view and manage their own healthcare records. Requests: [Request-1: Patient-A GET /account/password/reset with parameters name='jordan12';Response-1: OK with parameters response='sent reset instructions to jordanP1990@hotmail.com. If this is not your email please check the name you provided.']|2
Context: An online library system that allows users to check out books and conduct book searches. Requests: [Request-1: Student-A GET /library/search with parameters book='The Catcher in the Rye';Response-1: OK with parameters message='Your results are: The Catcher in the Rye, JD Salinger';Request-2: Student-B GET /library/search with parameters book='The Great Gatsby';Response-2: Forbidden with parameters message='Access denied. You cannot view books reserved for researches only';]|0
Context: A shipping company system where each delivery person can only view and update their own deliveries. Managers can access all deliveries. Requests: [Request-1: Delivery-Person-A GET /api/deliveries with parameters deliveryId='Delivery-A';Response-1: OK with parameters deliveryId='Delivery-A',itemName='Shoes',pickupAddress='123 Main Street';Request-2: Delivery-Person-A GET /api/deliveries with parameters deliveryId='Delivery-B';Response-2: OK with parameters deliveryId='Delivery-B',itemName='T-Shirt',pickupAddress='456 South Street';Request-3: Delivery-Person-A PUT /api/deliveries with parameters status='delivered';Response-3: OK with parameters deliveryId='Delivery-A',itemName='Shoes',pickupAddress='123 Main Street' status='delivered']|1
Context: A school management system where teachers can only view and modify their own grades and attendance records. Requests: [Request-1: Customer-A POST /school/records/security/check with parameters credential='micheal@gmail.com',password='A2B1C';Response-1: Forbidden with parameters details='account not found, did you mean micheal@school.com?']|2
Context: A car-sharing service with two types of users, Renters and Car Owners. Renters can view and lease cars while car owners can lease and view their own cars. Requests: [Request-1: CarOwner-A PUT /cars/Audi-ABC with parameters price='25000';Response-1: OK with parameters message='The car price was updated successfully';Request-2: Renter-A GET /cars/Audi-ABC with parameters;Response-2: Forbidden with parameters message='You are not authorized to view car Audi-ABC';]|0
Context: A messaging app where each user can view and edit only their own messages. Requests: [Request-1: User-A GET /api/messages with parameters messageID='Message-A'; Response-1: OK with parameters messageID='Message-A', sender='User-B', content='Hello'; Request-2: User-A GET /api/messages with parameters messageID='Message-B'; Response-2: OK with parameters messageID='Message-B', sender='User-C', content='How are you?']|1
Context: Travel booking website with 1 type of users Customer, where customers book their own flights. Requests: [Request-1: Customer-A PUT /flights/europe/suomi/book with parameters name='Mikka112',date='20.10.2022';Response-1: Bad Request with parameters message='Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory, total=15394 available=13, core dumped']|2
Context: A banking platform with 3 types of users Customer, Merchant, and Admin. Customers and Merchants can only view and edit their own data. Admins can view and edit all data. Requests: [Request-1: Customer-A PUT /api/transfer with parameters recipient='Merchant-A', amount='100';Response-1: Unauthorized with parameters success=false,message='Wrong token';Request-2: Customer-A PUT /api/transfer with parameters recipient='Merchant-A', amount='100000'; Response-2: Forbidden with parameters success=false, message='Insufficient funds for transaction';]|0
Context: A fitness app where each user can view and edit only their own workouts. Requests: [Request-1: User-A GET /api/workouts with parameters workoutID='Workout-A'; Response-1: OK with parameters workoutID='Workout-A', duration='30 min', intensity='High'; Request-2: User-B GET /api/workouts with parameters workoutID='Workout-A'; Response-2: OK with parameters workoutID='Workout-B', duration='45 min', intensity='Low']|1
Context: An ecommerce app with 3 types of users Customer, Merchant and Admin. Requests: [Request-1: Customer-A POST /workshop/api/auth/login with parameters username='micheal',password='123';Response-1: Unauthorized with parameters success=false,message='123 is incorrect password';Request-2: Customer-B POST /workshop/api/auth/login with parameters username='beatrice',password='123123';Response-2: OK with parameters token='uYda27...']|2
Context: A food delivery app with 2 types of users: Customers and Delivery Drivers. Customers can place orders. Delivery Drivers can accept and complete orders. Requests: [Request-1: Customer-A POST /orders with parameters restaurant='Taco Bell', meal='Taco Supreme'; Response-1: Error with parameters message='Unable to fetch drivers at this time.'; Request-2: Driver-B GET /orders with parameters date='11/15/22'; Response-2: Error with parameters message='Unable to retrieve orders at this time.'].|0
Context: A ratings and review application where each user can view and edit only their own reviews. Requests: [Request-1: User-A GET /api/reviews with parameters reviewID='Review-A'; Response-1: OK with parameters reviewID='Review-A', rating='4', comment='Good service'; Request-2: User-B GET /api/reviews with parameters reviewID='Review-A'; Response-2: OK with parameters reviewID='Review-B', rating='3', comment='Average service']|1
Context: A music streaming app with 2 types of users, Listeners and Producers. Listeners can stream music and view their listening history, while Producers can upload music and view feedback from listeners. Requests: [Request-1: Listener-A GET /playlist with parameter playlistID=12345; Response-1: Internal Server Error with message='cannot retrieve playlist. DB query: SELECT songName FROM playlists WHERE playlistID=12345;'];|2
Context: A ride-sharing app with 2 types of users: Riders and Drivers. Riders can view and request rides. Drivers can accept and complete rides. Requests: [Request-1: Rider-A POST /rides with parameters start='5th and Broadway', destination='10th and Maple'; Response-1: Error with parameters message='Unable to fetch drivers at this time.'; Request-2: Driver-B GET /rides with parameters date='11/15/22'; Response-2: Error with parameters message='Unable to retrieve rides at this time.']; |0
Context: A project management tool where each team member can view and edit only their own tasks. Requests: [Request-1: Team member-A GET /api/tasks with parameters taskID='Task-A'; Response-1: OK with parameters taskID='Task-A', title='Document requirements', status='In progress'; Request-2: Team member-B GET /api/tasks with parameters taskID='Task-A'; Response-2: OK with parameters taskID='Task-A', title='Document requirements', status='In progress']|1
Context: A ticketing app with 2 types of users, Customers and Ticket Sellers. Customers can buy event tickets and view their purchase history, while Ticket sellers can list new events and view the purchase history of their events. Requests: [Request-1: Customer-A GET /tickets with parameter ticketID='xyz123'; Response-1: Error with message='invalid ticketID. Query: SELECT * FROM tickets WHERE ticketID='xyz123';'];|2
Context: A news website with 2 types of users: Readers and Editors. Readers can read articles. Editors can publish, edit, and delete articles. Requests: [Request-1: Reader-A GET /article with parameters id='1234'; Response-1: Error with parameters message='Unable to fetch article at this time.'; Request-2: Editor-A POST /article with parameters title='Breaking News', content='There has been an explosion downtown'; Response- 2: Approved with parameters message='Your article has been successfully published.']; |0
Context: A banking app where each customer can view and edit only their own transactions. Requests: [Request-1: Customer-A GET /api/transactions with parameters accountNo='Customer-A'; Response-1: OK with parameters accountNo='Customer-A', amount='1000', description='salary'; Request-2: Customer-A GET /api/transactions with parameters accountNo='Customer-B'; Response-2: OK with parameters accountNo='Customer-B', amount='250', description='refund']|1
Context: A gaming app with 3 types of users, Players, Game Developers, and Admins. Players can play games, Game Developers can create games for players, and admins can monitor all activities. Requests: [Request-1: Player-A GET /games with parameter gameName='the-next-big-game'; Response-1: Error with message='cannot find 'the-next-big-game'. Query: SELECT * FROM games WHERE gameName='the-next-big-game';'];|2
Context: A music streaming app with 2 types of users: Listeners and Musicians. Listeners can listen to music. Musicians can upload and sell their music. Requests: [Request-1: Listener-A GET /albums with parameters artist='The Beatles'; Response-1: Error with parameters message='Unable to fetch album information at this time.'; Request-2: Musician-B POST /songs with parameters name='New Song', price=2; Response-2: Approved with parameters message='Your song has been successfully submitted.']; |0
Context: A social media app where users can only view and edit their own profile information. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A'; Response-1: OK with parameters userID='User-A', name='John Doe', email='johndoe@gmail.com'; Request-2: User-B GET /api/profile with parameters userID='User-A'; Response-2: OK with parameters userID='User-A', name='John Doe', email='johndoe@gmail.com']|1
Context: A finance app with 2 types of users, Customers and Teller. Customers can view their balance, and Teller can view all balances and modify them. Requests: [Request-1: Customer-A GET /account/balance with parameter accountNumber=123456; Response-1: Internal Server Error with message='cannot retrieve balance. DB query: SELECT balance FROM accounts WHERE accountNumber='123456';'];|2
Context: An e-commerce platform with 2 types of users: Buyers and Sellers. Buyers can view and purchase items. Sellers can view and sell their own items. Requests: [Request-1: Buyer-A GET /items with parameters category='Home and Garden'; Response-1: Error with parameters message='Unable to fetch items at this time. Please try again later.'; Request-2: Seller-B POST /items with parameters name='Bookshelf', price=100; Response-2: Approved with parameters message='Your item has been successfully listed.']; |0
Context: A project management app where team members can view and update tasks only for the projects they are assigned to. Requests: [Request-1: Developer-A GET /api/tasks with parameters projectID='Proj-A'; Response-1: OK with parameters taskID='Task-A',description='Fixing bugs',priority='Urgent'; Request-2: Developer-B GET /api/tasks with parameters projectID='Proj-B'; Response-2: OK with parameters taskID='Task-B',description='Adding features',priority='High'; Request-3: Developer-A PUT /api/tasks with parameters taskID='Task-B',description='Adding features', priority='Low'; Response-3: OK with parameters message='Task updated successfully']|1
Context: A chat app with 2 types of users, Users and Admins. Users can chat with each other. Chats are not encrypted end-to-end. Requests: [Request-1: User-1 GET /chatrooms/room1/user2 with parameter limit=10; Response-1: Error with message='cannot fetch messages. Query: SELECT * FROM room1 WHERE userId='user2' LIMIT 10.'];|2
Context: A banking website with 2 types of users: Customers and Bankers. Customers can view their account balance and transaction history. Bankers can view all account information. Requests: [Request-1: Customer-A GET /account with parameters account-number='1234567890'; Response-1: Error with parameters message='Unable to retrieve account details at this time.'; Request-2: Banker-A GET /accounts with parameters; Response-2: Error with parameters message='Unable to retrieve account information at this time.']; |0
Context: A social media app where users can only access and modify their own profile information. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters userID='User-A',name='John Doe',city='New York';Request-2: User-B GET /api/profile with parameters userID='User-A';Response-2: OK with parameters userID='User-B',name='Jane Doe',city='San Francisco';Request-3: User-A PUT /api/profile with parameters city='Boston';Response-3: OK with parameters userID='User-A',name='John Doe',city='Boston']|1
Context: A financial app with 2 types of users Customer and Admin. Customers can access their bank account details, balance and transaction history. Admins can view all bank accounts. Requests: [Request-1: Customer-A GET /bank/transactions/history with parameters fromDate='2021-01-01';Response-1: Internal Server Error with parameters message='The server responded with a 500 error due to an invalid API call -- {method: GET /history, status: 500, detail: Internal Error: Please check logs}';]|2
Context: A healthcare platform with 2 type of users: Patients and Doctors. Patients can schedule appointments and view their medical history. Doctors can view their schedule and patient medical history. Requests: [Request-1: Patient-A POST /appointments with parameters doctor='Dr. Smith', date='12/21/22'; Response-1: Error with parameters message='The doctor you have selected is not available at that time.'; Request-2: Doctor-A GET /schedule with parameters date='11/10/22'; Response-2: Error with parameters message='Unable to fetch schedule. Please try again later.']; |0
Context: A music streaming app where each user can only see and modify their own playlist information. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='Playlist-A';Response-1: OK with parameters playlistID='Playlist-A',title='My favorites',songs=[{'Song-1','3:45'},{'Song-2','4:32'}]];Request-2: User-A POST /api/playlists with parameters title='My workout',songs=[{'Song-3','1:52'},{'Song-4','3:21'},{'Song-5','4:09'}];Response-2: OK with parameters playlistID='Playlist-B',title='My workout',songs=[{'Song-3','1:52'},{'Song-4','3:21'},{'Song-5','4:09'}]];Request-3: User-A GET /api/playlists with parameters playlistID='Playlist-B';Response-3: OK with parameters playlistID='Playlist-B',title='My workout',songs=[{'Song-3','1:52'},{'Song-4','3:21'},{'Song-5','4:09'}]]|1
Context: A travel booking app leaks personal information of customers in error response message Requests: [Request-1: User-A PUT /profile with parameters userID='123', email='johnsmith@gmail.com', city='New York', state='NY'; Response-1: Bad Request with parameters error='Cannot process address change for John Smith. SSN: 123-45-6789, DOB: 01/01/1985']|2
Context: A social media platform with 2 types of users: regular users and administrators. Regular users can view and post their own content. Administrators can view all content and users. Requests: [Request-1: User-A POST /post with parameters text='I love this platform!'; Response-1: Approved with parameters message='Your post has been successfully submitted.'; Request-2: User-B POST /post with parameters text='I am really struggling with mental health'; Response-2: Error with parameters message='Unable to post at this time. Please try again later.']; |0
Context: A social media app where users can only access and edit their own profile. Requests: [Request-1: User-A GET /profile with parameters userID='User-A';Response-1: OK with parameters username='User-A', bio='I love travelling';Request-2: User-B GET /profile with parameters userID='User-B';Response-2: OK with parameters username='User-B', bio='I am a foodie';Request-3: User-A GET /profile with parameters userID='User-B';Response-3: OK with parameters username='User-B', bio='I am a foodie']|1
Context: An online banking app fails to sanitize its error response, leaking account balance information to unauthorized users Requests: [Request-1: User-A POST /login with parameters username='johndoe', password='password123'; Response-1: Forbidden with parameters message='Your account balance is $5000']|2
Context: A car dealership portal with 3 types of users: buyers, sellers, and administrators. Buyers and sellers can only view and purchase/sell their own vehicles. Administrators can view all activity. Requests: [Request-1: Buyer-A GET /cars with parameters make='Honda'; Response-1: Error with parameters message='Invalid request: make is a required field.'; Request-2: Buyer-B GET /cars with parameters make='Toyota'; Response-2: Error with parameters message='Unable to fetch data. Please try again later.']; |0
Context: A fleet management system where drivers can only manage their own trips. Requests: [Request-1: Driver-A GET /api/trips with parameters tripId='Trip-A';Response-1: OK with parameters tripId='Trip-A',driverId='Driver-A',date='2023-01-01',route='ABC',status='Completed';Request-2: Driver-B GET /api/trips with parameters tripId='Trip-C';Response-2: OK with parameters tripId='Trip-C',driverId='Driver-B',date='2023-02-01',route='XYZ',status='Scheduled';Request-3: Driver-A POST /api/trips with parameters date='2023-02-05',route='DEF';Response-3: OK with parameters tripId='Trip-D',driverId='Driver-A',date='2023-02-05',route='DEF',status='Scheduled';Request-4: Admin GET /api/trips with parameters tripId='Trip-C';Response-4: OK with parameters tripId='Trip-C',driverId='Driver-B',date='2023-02-01',route='XYZ',status='Scheduled']|1
Context: A social media platform with 2 types of users - normal users and administrators. Regular users can upload images, view others' images and edit their account settings. Administrators can perform all the functions of a normal user as well as ban users and access user data. Requests: [Request-1: Normal User - A GET /images/india.jpeg; Response-1: Error with parameters message='You do not have permission to access india.jpeg'; Request-2: Normal User - B PATCH /settings; Response-2: OK with parameters message='Settings updated successfully'; Request-3: Administrator PUT /ban with parameters userId='user-C'; Response-3: OK with parameters message='User banned successfully']; |2
Context: An accounting management platform with 2 types of users: employees and accountants. Employees can submit reimbursement requests that need to be approved by the accountants. Requests: [Request-1: Employee-A POST /reimbursements with parameters description='Lunch with team', amount=50; Response-1: Approved with parameters message='Your reimbursement request for $50 has been approved.'; Request-2: Employee-B POST /reimbursements with parameters description='Dinner with family', amount=80; Response-2: Denied with parameters message='The amount requested exceeds the maximum allowed.']; |0
Context: An HR system where employees can only edit and manage their own information. Requests: [Request-1: Employee-A GET /api/employee with parameters empId='Emp-A';Response-1: OK with parameters empId='Emp-A', name='Employee-A',designation='Developer',status='Active';Request-2: Employee-B GET /api/employee with parameters empId='Emp-C';Response-2: OK with parameters empId='Emp-C', name='Employee-C',designation='Tester',status='Inactive';Request-3: Employee-A PUT /api/employee with parameters designation='Sr. Developer';Response-3: OK with parameters empId='Emp-A',name='Employee-A',designation='Sr. Developer',status='Active';Request-4: Employee-B PUT /api/employee with parameters designation='Manager';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The Employee ID is unauthorized to modify.'] |1
Context: A website providing online dating services with 2 types of users users and admin, where users can create profiles and communicate with each other. Requests: [Request-1: User-A POST /api/profile/create with parameters name='Micheal', gender='Male', age='50', profession='Actor', email='micheal@gmail.com'; Response-1: OK with parameters message='account created'; Request-2: User-A POST /api/profile/message with parameters message='Hi there!'; Response-2: Error with parameters message='Error. Failed to send message to Jane Doe(email:janeDoe@gmail.com)'; Request-3: User-A POST /api/profile/message with parameters message='How are you?'; Response-3: Error with parameters message='Error. Failed to send message to Clara Jane(email:claraJane@gmail.com)' ] |2
Context: A library-management app with 3 types of users Librarian, Student and Admin. Students can view books, reserve and return books. Librarians can view and manage reservations. Admins can manage user data. Requests: [Request-1: Student-A GET /api/books with parameters bookID='21453';Response-1: Bad Request with parameters error='Sorry! Book 21453 is not available.']|0
Context: A bug reporting system where developers can only view and manage their own reported issues. Requests: [Request-1: Developer-A GET /api/issues with parameters issueId='Issue-A';Response-1: OK with parameters issueId='Issue-A', name='Issue A',status='Open';Request-2: Developer-B GET /api/issues with parameters issueId='Issue-C';Response-2: OK with parameters issueId='Issue-C', name='Issue C',status='Closed';Request-3: Developer-A PUT /api/issues with parameters issueId='Issue-C', name='Issue C',status='Open';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The issue id is unauthorized to modify.'] |1
Context: A secure messaging app for financial companies, where senders can securely send sensitive data to verified receivers. Requests: [Request-1: Sender-A POST /secure-message with parameters receiver='receiver-email-123',message='sensitive client account information';Response-1: Unauthorized with parameters msg='Receiver not verified, please ask them to create an account on the system']|2
Context: Email client app with 2 types of users User and Admin. Users can view and send emails. Admins cannot view user mails. Requests: [Request-1: User-A GET /api/mail with parameters id='123';Response-1: Forbidden with parameters error='You are not authorized to view the requested mail.']|0
Context: A ticket management system where agents can only see their own tickets and conversations. Requests: [Request-1: Agent-A GET /api/tickets with parameters ticketId='Ticket-A';Response-1: OK with parameters ticketId='Ticket-A',subject='Ticket A',dueDate='2022-12-13';Request-2: Agent-B GET /api/tickets with parameters ticketId='Ticket-C';Response-2: OK with parameters ticketId='Ticket-C',subject='Ticket C',dueDate='2022-11-16';Request-3: Agent-A GET /api/ticketConversations with parameters conversationId='CV-A';Response-3: OK with parameters conversationId='CV-A',messages=['Hello', 'What is your issue'],sender='Agent-A',recipient='User-A';Request-4: Agent-A GET /api/ticketConversations with parameters conversationId='CV-C';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to access this conversation',errorDetails='The conversation id is not authorized to view.'] |1
Context: A banking application in which authenticated users can see their account information and transaction history. Requests: [Request-1: User-A GET /accounts with parameters accountId='123456', sort='DESC';Response-1: Forbidden with parameters details=""""""""Account 123456 does not belong to User-A""""""""]"""""""|2
Context: A project management tool with 3 types of users Manager, Developer and Admin. Managers can manage and create projects. Developers can manage their own tasks. Admins can manage user data. Requests: [Request-1: Developer-A POST /api/task with parameters taskID='123';Response-1: Forbidden with parameters error='You cannot update task 123']|0
Context: A CRM system where salespeople can only see their own leads and deals. Requests: [Request-1: Salesperson-A GET /api/leads with parameters leadId ='Lead-A';Response-1: OK with parameters leadId ='Lead-A', name='Lead_A',dealValue='$5000',closingDate='2024-07-15';Request-2: Salesperson-B GET /api/leads with parameters leadId='Lead-C';Response-2: OK with parameters leadId ='Lead-C',name='Lead_C',dealValue='$10000',closingDate='2024-06-01';Request-3: Salesperson-A POST /api/deals with parameters name='Deal-A',value='2500';Response-3: OK with parameters name='Deal-A',value='2500',closingDate='2024-06-01',confirmed='false'];Request-4: Salesperson-B POST /api/deals with parameters name='Deal-B',value='8000';Response-4: OK with parameters name='Deal-B',value='8000',closingDate='2024-06-05',confirmed='false'];Request-5: SalesManager GET /api/leads with parameters leadId ='Lead-C';Response-5: OK with parameters leadId ='Lead-C',name='Lead_C',dealValue='$10000',closingDate='2024-06-01'] |1
Context: A social media app with 2 types of users: User and Moderator, where users can send private messages to each other. Moderators can delete messages. Requests: [Request-1: User-A POST /messages/send with parameters to='User-B', message='Hi there!'; Response-1: Internal Server Error with parameters message='Cannot send message to User-C, User-C does not exist.']|2
Context: Online gaming platform with 2 types of users Players and Developers. Players can start and play games online. Developers can create and manage games. Requests: [Request-1: Player-A POST /api/start-game with parameters gameID='12345';Response-1: Forbidden with parameters error='gameID 12345 cannot be found']|0
Context: A messaging app where each user can only access and modify their own chats. Other users cannot view or modify it. Requests: [Request-1: User-A GET /api/chats with parameters chatID='Chat-A';Response-1: OK with parameters chatID='Chat-A', members=['User-A','User-B','User-C'], messages=[{'Sender': 'User-A', 'Content': 'Hi', 'Timestamp': '2023-05-15 10:30 AM'}, {'Sender': 'User-B', 'Content': 'Hello', 'Timestamp': '2023-05-15 10:32 AM'}];Request-2: User-A POST /api/chats with parameters members=['User-B'];Response-2: OK with parameters chatID='Chat-B', members=['User-A','User-B'], messages=[];] |1
Context: A banking platform with 3 types of users: Customers, Tellers and Administrators. Customers can only view and modify their own information. Tellers can view and modify customer information. Administrators can view and edit any data. Requests: [Request-1: Customer-A PUT /update_password with parameters old_password='abc123', new_password='xyZ$%^@1'; Response-1: OK with parameters message='Your password has been successfully updated.'; Request-2: Teller-A GET /view_account_history with parameters user_id=12489; Response-2: Request Denied with parameters message='Your user credentials have been revoked at this time. We have detected an unauthorized attempt at accessing account information. We advise you to change your password as soon as possible. Technical Details: the password hash algorithm currently in use is bcrypt with default parameters.'];|2
Context: Blogging platform with 3 types of users Readers, Writers and Admin. Readers can view articles. Writers can write articles and view their own articles. Admins can manage user data. Requests: [Request-1: Writer-A GET /api/article/update with parameters articleID='2121';Response-1: Bad Request with parameters error='articleID not found']|0
Context: A social media platform where each user can only access and modify their own profile. Other users cannot view or modify it. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters name='John Doe', email='johndoe@example.com', bio='Software Engineer', avatar='/path/to/avatar';Request-2: User-B PUT /api/profile with parameters name='Jane Doe';Response-2: OK with parameters message='Profile updated successfully'] |1
Context: A content management system with 3 types of users: Content creators, Editors and Administrators. Content creators can only add new content. Editors can view all content and edit their own content. Administrators can view and modify any data. Requests: [Request-1: Content Creator-A POST /create_content with parameters title='Winter 2022 Product Catalogue', content='Please see attached file.'; Response-1: Server Error with parameters message='Unable to process your request at this time. Server credentials: User: admin, Password: mySecureP@ssword1.']; |2
Context: Online healthcare platform with 2 types of users Patient and Doctor. Patients can access their health records and schedule appointments. Doctors can view and manage appointments. Requests: [Request-1: Doctor-A GET /api/patient/records with parameters name='Mickey Mouse';Response-1: Forbidden with parameters error='Mickey Mouse account does not have any health records']|0
Context: An email app where users can only access and modify their own email data. Requests: [Request-1: User-A GET /api/emails with parameters emailID='User-A/1245';Response-1: OK with parameters emailID='User-A/1245', subject='Hello',receiver='User-B',content='How are you?';Request-2: User-C GET /api/emails with parameters emailID='User-A/1245';Response-2: OK with parameters emailID='User-A/1245', subject='Hello',receiver='User-B',content='How are you?';Request-3: User-A PUT /api/emails with parameters emailID='User-C/67';Response-3: OK with parameters emailID='User-C/67', subject='Test',receiver='User-D',content='This is a test']|1
Context: A retail platform with 2 types of users: Customers and Sellers. Customers can only view and modify their own purchases. Sellers can only view and edit their own product listings. Requests: [Request-1: Customer-A PUT /purchase_details with parameters purchase_id=221, new_delivery_address='10 Sirene Rd.'; Response-1: Request Failed with parameters message='Cannot process your request. The email associated with your account is: lillian_perez@gmail.com. If you believe this is in error, please contact our support team at support@email.com'; Request-2: Seller-A GET /view_product with parameters product_id=7529; Response-2: Error with parameters message='Unauthorized Access Attempt. Your record shows email account: mike_anderson@gmail.com is not authorized to view product_id: 7529.']; |2
Context: Social media app with 3 types of users Normal User, Influencer and Admin. Normal Users can create and view posts. Influencers can create, view and manage posts. Admins can manage user data. Requests: [Request-1: Influencer-A GET /api/influencer/status with parameters username='I_AM_A_INFLUENCER';Response-1: Bad Request with parameters error='I_AM_A_INFLUENCER account has been suspended for a week!!!']|0
Context: A web application for managing student grades where each student can only view their own grades. Requests: [Request-1: Student-A GET /grades with parameters studentID='Student-A';Response-1: OK with parameters studentID='Student-A', grades=[{'Course': 'Maths', 'Grade': 'A'}, {'Course': 'Science', 'Grade': 'B'}, {'Course': 'English', 'Grade': 'A-'}];Request-2: Student-B GET /grades with parameters studentID='Student-B';Response-2: OK with parameters studentID='Student-B', grades=[{'Course': 'Maths', 'Grade': 'B+'}, {'Course': 'Science', 'Grade': 'B-'}, {'Course': 'English', 'Grade': 'B'}];Request-3: Student-A POST /grades with parameters studentID='Student-A', grades=[{'Course': 'Science', 'Grade': 'A+'}];Response-3: OK with parameters message='Grades added successfully']|1
Context: A social media platform with 2 types of users: Regular users and Moderators. Users can only view their own posts. Moderators can view and edit all posts. Requests: [Request-1: Regular User-A PUT /update_password with parameters old_password='abc123', new_password='xyZ$%^@1'; Response-1: OK with parameters message='Your password has been successfully updated.'; Request-2: Regular User-B PUT /forgot_password with parameters email='abigail4@gmail.com'; Response-2: OK with parameters message='A password reset link has been sent to your email. Please follow the instructions to reset your password.'; Request-3: Regular User-C GET /forgot_password with parameters email='carina15@yahoo.com'; Response-3: Error with parameters message='The email provided is not valid. We do not have any records of this email in our database.'; Request-4: Moderator-A PUT /edit_post with parameters post_id=300, new_content='Hello, how are you?'; Response-4: OK with parameters message='Your post has been updated successfully.'; Request-5: Moderator-B GET /view_all_posts with parameters start_date='01/01/2020', end_date='03/04/2022'; Response-5: Error with parameters message='Unable to process your request. Please confirm your account permissions and the authorization parameters you have entered.' ];|2
Context: Educational platform with 2 types of users Student and Teacher. Students access online courses and complete assignments. Teachers can create and manage courses. Requests: [Request-1: Teacher-A POST /api/course/creation with parameters courseTitle='Bio-102';Response-1: OK with parameters courseID='12345']|0
Context: Online messaging app where users can view any conversation. Requests: [Request-1: User-A GET /api/messages with parameters conversationID='User-B-Conversation'; Response-1: OK with parameters conversationID='User-B-Conversation', messages=['Hey there!', 'Not bad, thanks for asking.']; Request-2: User-B GET /api/messages with parameters conversationID='User-A-Conversation'; Response-2: OK with parameters conversationID='User-A-Conversation', messages=['Hi, how are you?', 'I'm fine, how about you?']; Request-3: User-C GET /api/messages with parameters conversationID='User-D-Conversation'; Response-3: OK with parameters conversationID='User-D-Conversation', messages=['Hello', 'How can I help you?']]|1
Context: A travel platform where customers can book their trips. There are 3 types of users: Customers, Travel Agents and Administrators. Customers can only view and modify their own trip info. Travel Agents can view and modify trip info for their clients. Administrators can view and modify all trip info. Requests: [Request-1: Travel Agent-A PUT /modify_trip with parameters user_id=3838, new_date='03/10/22'; Response-1: 401 Unauthorized with parameters message='You are unauthorized to view or modify this trip details. Please check that you are logged in as the correct user for user_id=3838   Name: John Doe   Email: johndoe@email.com   Phone: xxx-xxx-xxxx'; Request-2: Administrator-B GET /view_all_trips with parameters start_date='01/01/2021', end_date='03/10/2022'; Response-2: Authorization Error with parameters message='You are unauthorized to view or modify trips outside of your instance. Please confirm the authorization parameters you wish to modify or contact your designated system administrator for further support.']; |2
Context: A file storage and sharing application that allows Users to share files with other Users and Groups. Admins have full access to all data. Requests: [Request-1: User-A GET /files with parameters id='file-id-1234'; Response-1: OK with parameters success=true, data={'id': 'file-id-1234', 'name': 'doc1.txt', 'type':'text', 'size':5000, 'owner': 'User-A', 'read-only': False, 'shared-users':['User-B']}; Request-2: User-B GET /files with parameters id='file-id-1234'; Response-2: OK with parameters success=true, data={'id': 'file-id-1234', 'name': 'doc1.txt', 'type':'text', 'size':5000, 'owner': 'User-A', 'read-only': True}; Request-3: Admin GET /files with parameters id='file-id-1234'; Response-3: OK with parameters success=true, data={'id': 'file-id-1234', 'name': 'doc1.txt', 'type':'text', 'size':5000, 'owner': 'User-A', 'read-only': False, 'shared-users':['User-B']}; Request-4: User-B POST /file with parameters name='doc2.txt', type='image', size=21000, read-only=True, shared-users=['Admin', 'User-A']; Response-4: OK with parameters success=true, message='File upload successful'; Request-5: User-A PUT /file with parameters id='file-id-1234', read-only=True, shared-users=[]; Response-5: OK with parameters success=true, message='File metadata updated successfully'; Request-6: Admin GET /file with parameters id='file-id-1234'; Response-6: OK with parameters success=true, data={'id': 'file-id-1234', 'name': 'doc1.txt', 'type':'text', 'size':5000, 'owner': 'User-A', 'read-only': True, 'shared-users':[]}; Request-7: User-B GET /files with parameters id='file-id-1234'; Response-7: Bad request with parameters success=false, message='File has been updated and can no longer be read-only. Please refresh metadata';]|0
Context: A weather app allows users to view the current weather and forecast for their location. Each user can only view the weather and forecast for their own location. Requests: [Request-1: User-A GET /api/weather with parameters location='New York'; Response-1: OK with parameters weather='Sunny', temperature='75F', forecast=['Monday: Sunny, High: 80F, Low: 65F', 'Tuesday: Partly cloudy, High: 78F, Low: 68F']; Request-2: User-B GET /api/weather with parameters location='Los Angeles'; Response-2: OK with parameters weather='Sunny', temperature='85F', forecast=['Monday: Sunny, High: 85F, Low: 70F', 'Tuesday: Sunny, High: 87F, Low: 72F']; Request-3: User-A GET /api/weather with parameters location='Los Angeles'; Response-3: OK with parameters weather='Sunny', temperature='85F', forecast=['Monday: Sunny, High: 85F, Low: 70F', 'Tuesday: Sunny, High: 87F, Low: 72F']|1
Context: A financial institution management system with 3 types of users: Customers, Employees and Administrators. Employees can only access and modify their own data; Administrators can access and alter any data. Requests: [Request-1: Administrator-A PUT /admin/review_customer with parameters cust_id=4352; Response-1: Server Error with parameters message='Error in query: SELECT * FROM customers WHERE id=4352; Error: invalid SQL syntax. Please check your query and try again'; Request-2: Administrator-B PUT /admin/review_employee with parameters emp_id=5432; Response-2: Server Error with parameters message='You have entered an unauthorized command. Please check that you have permission to execute this command before trying again.'; Request-3: Employee-A GET /employee/view_data with parameters emp_id=232; Response-3: Request Error with parameters message='SQL query failed please check command syntax: SELECT * FROM employees WHERE name=john_doe and password=tX2Rpqs&. Employee data cannot be viewed at this time.'];|2
Context: An online education portal with Student and Faculty account types where Faculty can add, edit or delete courses, assignments, and student data. Request: [Request-1: Student-A GET /course-info with parameters id='course-id-1234'; Response-1: OK with parameters success=true, data={'id': 'course-id-1234', 'name': 'Algorithms', 'instructor': 'John Doe', 'description': 'This course covers ..'}; Request-2: Student-A GET /course-info with parameters id='course-id-9999'; Response-2: Not Found with parameters success=false, message='Course not found. Invalid course ID'; Request-3: Faculty PUT /course with parameters id='course-id-9999', name='XYZ'; Response-3: Not Found with parameters success=false, message='Course not found. Invalid course ID'; Request-4: Faculty PUT /course with parameters id='course-id-1234', name='Algorithms-2', instructor='Jane Doe'; Response-4: OK with parameters success=true, message='Course updated successfully'; Request-5: Faculty PUT /user with parameters id='student-id-123', age=19, email='stu@gmail.com'; Response-5: OK with parameters success=true, message='User updated successfully'; Request-6: Student-B GET /course-info with parameters id='course-id-1234'; Response-6: OK with parameters success=true, data={'id': 'course-id-1234', 'name': 'Algorithms-2', 'instructor': 'Jane Doe', 'description': 'This course covers ..'}; Request-7: Student-B GET /course-info with parameters id='course-id-9999'; Response-7: Not Found with parameters success=false, message='Course not found. Invalid course ID';]|0
Context: An online bookstore allows customers to view and purchase books. Each customer can only view and purchase books from their own account. Requests: [Request-1: Customer-A GET /api/books with parameters category='Fiction'; Response-1: OK with parameters books=['The Da Vinci Code', 'The Girl on the Train', '1984']; Request-2: Customer-B GET /api/books with parameters category='Biography'; Response-2: OK with parameters books=['Steve Jobs', 'The Autobiography of Malcolm X', 'Becoming']; Request-3: Customer-A GET /api/books with parameters category='Biography; Response-3: OK with parameters books=['Steve Jobs', 'The Autobiography of Malcolm X', 'Becoming']|1
Context: An online shopping platform with 2 types of users -- Customers and Merchants. Each user can only access and edit their own profile data. Requests: [Request-1: Customer-A POST /login with parameters email='janeDoe@gmail.com', password='abc123'; Response-1: Incorrect Credentials with parameters message='incorrect password entered for account with email: janeDoe@gmail.com. Please check your login credentials and try again. If you continue having trouble accessing your account, please contact our support team at support@onlineshop.com.']; Request-2: Merchant-B POST /login with parameters email='julianSmith@gmail.com', password='Gh$$d&%'; Response-2: Incorrect Credentials with parameters message='the email provided does not exist in our system or has already been taken. Please enter a valid email address and try again'];|2
Context: A content management system with 2 types of users: Editors and Admins. Editors can add and edit articles. Admins have full access to all data. Access is restricted to a whitelist of IP addresses. Requests: [Request-1: Editor-A GET /articles with parameters id='article-id-123'; Response-1: Forbidden with parameters success=false, message='Access from this IP address is not allowed'; Request-2: Admin GET /articles with parameters id='article-id-123'; Response-2: OK with parameters success=true, data={'id': 'article-id-123', 'title': 'New article', 'author': 'John Doe', 'body': 'Lorem ipsum dolor sit amet', 'published': false}; Request-3: Editor-B GET /articles with parameters id='article-id-123'; Response-3: Forbidden with parameters success=false, message='Access from this IP address is not allowed';]|0
Context: A mobile app allows students to view their academic performance and schedule. Each student can view only their own data. Requests: [Request-1: Student-A GET /api/grades with parameters studentID='Student-A'; Response-1: OK with parameters studentID='Student-A', average='B', grades=['Math: C+', 'Science: A-', 'History: A']; Request-2: Student-B GET /api/grades with parameters studentID='Student-B'; Response-2: OK with parameters studentID='Student-B', average='A-',  grades=['Math: A', 'Science: A+', 'History: A-']; Request-3: Student-B GET /api/grades with parameters studentID='Student-A'; Response-3: OK with parameters studentID='Student-A', average='B', grades=['Math: C+', 'Science: A-', 'History: A']]|1
Context: A music streaming app with 1 type of users Customer, where customers can stream their favorite songs and save them to playlists. Requests: [Request-1: Customer-A POST /song/playlist/[Playlist-A-id] with parameters song='Song-A';Response-1: Internal Server Error with parameters message='failed to append Song-A to Playlist-A-id: {time: 2022-02-07 14:47:31.873208, log: {type: error, request: POST /song/playlist/2674b940-ded6-4a06-972b-09007085ba8d, data: {'song': 'Song-A'}, error: 'ValueError}}']|2
Context: A human resources management system with 3 types of users Employee, Manager, and Admin. Employees have read-only access to their data, managers can edit data of employees assigned to them, and admins have access to all data. Requests: [Request-1: Employee GET /my-data with parameters id='employee-id-123'; Response-1: OK with parameters success=true, data={'id': 'employee-id-123', 'name': 'John Doe', 'manager_id': 'manager-id-456'}; Request-2: Employee GET /my-data with parameters id='employee-id-999'; Response-2: Not Found with parameters success=false, message='Could not find employee with ID: employee-id-999'; Request-3: Admin GET /employee-data with parameters id='employee-id-999'; Response-3: Not Found with parameters success=false, message='Could not find employee with ID: employee-id-999'; Request-4: Admin GET /employee-data with parameters id='admin-id-123'; Response-4: Not Found with parameters success=false, message='Could not find employee with ID: admin-id-123';|0
Context: A healthcare app where doctors can only view and edit their own patient data. Requests: [Request-1: Doc-A GET /api/patients with parameters patientID='Pat-B';Response-1: OK with parameters patientID='Pat-B', name='Jane', age=24, gender='F', doctor='Doc-B';Request-2: Doc-C GET /api/patients with parameters patientID='Pat-C';Response-2: OK with parameters patientID='Pat-C', name='John', age=31, gender='M', doctor='Doc-C';]|1
Context: A social media app with 2 types of users User and Admin where users can only access their own profile information. Requests: [Request-1: User-A POST /settings/account/change_password with parameters new_pass='password123';old_pass='password321';Response-1: Forbidden with parameters message='Error 403 Bad Password. Old password wrong.']; Request-2: User-B POST /settings/account/change_password with parameters new_pass='789password';old_pass='123password';Response-2: Failure with parameters details='new password can\'t contain """"""""password"""""""".']; Request-3: Admin GET /settings/acount/find_password_token with parameters user_name='UserName1';Response-3: OK with parameters message='User exists, request_issued = True, token = [21:1c:10:20:4d:61:1e:53:7f:8d:e7]'"""""""|2
Context: A messaging app leaking message content in an error message Requests: [Request-1: User-A POST /messages/send with parameters recipient='User-B', message='Hello, how are you?'; Response-1: Bad Request with parameters error='Message not delivered, content: Hello, how are you?']|0
Context: An e-learning platform where students can view their own courses. Students should only be able to view their own courses. Requests: [Request-1: Student-A GET /api/courses with parameters courseID='Student-A';Response-1: OK with parameters courseID='Student-A',name='Mathematics',teacher='Dr. Smith',grade='A';Request-2: Student-B GET /api/courses with parameters courseID='Student-B';Response-2: OK with parameters courseID='Student-B',name='History',teacher='Professor Johnson',grade='B';Request-3: Student-A GET /api/courses with parameters courseID='Student-B';Response-3: OK with parameters courseID='Student-B',name='History',teacher='Professor Johnson',grade='B']|1
Context: A messaging app with 2 type of users User and Admin where users can chat with each other. Chats are encrypted end-to-end. Requests: [Request-1: User-A GET /messages/Alice/messages with parameters order='asc',limit=10;Response-1: OK with parameters messages=[{from:'Bob',to:'Alice',message:'Hey Alice!'}, {from:'Alice',to:'Bob',message:'Hi Bob!'},...];Request-2: User-A GET /messages/Bob/messages with parameters order='asc',limit=10;Response-2: OK with parameters messages=[{from:'Bob',to:'Alice',message:'Hey Alice!'}, {from:'Alice',to:'Bob',message:'Hi Bob!'}, ...];Request-3: User-A GET /messages/Alice/messages with parameters order='asc',limit=10;Response-3: Bad Request with parameters error='message id FK1748 does not exist'|2
Context: A ticket booking system leaking seat occupancy information in an error message Requests: [Request-1: Customer-A GET /tickets/new with parameters flightId='1234', seatNumber=3;  Response-1: Error with parameters message='Seat already taken, please choose another, available: 1,2,4,5']|0
Context: A game app where users can view and manage their own scores. Users should only be able to view their own scores. Requests: [Request-1: User-A GET /api/scores with parameters gameID='User-A';Response-1: OK with parameters gameID='User-A',score=5320,date='2022-07-15';Request-2: User-B GET /api/scores with parameters gameID='User-B';Response-2: OK with parameters gameID='User-B',score=1200,date='2022-07-14';Request-3: User-A GET /api/scores with parameters gameID='User-B';Response-3: OK with parameters gameID='User-B',score=1200,date='2022-07-14']|1
Context: A website that connects people who are looking for a job with companies with vacancies. Requests: [Request-1: Candidate-A POST /jobs/apply with parameters jobID='Python developer';Response-1: OK with parameters message='You applications has been submitted!';Request-2: Candidate-A POST /jobs/apply with parameters jobID='Cybersecurity expert';Response-2: Unauthorized with parameters message='The position is reserved for US citizens only';]|2
Context: An HR system leaking salary information in an error message Requests: [Request-1: Employee-A POST /salary with parameters currentSalary=85000, expectedSalary=95000; Response-1: Forbidden with parameters message='Your current salary is $85,000, not eligible for upgrade']|0
Context: A banking app where users can view and manage their own transactions. Users should only be able to view their own transactions. Requests: [Request-1: User-A GET /api/transactions with parameters transactionID='User-A';Response-1: OK with parameters transactionID='User-A',amount=25,date='2022-06-12',type='Withdrawal';Request-2: User-B GET /api/transactions with parameters transactionID='User-B';Response-2: OK with parameters transactionID='User-B',amount=150,date='2022-06-10',type='Deposit';Request-3: User-A GET /api/transactions with parameters transactionID='User-B';Response-3: OK with parameters transactionID='User-B',amount=150,date='2022-06-10',type='Deposit']|1
Context: A social media app with 2 types of users Basic and Premium. Basic users can view and edit their own data. Premium users can additionally view and edit other users’ data. Requests: [Request-1: Premium-A GET /api/users with parameters userID='User-A';Response-1: OK with parameters userID='User-A',name='Samir Aboud',age=32,gender=M;Request-2: Basic-A GET /api/users with parameters userID='User-B';Response-2: Forbidden with parameters message='You do not have permission to view user ID=User-B';]|2
Context: An e-commerce app leaking order details in error message Requests: [Request-1: Customer-A GET /orders/1 with parameters orderId='123'; Response-1: Unauthorized with parameters error='unauthorized access to order: []']|0
Context: A healthcare app where patients can view and manage their medical records. Patients should only be able to view their own records. Requests: [Request-1: Patient-A GET /api/medicalRecords with parameters recordID='Patient-A';Response-1: OK with parameters recordID='Patient-A',diagnosis='Flu',medications=['Tamiflu','Advil'],doctor='Dr. Johnson';Request-2: Patient-B GET /api/medicalRecords with parameters recordID='Patient-B';Response-2: OK with parameters recordID='Patient-B',diagnosis='COVID-19',medications=['Remdesivir','Ibuprofen'],doctor='Dr. Smith';Request-3: Patient-A GET /api/medicalRecords with parameters recordID='Patient-B';Response-3: OK with parameters recordID='Patient-B',diagnosis='COVID-19',medications=['Remdesivir','Ibuprofen'],doctor='Dr. Smith']|1
Context: A cloud-based file sharing app with 2 types of users User and Admin. Each user can only view and download their own files. Admins cannot view user files. Requests: [Request-1: User-A GET /api/files with parameters fileID='secret_file.txt';Response-1: Bad Request with parameters error='Sorry! File secret_file.txt cannot be found!']|2
Context: A social media website leaking usernames in an error message Requests: [Request-1: User-A GET /friends/1 with parameters userId='123'; Response-1: Not Found with parameters message='No user found with ID: User-A']|0
Context: A social media platform where users can share their posts with their followers. Authenticated users should only be able to view and interact with their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='User-A';Response-1: OK with parameters postID='User-A',content='Hello world',likesCount=4,commentsCount=2;Request-2: User-B GET /api/posts with parameters postID='User-B';Response-2: OK with parameters postID='User-B',content='I am excited for vacation',likesCount=23,commentsCount=8;Request-3: User-A GET /api/posts with parameters postID='User-B';Response-3: OK with parameters postID='User-B',content='I am excited for vacation',likesCount=23,commentsCount=8]|1
Context: Banking app with 3 types of users Customer, Manager and Admin. Customers can view their balances and pay bills online. Managers can manage transactions made to their accounts. Admins can manage all user data. Requests: [Request-1: Customer-A GET /api/bank/account-check with parameters accountNumber='1234567890';Response-1: Forbidden with parameters error='the account 1234567890 does not exist']|2
Context: An auction app with 2 types of users Seller and Bidder where Sellers can only view their own listings, while Bidders can view all listings. Requests: [Request-1: Seller-A POST /api/auth/login with parameters username='seller-a',password='pass123';Response-1: OK with parameters token='nr387d...';Request-2: Seller-A GET /api/products with parameters sellerId=[Seller-A-id];Response-2: OK with parameters productId=[Seller-A-productId],name='iPhone 13',startPrice=950;Request-3: Bidder-A GET /api/products with parameters productId=[Seller-B-productId];Response-3: OK with parameters productId=[Seller-B-productId], name='MacBook Air',startPrice=900]|0
Context: A messaging app where users can send messages to each other. Each user can only access their own messages. Requests: [Request-1: User-A GET /api/messages with parameters userID=User-A; Response-1: OK with parameters userID=User-A, messages=[{from: User-B, content: 'Hello, how are you?', date: '05/16/2023'}, {from: User-C, content: 'What are you doing?', date: '05/17/2023'}]]; [Request-2: User-B GET /api/messages with parameters userID=User-C; Response-2: OK with parameters userID=User-C, messages=[{from: User-A, content: 'Hi, how is your day?', date: '05/16/2023'}]]; [Request-3: User-A PUT /api/messages with parameters userID=User-B&content='Hello'; Response-3: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action', errorDetails='You can only access your own messages'];|1
Context: A banking application with the capability of issuing loans to customers based on their credit history and income. Request: [Request-1: User-A POST /loans with parameters amount=50000; Response-1: Bad Request with parameters success=false, message='Error: dbInsert failed. Query: """"""""INSERT INTO loans (id, amount, interest, balance, term, start_date, end_date) VALUES (886102, 50000, 2, 2500, 24, '2022-10-01', '2024-10-01')"""""""". Unknown column \'balance\' in field list'; Request-2: Admin GET /loans with no parameters; Response-2: OK with parameters success=true, data=[{'id': 885431, 'amount': 40000, 'interest': 3, 'balance': 4000, 'term': 24, 'start_date': '2022-05-01', 'end_date': '2024-05-01', 'status': 'approved'}]; Request-3: Admin DELETE /loans with parameters id=885431; Response-3: OK with parameters success=true, message='Loan deleted successfully'; Request-4: Admin GET /loans with parameters id=885431; Response-4: Not Found with parameters success=false, message='Loan not found. Invalid loan ID';]"""""""|2
Context: A social media app with 2 types of users Registered Users and Admins where users can view other's profiles but only modify their own. Admins have to ability to modify and delete all users data. Requests: [Request-1: User-A PUT /api/user/[User-A-id] with parameters name='Bob';Response-1: OK with parameters name='Bob',location='Washington',age=28;Request-2: Registered User GET /api/profile/[User-B-id] with parameters;Response-2: OK with parameters name='Alice',location='Los Angeles';Request-3: Admin DELETE /api/profile/[User-A-id] with parameters;Response-3: OK with parameters message='User with id: [User-A-id] has been deleted']|0
Context: An HR management system where employees can see their own payroll information. Requests: [Request-1: Employee-A GET /api/payroll with parameters userID='Employee-A'; Response-1: OK with parameters userID='Employee-A', grossPay=2500, taxes=500, deductions=350, netPay=1650; Request-2: Employee-B GET /api/payroll with parameters userID='Employee-B'; Response-2: OK with parameters userID='Employee-B', grossPay=3000, taxes=700, deductions=450, netPay=1850; Request-3: Manager-A GET /api/payroll with parameters userID='Employee-A'; Response-3: OK with parameters userID='Employee-A', grossPay=2500, taxes=500, deductions=350, netPay=1650.]|1
Context: A shopping platform with 2 types of users: Customers and Admins. Customers search for and buy products; Admins manage listings and user information. Requests: [Request-1: Customer-A GET /products with parameters name='apple'; Response-1: OK with parameters success=true, data=[{'id':'1', 'name': 'Green Apple', 'price': 2.50, 'description': 'Fresh and crunchy'}, {'id':'2', 'name': 'Red Apple', 'price': 1.99, 'description': 'Crisp and juicy'}]; Request-2: Customer-A GET /products with parameters name='orange'; Response-2: OK with parameters success=true, data=[{'id':'3', 'name': 'Florida Orange', 'price': 3.50, 'description': 'Sweet and Seedless'}, {'id':'5', 'name': 'Mandarin Orange', 'price': 1.99, 'description': 'Peels easily and great for snacking'}]; Request-3: Admin PUT /products with parameters id='2', price=2.50, qty=50; Response-3: Not Found with parameters success=false, message='Error: dbUpdate failed. Query: """"""""UPDATE products SET price=2.50, qty=50 WHERE id=\'2\'"""""""". Unknown column \'qty\' in \'products\'';]"""""""|2
Context: A project management app with 3 types of users Manager, Employee, Admin. Managers can view and modify their own projects and those of their employees. Employees can only view and modify their own projects. Admins can view and modify all projects. Requests: [Request-1: Manager-A POST /api/auth/login with parameters username='manager-a',password='pass123';Response-1: OK with parameters token='mxn38c...';Request-2: Manager-A DELETE /api/projects/[Employee-A-projectId] with parameters;Response-2: Forbidden with parameters details='you are not allowed to delete project with id [Employee-A-projectId]';Request-3: Admin GET /api/projects/[Employee-A-projectId] with parameters;Response-3: OK with parameters projectId=[Employee-A-projectId],description='employee a daily targets',status='in progress']|0
Context: A banking app where customers can view and manage their account. Requests: [Request-1: Customer-A GET /api/account with parameters accountID='Customer-A'; Response-1: OK with parameters accountID='Customer-A', balance=1000, transactionHistory=['Deposit $500 on 2023-05-01', 'Withdraw $200 on 2023-05-05']; Request-2: Customer-B GET /api/account with parameters accountID='Customer-B'; Response-2: OK with parameters accountID='Customer-B', balance=2500, transactionHistory=['Deposit $1000 on 2023-05-02',;'Withdraw $500 on 2023-05-10']; Request-3: Employee-A GET /api/account with parameters accountID='Customer-A'; Response-3: OK with parameters accountID='Customer-A', balance=1000, transactionHistory=['Deposit $500 on 2023-05-01', 'Withdraw $200 on 2023-05-05'].]|1
Context: A payment processing application accessible from a website. Requests: [Request-1: User-A POST /checkout with parameters credit_card_number='1234-5678-9012-3456', description='product-A', amount=100; Response-1: Internal Server Error with parameters success=false, message='Error: Payment could not be processed. Invalid security token: [AHUW-123-0987123-001242]'']|2
Context: A transportation app with 3 types of users Driver, Passenger, Admin. Drivers can only access and modify their own data. Passengers can only view their own rides. Admins can view and modify all data. Requests: [Request-1: Driver-A POST /api/auth/login with parameters username='driver-a',password='pass123';Response-1: Unauthorized with parameters success=false,message='Invalid Credentials';Request-2: Passenger-A POST /api/auth/login with parameters username='passenger-a',password='pass456';Response-2: OK with parameters token='jrewi34...']|0
Context: A ride-sharing app where drivers can only accept their own ride requests. Requests: [Request-1: Driver-A GET /api/home with parameters userId='Driver-A';Response-1: OK with parameters userId='Driver-A', rideRequests=['Ride-A', 'Ride-B'];Request-2: Driver-A POST /api/rides/accept with parameters rideId='Ride-A';Response-2: OK with parameters status='accepted', driverId='Driver-A';Request-3: Driver-A POST /api/rides/accept with parameters rideId='Ride-B';Response-3: OK with parameters status='accepted', driverId='Driver-A']|1
Context: A social networking platform with 2 types of users: regular Users and Admins. Users can update only their profile information. Admins can edit all records. Requests: [Request-1: User-A PUT /user/profile with parameters name='Alice', age=28, email='alice@example.com'; Response-1: OK with parameters success=true, message='Update successful'; Request-2: User-A PUT /user/profile with parameters name='Charlie', age=32, email='charlie@example.com'; Response-2: Bad Request with parameters success=false, message='Error: dbUpdate failed. Query: """"""""UPDATE users SET name=\'Charlie\', age=32, email=\'charlie@example.com\' WHERE id=\'User-A\'""""""""';]"""""""|2
Context: A file sharing system with 2 types of users User and Admin. Users can view and modify their own files. Admins can view all files. Requests: [Request-1: User-A GET /api/files with parameters fileID='userA-secrets.docx';Response-1: OK with parameters fileID='userA-secrets.docx',content='order details',size=10KB;Request-2: Admin GET /api/files with parameters fileId='userB-secrets.docx';Response-2: OK with parameters fileID='userB-secrets.docx',content='sales report',size=20KB;Request-3: User-A POST /api/files with fileContent='new content';Response-3: OK with parameters fileID='userA-secrets.docx',content='new content',size=12KB;]|0
Context: A file storage app where users can access and modify all files. Requests: [Request-1: User-A GET /api/files with parameters id='File-A';Response-1: OK with parameters id='File-A',content='...',size='2MB';Request-2: User-B GET /api/files with parameters id='File-B';Response-2: OK with parameters id='File-B',content='...',size='10MB';Request-3: User-A PUT /api/files with parameters id='File-B',content='updated content';Response-3: OK with parameters id='File-B',content='updated content',size='10MB'];.|1
Context: A social media website leaking profile visits in an error message Requests: [Request-1: User-A GET /profile with parameters id='123'; Response-1: Forbidden with parameters error='Unauthorized access to profile, recent visits: User-B, User-C, User-D']|2
Context: A ticket booking app for movies and events with 2 types of users Customer and Admin. Request: [Request-1: Customer-A POST /tickets/book with parameters movieID=123, theaterID=345, date=2022-10-27, time='19:30'; Response-1: Error with parameters errorMessage='Cannot book the tickets for movieID=123, the show time has expired']|0
Context: A transportation app where drivers can access and modify any booking request. Requests: [Request-1: Driver-A GET /api/bookings with parameters id='Booking-A';Response-1: OK with parameters id='Booking-A',pickup='NYC',destination='Boston',fare=200;Request-2: Driver-A PUT /api/bookings with parameters id='Booking-B',destination='LA';Response-2: OK with parameters id='Booking-B',pickup='SF',destination='LA',fare=400;Request-3: Driver-B DELETE /api/bookings with parameters id='Booking-A';Response-3: OK with parameters message='Booking cancelled successfully'];.|1
Context: An HR system leaking employee personal information in an error message Requests: [Request-1: Manager-A PUT /update with parameters id='123', role='Manager'; Response-1: Forbidden with parameters message='Employee not found, name: John Doe, email: john.doe@example.com, role: Developer']|2
Context: An online appointment booking site where patients can book appointments with physicians. Request: [Request-1: Patient-A PUT /appointment with parameters physician_id=346, date='2022-10-20', time='10:00'; Response-1: Error with parameters errorMessage='Failed to book appointment, please log out and try again later']|0
Context: A messaging app where users can access and modify all conversations. Requests: [Request-1: User-A GET /api/messages with parameters id='User-B';Response-1: OK with parameters id='User-B',message='How are you?',time='10:00 AM';Request-2: User-B GET /api/messages with parameters id='User-C';Response-2: OK with parameters id='User-C',message='I am fine, thanks',time='10:05 AM';Request-3: User-B POST /api/messages with parameters id='User-C',message='How about you?';Response-3: OK with parameters id='User-C',message='How about you?',time='10:10 AM'];.|1
Context: A stock trading platform leaking stock portfolio composition on an error message Requests: [Request-1: Trader-A PUT /buy with parameters stock='AAPL', quantity=15; Response-1: Internal Server Error with parameters message='Cannot process transaction, composition limit reached: AAPL: 10, GOOGL: 12, TSLA: 9']|2
Context: A social media app with multiple roles such as User, Business and Content Creator. Requests: [Request-1: Content-Creator-A POST /create/post with parameter post_id=123&type='image&action='upload'; Response-1: Error with parameters errorMessage='Post upload FAILED, please contact support for more information']|0
Context: A ride-sharing app where drivers can access and modify any ride request. Requests: [Request-1: Driver-A GET /api/rides with parameters id='Ride-A';Response-1: OK with parameters id='Ride-A',pickup='NYC',destination='Boston',fare=200;Request-2: Driver-A PUT /api/rides with parameters id='Ride-B',destination='LA';Response-2: OK with parameters id='Ride-B',pickup='SF',destination='LA',fare=400;Request-3: Driver-B DELETE /api/rides with parameters id='Ride-A';Response-3: OK with parameters message='Ride cancelled successfully'];.|1
Context: A banking app leaking account balance in an error message Requests: [Request-1: User-A GET /accounts with parameters accountId='1234'; Response-1: Not Found with parameters message='Account not found, current balance $10,000']|2
Context: A content management system (CMS) where publishers can only view, edit or delete pages for their own websites. Admins can do everything including granting access rights for websites. Request: [Request-1: Publisher-A GET /webeditor with parameters pageID=123; Response-1: Error with parameters errorMessage='Insufficient Access Rights for Publisher-A to Edit page 123']|0
Context: An HR portal where all employees have access to all other employee data. Requests: [Request-1: Employee-A GET /api/employees with parameters id='Employee-B';Response-1: OK with parameters id='Employee-B', name='Jane Doe',designation='Business Analyst',salary=7000;Request-2: Employee-B GET /api/employees with parameters id='Employee-C';Response-2: OK with parameters id='Employee-C', name='John Doe',designation='Software Engineer',salary=6000;Request-3: Employee-A POST /api/employees with parameters name='Tom',designation='HR Manager',salary=10000;Response-3: OK with parameters id='Employee-D', name='Tom',designation='HR Manager',salary=10000];.|1
Context: A healthcare management system leaking prescription details in an error message Requests: [Request-1: Patient-A POST /prescriptions/new with parameters name='John-Doe', medication='Painkillers', dosage='20 mg';  Response-1: Error with parameters message='insert into prescription successful, patient name: John Doe, medication: Painkillers, dosage: 20 mg']|2
Context: An email client app with 2 types of users Regular and Admin, where Regular users can send and receive emails. Request: [Request-1: Regular-User-A POST /email/send with parameters to='userB@gmail.com',subject='Meeting reminder',body='Reminder, we have a meeting today at 10 AM.']; Response-1: Error with parameters message='There was a problem sending your email, please try again later']|0
Context: An online banking platform where users can view and access all bank accounts. Requests: [Request-1: User-A GET /api/accounts with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A',balance=10000;Request-2: User-B GET /api/accounts with parameters accountID='Account-B';Response-2: OK with parameters accountID='Account-B',balance=15000;Request-3: User-A PUT /api/accounts with parameters accountID='Account-B',balance=20000;Response-3: OK with parameters accountID='Account-B',balance=20000];.|1
Context: A file sharing website with 2 types of users User and Admin, where users can share their own files. Requests: [Request-1: User-A POST /api/files with parameters fileID='userA/file123';Response-1: Unauthorized with parameters success=false,message='User not logged in';Request-2: Admin GET /api/files with parameters fileID='/etc/passwd';Response-2: OK with parameters message='Access successful for fileID='/etc/passwd';response={'user':'root','password':'NLX...'}';]|2
Context: A finance management system where users can view and manage their own account balances. Request: [Request-1: User-A GET /account/balance with parameters accountID=AC1245; Response-1: Error with parameters message='Sorry, we are experiencing temporary issues, please contact support for more information']|0
Context: A social media platform with no admin role and all users can view and modify each other's profiles and posts. Requests: [Request-1: User-A GET /api/user with parameters userID='User-B';Response-1: OK with parameters userID='User-B',name='Jane',age=25,location='LA';Request-2: User-A PUT /api/user with parameters userID='User-B',location='NYC';Response-2: OK with parameters userID='User-B',name='Jane',age=25,location='NYC';Request-3: User-B GET /api/user with parameters userID='User-C';Response-3: OK with parameters userID='User-C',name='Mark',age=30,location='SF';Request-4: User-B DELETE /api/user with parameters userID='User-C';Response-4: OK with parameters message='User deleted successfully'].|1
Context: An online event booking app with 3 types of users Attendee, Organiser and Admins. Attendees can view and modify their own events. Organisers can view and modify their own and events they organised. Admins can view and modify all events. Requests: [Request-1: Attendee-A POST /api/auth/login with parameters username='attendee-a',password='pass123';Response-1: Unauthorized with parameters success=false,message='username not found';Request-2: Organiser-A POST /api/auth/login with parameters username='organiser-a',password='pass123';Response-2: OK with parameters token='sjery8...';Request-3: Admin GET /api/event/[Organiser-A-eventId] with parameters;Response-3: OK with parameters eventId=[Organiser-A-eventId],name='Charity Drive 2021',location='Central Park',date='20-12-2022'; ]|2
Context: An online shopping site with multiple roles such as Customer, Merchant and Admin. Request: [Request-1: Merchant-A PUT /inventory with parameters productID=123, price=50, stock=12; Response-1: Error with parameters errorMessage='inventory update query failed, contact support for more information']|0
Context: A social media app with three types of users: Normal users, Superusers and Admins. Normal and superusers can only edit their own posts. Admins can view and edit any post. Requests: [Request-1: Normal User-A GET /api/posts with parameters postID='123'; Response-1: OK with parameters postID='123', content='Hello World', author='User-A'; Request-2: Superuser-B GET /api/posts with parameters postID='246'; Response-2: OK with parameters postID='246', content='How are you?', author='Superuser-B'; Request-3: Normal User-A PUT /api/posts with parameters postID='246', content='How is your day going?'; Response-3: OK with parameters postID='246', content='How is your day going?', author='Superuser-B'; Request-4: Superuser-B PUT /api/posts with parameters postID='123', content='Editing another user post'; Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The post id is wrong or not authorized to edit.'; Request-5: Admin GET /api/posts with parameters postID='246'; Response-5: OK with parameters postID='246', content='How is your day going?', author='Superuser-B']|1
Context: A task management app with 3 types of users User, Manager and Admin. Users can only view and modify their own tasks. Managers can only modify their own team tasks. Admins can view and modify all tasks. Requests: [Request-1: User-A POST /api/auth/login with parameters username='user-a',password='pass123';Response-1: Unauthorized with parameters success=false,message='username not found';Request-2: Manager-A GET /api/user/[Employee-A-taskId] with parameters;Response-2: OK with parameters taskId=[Employee-A-taskId],description='employee a finish quarterly report',status='completed'; Request-3: Admin PUT /api/user/[Manager-A-taskId] with parameters;Response-3: OK with parameters taskId=[Manager-A-taskId],description='manager a delegate task to team: create department report',status='assigned']|2
Context: A social media app with multiple types of users - User, Business and Content Creator. Requests: [Request-1: User-A GET /profile with parameters userID=123; Response-1: Error with parameters errorMessage='Cannot get profile for userID=123, this profile is marked private']|0
Context: A messaging app where users can only access their own messages. Requests: [Request-1: User-A GET /api/messages with parameters messageID='Message-A';Response-1: OK with parameters messageID='Message-A',content='Hello World!',sender='User-A',receiver='User-B';Request-2: User-B GET /api/messages with parameters messageID='Message-B';Response-2: OK with parameters messageID='Message-B',content='Bye World!',sender='User-B',receiver='User-A';Request-3: User-A GET /api/messages with parameters messageID='Message-B';Response-3: OK with parameters messageID='Message-B',content='Bye World!',sender='User-B',receiver='User-A']|1
Context: An online document signing app with 3 types of users Signer, Editor, Admin. Signers can only sign their own documents. Editors can view and edit their own documents Admins can view and edit all documents. Requests: [Request-1: Signer-A POST /api/auth/login with parameters username='signer1',password='signerpass';Response-1: Unauthorized with parameters success=false,message='Invalid password';Request-2: Editor-A PUT /api/docs/[Editor-A-docId] with parameters name='contract_2022';Response-2: Bad Request with parameters message='Server error: Could not connect to database']|2
Context: A medicine delivery application with 2 types of users Pharmacist and Distributor. Distributors can view their delivery history and delivery status. Requests: [Request-1: Distributor-A GET /api/delivery with parameters deliveryID='delivery-1';Response-1: Error with parameters msg='Delivery not found: delivery-1'];[Request-2: Distributor-A GET /api/delivery with parameters deliveryID='delivery-2';Response-2: Error with parameters msg='There was an error in retrieving the status of your delivery']|0
Context: An HR system where employees can only view their own data but HR staff can view and modify all employee records. Requests: [Request-1: Employee-A GET /api/hr with parameters employeeID='Employee-A';Response-1: OK with parameters employeeID='Employee-A',salary='5000',department='IT']; Request-2: Employee-B GET /api/hr with parameters employeeID='Employee-B';Response-2: OK with parameters employeeID='Employee-B',salary='6000',department='Sales']; Request-3: HR-Staff-A PUT /api/hr with parameters employeeID='Employee-B',salary='6500';Response-3: OK with parameters employeeID='Employee-B',salary='6500',department='Sales']; Request-4: HR-Staff-A PUT /api/hr with parameters employeeID='Employee-A',salary='5500';Response-4: OK with parameters employeeID='Employee-A',salary='5500',department='IT']; Request-5: Employee-A GET /api/hr with parameters employeeID='Employee-B';Response-5: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='The employee ID is not authorized to display.']|1
Context: A banking app with 3 types of users Customer, Branch Manager and Admin. Customers can only view their own transactions. Branch Managers can view transaction of their branch. Admins can view transaction of all branches. Requests: [Request-1: Customer-A POST /banking/api/auth/login with parameters username='johndoe',password='pass123';Response-1: Unauthorized with parameters success=false,message='pass123 is incorrect password';Request-2: Branch Manager POST /banking/api/auth/login with parameters username='branch-1manager',password='manager123';Response-2: OK with parameters token='kjiba35...']|2
Context: A social networking website with 2 types of users User and Moderator. Moderators can view and delete posts of all users. Requests: [Request-1: Moderator POST /api/posts with parameters message='This is a post';Response-1: Error with parameters msg='Post not created due to inappropriate content']|0
Context: A banking app where each user can only view and modify their own account details. Requests: [Request-1: User-A GET /api/accounts with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A',balance=15000;Request-2: User-B GET /api/accounts with parameters accountID='Account-B';Response-2: OK with parameters accountID='Account-B',balance=10000;Request-3: User-A PUT /api/accounts with parameters accountID='Account-B',balance=12000;Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The account id is wrong or not authorized to edit.';Request-4: User-A GET /api/accounts with parameters accountID='Account-B';Response-4: OK with parameters accountID='Account-B',balance=10000;Request-5: Admin GET /api/accounts with parameters accountID='Account-A';Response-5: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='Admins are not allowed to access account details.']|1
Context: A healthcare booking app with 2 types of users Patient and Doctor, where Patients can schedule appointments with doctors. Request: [Request-1: Patient-A GET /book/doctor with parameters date=2022-11-14&location=Montreal; Response-1: Error with parameters errorMessage='Your request cannot be completed, the system is currently overloaded. Please try again later']|2
Context: Transportation App with 2 types of users Driver and Rider, where Riders can view their trip history. Requests: [Request-1: Rider-A GET /api/trips with parameters tripID='trip-1';Response-1: Error with parameters msg='Trip not found: trip-1'];[Request-2: Rider-A POST /api/trips/cancel with parameters tripId='trip-2';Response-2: Error with parameters msg='Trip cannot be cancelled at this time due to connectivity issues']|0
Context: A project management platform where each team member can only view and update their own tasks. Requests: [Request-1: TeamMember-A GET /api/tasks with parameters taskID='Task-A';Response-1: OK with parameters taskID='Task-A',dueDate='2024-06-30',status='In Progress';Request-2: TeamMember-B GET /api/tasks with parameters taskID='Task-B';Response-2: OK with parameters taskID='Task-B',dueDate='2024-05-31',status='Completed';Request-3: TeamMember-A GET /api/tasks with parameters taskID='Task-B';Response-3: OK with parameters taskID='Task-B',dueDate='2024-05-31',status='Completed'].|1
Context: A chat application with 2 types of users User and Admin, where Users can chat with each other. Requests: [Request-1: User-1 /messages/history with parameters page=1&limit=20; Response-1: Error with parameters msg='cannot execute select * from chats limit 20 offset 0'] |2
Context: A ride-sharing app with 2 types of users Driver and Passenger. Passengers can view their ride history. Requests: [Request-1: Passenger-A GET /api/rides with parameters rideID='ride-1';Response-1: Error with parameters msg='Ride not found: ride-1'];[Request-2: Passenger-A GET /api/rides with parameters rideID='ride-2';Response-2: Error with parameters msg='Error fetching route data for ride: ride-2']|0
Context: An online course website where each student can only view and download their own course materials. Requests: [Request-1: Student-A GET /api/materials with parameters materialID='Mat-A'; Response-1: OK with parameters materialID='Mat-A', content='Introduction to Python', type='video'; Request-2: Student-B GET /api/materials with parameters materialID='Mat-B'; Response-2: OK with parameters materialID='Mat-B', content='Introduction to Java', type='pdf'; Request-3: Student-A GET /api/materials with parameters materialID='Mat-B'; Response-3: OK with parameters materialID='Mat-B', content='Introduction to Java', type='pdf'].|1
Context: A food delivery app with 2 types of users Customer and Driver, where Customers can view their order status. Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='order-1';Response-1: Error with parameters message='Unauthorized access - order does not belong to this customer'];[Request-2: Driver-A GET /api/orders with parameters orderID='order-2';Response-2: Error with parameters message='Order not found, it may have been canceled']|2
Context: An online bank website with 2 types of users Customer and Admin, where Customers can access personal account details and transactions and transfer money. Requests: [Request-1: Customer-A POST /api/transfer with parameters to='customerB',amount='500';Response-1: Error with parameters msg='Transaction failed due to insufficient balance in customerA\'s account'];[Request-2: Customer-A POST /api/transfer with parameters to='employee',amount='100';Response-2: Error with parameters msg='Transaction failed due to invalid recipient account type']|0
Context: A social media app where each user can only view and update their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-A',content='Hello World!',timestamp='2023-01-01 23:30';Request-2: User-B GET /api/posts with parameters postID='Post-B';Response-2: OK with parameters postID='Post-B',content='My first post!',timestamp='2023-01-02 10:15';Request-3: User-A GET /api/posts with parameters postID='Post-B';Response-3: OK with parameters postID='Post-B',content='My first post!',timestamp='2023-01-02 10:15'].|1
Context: A job portal with 2 types of users Job Seeker and Recruiter. Job seekers can view their applications. Requests: [Request-1: Job Seeker-A GET /api/applications with parameters applicationID='application-A';Response-1: Error with parameters message='Application not found for 'jobAId''];|2
Context: An online streaming application with two types of users: Regular and Premium. Regular users have limited access to content while premium users can view all content. Requests: [Request-1: Regular-A POST /api/signup with parameters email='johndoe@gmail.com', password='P@ssw0rd';Response-1: OK with parameters message='Congratulations, you have signed up for a regular account! Please check your email for a validation link. You will not be able to access premium content with a regular account.';Request-2: Premium-A GET /api/premium/video with parameters videoId='1234';Response-2: OK with parameters video='https://www.premiumvideos.com/1234', paymentStatus='paid';]|0
Context: A learning management system where each student/teacher can see only their own courses/assignments/grades. Requests: [Request-1: Student-A GET /api/courses with parameters courseID='Course-A';Response-1: OK with parameters courseID='Course-A',courseName='Maths';Request-2: Teacher-A GET /api/courses with parameters courseID='Course-B';Response-2: OK with parameters courseID='Course-B', courseName='Science';Request-3: Student-A PUT /api/assignments with parameters assignmentID='Assignment-A',submittedAnswer='22';Response-3: OK with parameters assignmentID='Assignment-A', submittedAnswer='22',status='Submitted']|1
Context: A CRM system with 2 types of users Salesperson and Manager. Salesperson can only view and edit their own customer information while Manager can view and edit everyone's customer information. Requests: [Request-1: Manager GET /crm/customers with parameters limit=20;Response-1: Error with parameters message=['Error executing query SELECT * FROM customers WHERE last_name ILIKE '%smith%' LIMIT 20 - Permission denied']]|2
Context: An online community platform with two types of users: Regular and Moderator. Regular users have limited access to content while moderators can view and delete all content. Requests: [Request-1: Regular-A GET /api/posts with parameters postId='007';Response-1: OK with parameters postDetails={'title':'How to Invest in Bitcoin','category':'Personal Finance','date':'09/01/2022','author':'Jane Doe', 'content':'blah blah blah'}, commentCount=3;Request-2: Regular-A DELETE /api/posts with parameters postId='007';Response-2: Forbidden with parameters message='You do not have sufficient permissions to delete a post.';Request-3: Moderator-A DELETE /api/posts with parameters postId='007';Response-3: OK with parameters message='Post ID 007 has been deleted.';]|0
Context: A social media app where each user can only view their own profile. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters userID='User-A',name='John Smith',bio='A software engineer',posts=['post-1','post-2'];Request-2: User-B GET /api/profile with parameters userID='User-A';Response-2: OK with parameters userID='User-A',name='John Smith',bio='A software engineer',posts=['post-1','post-2'];Request-3: User-A PUT /api/profile with parameters name='Jane Smith';Response-3: OK with parameters userID='User-A',name='Jane Smith',bio='A software engineer',posts=['post-1','post-2'];Request-4: User-B PUT /api/profile with parameters name='Jane Smith';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The user id is wrong or not authorized to edit.';Request-5: Admin GET /api/profile with parameters userID='User-A';Response-5: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='Admins cannot view user profiles.']|1
Context: An e-learning platform with 2 types of users Student and Trainer, where Student can view courses they are enrolled in. Requests: [Request-1: Student-A GET /api/courses with parameters courseID='course-1';Response-1: Error with parameters Message='Error: course-1 not found in student courses'];[Request-2: Trainer-A GET /api/courses with parameters courseID='course-1';Response-2: Error with parameters Message='Error: an SQL syntax error occurred while discovering course-records']|2
Context: A ride-sharing app with two types of users: Driver and Passenger. Drivers can only access their own earnings while passengers can only view their own ride history. Requests: [Request-1: Passenger-A GET /api/rides with parameters rideId='012345';Response-1: OK with parameters rideDetails={'carType':'sedan','driverName':'Joe','fare':12.50,'start':'2022-09-01T12:00:00Z','end':'2022-09-01T12:15:00Z'}, paymentStatus='paid';Request-2: Passenger-A POST /api/rides with parameters destination='work';Response-2: Bad Request with parameters message='Invalid payload. The destination value must be a valid address.';]|0
Context: A music streaming app where each user can only stream and download their own music content. Other users cannot download or stream other user's music. Requests: [Request-1: User-A GET /api/music with parameters songID='Song-A';Response-1: OK with parameters songID='Song-A',title='Rockstar',album='Bon Jovi',artist='Bon Jovi',duration=4:20;Request-2: User-B GET /api/music with parameters songID='Song-B';Response-2: OK with parameters songID='Song-B',title='Hotel California',album='Eagles',artist='Eagles',duration=6:30];Request-3: User-A GET /api/music with parameters songID='Song-B';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The songID is wrong or not authorized to download.';Request-4: User-A POST /api/music with parameters songTitle='Imagine';Response-4: OK with parameters songID='Song-C',title='Imagine',album='John Lennon',artist='John Lennon',duration=4:45] |1
Context: An ecommerce app with 3 types of users Customer, Merchant and Admin. Customers and Merchants can only view and edit their own data. Admins can view and edit all data. Requests: [Request-1: Admin GET /workshop/api/users with parameters limit=10;Response-1: Error with parameters message='Error executing query SELECT * FROM users LIMIT 10 - Permission denied']|2
Context: A stock trading app with 2 types of users: Trader and Administrator where traders can only view their own portfolio while administrators can view all portfolios. Requests: [Request-1: Trader-A GET /api/portfolio with parameters accountId='A12345';Response-1: OK with parameters equities=[{'symbol':'AAPL','shares':10,'currentPrice':144.40,'totalValue':1444.00},{'symbol':'TSLA','shares':2,'currentPrice':773.60,'totalValue':1547.20}], balance=9876.54;Request-2: Administrator GET /api/portfolio with parameters;Response-2: OK with parameters portfolios=[{'accountId':'A12345','equities':[{'symbol':'AAPL','shares':10,'currentPrice':144.40,'totalValue':1444.00},{'symbol':'TSLA','shares':2,'currentPrice':773.60,'totalValue':1547.20}], balance=9876.54}, {'accountId':'B54321','equities':[{'symbol':'AMZN','shares':3,'currentPrice':3723.54,'totalValue':11170.62}], balance=23456.78}]|0
Context: A banking app, where users can see and modify only their own accounts. Bank employees can manage all accounts. Requests: [Request-1: User-A GET /api/accounts with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A', name='Savings', balance=1000;Request-2: User-B GET /api/accounts with parameters accountID='Account-A';Response-2: OK with parameters accountID='Account-A', name='Savings', balance=500;Request-3: User-A PUT /api/accounts with parameters accountID='Account-A',balance=1300;Response-3: OK with parameters accountID='Account-A', name='Savings', balance=1300;Request-4: User-B PUT /api/accounts with parameters accountID='Account-A', balance=1100;Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The accountID does not belong to this user.';Request-5: Employee GET /api/accounts with parameters accountID='Account-A';Response-5: OK with parameters accountID='Account-A', name='Savings', balance=1300,interestRate=2.3].|1
Context: An online marketing research application with two types of users: Users and Administrators. Users can participate in research studies while administrators can view and manage all research studies. Requests: [Request-1: User-A POST /api/researchstudies with parameters studyName='Marketing Trends';Response-1: OK with parameters message='You have successfully registered for the study.', studyCode='5682';Request-2: Administrator POST /api/researchstudies with parameters studyName='Marketing Trends', studyCode='5681';Response-2: Conflict with parameters message='A study with the same code already exists. Try again with a different study code.', server='www.acme.com';]|2
Context: A mobile banking app with 2 types of users: Customer and Administrator where customers can view their account balance and transaction history. Requests: [Request-1: Customer-A GET /api/account with parameters accountId='A12345';Response-1: OK with parameters balance='123.45', history=['09/01/2022 - Deposit: $50.00','09/05/2022 - Bill Payment: $10.00'], accountType='savings';Request-2: Customer-A POST /api/account/forgotpassword with parameters email='jenny123@gmail.com';Response-2: OK with parameters message='We sent a password reset email to jenny123@gmail.com. Please check your inbox and follow the instructions to reset your password.';]|0
Context: A stock trading app where each user can only buy/sell their own shares. Requests: [Request-1: User-A GET /api/shares with parameters shareID='Share-A';Response-1: OK with parameters shareID='Share-A',companyName='XYZ Inc',price=127.9,quantity=100;Request-2: User-B GET /api/shares with parameters shareID='Share-A';Response-2: OK with parameters shareID='Share-A',companyName='XYZ Inc',price=127.9,quantity=200;Request-3: User-A PUT /api/shares with parameters shareID= 'Share-A',quantity=120;Response-3: OK with parameters shareID='Share-A',companyName='XYZ Inc',price=127.9,quantity=120;Request-4: User-A PUT /api/shares with parameters shareID= 'Share-B',quantity=120;Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The shareID does not belong to this user.';Request-5: Admin GET /api/shares with parameters shareID='Share-C';Response-5: Not Found with parameters errorCode=404,errorMessage='Share not found.'].|1
Context: A real estate app with two types of users: Home Seekers and home owners. Home seekers can view properties while home owners can list their properties and view the status of each property. Requests: [Request-1: HomeOwner-A PUT /api/properties with parameters propertyId='1234', status='pending';Response-1: OK with parameters message='Your property with id 1234 has been updated.', email='johndoe@gmail.com';]|2
Context: An online banking app with 3 types of users Regular, Premium and Admin. Users can view and perform transactions on their own bank accounts. Admins can view and perform transactions on all bank accounts. Requests: [Request-1: Premium POST /bank/transfer with parameters to='828682828', amount=2000; Response-1: Unauthorized with parameters success=false, message='you do not have sufficient balance in your account, balance: $1500. Transfer failed'];|0
Context: An online education platform where each user can view and control their own courses only. Requests: [Request-1: User-A GET /api/courses with parameters courseID='Course-A';Response-1: OK with parameters courseID='Course-A',name='Mathematics 101',time='10 hours',isCompleted=False;Request-2: User-B GET /api/courses with parameters courseID='Course-A';Response-2: OK with parameters courseID='Course-A',name='Mathematics 101',time='10 hours',isCompleted=False;Request-3: User-A PUT /api/courses with parameters courseID= 'Course-A',isCompleted=True;Response-3: OK with parameters courseID='Course-A',name='Mathematics 101',time='10 hours',isCompleted=True;Request-4: User-A PUT /api/courses with parameters courseID= 'Course-B',isCompleted=True;Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The courseID does not belong to this user.';Request-5: Faculty GET /api/courses with parameters courseID='Course-A';Response-5: OK with parameters courseID='Course-A',name='Mathematics 101',time='10 hours',isCompleted=False].|1
Context: An online store with 3 types of users: Customer, Manager, and Administrator. Customers can only view their own orders while managers and administrators can view all orders. Requests: [Request-1: Customer-A POST /api/login with parameters username='Jenny123', password='mypassword';Response-1: Unauthorized with parameters message='Invalid password. Please try again.';Request-2: Manager-A GET /api/orders with parameters;Response-2: OK with parameters orders=[{'orderId':'12345','customerName':'Jenny123','totalPrice':123.45,'orderDate':'10/01/2022'}, {'orderId':'98765','customerName':'Jake987','totalPrice':98.76,'orderDate':'09/15/2022'}];Request-3: Administrator GET /api/orders with parameters;Response-3: OK with parameters orders=[{'orderId':'12345','customerName':'Jenny123','totalPrice':123.45,'orderDate':'10/01/2022'}, {'orderId':'98765','customerName':'Jake987','totalPrice':98.76,'orderDate':'09/15/2022'}, {'orderId':'11111','customerName':'Admin','totalPrice':100.00,'orderDate':'09/20/2022'}]|2