prompt|labels
Context: A job portal with 2 type of users Job-seeker and Recruiter where each job-seeker can create and modify their own profile. Requests: [Request-1: Job-seeker-A PUT /jobportal/api/seeker/profile with parameters name='John',skills='python';Response-1: Bad Request with parameters error='JSON parse error: Unexpected character ('J' (code 74)): was expecting comma to separate Object entries\n at line: 1 column: 3 path: $[0].value']|2
Context: A file sharing app where each user can access all shared files. Requests: [Request-1: User-A GET /api/shared-files with parameters fileID='123';Response-1: OK with parameters fileID='123', fileName='Summer Trip.jpg',size=5MB,uploaded_by='User-B';Request-2: User-B GET /api/shared-files with parameters fileID='456';Response-2: OK with parameters fileID='456', fileName='Report.docx',size=2MB,uploaded_by='User-A';Request-3: User-A PUT /api/shared-files with parameter fileID='123', fileName='Updated Summer Trip.jpg'; Response-3: OK with parameters fileID='123', fileName='Updated Summer Trip.jpg',size=5MB,uploaded_by='User-B']|0
Context: A team collaboration app where each team member can only access their own assigned tasks. Requests: [Request-1: Team member-A GET /api/tasks with parameters taskID='Task-A';Response-1: OK with parameters taskID='Task-A',title='Make progress report',description='...',assignedTo='Team member-A',dueDate='2024-05-31',status='In progress';Request-2: Team member-B GET /api/tasks with parameters taskID='Task-B';Response-2: OK with parameters taskID='Task-B',title='Present report',description='...',assignedTo='Someone Else',dueDate='2024-06-15',status='Assigned';Request-3: Team member-A PUT /api/tasks with parameters taskID='Task-B',status='In progress';Response-3: OK with parameters message='Task updated successfully'] |1
Context: A job portal with 2 type of users Job-seeker and Recruiter where each job-seeker can create and modify their own profile. Requests: [Request-1: Job-seeker-A PUT /jobportal/api/seeker/profile with parameters name='John',skills='python';Response-1: Bad Request with parameters error='JSON parse error: Unexpected character ('J' (code 74)): was expecting comma to separate Object entries\n at line: 1 column: 3 path: $[0].value']|2
Context: A music streaming app where each user can only access their own playlists. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='123';Response-1: OK with parameters playlistID='123',name='My Favorites',tracks=['Song 1', 'Song 2', 'Song 3']; Request-2: User-B GET /api/playlists with parameters playlistID='123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The playlist ID is wrong or not authorized to access.';Request-3: User-A POST /api/playlists with parameters name='My Workouts',tracks=['Song 4', 'Song 5']; Response-3: OK with parameters playlistID='124',name='My Workouts',tracks=['Song 4', 'Song 5']]|0
Context: A weather app where each user can only view weather data for their own location. Requests: [Request-1: User-A GET /api/weather with parameters location='New York';Response-1: OK with parameters location='New York', temperature=10, description='Sunny';Request-2: User-B GET /api/weather with parameters location='New York';Response-2: OK with parameters location='New York', temperature=10, description='Sunny';Request-3: User-B GET /api/weather with parameters location='Paris';Response-3: OK with parameters location='Paris', temperature=15, description='Rainy']|1
Context: A blog platform with 2 types of users: Writer and Editor. Writers can create, edit and delete their own posts, while editors can create, edit and delete any post but do not have access to user information. Requests: [Request-1: Writer-A DELETE /posts with parameters postId='19a8me8' ; Response-1: Error with parameters message='Post with postId 19a8me8 not found.'; Request-2: Editor-A PUT /posts with parameters postId='24b1fc5', title='My awesome post', content='This post is the best!'; Response-2: Bad Request with parameters error='Unable to process request. Please contact support.']|2
Context: A task management app where each user can only access their own tasks. Requests: [Request-1: User-A GET /api/tasks with parameters taskID='123';Response-1: OK with parameters taskID='123',description='Task 1',priority='High',status='Incomplete';Request-2: User-B GET /api/tasks with parameters taskID='123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The task ID is wrong or not authorized to access.'; Request-3: User-A POST /api/tasks with parameters description='Task 2',priority='Low'; Response-3: OK with parameters taskID='124',description='Task 2',priority='Low',status='Incomplete']|0
Context: A job portal where each user can view and apply only to their own job applications. Requests: [Request-1: User-A GET /api/applications;Response-1: OK with parameters applications=[{'jobID':123, 'status':'Applied'}, {'jobID':456, 'status':'Not Applied'}];Request-2: User-A PATCH /api/applications with parameters jobID=456, status='Applied';Response-2: OK with parameters message='Application updated successfully!';Request-3: User-B GET /api/applications;Response-3: OK with parameters applications=[{'jobID':123, 'status':'Applied'}, {'jobID':456, 'status':'Not Applied'}]]|1
Context: A video sharing platform with 2 types of users Creator and Viewer where each creator can only see their own videos. Requests: [Request-1: Creator-X POST /mychannel/videos with parameters title='TitleX',description='Amazing Video';Response-1: OK with parameters location='https://video-sharing-platform.com/create/video/Creator-X/video-1-YT-4K-2.12.2022.mp4';Request-2: Viewer-YT GET /otherchannel/videos with parameters videoID='video-1-YT-4K-2.12.2022';Response-2: Forbidden with parameters message='Access denied! Video Creator-X/video-1-YT-4K-2.12.2022.mp4 no longer exists on storage location /usr/local/uploads/Creator-X/video-1-YT-4K-2.12.2022.mp4']|2
Context: A password manager where each user can only access their own passwords. Requests: [Request-1: User-A GET /api/passwords with parameters passwordID='facebook';Response-1: OK with parameters passwordID='facebook',username='john.doe',password='12345';Request-2: User-B GET /api/passwords with parameters passwordID='facebook';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The password ID is wrong or not authorized to access.'; Request-3: User-A PUT /api/passwords with parameters passwordID='facebook',username='jane.doe';Response-3: OK with parameters passwordID='facebook',username='jane.doe',password='12345']|0
Context: A banking app where each customer can only view and manage their own account. Requests: [Request-1: Customer-A GET /api/accounts with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A', balance=10000;Request-2: Customer-A POST /api/transfer with parameters accountFrom='Account-A',accountTo='Account-B',amount=500;Response-2: OK with parameters message='Transfer successful!';Request-3: Customer-B GET /api/accounts with parameters accountID='Account-A';Response-3: OK with parameters accountID='Account-A', balance=10000]|1
Context: An employee management system with different user types of employees and administrators. Requests: [Request-1: Employee POST /requestLeave with parameters leaveType='Annual', startDate='2022-12-12', endDate='2022-12-17'; Response-1: Error with parameters message='Leave request failed. Request overlaps with another leave request for 13/12/2022-15/12/2022'; Request-2: Administrator DELETE /deleteEmployee with parameters email='janedoe@yahoo.com'; Response-2: Error with parameters message='Failed to delete user with email janedoe@yahoo.com: User not found.'; Request-3: Employee POST /createTask with parameters taskName='Project Alpha', taskStatus='Assigned', priority='High'; Response-3: Error with parameters message='Task creation failed. Priority should be either High, Medium or Low.' ]|2
Context: A social media app allowing users to post, like, and share any post. Requests: [Request-1: User-A POST /api/posts with parameters message='Hello World'; Response-1: OK with parameters postID='123', message='Hello World', likes=0, shares=0;Request-2: User-B GET /api/posts with parameters postID='123';Response-2: OK with parameters postID='123', message='Hello World', likes=0, shares=0;Request-3: User-A PUT /api/posts with parameters postID='123', message='Updated Message';Response-3: OK with parameters postID='123', message='Updated Message', likes=0, shares=0;Request-4: User-B DELETE /api/posts with parameters postID='123';Response-4: OK with parameters postID='123', message='Updated Message', likes=0, shares=0]|0
Context: A social media platform where each user can only view and interact with their own profile and content. Requests: [Request-1: User-A GET /api/profiles with parameters userID='User-A';Response-1: OK with parameters name='User-A',bio='I love my pets';Request-2: User-B GET /api/profiles with parameters userID='User-A';Response-2: OK with parameters name='User-A',bio='I love my pets';Request-3: User-B GET /api/content with parameters postID='User-A-post-123';Response-3: OK with parameters content='Hello world!']|1
Context: An online-library with different user types such as guests, subscribers and library staff. Requests: [Request-1: Subscriber POST /searchBook with parameters title='Harry Potter and the half-blood prince'; Response-1: Error with parameters message=""""Book not found: Multiple entries found under the title 'Harry Potter and the half-blood prince'.""""; Request-2: Guest POST /register with parameters name='Jane Doe', email='janedoe@gmail.com', password='Password123'; Response-2: Error with parameters message=""""Registration failed: Email domain janedoe@gmail.com not allowed. Please try again using a valid email domain.""""; Request-3: Library Staff PUT /bookInventory/supply with parameters bookName='To kill a mockingbird', quantity=50; Response-3: Error with parameters message=""""Stock supply failed. Quantity to be added should range between 1 and 25. Error occurred on book with id 246-01-35.""""]"""|2
Context: A workout tracking app where each user has access to all workout data. Requests: [Request-1: User-A GET /api/workouts with parameters workoutID='123';Response-1: OK with parameters workoutID='123', exercise='Squats',weight=100,reps=10,start_time='2024-06-07 13:00';Request-2: User-A PUT /api/workouts with parameters workoutID='124', exercise='Deadlifts',weight=150,reps=10,start_time='2024-06-08 13:00';Response-2: OK with parameters workoutID='124', exercise='Deadlifts',weight=150,reps=10,start_time='2024-06-08 13:00';Request-3: User-A DELETE /api/workouts with parameters workoutID='124';Response-3: OK with parameters workoutID='124']|0
Context: An online course website where each student has their own progress that they can view and modify. Requests: [Request-1: Student-A PUT /api/courses with parameters courseID='Course-B', progress=70;Response-1: OK with parameters courseID='Course-B', progress=70]; |1
Context: A medical COVID-19 Vaccination management system with an Admin, Doctor and User. Requests: [Request-1: User POST /register with parameters firstName='Jane', lastName='Doe', email='janedoe@gmail.com', password='StrongPassword12*', medicalHistory='No Allergies'; Response-1: Error with parameters msg=""""The email address janedoe@gmail.com has already been registered.""""; Request-2: Doctor PUT /appointment with parameters date='2022-11-05', time='10:00', patientEmail='joedoe@yahoo.com'; Response-2: Error with parameters message='Cannot schedule the appointment. The patient joedoe@yahoo.com is already scheduled on the same day and time.'; Request-3: Admin DELETE /deleteUser with parameters email='johnsmith@yahoo.com'; Response-3: Error with parameters message='The request to delete user with email johnsmith@yahoo.com was not processed due to internal server errors.']"""|2
Context: A blogging platform where each writer can create and edit their own blog posts. Requests: [Request-1: Writer-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-A',content='Some content';Request-2: Writer-B GET /api/posts with parameters postID='Post-A';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The post id is wrong or not authorized to edit.';Request-3: Admin GET /api/posts with parameters postID='Post-A';Response-3: OK with parameters postID='Post-A',content='Some content']|0
Context: A social media app where users can only access their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-B',content='Nice day today!',date='2022-01-01';Request-2: User-B GET /api/posts with parameters postID='Post-A';Response-2: Not authorized]; |1
Context: A payment processing application with different user roles. Requests: [Request-1: Employee POST /createAccount with parameters firstName='John', lastName='Doe', email='johndoe@gmail.com', password='strongpassword!'; Response-1: Error with parameters msg='The email address johndoe@gmail.com already exists'; Request-2: Manager POST /generateReport with parameters reportType='Daily', date='2022-07-01'; Response-2: Error with parameters message='Internal Server Error: java.lang.NullPointerException at report.generate() line 54'; Request-3: Administrator DELETE /deleteUser with parameters email='janedoe@gmail.com'; Response-3: Error with parameters message='Invalid Request, cannot delete the user with email janedoe@gmail.com as they are assigned a role of Manager'.']|2
Context: A food delivery app where each user can only view their own order history. Requests: [Request-1: User-A GET /api/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',totalPrice=12,restaurant='Burger King';Request-2: User-B GET /api/orders with parameters orderID='Order-B';Response-2: OK with parameters orderID='Order-B',totalPrice=155,restaurant='Pizza Hut';Request-3: User-A GET /api/orders with parameters orderID='Order-B';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The order id is wrong or not authorized to display.']|0
Context: A chat app where each user can only see chat logs for their own conversations. Requests: [Request-1: User-A GET /api/chat with parameters user='User-B';Response-1: OK with parameters chatlog=['Hello A', 'Hi B', 'How are you?', 'I'm good!'];Request-2: User-B GET /api/chat with parameters user='User-C';Response-2: OK with parameters chatlog=['What are you doing', 'Nothing much.'];Request-3: User-C GET /api/chat with parameters user='User-A';Response-3: OK with parameters chatlog=['How is it going?', 'Great!', 'Do you want to hang out?', 'Sure!']|1
Context: An online gaming platform with 2 types of users Player and Admin where players can vote for game upgrades. Requests: [Request-1: Player-1 /upgrade with parameters gameName='World of Zombies',vote='Upgrade weapon';Response-1: Error with parameters code='500',data='Error: cannot load dependency file: headers.h. Check lib folder in C:\\program files (x86)\\Gaming\\World_of_Zombies\\source']|2
Context: An online gaming platform where each user can only view their own game leaderboard. Requests: [Request-1: User-A GET /api/leaderboard with parameters gameID='Game-A';Response-1: OK with parameters score=1500;Request-2: User-B GET /api/leaderboard with parameters gameID='Game-B';Response-2: OK with parameters score=2000;Request-3: User-A GET /api/leaderboard with parameters gameID='Game-B'; Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The game id is wrong or not authorized to display.']|0
Context: A food delivery app where delivery agents can only accept or decline delivery requests assigned to them. Requests: [Request-1: Delivery-A PATCH /api/delivery with parameters deliveryID='Delivery-A' status='accepted';Response-1: OK with parameters status='accepted';Request-2: Delivery-B GET /api/delivery with parameters deliveryID='Delivery-A';Response-2: OK with parameters deliveryID='Delivery-A', customerName='Customer-A', customerAddress='123 Main St';Request-3: Delivery-A PATCH /api/delivery with parameters deliveryID='Delivery-A' status='delivered';Response-3: OK with parameters status='delivered']|1
Context: A stock management system with 2 types of users User and Admin where Users can only view and manage their own inventory. Admins can view and manage all inventory. Requests: [Request-1: Admin GET /api/inventory with parameters userID='admin302';Response-1: OK with parameters database='inventory-db',hostname='db_server.local',content=[{itemID=1,itemName='apples',quantity=100},{itemID=2,itemName='oranges',quantity=50}];Request-2: User-A GET /api/inventory with parameters userID='User-A-22';Response-2: OK with parameters database='inventory-db',hostname='db_server.local',content=[{itemID=24,itemName='juice',quantity=10},{itemID=25,itemName='soda',quantity=20}];]|2
Context: A messaging app where each user can only view conversations that they are part of. Requests: [Request-1: User-A GET /api/conversations with parameters conversationID='Conv-A';Response-1: OK with parameters messages=[Message-1, Message-2];Request-2: User-B GET /api/conversations with parameters conversationID='Conv-B';Response-2: OK with parameters messages=[Message-3];Request-3: User-A GET /api/conversations with parameters conversationID='Conv-B';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='The conversation id is not authorized to display.'] |0
Context: A real estate app where each home buyer can only access and modify their own property information. Requests: [Request-1: Buyer-A GET /api/properties with parameters buyerID='Buyer-A',propertyID='Property-123';Response-1: OK with parameters propertyID='Property-123',address='123 Main St',price='$500,000',sqFt=2000;Request-2: Buyer-B GET /api/properties with parameters buyerID='Buyer-A',propertyID='Property-123'; Response-2: OK with parameters propertyID='Property-123',address='123 Main St',price='$500,000',sqFt=2000;Request-3: Buyer-A PUT /api/properties with parameters sqFt=2100;Response-3: OK with parameters propertyID='Property-123',address-'123 Main St',price='$500,000',sqFt=2100;]|1
Context: A blogging app with 3 types of users Writers, Editors and Admins. Writers can write and edit their own blogs, Editors can edit all blogs and Admins have access to all features and users. Requests: [Request-1: Writer-A POST /blogs/new with parameters title='New blog',content='Some interesting topic';Response-1: OK with parameters message='Blog created successfully!';Request-2: Editor-A GET /blogs/all with parameters;Response-2: OK with parameters blogs=[{id:12,title:'New blog',content:'Some interesting topic',author:'Writer-A',editors=[],published=true},...];Request-3: Writer-B GET /blogs/my with parameters;Response-3: OK with parameters blogs=[{id:15,title:'Travel blog',content:'My trip to France',author:'Writer-B',editors:[Editor-C],published=false},...];Request-4: Admin POST /users/delete with parameters userId=23; Response-4: Internal Server Error with parameters message='An error occurred in deletion: duplicate key value violates unique constraint """"email"""" for key """"users_email_key"""" 'id' variable of incorrect type string';]"""|2
Context: A movie streaming app where each user can only view their own watch history. Requests: [Request-1: User-A GET /api/history with parameters movieID='Movie-A';Response-1: OK with parameters movieID='Movie-A',duration='2h 30m',watchTime='2023-07-11 20:12:30';Request-2: User-B GET /api/history with parameters movieID='Movie-B';Response-2: OK with parameters movieID='Movie-B',duration='1h 45m',watchTime='2023-07-11 14:50:00';Request-3: User-A GET /api/history with parameters movieID='Movie-B';Response-3: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.',errorDetails='The movie id is wrong or not authorized to display.']|0
Context: An education platform where each student can only access and modify their own learning data. Requests:[Request-1: Student-A GET /api/learning with parameters studentID='Student-A';Response-1: OK with parameters studentID='Student-A',lessonsCompleted=10,percentageComplete=50,quizScore=80;Request-2: Student-B GET /api/learning with parameters studentID='Student-A';Response-2: OK with parameters studentID='Student-A',lessonsCompleted=10,percentageComplete=50,quizScore=80;Request-3: Student-A PUT /api/learning with parameters quizScore=85; Response-3: OK with parameters studentID='Student-A',lessonsCompleted=10,percentageComplete=50,quizScore=85;]|1
Context: A file sharing app with 2 types of users User and Admin. Users can upload and download their files, while Admins can manage other users' files as well. Requests: [Request-1: User-A GET /files/documents with parameters;Response-1: OK with parameters filenames=['homework.docx','research.pptx','studynotes.doc',...'];Request-2: User-B POST /files/uploads with parameters file='catpictures LOL.jpeg',size=500KB;Response-2: OK with parameters message='File uploaded successfully!';Request-3: Admin GET /files/uploads with parameters;Response-3: Internal Server Error with parameters message='An error occurred in upload(/uploads/step1): this_file_doesnt_exist.so: cannot find the file or directory';Request-4: Admin POST /files/uploads with parameters file='employee_salaries.xlsx',size=2MB;Response-4: Internal Server Error with parameters message='An error occurred in upload(/uploads/step1): Stack trace at file """"uploadapp/lib.php"""", line 28, in function handle()...'];"""|2
Context: An online rental app where each customer can view their own rental agreements. Requests: [Request-1: Customer-A GET /api/agreements with parameters agreementID='Agreement-A';Response-1: OK with parameters agreementID='Agreement-A',rentalItem='Car-X';Request-2: Customer-B GET /api/agreements with parameters agreementID='Agreement-B';Response-2: OK with parameters agreementID='Agreement-B', rentalItem='Bike-Y';Request-3: Customer-A GET /api/agreements with parameters agreementID='Agreement-B';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.', errorDetails='The agreement id is not authorized to display.']|0
Context: A gaming platform where each player can only view and modify their own game data. Requests: [Request-1: Player-A GET /api/game-data with parameters playerID='Player-A';Response-1: OK with parameters playerID='Player-A',level=10,score=5000,timePlayed=60mins;Request-2: Player-B GET /api/game-data with parameters playerID='Player-A';Response-2: OK with parameters playerID='Player-A',level=10,score=5000,timePlayed=60mins;Request-3: Player-A PUT /api/game-data with parameters score=5500; Response-3: OK with parameters playerID='Player-A',level=10,score=5500,timePlayed=60mins;]|1
Context: A GPS tracking system with 2 types of users, Driver and Manager. Drivers can view & modify their own routes while Managers can view all data. Requests: [Request-1: Driver-A POST /api/routes with parameters routeID='Route-1',location='28.7041° N, 77.1025° E';Response-1: OK with parameters message='Route-1 added successfully';Request-2: Manager-A GET /api/routes with parameters locationRange='28.740 & 77.020 & 28.686 & 77.054';Response-2: OK with parameters routes=[{routeID='Route-1',location='28.7041° N, 77.1025° E',driver='Driver-A'}, {routeID='Route-2',location='28.7251° N, 77.0177° E',driver='Driver-B'}];Request-3: Driver-A PUT /api/routes with parameters routeID='Route-1',location='22.5726° N, 88.3639° E';Response-3: OK with parameters message='Route-1 modified successfully';Request-4: Manager-B GET /api/routes with parameters locationRange='28.740 & 77.020 & 28.686 & 77.054';Response-4: OK with parameters routes=[];Request-5: Driver-B POST /api/routes with parameters routeID='Route-2',location='4.2105° N, 101.9758° E';Response-5: Forbidden with parameters message='You are not authorized to modify Route-2 as it belongs to Driver-A'].|2
Context: A flight reservation system where each booker can view their own bookings. Requests: [Request-1: Booker-A GET /api/bookings with parameters bookingID='Booking-A';Response-1: OK with parameters bookingID='Booking-A', flightNumber='DL-123';Request-2: Booker-B GET /api/bookings with parameters bookingID='Booking-B';Response-2: OK with parameters bookingID='Booking-B', flightNumber='UA-456';Request-3: Booker-A GET /api/bookings with parameters bookingID='Booking-B';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The booking id is wrong or not authorized to display.']|0
Context: A government portal where each person can only view and modify their own tax returns. Requests: [Request-1: Citizen-A GET /api/tax-returns with parameters citizenID='Citizen-A';Response-1: OK with parameters citizenID='Citizen-A',income=80000,taxPaid=12500;Request-2: Citizen-B GET /api/tax-returns with parameters citizenID='Citizen-A';Response-2: OK with parameters citizenID='Citizen-A',income=80000,taxPaid=12500;Request-3: Citizen-A PUT /api/tax-returns with parameters taxPaid=11000; Response-3: OK with parameters citizenID='Citizen-A',income=80000,taxPaid=11000;]|1
Context: A social media platform 'FriendsZone' that allows people to connect with one another. Requests: [Request-1: User-A POST /api/send-friend-request with parameters friendID='User-B';Response-1: OK with parameters message='Friend request has been sent successfully';Request-2: User-B POST /api/accept-friend-request with parameters friendID='User-A';Response-2: OK with parameters message='You are now friends with User-A';Request-3: User-A POST /api/send-friend-request with parameters friendID='User-C';Response-3: OK with parameters message='Friend request has been sent successfully';Request-4: User-C GET /api/friend-requests with parameters;Response-4: OK with parameters friendRequests=['User-A'];Request-5: User-C POST /api/accept-friend-request with parameters friendID='User-A';Response-5: Forbidden with parameters message='Cannot accept friend request from User-A as they have already reached the maximum number of friends allowed'].|2
Context: A weather app where users can set their preferred location and view the weather forecast. Requests: [Request-1: User-A PUT /api/location with parameters latitude='50.0616',longitude='8.6719';Response-1: OK with parameters location='Frankfurt am Main, Germany';Request-2: User-A GET /api/weather;Response-2: OK with parameters temperature=25°C, humidity=40%, wind='5m/s';Request-3: User-A PUT /api/location with parameters latitude='10',longitude='20';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.', errorDetails='The location is not authorized.']|0
Context: A banking application where only the account holder can view and modify their own transactions. Requests: [Request-1: User-A GET /api/transactions with parameters accountID='Account-123';Response-1: OK with parameters transactionID='Transaction-123',description='Monthly salary',amount=5000;Request-2: User-B GET /api/transactions with parameters accountID='Account-123';Response-2: OK with parameters transactionID='Transaction-123',description='Monthly salary',amount=5000;Request-3: User-A PUT /api/transactions with parameters transactionID='Transaction-2345', amount=1000;Response-3: OK with parameters message='Transaction updated successfully']|1
Context: A web-based tennis club management system with 2 types of users Member and Admin. Members can view their own profile, use the booking system and view tennis court schedules. Admins can view and modify any data. Requests: [Request-1: Member-A GET /api/courts/schedule with parameters date='12/10/21';Response-1: OK with parameters courts=[{id='1',status='Available',time='10-11am'},{id='2',status='Booked',time='11-12am'}];Request-2: Member-B GET /api/profile with parameters id='user-123';Response-2: Unauthorized with parameters success=false,message='Incorrect password';Request-3: Admin PATCH /api/courts/schedule with parameters date='13/10/21',Court-1-time='8:00',Court-2-status='Maintenance';Response-3: OK with parameters message='Successfully updated courts schedule'].|2
Context: A retail app where customers can view their own order history. Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',totalPrice=12;Request-2: Customer-B GET /api/orders with parameters orderID='Order-B';Response-2: OK with parameters orderID='Order-B',totalPrice=155;Request-3: Customer-A GET /api/orders with parameters orderID='Order-B';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The order id is wrong or not authorized to display.']|0
Context: A business review system app, where reviews and ratings are given for specific businesses but users should not be able to modify others' reviews. Requests: [Request-1: User-A POST /api/business/123/review with parameters rating=4, comment='Nice place';Response-1: OK with parameters reviewID='Review-1234',businessID='Business-123',userID='User-A',rating=4,comment='Nice place';Request-2: User-B POST /api/business/123/review with parameters rating=2, comment='Terrible place, poor customer service';Response-2: OK with parameters reviewID='Review-2345',businessID='Business-123',userID='User-B',rating=2,comment='Terrible place, poor customer service';Request-3: User-A PUT /api/business/123/review with parameters reviewID='Review-2345',rating=1;Response-3: OK with parameters message='Review updated successfully']|1
Context: A financial app with 3 types of users Investor, Broker and Admin. Each investor has an investment portfolio which they can view and modify, brokers can only view the investment portfolios of their clients. Admins can view and modify all data. Requests: [Request-1: Investor-A GET /api/portfolio with parameters portfolioID='Portfolio-A';Response-1: Forbidden with parameters message='You cannot modify Portfolio-A as it does not belong to you';Request-2: Broker-A GET /api/portfolio with parameters portfolioID='Portfolio-B';Response-2: OK with parameters portfolioID='Portfolio-B',investments=['Tesla','Facebook','Google'],values=['5','2.5','1.2'];Request-3: Investor-C GET /api/portfolio with parameters portfolioID='Portfolio-D';Response-3: Forbidden with parameters message='You cannot view Portfolio-D as it does not belong to you'].|2
Context: A gym where each member can reserve a workout machine. Requests: [Request-1: Member-A POST /api/reserve_machine with parameters machineID='1';Response-1: OK with parameters machineID='1',startTime='2023-07-12 16:30:00',endTime='2023-07-12 17:30:00';Request-2: Member-B POST /api/reserve_machine with parameters machineID='2';Response-2: OK with parameters machineID='2',startTime='2023-07-12 16:30:00',endTime='2023-07-12 17:30:00';Request-3: Member-A POST /api/reserve_machine with parameters machineID='2';Response-3:Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='The machine is already reserved.']|0
Context: A social media website where each user can only view and modify their own profile. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters name='User-A',bio='Hello World!',friendsCount=5;Request-2: User-B GET /api/profile with parameters userID='User-A';Response-2: OK with parameters name='User-A',bio='Hello World!',friendsCount=5;Request-3: User-A PUT /api/profile with parameters bio='Hi there!';Response-3: OK with parameters name='User-A',bio='Hi there!',friendsCount=5;]|1
Context: A gaming website with 2 types of users: Player and Admin. Players can view and edit their own profiles, while Admins can view and edit all profiles. Requests: [Request-1: Player-A PUT /profiles with parameters profileID='345', newName='New username', newAvatar='vampire.png';Response-1: OK with parameters success=true, message='Profile 345 updated successfully!';Request-2: Player-A DELETE /profiles with parameters profileID='999', newContent='{""""password"""": """"pass123"""", """"email"""": """"email@host.com"""", """"address"""": """"4253 West street""""}';Response-2: Forbidden with parameters success=false, message='you are not authorized to delete profile with id=999';Request-3: Admin POST /profiles with parameters newProfileName='New User', newContent='{""""age"""": 26, """"location"""": """"Toronto""""}';Response-3: OK with parameters success=true, message='New User profile created successfully!';Request-4: Admin GET /profiles with parameters profileID='log';Response-4: Error with parameters message='Cannot complete sql query SELECT * FROM profiles WHERE id=log';]"""|2
Context: A social media app where each user can only view and edit their own profile. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters userID='User-A',name='John Doe',email='johndoe@example.com';Request-2: User-B GET /api/profile with parameters userID='User-A';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The user ID is wrong or not authorized to edit.';Request-3: User-A PUT /api/profile with parameters email='newemail@example.com';Response-3: OK with parameters message='Profile updated successfully.'];|0
Context: A social media app where each user can only access and modify their own posts. Other users cannot modify or delete them. Requests: [Request-1: User-A POST /api/posts with parameters content='Hello World!';Response-1: OK with parameters postID='123',content='Hello World!',likes=0;Request-2: User-A PUT /api/posts with parameters postID='456',content='My New Post!';Response-2: OK with parameters postID='456',content='My New Post!',likes=0;Request-3: User-B GET /api/posts with parameters postID='123';Response-3: OK with parameters postID='123',content='Hello World!',likes=0]|1
Context: A healthcare app with 2 types of users: Doctor and Patient. Doctors can manage and view their own patients, while Patients can view their own medical records. Requests: [Request-1: Doctor-A PUT /patients with parameters patientID='111', newName='Patient Alpha', newRecord='{""""patientID"""": """"111"""", """"records"""": [{""""medicalRecord"""": """"annual checkup"""", """"doctor"""": """"Doctor-A""""}, {""""medicalRecord"""": """"injury"""", """"doctor"""": """"Doctor-B""""}]}';Response-1: OK with parameters success=true, message='Patient 111 updated successfully!';Request-2: Doctor-B DELETE /patients with parameters patientID='999', newContent='{""""patientID"""": """"999"""", """"records"""": [{""""medicalRecord"""": """"miscellaneous"""", """"doctor"""": """"Doctor-B""""}, {""""medicalRecord"""": """"accident"""", """"doctor"""": """"Doctor-C""""}]}';Response-2: Forbidden with parameters success=false, message='you are not authorized to access patient with id=999';Request-3: Patient-A PUT /medical with parameters medicalRecordID='567', newContent='{""""date"""": """"25-08-2020"""", """"symptoms"""": """"fatigue"""", """"diagnosis"""": """"flu""""}';Response-3: OK with parameters success=true, message='Medical record 567 updated successfully!';Request-4: Patient-A GET /medical with parameters;Response-4: Forbidden with parameters success=false, message='you are not authorized to access medical records for user with id=User-A_id';Request-5: Doctor-A GET /medical with parameters;Response-5: Error with parameters message='Cannot execute the query SELECT * FROM User-A_id_medical_records WHERE symptom=""""headache"""" AND date BETWEEN date1 AND date2';]"""|2
Context: A task management app where each user can only create, view and edit their own tasks. Requests: [Request-1: User-A POST /api/tasks with parameters title='Complete Homework',description='Math and Science',date='2023-06-20 10:20:30';Response-1: OK with parameters taskID='User-A/123',title='Complete Homework',description='Math and Science',date='2023-06-20 10:20:30',status='Open';Request-2: User-B GET /api/tasks with parameters taskID='User-A/123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The task id is wrong or not authorized to view.';Request-3: User-A PUT /api/tasks with parameters taskID='User-A/123',status='In Progress';Response-3: OK with parameters taskID='User-A/123',title='Complete Homework',description='Math and Science',date='2023-06-20 10:20:30',status='In Progress']|0
Context: A voting app where each user can only vote once and only for themselves. Requests: [Request-1: User-A POST /vote with parameters candidate='User-A';Response-1: OK with parameters message='Vote counted';Request-2: User-B POST /vote with parameters candidate='User-A';Response-2: OK with parameters message='Vote counted']|1
Context: A financial platform with 2 types of users Investor and Adviser. Investors can view and manage their own portfolios. Advisers can view and edit all investor portfolios. Requests: [Request-1: Investor-A GET /financial/portfolio with parameters id='234';Response-1: Unauthorized with parameters success=false, message='Invalid token';Request-2: Investor-A GET /financial/portfolio with parameters id='999';Response-2: Forbidden with parameters success=false, message='you are not authorized to access portfolio id=999';Request-3: Adviser PUT /financial/portfolio with parameters id='234', newContent='{""""stock"""": """"AAPL"""", """"investment"""": """"180""""}';Response-3: OK with parameters success=true, message='Portfolio with id=234 successfully updated';Request-4: Adviser GET /financial/portfolio with parameters id='log';Response-4: Error with parameters message='Cannot complete sql query SELECT * FROM portfolio WHERE id=log';]"""|2
Context: A booking app where each user can only book, view and edit their own bookings. Requests: [Request-1: Customer-A POST /api/bookings with parameters from='New York',to='Paris',date='2024-06-01';Response-1: OK with parameters bookingID='Customer-A/123',from='New York',to='Paris',date='2024-06-01';Request-2: Customer-B GET /api/bookings with parameters bookingID='Customer-A/123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The booking id is wrong or not authorized to view.';Request-3: Customer-A PUT /api/bookings with parameters bookingID='Customer-A/123',date='2024-06-02';Response-3: OK with parameters bookingID='Customer-A/123',from='New York',to='Paris',date='2024-06-02']|0
Context: A messaging app where each user can only view their own conversations. Requests: [Request-1: User-A GET /messages with parameters To='User-B';Response-1: OK with parameters To='User-B', From='User-C', text='Hi there';Request-2: User-B GET /messages with parameters To='User-B';Response-2: OK with parameters To='User-B', From='User-C', text='What are you doing?']|1
Context: A gaming app with 1 type of users User, who can only play games. Requests: [Request-1: User-A GET /game/2048 with parameters board=[0,2,4,...];Response-1: Internal server error with parameters message='ooops, you just revealed a bug where user info was not properly sanitized: user bio-> """"I love chocolate and cats""""']"""|2
Context: A messaging app where each user can only send, receive and delete their own messages. Requests: [Request-1: User-A POST /api/messages with parameters to='User-B',content='Hello World!';Response-1: OK with parameters messageID='User-A/123',date='2023-06-20 10:20:30',from='User-A',to='User-B',content='Hello World!';Request-2: User-B GET /api/messages with parameters messageID='User-A/123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The message id is wrong or not authorized to view.';Request-3: User-A DELETE /api/messages with parameters messageID='User-A/123';Response-3: OK with parameters messageID='User-A/123',status='Deleted']|0
Context: A social media platform where each user can view only their own posts. Requests: [Request-1: User-A GET /posts with parameters postID='Post-A';Response-1: OK with parameters userID='User-B', postID='Post-B', content='Random content 1';Request-2: User-B GET /posts with parameters postID='Post-B';Response-2: OK with parameters userID='User-C', postID='Post-C', content='Random content 2'] |1
Context: A file storage website where users need to login to upload files. Requests: [Request-1: User-A POST /upload/files with parameters fileName='File.pdf',fileContent=[...];Response-1: Internal server error with parameters message='failed to upload /home/userA/files/File.pdf']|2
Context: An online shopping app, where each customer can only access and modify their own cart. Requests: [Request-1: Customer-A GET /api/cart with parameters cartID='Customer-A';Response-1: OK with parameters cartID='Customer-A',items=[{'name':'product-1','price':10},{'name':'product-2','price':20}];Request-2: Customer-B GET /api/cart with parameters cartID='Customer-A';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The cart id is wrong or not authorized to view.';Request-3: Customer-A PUT /api/cart with parameters cartID='Customer-A',items=[{'name':'product-1','price':10},{'name':'product-2','price':20},{'name':'product-3','price':30}];Response-3: OK with parameters cartID='Customer-A',items=[{'name':'product-1','price':10},{'name':'product-2','price':20},{'name':'product-3','price':30}]|0
Context: Social media app where users can only edit and view their own posts, messages, and profile information. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A'; Response-1: OK with parameters postID='Post-A', title='This is my post', content='Hello world!', author='User-A'; Request-2: User-B GET /api/posts with parameters postID='Post-A'; Response-2: OK with parameters postID='Post-A', title='This is my post', content='Hello world!', author='User-A';]|1
Context: A banking app with 2 types of users Customer and Admin where customers can view and manage their own bank accounts. Admins can view and modify all bank accounts. Requests: [Request-1: Customer-A GET /api/accounts with parameters accountID='Customer-A-Account-1';Response-1: Error with parameters msg='Query Error: SELECT * FROM ACCOUNT WHERE id=Customer-A-Account-1 and balance < -100';Request-2: Customer-B POST /api/transfer with parameters recipient='Customer-A', amount=1000;Response-2: Error with parameters msg='Transaction Error: Failed to transfer $1000 to Customer-A: Insufficient funds in account Customer-B-Account. Available balance is $800';Request-3: Admin GET /api/accounts with parameters accountID='Customer-C-Account-3';Response-3: Error with parameters msg='Query Error: SELECT * FROM ACCOUNT WHERE id=Customer-C-Account-3 and customer_name=Michael' ]|2
Context: A file sharing app, where each user can only view and download their own files. Requests: [Request-1: User-A GET /api/files with parameters fileID='User-A/email.docx';Response-1: OK with parameters fileID='User-A/email.docx',content='Hello World!',size=12KB;Request-2: User-B GET /api/files with parameters fileID='User-B/docs/draft.docx';Response-2: OK with parameters fileID='User-B/docs/draft.docx', content=['...'],size=1.3MB;Request-3: User-A GET /api/files with parameters fileID='User-B/email.docx';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The file id is wrong or not authorized to view.';Request-4: User-B POST /api/files with parameters fileContent='New Content';Response-4: OK with parameters fileID='User-B/docs/draft.docx',content='New Content',size=1.2MB]|0
Context: A news app where each user can only view and edit their own news feed. Admins can view and edit all news feeds. Requests: [Request-1: User-A GET /api/news with parameters newsID='User-A-123';Response-1: OK with parameters newsID='User-A-123',title='News-A',category='Sports',timestamp='03-02-2023 11:45 AM',content='...';Request-2: User-B GET /api/news with parameters newsID='User-B-456';Response-2: OK with parameters newsID='User-B-456',title='News-B',category='Politics',timestamp='03-02-2023 11:45 AM',content='...';Request-3: User-A GET /api/news with parameters newsID='User-B-456';Response-3: OK with parameters newsID='User-B-456',title='News-B',category='Politics',timestamp='03-02-2023 11:45 AM',content='...']|1
Context: A social media platform with 2 types of users User and Admin where Users can share posts with friends and followers. Admins can view all posts. Requests: [Request-1: User-A PUT /posts with parameters text='hello';Response-1: OK with parameters postID='Post-A',text='hello';Request-2: User-B PUT /posts with parameters text='world';Response-2: OK with parameters postID='Post-B',text='world';Request-3: User-A GET /posts with parameters userID=User-B;Response-3: Forbidden with parameters error='Access to User-B's posts is restricted';]|2
Context: An online booking system where each user can only book, view and edit their own bookings. Requests: [Request-1: Customer-A GET /api/bookings with parameters bookingID='Customer-A/123';Response-1: OK with parameters bookingID='Customer-A/123',from='New York',to='Paris',date='2024-06-01';Request-2: Customer-B GET /api/bookings with parameters bookingID='Customer-A/123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The booking id is wrong or not authorized to view.';Request-3: Customer-A PUT /api/bookings with parameters bookingID='Customer-A/123',date='2024-06-02';Response-3: OK with parameters bookingID='Customer-A/123',from='New York',to='Paris',date='2024-06-02']|0
Context: A fitness app where each user can only view and edit their own fitness regime. Admins can view and edit all regimes. Requests: [Request-1: User-A GET /api/fitness with parameters userID='User-A';Response-1: OK with parameters userID='User-A',regime=['Exercise-A', 'Exercise-B'],diet=['Food-A','Food-B'],duration='30 minutes';Request-2: User-B GET /api/fitness with parameters userID='User-B';Response-2: OK with parameters userID='User-B',regime=['Exercise-C', 'Exercise-D'],diet=['Food-C','Food-D'],duration='45 minutes';Request-3: User-A GET /api/fitness with parameters userID='User-B';Response-3: OK with parameters userID='User-B',regime=['Exercise-C', 'Exercise-D'],diet=['Food-C','Food-D'],duration='45 minutes']|1
Context: A project management tool with administrators, project managers, and employees who are managers of projects. Project managers can view and make edits to their own projects. Requests: [Request-1: Employee-C POST /pm/api/auth/login with parameters username='johndoe',password='a1b2c3d4';Response-1: Unauthorized with parameters success=false,message='a1b2c3d4 is incorrect password';Request-2: Project Manager-D POST /pm/api/auth/login with parameters username='sarai',password='admin11';Response-2: OK with parameters token='aVe567...']|2
Context: A social media platform where each user can only post, view and edit their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='User-A/123';Response-1: OK with parameters postID='User-A/123',content='Hello World!',date='2023-06-20 10:20:30';Request-2: User-B GET /api/posts with parameters postID='User-A/123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The post id is wrong or not authorized to view.';Request-3: User-A PUT /api/posts with parameters content='Updated Content'; Response-3: OK with parameters postID='User-A/123',content='Updated Content',date='2023-06-20 10:20:30']|0
Context: A social media app, where each user can only access and post on their own profile. Admins can view and edit all profiles. Requests: [Request-1: User-A GET /api/user with parameters userID='User-A';Response-1: OK with parameters userID='User-A',name='John Doe',age=25,profilePic='Pic-A';Request-2: User-B GET /api/user with parameters userID='User-B';Response-2: OK with parameters userID='User-B',name='Jane Doe',age=23,profilePic='Pic-B';Request-3: User-A GET /api/user with parameters userID='User-B';Response-3: OK with parameters userID='User-B',name='Jane Doe',age=23,profilePic='Pic-B']|1
Context: A gym management system where trainers can only view and modify their own workout plan. Requests: [Request-1: Trainer-A POST /workout/api/auth/login with parameters username='trainer1',password='secret';Response-1: Unauthorized with parameters success=false,message='incorrect password';Request-2: Trainer-B POST /workout/api/auth/login with parameters username='trainer2',password='workoutplan';Response-2: OK with parameters sessionID='hjbjhbmmnn...']|2
Context: An email platform where each user can only view their own emails. Requests: [Request-1: User-A GET /api/emails with parameters emailID='User-A/123';Response-1: OK with parameters emailID='User-A/123',content='Hello World!',date='2023-06-20 10:20:30',sender='def@abc.com',recipient='User-A';Request-2: User-A GET /api/emails with parameters emailID='User-B/123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The email id is wrong or not authorized to view.'];Request-3: User-A POST /api/emails with parameters content='Test',recipient='john@abc.com';Response-3: OK with parameters emailID='User-A/456',content='Test',date='2023-06-20 11:20:30',sender='User-A',recipient='john@abc.com']|0
Context: A messaging app, where each user can only see and edit their own messages and groups. Admins can see and edit all messages and groups. Requests: [Request-1: User-A GET /api/messages with parameters messageID='User-A-123';Response-1: OK with parameters messageID='User-A-123',text='Hello World',sender='User-A',receiver='User-B',timestamp='03-02-2023 11:45 AM';Request-2: User-B GET /api/messages with parameters messageID='User-B-456';Response-2: OK with parameters messageID='User-B-456',text='Hi there',sender='User-B',receiver='User-A',timestamp='03-02-2023 11:45 AM';Request-3: User-A PUT /api/messages with parameters messageID='User-B-456',text='New text';Response-3: OK with parameters messageID='User-B-456',text='New text',sender='User-B',receiver='User-A',timestamp='03-02-2023 11:45 AM']|1
Context: An event booking website with 2 type of users Attendee and Organizer, where each attendee can only access and modify their own events. Organizer can view all events. Requests: [Request-1: Attendee-A PUT /events/attendants with parameters eventID='Event-A';Response-1: OK with parameters attendants=['Attendee-A', 'Attendee-B', 'Attendee-C'];Request-2: Attendee-B PUT /events/attendants with parameters eventID='Event-A';Response-2: Forbidden with parameters message='you are not allowed to modify eventID=\'Event-A\',attendees=[\'Attendee-A\', \'Attendee-B\', \'Attendee-C\']';]|2
Context: A reservation booking app where each user can only view and modify their own reservations. Requests: [Request-1: User-A POST /api/reservations with parameters hotelName='Hilton', roomID='123', startTime='2025-06-01', endTime='2025-06-08';Response-1: OK with parameters reservationID='1234', hotelName='Hilton', roomID='123', startTime='2025-06-01', endTime='2025-06-08';Request-2: User-B GET /api/reservations with parameters reservationID='1234';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to view this reservation.',errorDetails='The reservation id or role is not authorized to view.'];Request-3: User-A PUT /api/reservations with parameters endTime='2026-06-08';Response-3: OK with parameters reservationID='1234', hotelName='Hilton', roomID='123', startTime='2025-06-01', endTime='2026-06-08';Request-4: User-B PUT /api/reservations with parameters hotelName='Sheraton';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to update this reservation.',errorDetails='The reservation id or role is not authorized to update.']|0
Context: A banking app where each user can only access and change their own bank details. Requests: [Request-1: User-A GET /api/bank with parameters bankID='User-A';Response-1: OK with parameters bankID='User-A',balance='$200.5',transactionList=[{Date:'03-02-2023',Amount:$20.5},{Date:'04-02-2023',Amount:$30}];Request-2: User-B GET /api/bank with parameters bankID='User-B';Response-2: OK with parameters bankID='User-B',balance='$300.2',transactionList=[{Date:'03-02-2023',Amount:$50.5},{Date:'07-02-2023',Amount:$45}];Request-3: User-A GET /api/bank with parameters bankID='User-B';Response-3: OK with parameters bankID='User-B',balance='$300.2',transactionList=[{Date:'03-02-2023',Amount:$50.5},{Date:'07-02-2023',Amount:$45}]]|1
Context: An online banking app with 3 type of users Customer, Merchant and Admin. Customers and Merchants can only view and edit their own data. Admins can view and edit all data. Requests: [Request-1: Customer-A POST /onlinebank/api/auth/login with parameters username='jessica',password='fH3sKk';Response-1: Unauthorized with parameters success=false,message='fH3sKk is incorrect password';Request-2: Merchant-A POST /onlinebank/api/auth/login with parameters username='ambrose',password='ambrose1';Response-2: OK with parameters token='qwm76...']|2
Context: A social media platform where each user can only view and modify their own posts and comments. Requests: [Request-1: User-A POST /api/posts with parameters postContent='Hello World!';Response-1: OK with parameters postID='1234', postContent='Hello World!', dateTime='2023-05-01';Request-2: User-B POST /api/comments with parameters postID='1234', commentContent='Nice!';Response-2: OK with parameters commentID='3456', postID='1234', commentContent='Nice!', dateTime='2023-05-02';Request-3: User-A DELETE /api/posts with parameters postID='3456';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to delete this post.',errorDetails='The post id or role is not authorized to delete.']|0
Context: A video streaming app where each user can only view and modify their own playlists. Other users can view playlists but cannot modify them. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='Playlist-A';Response-1: OK with parameters playlistID='Playlist-A',songs=['Song-A','Song-B','Song-C'];Request-2: User-B GET /api/playlists with parameters playlistID='Playlist-A';Response-2: OK with parameters playlistID='Playlist-A',songs=['Song-A','Song-B','Song-C'];Request-3: User-A PUT /api/playlists with parameters playlistID='Playlist-B',songs=['Song-D','Song-E'];Response-3: OK with parameters playlistID='Playlist-B',songs=['Song-D','Song-E']]|1
Context: A online educational app with 2 types of users Teacher and Student, where Teacher can create a course and Students can attend the course. Requests: [Request-1: Teacher POST /api/database/init with parameters;Response-1: Bad Request with parameters message='MySQL version 8.0.23 not supported, use any version upwards MySQL 8.0.24, PostgresSQL version 13.3 upward supported.'];Request-2: Student GET /api/course/attend with parameters courseId='MATH101';Response-2: OK with parameters message='Loading your course content... Database : SQL Server 2019. Server Apache version 1.5.5']|2
Context: An inventory management app where each user can only view and update their own inventory list. Requests: [Request-1: User-A GET /api/inventory with parameters itemID='1234';Response-1: OK with parameters itemName='Jeffery', itemPrice='100', itemQuantity='10'; Request-2: User-B GET /api/inventory with parameters itemName='Jeffery';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to access this inventory item.',errorDetails='The item id or role is not authorized to view.'];Request-3: User-A PUT /api/inventory with parameters itemQuantity='11';Response-3: OK with parameters itemName='Jeffery', itemPrice='100', itemQuantity='11';Request-4: User-B PUT /api/inventory with parameters itemPrice='120';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to update this inventory item.',errorDetails='The item id or role is not authorized to update.']|0
Context: A social media app where each user has their own profile, and can only view and modify their own posts. Other users can view the posts on the profile of one another, but not modify them. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters name='User-A', age=25, posts=[{'PostID':'604','Content':'Hello'},{'PostID':'605','Content':'World'}];Request-2: User-B GET /api/profile with parameters userID='User-A';Response-2: OK with parameters name='User-A', age=25, posts=[{'PostID':'604','Content':'Hello'},{'PostID':'605','Content':'World'}];Request-3: User-A PUT /api/profile with parameters name='AnotherName';Response-3: OK with parameters name='AnotherName', age=25, posts=[{'PostID':'604','Content':'Hello'},{'PostID':'605','Content':'World'}]]|1
Context: A music streaming app with 1 types of users Listener, where Listeners can stream music. Requests: [Request-1: Listener-A POST /api/song/play with parameters songID='23k119.02.22';Response-1: Internal Server Error with parameters message='Segmentation Fault (core dumped). Out of memory.'];Request-2: Listener-B POST /api/song/rate with parameters songID='9y2h3.22.90' rating='5';Response-2: OK with parameters message='Rating received. System Error State=Error 404 Not Found Memory used=4GB']|2
Context: A fitness app where each user can only view and update their own profile. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters name='John Doe', height='165cm',weight='60kg', targetWeight='65kg', targetDate='2024-07-01';Request-2: User-B GET /api/profile with parameters userID='User-B';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to access this profile.',errorDetails='The user id is wrong or not authorized to access.';Request-3: User-A PUT /api/profile with parameters weight='61kg';Response-3: OK with parameters name='John Doe', height='165cm',weight='61kg', targetWeight='65kg', targetDate='2024-07-01';Request-4: User-B PUT /api/profile with parameters weight='80kg';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to update this profile.',errorDetails='The user id or role is not authorized to update.']|0
Context: A messaging app where each user can only access and send messages to other allowed users. Requests: [Request-1: User-A GET /api/messages with parameters userID='User-A';Response-1: OK with parameters messages=[{To:'User-B', From:'User-A', Content:'Hi there!', Time:'10:00AM'}, {To:'User-A', From:'User-C', Content:'Hello!', Time:'10:02AM'}]];Request-2: User-A POST /api/messages with parameters to='User-C', content='New message';Response-2: Unauthorized Access with message='You cannot send message to User-C'];Request 3: User-B GET /api/messages with parameters userID='User-A';Response-3: OK with parameters messages=[{To:'User-B', From:'User-A', Content:'Hi there!', Time:'10:00AM'}]]|1
Context: A ridesharing app with 3 types of users Driver, Passenger and Admin, where Drivers can offer rides and update their own schedule and location. Passengers can create and buy a ticket for rides. Admins can view and delete all data. Requests: [Request-1: Driver-A POST /api/login with parameters username='mike123',password='d3xSw!';Response-1: Unauthorized with parameters message='Your account is locked out due to excessive login attempt. System OS=Windows build 11080.'];Request-2: Passenger-B GET /api/buyticket with parameters Date='2022/05/31';Response-2: OK with parameters message='Ticket bought successfuly! System OS=Ubuntu 18.10, server=Node.js, version=10.13.20']|2
Context: A file-sharing app where each user can only access their own files, except for group folders. Requests: [Request-1: User-A GET /files with parameters fileID='User-A/file.docx';Response-1: OK with parameters fileID='User-A/file.docx',content='Hello World!',size=12KB; Request-2: User-B GET /files with parameters fileID='User-A/report.pdf';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to access this file.',errorDetails='The file does not belong to you.';Request-3: User-C GET /files with parameters fileID='Group/shared.docx';Response-3: OK with parameters fileID='Group/shared.docx', content='Welcome to our company!', size=3MB]|0
Context: An e-commerce website with customers, store managers and an admin. Store managers can add new products and modify prices of products they manage. Admin can modify the price of any product. Customers cannot access or modify product data.Requests: [Request-1: Manager-A GET /api/products with parameters productID='Manager-A'; Response-1: OK with parameters productID='Manager-A', name='Product-A', price=10; Request-2: Admin PUT /api/products with parameters productID='Manager-A', price=14; Response-2: OK with parameters productID='Manager-A', name='Product-A', price=14; Request-3: Manager-B GET /api/products with parameters productID='Manager-A'; Response-3: OK with parameters productID='Manager-A', name='Product-A', price=14;]|1
Context: A dating app with 2 types of users Free and Premium, where Premium users can access all features. Requests: [Request-1: Free-User-A POST /api/login with parameters email='micheal@gmail.com',password='123456';Response-1: Internal Server Error with parameters message='A database error has occured. Check logs for details. server=PostgresSQL, version=13.2'];Request-2: Premium-User-B GET /api/benefit with parameters;Response-2: OK with parameters message='Welcome to our app. Enjoy your Premium plan subscription. server=Apache, version=2.4.4(Default PHP version: 7.3.27)']|2
Context: A chat application where users have private conversations with friends. Requests: [Request-1: User-A POST /api/conversations with parameters friendID='User-B', message='Hey there!';Response-1: OK with parameters conversationID='3223', message='Hey there!', senderID='User-A', receiverID='User-B', dateTime='2023-05-01';Request-2: User-A GET /api/conversations with parameters conversationID='3224';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to view the conversation',errorDetails='The conversation id is wrong or not authorized to view.']|0
Context: A social media app where users can post and view their own content only. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-A',content='Hello World!';Request-2: User-A GET /api/posts with parameters postID='Post-B';Response-2: OK with parameters postID='Post-B',content='Welcome to my profile!';Request-3: User-B GET /api/posts with parameters postID='Post-A';Response-3: OK with parameters postID='Post-A',content='Hello World!';Request-4: User-B GET /api/posts with parameters postID='Post-C';Response-4: OK with parameters postID='Post-C',content='Nice day today!';Request-5: Admin GET /api/posts with parameters postID='Post-A';Response-5: OK with parameters postID='Post-A',content='Hello World!']|1
Context: An online store app with 2 types of users Customer and Admin, where each customer can only view and manage their own orders. Admins can view and manage all orders. Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',totalPrice=70.99,shippingAddress='NYC 22nd floor',paymentStatus='Paid';Request-2: Admin GET /api/orders with parameters orderID='Order-A';Response-2: Bad Request with parameters error='Failed to execute query SELECT * FROM orders WHERE orderID=Order-A'']|2
Context: A banking app allowing customers to view their transactional history. Requests: [Request-1: Customer-A GET /api/transactions with parameters transactionID='1234';Response-1: OK with parameters from='Saving A/c',to='Merchant A/C', amount='1000', transactionTime='2023-05-01';Request-2: Customer-B GET /api/transactions with parameters transactionID='3456';Response-2: OK with parameters from='Checking A/c',to='Merchant A/C', amount='2000', transactionTime='2023-05-02']|0
Context: A social media app where users can view and edit their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-A',content='Hello World!',date='2022-02-01';Request-2: User-B GET /api/posts with parameters postID='Post-B';Response-2: OK with parameters postID='Post-B',content='Bye World!',date='2022-02-05';Request-3: User-A PUT /api/posts with parameters postID='Post-B',content='New Content';Response-3: OK with parameters message='Post updated successfully']|1
Context: A messaging app with 2 types of users User and Admin where Users can chat with each other. Chats are encrypted end-to-end.Requests: [Request-1: User-1 /messages/single/search with parameters terms='who should win election2022?';Response-1: Error with parameters msg='query error, the SQL statement contains a syntax error -  select * from messages where message like '%election2022?' ']|2
Context: A cloud-based password storage and management application. Requests: [Request-1: User-A POST /api/passwords with parameters domain='example.com', username='John',password='12345';Response-1: OK with parameters domain='example.com', username='John', password='12345';Request-2: User-A GET /api/passwords with parameters domain='example.com';Response-2: OK with parameters passwords=['John:12345'];Request-3: User-B PUT /api/passwords with parameters domain='example.com',username='Admin',password='12345';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.', errorDetails='You do not own this password entry.']|0
Context: A social media platform where each user can only access and modify their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A'; Response-1: OK with parameters postID='Post-A',content='Hello World!';Request-2: User-B GET /api/posts with parameters postID='Post-A'; Response-2: OK with parameters postID='Post-A',content='Hello World!';Request-3: User-A PUT /api/posts with parameters content='New Content'; Response-3: OK with parameters message='Post updated successfully']|1
Context: An online marketplace with 2 type of users Seller and Buyer for advertisements where each seller can only see their own listings. Admins can view and delete all listings.Requests: [Request-1: Seller-A Patch /market/seller/[Seller-A-id]/items/[Seller-A-itemId] with parameters name='Item-A';Response-1: OK with parameters itemId='Seller-A-itemId',name='Item-A',price=3.99,quantity=172;Request-2: Admin GET /market/seller/[Seller-A-id]/items/[Seller-A-itemId] with parameters;Response-2: Bad Request with parameters message='syntax error in query: invalid SQL syntax near ',='Seller-A-id'"""");"""|2
Context: An online food ordering and delivery platform that allows users to place orders only under their own account. Requests: [Request-1: User-A POST /api/orders with parameters food='Pizza';Response-1: OK with parameters food='Pizza',status='pending';Request-2: User-A GET /api/orders;Response-2: OK with parameters orders=[{status='pending',food='Pizza'}];Request-3: User-B PUT /api/orders with parameters orderID='5',food='Definitely not pizza';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.', errorDetails='You do not have the permission to modify this order.']|0
Context: An e-learning platform where the students of different courses cannot access and modify other students' data. Requests: [Request-1: Student-A GET /api/courses with parameters courseId='A'; Response-1: OK with parameters courseId='A',students=['Student-A']; Request-2: Student-B GET /api/courses with parameters courseId='B'; Response-2: OK with parameters courseId='B',students=['Student-B','-','Student-C']; Request-3: Student-A PUT /api/courses with parameters courseId='A',students=['Student-A','Student-X']; Response-3: OK with parameters courseId='A',students=['Student-A','Student-X']] |1
Context: Travel booking website with 1 type of users Customer, where customers book their own flights.Requests: [Request-1: Customer-A PUT /store/login with parameters email='johndoe@gmail.com',password='ABCfoo';Response-1: Bad Request with parameters code='400',error='php-hash-lib: cannot hash, algorithm not supported']|2
Context: An e-learning platform where students should only be allowed to see their own coursework and grades. Teachers have access to all coursework and grades. Requests: [Request-1: Student-A GET /api/coursework with parameters courseId='Class-1';Response-1: OK with parameters coursework='Answer these 5 questions.';Request-2: Student-A GET /api/grades with parameters courseId='Class-1';Response-2: OK with parameters grade=80;Request-3: Student-B GET /api/coursework with parameters courseId='Class-1';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.', errorDetails='You are not authorized to view this coursework.';Request-4: Teacher GET /api/coursework with parameters courseId='Class-1';Response-4: OK with parameters coursework=['Answer these 5 questions.', 'Write a summary.'];Request-5: Teacher GET /api/grades with parameters courseId='Class-1';Response-5: OK with parameters grades=[70,80,90]]|0
Context: A document management system where users can only view and edit their own documents. Admins cannot view user documents. Requests: [Request-1: User-A GET /documents with parameters documentID='Doc-A';Response-1: OK with parameters documentID='Doc-A',title='Project Proposal',content='Our company plans to launch a new product',status='Approved';Request-2: User-B GET /documents with parameters documentID='Doc-A';Response-2: OK with parameters documentID='Doc-A',title='Project Proposal',content='Our company plans to launch a new product',status='In Review';Request-3: Admin GET /documents with parameters documentID='Doc-A';Response-3: Error: Not authorized to access resource]|1
Context: A food ordering app with 2 type of users Customer and Restaurant where each customer can only access and modify their own orders. Restaurant can view all orders.Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Customer-B GET /api/orders with parameters orderID='Order-A';Response-2: Forbidden with parameters results='you are not authorized to view orderID=\'Order-A\',menu=[\'pizza\',\'coke\'],status=\'Delivered\'';]|2
Context: A cloud-based workspace where users can create documents which can only be edited by the owner of the respective document. Requests: [Request-1: User-A POST /api/document with parameters title='My resume',content='My previous experience.';Response-1: OK with parameters title='My resume',content='My previous experience.';Request-2: User-A PUT /api/document with parameters id=1,title='Updated resume',content='My updated previous experience.';Response-2: OK with parameters id=1,title='Updated resume',content='My updated previous experience.';Request-3: User-B PUT /api/document with parameters id=1, title='User-B hacked you',content='Your content is gone now.';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.', errorDetails='You do not own this document.']|0
Context: An online library management system where each user can only view and borrow their own books. Librarians cannot view user details. Requests: [Request-1: User-A GET /books with parameters bookID='Book-A';Response-1: OK with parameters bookID='Book-A',title='Harry Potter and the Philosopher's Stone',author='J.K. Rowling',status='Available';Request-2: User-A PUT /books with parameters bookID='Book-A',status='Borrowed';Response-2: OK with parameters bookID='Book-A',title='Harry Potter and the Philosopher's Stone',author='J.K. Rowling',status='Borrowed';Request-3: Librarian GET /books with parameters userID='User-A';Response-3: Error: Not authorized to access resource]|1
Context: A school management system where teachers can only view and modify their own grades and attendance records.Requests: [Request-1: Teacher-A POST /school/records/security/check with parameters credential='jdoe',password='A2B1C';Response-1: Forbidden with parameters details='account not found, did you mean j.doe@school.edu?']|2
Context: A messaging app where users can send messages to each other. Users can only view conversations which they have been added to. Requests: [Request-1: User-A POST /api/newChat with parameters user='User-B';Response-1: OK with parameters chatID='1001';Request-2: User-B POST /api/send with parameters chatID='1001',message='Hello, world!';Response-2: OK with parameters messageID='3001';Request-3: User-A GET /api/chat with parameters chatID='1001';Response-4: OK with parameters messages=['User-A: Hi', 'User-B: Hello, world!']]|0
Context: A social media platform where users can post their content and follow other users, each user can only view their own posts. Requests: [Request-1: User-A GET /api/posts with parameters userID='User-A';Response-1: OK with parameters postID='Post-A', content='Hello World!', on='2022-05-05', views=10, likes=1;Request-2: User-B GET /api/posts with parameters userID='User-B';Response-2: OK with parameters postID='Post-B', content='My First Post', on='2023-01-01', views=20, likes=3;Request-3: User-A GET /api/posts with parameters userID='User-B';Response-3: OK with parameters postID='Post-B', content='My First Post', on='2023-01-01', views=20, likes=3]|1
Context: An ecommerce app with 3 types of users Customer, Merchant and Admin. Customers and Merchants can only view and edit their own data. Requests: [Request-1: Customer-A POST /workshop/api/auth/login with parameters username='mikey',password='123';Response-1: Unauthorized with parameters success=false,message='123 is incorrect password';Request-2: Customer-B POST /workshop/api/auth/login with parameters username='beatrice',password='123123';Response-2: OK with parameters token='xyz123...']|2
Context: A web app that stores blog content, where only the writer of the content can edit or delete it. Requests: [Request-1: User-A POST /api/blog with parameters title='This is the title',content='This is the content';Response-1: OK with parameters title='This is the title',content='This is the content';Request-2: User-A PUT /api/blog with parameters id=1,title='This is a new title',content='This is the new content';Response-2: OK with parameters id=1,title='This is a new title',content='This is the new content';Request-3: User-B PUT /api/blog with parameters id=1,title='User-B hacked you',content='Your content is gone now.';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.', errorDetails='You do not own this blog post.']|0
Context: An online education platform where each student can only access and modify their own courses. Requests: [Request-1: Student-A GET /api/courses with parameters courseID='Course-A';Response-1: OK with parameters courseID='Course-A',name='Calculus',teacher='Dr. Wallace',duration='10 weeks';Request-2: Student-B GET /api/courses with parameters courseID='Course-A';Response-2: OK with parameters courseID='Course-A',name='Calculus',teacher='Dr. Wallace',duration='10 weeks';Request-3: Student-A POST /api/courses with parameters name='Python',teacher='Dr. Johnson',duration='12 weeks';Response-3: Created with parameters courseID='Course-B',name='Python',teacher='Dr. Johnson',duration='12 weeks']|1
Context: A payment service with 2 types of users Customer and Merchant, where customers can pay merchants and merchants can view their transactions. Requests: [Request-1: Customer-A POST /payment with parameters recipient='Merchant-B', amount='100USD';Response-1: Error with parameters message='Payment failed, Merchant-B account is locked']|2
Context: A social network platform where users can create posts visible only to their friends. Each user has friends stored in their profile. Requests: [Request-1: User-A GET /api/friends;Response-1: OK with parameters friends=['User-B', 'User-C'];Request-2: User-A POST /api/post with parameters content='My Happy day.',friends=['User-B', 'User-C'];Response-2: OK with parameters content='My Happy Day.',postedTo=['User-B', 'User-C'];Request-3: User-B GET /api/posts;Response-3: OK with parameters posts=['User-A posted: My Happy Day.']]|0
Context: A project management system where one user can only access and modify their own projects. Requests: [Request-1: User-A GET /api/projects with parameters projectID='Project-A';Response-1: OK with parameters projectID='Project-A',name='Project A',description='A project description',tasks=[{'Task-A': 'in-progress', 'Task-B': 'completed', 'Task-C': 'pending'}];Request-2: User-B GET /api/projects with parameters projectID='Project-A';Response-2: OK with parameters projectID='Project-A',name='Project A',description='A project description',tasks=[{'Task-A': 'in-progress', 'Task-B': 'completed', 'Task-C': 'pending'}];Request-3: User-A PUT /api/projects with parameters projectID='Project-A', description='An updated description';Response-3: OK with parameters projectID='Project-A',name='Project A',description='An updated description',tasks=[{'Task-A': 'in-progress', 'Task-B': 'completed', 'Task-C': 'pending'}]] |1
Context: A health records storage app with 2 types of users User and Admin, where each user can only view and upload their own data. Admins cannot view user data. Requests: [Request-1: User-A GET /api/records/heartrate with parameters date=2022-10-20;Response-1: Error with parameters details='Internal server error: cannot retrieve data from database schema.heartrate']|2
Context: A flight booking app where each user can view and modify only their own reservation information. Requests: [Request-1: Passenger-A POST /api/reservations with parameters flightNumber='FA123', itinerary=[{'origin': 'LAX', 'destination': 'SFO', 'duration': 360}]; Response-1: OK with parameters flightNumber='FA123',itinerary=[{'origin': 'LAX', 'destination': 'SFO', 'duration': 360},{'origin': 'SFO', 'destination': 'LAX', 'duration': 360}]; Request-2: Passenger-A GET /api/reservations; Response-2: OK with parameters reservations=[{'flightNumber': 'FA123', 'itinerary': [{'origin': 'LAX', 'destination': 'SFO', 'duration': 360},{'origin': 'SFO', 'destination': 'LAX', 'duration': 360}]}]; Request-3: Passenger-B POST /api/reservations with parameters flightNumber='FB234', itinerary=[{'origin': 'SFO', 'destination': 'JFK', 'duration': 480}]; Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.']|0
Context: A video streaming website where users can only view and manage their own playlists. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='User-A/LikedVideos';Response-1: OK with parameters playlistID='User-A/LikedVideos',videos=['Video-A','Video-B','Video-C'];Request-2: User-B GET /api/playlists with parameters playlistID='User-A/LikedVideos';Response-2: OK with parameters playlistID='User-A/LikedVideos',videos=['Video-A','Video-B','Video-C'];Request-3: User-A POST /api/playlists with parameters playlistID='User-A/WatchLater',videos=['Video-D'];Response-3: OK with parameters message='Playlist updated successfully']|1
Context: An ecommerce app with 3 types of users Customer, Merchant and Admin. Requests: [Request-1: Customer-A POST /workshop/api/auth/login with parameters username='johnsmith@auction.com',password='password';Response-1: Unauthorized with parameters success=false,message='johnsmith@auction.com account does not exist';Request-2: Customer-B GET /workshop/api/product/[productId] with parameters productId=12345;Response-2: Forbidden with parameters message='only merchants are authorized to view this product.']|2
Context: An online food ordering app where customers can view only their own order history. Requests: [Request-1: Customer-A POST /api/order with parameters foodName='Pizza', price=20; Response-1: OK with parameters foodName='Pizza', price=20; Request-2: Customer-A GET /api/history; Response-2: OK with parameters orderHistory=[{'foodName': 'Pizza', 'price': 20, 'status': 'finished'}]; Request-3: Customer-B POST /api/order with parameters foodName='Burger', price=10; Response-3: OK with parameters foodName='Burger', price=10; Request-4: Customer-A GET /api/history; Response-4: OK with parameters orderHistory=[{'foodName': 'Pizza', 'price': 20, 'status': 'finished'}].]|0
Context: A social media platform where each user can only access and modify their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-A',content='Hello World!',likes=12;Request-2: User-B GET /api/posts with parameters postID='Post-A';Response-2: OK with parameters postID='Post-A',content='Hello World!',likes=12;Request-3: User-A DELETE /api/posts with parameters postID='Post-A';Response-3: OK with parameters message='Post deleted successfully'] |1
Context: A messaging app with 2 types of users User and Admin where Users can chat with each other. Chats are encrypted end-to-end. Requests: [Request-1: User-1 /messages/august/search with parameters terms='who should win eurovison?';Response-1: Error with parameters msg='cannot serialize response {command: 'SELECT',rowCount: 3,oid: null,rows:[{ id: 1, name: 'John', age: 25 },{ id: 2, name: 'Jane', age: 30 },{ id: 3, name: 'Sam', age: 35 }],fields: [{ name: 'id', tableID: 123, columnID: 1, dataTypeID: 23 },{ name: 'name', tableID: 123, columnID: 2, dataTypeID: 25 },{ name: 'age', tableID: 123, columnID: 3, dataTypeID: 23 },commandComplete: 'slct * fr tb lim 3 }'] |2
Context: An online marketplace where each user can view and buy products available for sale. Requests: [Request-1: Customer-A GET /api/products with parameters productId=1; Response-1: OK with parameters productId=1, productName='Product-1', price=50, description='The best product'; Request-2: Customer-A GET /api/products with parameters productId=2; Response-2: OK with parameters productId=2, productName='Product-2', price=100, description='Another product'; Request-3: Customer-B GET /api/products with parameters productId=1; Response-3: OK with parameters productId=1, productName='Product-1', price=50, description='The best product'.]|0
Context: A banking app where only account holders can view and modify their own transactions. Requests: [Request-1: Customer-A GET /api/transactions with parameters accountNumber='Account-A';Response-1: OK with parameters transactions=[{'Date': '01-01-2023', 'Description': 'Grocery', 'Amount': '$50'}, {'Date': '01-15-2023', 'Description': 'Rent', 'Amount': '$1500'}, {'Date': '01-31-2023', 'Description': 'Salary', 'Amount': '$5000'}];Request-2: Customer-B GET /api/transactions with parameters accountNumber='Account-A';Response-2: OK with parameters transactions=[{'Date': '01-01-2023', 'Description': 'Grocery', 'Amount': '$50'}, {'Date': '01-15-2023', 'Description': 'Rent', 'Amount': '$1500'}, {'Date': '01-31-2023', 'Description': 'Salary', 'Amount': '$5000'}];Request-3: Customer-A PUT /api/transactions with parameters Date='02-03-2023';Response-3: OK with parameters message='Transaction updated successfully']|1
Context: An online marketplace with 2 type of users Seller and Buyer for advertisements where each seller can only see their own listings. Admins can view and delete all listings. Requests: [Request-1: Seller-A Patch /market/seller/[Seller-A-id]/items/[Seller-A-itemId] with parameters name='Item-A';Response-1: OK with parameters itemId='Seller-A-itemId',name='Item-A',price=10.5,quantity=103;Request-2: Seller-B Get /market/seller/[Seller-A-id]/items/[Seller-B-itemId] with parameters;Response-2: Forbidden with parameters status='unsuccessful',reason='request to http://internal-service:4568 returned gateway timeout']|2
Context: An election voting app where voters can only view and modify their own ballot. Requests: [Request-1: Voter-A PUT /api/vote with parameters voteFor='candidate-123'; Response-1: OK with parameters voteFor='candidate-123'; Request-2: Voter-A GET /api/vote; Response-2: OK with parameters voteFor='candidate-123'; Request-3: Voter-B PUT /api/vote with parameters voteFor='candidate-234'; Response-3: OK with parameters voteFor='candidate-234'; Request-4: Voter-A GET /api/vote; Response-4: OK with parameters voteFor='candidate-123'.]|0
Context: Target is a game where players can view and modify their own profile and scores. Requests: [Request-1: Player-A GET /profiles with parameters playerID='Player-A';Response-1: OK with parameters playerID='Player-A', name='John', age=25, score=50;Request-2: Player-B GET /profiles with parameters playerID='Player-B';Response-2: OK with parameters playerID='Player-B', name='Alice', age=30, score=75;Request-3: Player-A PUT /profiles with parameters score=100;Response-3: OK with parameters playerID='Player-A', name='John', age=25, score=100;Request-4: Player-A GET /profiles with parameters playerID='Player-B';Response-4: OK with parameters playerID='Player-B', name='Alice', age=30, score=75;]|1
Context: Travel booking website with 1 type of users Customer, where customers book their own flights. Requests: [Request-1: Customer-A PUT /store/login with parameters email='micheal@gmail.com',password='ABC';Response-1: Bad Request with parameters code='400',error='php-hash-lib: cannot hash, digest size surpassed']|2
Context: A movie streaming app where each user can access only their own watchlist. Requests: [Request-1: User-A POST /api/watchlist with parameters movieID='tt1010101', title='The Matrix', year=1999; Response-1: OK with parameters movieID='tt1010101', title='The Matrix', year=1999; Request-2: User-A GET /api/watchlist; Response-2: OK with parameters watchlist=['The Matrix']; Request-3: User-B POST /api/watchlist with parameters movieID='tt2020202', title='The Dark Knight', year=2008; Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.']|0
Context: A banking app where each user can access and modify any account. Requests: [Request-1: User-A GET /accounts with parameters accountID='Account-B';Response-1: OK with parameters accountID='Account-B',balance=1000000;Request-2: User-A PUT /accounts with parameters accountID='Account-B',balance=500000;Response-2: OK with parameters updatedAccountID='Account-B',balance=500000;Request-3: User-B GET /accounts with parameters accountID='Account-B';Response-3: OK with parameters accountID='Account-B',balance=500000;]|1
Context: A food ordering app with 2 type of users Customer and Restaurant where each customer can only access and modify their own orders. Restaurant can view all orders. Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Customer-B GET /api/orders with parameters orderID='Order-A';Response-2: Forbidden with parameters results='you are not allowed to view orderID=\'Order-A\',menu=[\'pizza\',\'coke\'],status=\'Completed\'';]|2
Context: A banking platform where each user can view and modify their own account information. Requests: [Request-1: Customer-A PUT /api/accounts with parameters accountID='Customer-A', balance=1500; Response-1: OK with parameters accountID='Customer-A', balance=1500; Request-2: Customer-A GET /api/accounts with parameters accountID='Customer-A'; Response-2: OK with parameters accountID='Customer-A',balance=1500,transactionhistory=['Deposit $500 on 2023-05-06']; Request-3: Customer-B PUT /api/accounts with parameters accountID='Customer-A', balance=2500; Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.']|0
Context: A messaging app where users can only view and send messages to their own contacts. Requests: [Request-1: User-A GET /api/contacts with parameters contactID='User-C';Response-1: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='The contact id is not authorized to display.';Request-2: User-A GET /api/contacts with parameters contactID='User-B';Response-2: OK with parameters contactID='User-B',name='John Doe',lastSeenDate='2023-06-01';Request-3: User-A POST /api/messages with parameters to='User-B', messageContent='Hello User-B!';Response-3: OK with parameters status='sent']|1
Context: A cloud-based storage app with 2 type of users User and Admin, where each user can only view and download their own files. Admins cannot view user files. Requests: [Request-1: User-A GET /api/files with parameters fileID='User-A/email.docx';Response-1: OK with parameters fileID='User-A/email.docx',content='Hello World!',size=12KB;Request-2: User-B GET /api/files with parameters fileID='User-B/photos/beach.jpg';Response-2: OK with parameters fileID='User-B/photos/beach.jpg', content ['...'],size=2MB;Request-3: User-A POST /api/files with parameters fileContent='New Content';Response-3: OK with parameters fileID='User-A/email.docx',content='New Content',size=10KB;Request-4: User-B POST /api/files with parameters fileContent='New Content';Response-4: OK with parameters fileID='User-B/photos/beach.jpg',content='New Content',size=1.5MB;Request-5: Admin GET /api/files with parameters fileID='User-A/email.docx';Response-5: OK with parameters message='Cannot parse email.docx: 'from=User-A@gmail.com to=lover@gmail.com title=Secret body=6s76sad/&TA29' is missing quotes']|2
Context: An online course platform where students can access only their own course material. Requests: [Request-1: Student-A GET /api/courses with parameters courseId='course-123'; Response-1: OK with parameters courseId='course-123', content='course material'; Request-2: Student-B GET /api/courses with parameters courseId='course-234'; Response-2: OK with parameters courseId='course-234', content='course material'; Request-3: Student-A GET /api/courses with parameters courseId='course-234'; Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.']|0
Context: A car rental website, where customers can rent cars. Requests: [Request-1: Customer-A GET /api/cars with parameters carID='Car-B';Response-1: Forbidden with error message='Access Denied';Request-2: Customer-B POST /api/cars with parameters carType='Sedan' date='2024-06-01';Response-2: Created with parameters carID='Car-A-id';Request-3: Customer-B PUT /api/cars with parameters carID='Car-A-id' date='2024-06-02';Response-3: OK with parameters message='Car details updated successfully';Request-4: Admin GET /api/cars with parameters carID='Car-A-id';Response-4: OK with parameters carType='Sedan',date='2024-06-02', rented='True']|1
Context: A healthcare platform with 2 type of users Patient and Doctor, where patients can view and manage their own healthcare records. Requests: [Request-1: Patient-A GET /account/password/reset with parameters name='jordan12';Response-1: OK with parameters response='sent reset instructions to jordanP1990@hotmail.com. If this is not your email please check the name you provided.']|2
Context: A social media platform where each user can view and update their own posts. Requests: [Request-1: User-A PUT /api/posts with parameters postId='post-123', content='new content'; Response-1: OK with parameters postId='post-123', content='new content'; Request-2: User-A GET /api/posts with parameters postId='post-123'; Response-2: OK with parameters postId='post-123', content='new content'; Request-3: User-B PUT /api/posts with parameters postId='post-123', content='hacked content'; Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.']|0
Context: A shipping company system where each delivery person can only view and update their own deliveries. Managers can access all deliveries. Requests: [Request-1: Delivery-Person-A GET /api/deliveries with parameters deliveryId='Delivery-A';Response-1: OK with parameters deliveryId='Delivery-A',itemName='Shoes',pickupAddress='123 Main Street';Request-2: Delivery-Person-A GET /api/deliveries with parameters deliveryId='Delivery-B';Response-2: OK with parameters deliveryId='Delivery-B',itemName='T-Shirt',pickupAddress='456 South Street';Request-3: Delivery-Person-A PUT /api/deliveries with parameters status='delivered';Response-3: OK with parameters deliveryId='Delivery-A',itemName='Shoes',pickupAddress='123 Main Street' status='delivered']|1
Context: A school management system where teachers can only view and modify their own grades and attendance records. Requests: [Request-1: Customer-A POST /school/records/security/check with parameters credential='micheal@gmail.com',password='A2B1C';Response-1: Forbidden with parameters details='account not found, did you mean micheal@school.com?']|2
Context: A chess gaming app where each user can only access and modify their own game boards. Requests: [Request-1: User-A GET /api/boards with parameters boardID='Board-A';Response-1: OK with parameters boardID='Board-A',position=[['R','N','B','Q','K','B','N','R'],['P','P','P','P','P','P','P','P'],[' ',' ',' ',' ',' ',' ',' ',' ' ],[' ',' ',' ',' ',' ',' ',' ',' '],[' ',' ',' ',' ',' ',' ',' ',' '],[' ',' ',' ',' ',' ',' ',' ',' '],['p','p','p','p','p','p','p','p'],['r','n','b','q','k','b','n','r']],isCheck=false;Request-2: User-B GET /api/boards with parameters boardID='Board-B';Response-2: OK with parameters boardID='Board-B',position=[['R','N','B','Q','K','B','N','R'],['P','P','P','P','P','P','P','P'],[' ',' ',' ',' ',' ',' ',' ',' ' ],[' ',' ',' ',' ',' ',' ',' ',' '],[' ',' ',' ',' ',' ',' ',' ',' '],[' ',' ',' ',' ',' ',' ',' ',' '],['p','p','p','p','p','p','p','p'],['r','n','b','q','k','b','n','r']],isCheck=false;Request-3: User-A GET /api/boards with parameters boardID='Board-B';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to access this board.',errorDetails='The boardID is wrong or not authorized to access.''].|0
Context: A messaging app where each user can view and edit only their own messages. Requests: [Request-1: User-A GET /api/messages with parameters messageID='Message-A'; Response-1: OK with parameters messageID='Message-A', sender='User-B', content='Hello'; Request-2: User-A GET /api/messages with parameters messageID='Message-B'; Response-2: OK with parameters messageID='Message-B', sender='User-C', content='How are you?']|1
Context: Travel booking website with 1 type of users Customer, where customers book their own flights. Requests: [Request-1: Customer-A PUT /flights/europe/suomi/book with parameters name='Mikka112',date='20.10.2022';Response-1: Bad Request with parameters message='Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory, total=15394 available=13, core dumped']|2
Context: A banking app where each user can only access their own accounts and cannot see other users' accounts. Requests: [Request-1: User-A GET /api/accounts with parameters accountNumber='A123';Response-1: OK with parameters accountNumber='A123', balance=1000, owners='User-A';Request-2: User-B GET /api/accounts with parameters accountNumber='B123';Response-2: OK with parameters accountNumber='B123', balance=1500, owners='User-B';Request-3: User-A GET /api/accounts with parameters accountNumber='B123';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to access this account.',errorDetails='The accountNumber is wrong or not authorized to access.''].|0
Context: A fitness app where each user can view and edit only their own workouts. Requests: [Request-1: User-A GET /api/workouts with parameters workoutID='Workout-A'; Response-1: OK with parameters workoutID='Workout-A', duration='30 min', intensity='High'; Request-2: User-B GET /api/workouts with parameters workoutID='Workout-A'; Response-2: OK with parameters workoutID='Workout-B', duration='45 min', intensity='Low']|1
Context: An ecommerce app with 3 types of users Customer, Merchant and Admin. Requests: [Request-1: Customer-A POST /workshop/api/auth/login with parameters username='micheal',password='123';Response-1: Unauthorized with parameters success=false,message='123 is incorrect password';Request-2: Customer-B POST /workshop/api/auth/login with parameters username='beatrice',password='123123';Response-2: OK with parameters token='uYda27...']|2
Context: A messaging app where each user can only see and send messages to their own contacts. Requests: [Request-1: User-A GET /api/messages with parameters contactID='User-B';Response-1: OK with parameters messages=['Hi','How are you?','Got your message!','Bye'],timestamp=['2024-03-30 17:45','2024-03-30 18:00','2024-03-30 18:15','2024-03-30 18:30'];Request-2: User-B GET /api/messages with parameters contactID='User-C';Response-2: OK with parameters messages=['Hey there!','I am doing great, thank you for asking.','No worries!'],timestamp=['2024-03-30 18:45','2024-03-30 19:00','2024-03-30 19:15'];Request-3: User-A GET /api/messages with parameters contactID='User-C';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to access this contact.',errorDetails='The contactID is wrong or not authorized to access.''].|0
Context: A ratings and review application where each user can view and edit only their own reviews. Requests: [Request-1: User-A GET /api/reviews with parameters reviewID='Review-A'; Response-1: OK with parameters reviewID='Review-A', rating='4', comment='Good service'; Request-2: User-B GET /api/reviews with parameters reviewID='Review-A'; Response-2: OK with parameters reviewID='Review-B', rating='3', comment='Average service']|1
Context: A music streaming app with 2 types of users, Listeners and Producers. Listeners can stream music and view their listening history, while Producers can upload music and view feedback from listeners. Requests: [Request-1: Listener-A GET /playlist with parameter playlistID=12345; Response-1: Internal Server Error with message='cannot retrieve playlist. DB query: SELECT songName FROM playlists WHERE playlistID=12345;'];|2
Context: A music streaming website where each user can only listen and download their own playlists. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='Playlist-A';Response-1: OK with parameters playlistID='Playlist-A', title='My favorites',songs=['song1','song2','song3'];Request-2: User-B GET /api/playlists with parameters playlistID='Playlist-B';Response-2: OK with parameters playlistID='Playlist-B', title='Best of 2023',songs=['song4','song5','song6'];Request-3: User-A GET /api/playlists with parameters playlistID='Playlist-B';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to access this playlist.',errorDetails='The playlistID is wrong or not authorized to access.''].|0
Context: A project management tool where each team member can view and edit only their own tasks. Requests: [Request-1: Team member-A GET /api/tasks with parameters taskID='Task-A'; Response-1: OK with parameters taskID='Task-A', title='Document requirements', status='In progress'; Request-2: Team member-B GET /api/tasks with parameters taskID='Task-A'; Response-2: OK with parameters taskID='Task-A', title='Document requirements', status='In progress']|1
Context: A ticketing app with 2 types of users, Customers and Ticket Sellers. Customers can buy event tickets and view their purchase history, while Ticket sellers can list new events and view the purchase history of their events. Requests: [Request-1: Customer-A GET /tickets with parameter ticketID='xyz123'; Response-1: Error with message='invalid ticketID. Query: SELECT * FROM tickets WHERE ticketID='xyz123';'];|2
Context: A news website where each user can only view and comment on their own articles. Requests: [Request-1: User-A GET /api/articles with parameters articleID='Article-A';Response-1: OK with parameters articleID='Article-A', title='COVID19 vaccine news',content='A new vaccine has been found!', author='User-A';Request-2: User-B GET /api/articles with parameters articleID='Article-B';Response-2: OK with parameters articleID='Article-B', title='Mars mission news',content='NASA launches new spacecraft', author='User-B';Request-3: User-A GET /api/articles with parameters articleID='Article-B';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to access this article.',errorDetails='The articleID is wrong or not authorized to access.''].|0
Context: A banking app where each customer can view and edit only their own transactions. Requests: [Request-1: Customer-A GET /api/transactions with parameters accountNo='Customer-A'; Response-1: OK with parameters accountNo='Customer-A', amount='1000', description='salary'; Request-2: Customer-A GET /api/transactions with parameters accountNo='Customer-B'; Response-2: OK with parameters accountNo='Customer-B', amount='250', description='refund']|1
Context: A gaming app with 3 types of users, Players, Game Developers, and Admins. Players can play games, Game Developers can create games for players, and admins can monitor all activities. Requests: [Request-1: Player-A GET /games with parameter gameName='the-next-big-game'; Response-1: Error with message='cannot find 'the-next-big-game'. Query: SELECT * FROM games WHERE gameName='the-next-big-game';'];|2
Context: A car-sharing app where users can rent and reserve cars. Each user can only make reservations for their own account. Requests: [Request-1: User-A POST /api/rentals with parameters carID='car1',startDate='2022-06-01',endDate='2022-06-07';Response-1: OK with parameters reservationID='Reservation-1',carID='car1',startDate='2022-06-01',endDate='2022-06-07',userID='User-A';Request-2: User-B POST /api/rentals with parameters carID='car2',startDate='2022-06-01',endDate='2022-06-07';Response-2: OK with parameters reservationID='Reservation-2',carID='car2',startDate='2022-06-01',endDate='2022-06-07',userID='User-B';Request-3: User-C GET /api/rentals with parameters reservationID='Reservation-1';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='You can only view your own reservations.']|0
Context: A social media app where users can only view and edit their own profile information. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A'; Response-1: OK with parameters userID='User-A', name='John Doe', email='johndoe@gmail.com'; Request-2: User-B GET /api/profile with parameters userID='User-A'; Response-2: OK with parameters userID='User-A', name='John Doe', email='johndoe@gmail.com']|1
Context: A finance app with 2 types of users, Customers and Teller. Customers can view their balance, and Teller can view all balances and modify them. Requests: [Request-1: Customer-A GET /account/balance with parameter accountNumber=123456; Response-1: Internal Server Error with message='cannot retrieve balance. DB query: SELECT balance FROM accounts WHERE accountNumber='123456';'];|2
Context: A file sharing app where users can create and join folders. Each user can only add and remove files from their own folders. Requests: [Request-1: User-A POST /api/folders with parameters title='Folder-1',files=['File-1','File-2'];Response-1: OK with parameters folderID='Folder-1',files=['File-1','File-2'];Request-2: User-A PUT /api/folders with parameters folderID='Folder-1',add='File-3';Response-2: OK with parameters folderID='Folder-1',files=['File-1','File-2','File-3'];Request-3: User-B PUT /api/folders with parameters folderID='Folder-1',add='File-4';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='You can only modify your own folders.']|0
Context: A project management app where team members can view and update tasks only for the projects they are assigned to. Requests: [Request-1: Developer-A GET /api/tasks with parameters projectID='Proj-A'; Response-1: OK with parameters taskID='Task-A',description='Fixing bugs',priority='Urgent'; Request-2: Developer-B GET /api/tasks with parameters projectID='Proj-B'; Response-2: OK with parameters taskID='Task-B',description='Adding features',priority='High'; Request-3: Developer-A PUT /api/tasks with parameters taskID='Task-B',description='Adding features', priority='Low'; Response-3: OK with parameters message='Task updated successfully']|1
Context: A chat app with 2 types of users, Users and Admins. Users can chat with each other. Chats are not encrypted end-to-end. Requests: [Request-1: User-1 GET /chatrooms/room1/user2 with parameter limit=10; Response-1: Error with message='cannot fetch messages. Query: SELECT * FROM room1 WHERE userId='user2' LIMIT 10.'];|2
Context: A news app where users can create and share articles. Each user can only edit or delete their own articles. Requests: [Request-1: User-A POST /api/articles with parameters title='New article',content='This is my new article.';Response-1: OK with parameters articleID='1',title='New article';Request-2: User-A PUT /api/articles with parameters articleID='1',newTitle='Updated article',newContent='Updated content';Response-2: OK with parameters articleID='1',title='Updated article',content='Updated content';Request-3: User-B DELETE /api/articles with parameters articleID='1';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='You can only delete your own articles.']|0
Context: A social media app where users can only access and modify their own profile information. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters userID='User-A',name='John Doe',city='New York';Request-2: User-B GET /api/profile with parameters userID='User-A';Response-2: OK with parameters userID='User-B',name='Jane Doe',city='San Francisco';Request-3: User-A PUT /api/profile with parameters city='Boston';Response-3: OK with parameters userID='User-A',name='John Doe',city='Boston']|1
Context: A financial app with 2 types of users Customer and Admin. Customers can access their bank account details, balance and transaction history. Admins can view all bank accounts. Requests: [Request-1: Customer-A GET /bank/transactions/history with parameters fromDate='2021-01-01';Response-1: Internal Server Error with parameters message='The server responded with a 500 error due to an invalid API call -- {method: GET /history, status: 500, detail: Internal Error: Please check logs}';]|2
Context: A music app where users can create and share playlists. Each user can only modify their own playlists. Requests: [Request-1: User-A POST /api/playlists with parameters title='Workout music';Response-1: OK with parameters playlistID='Workout music',tracks=['Track-1','Track-2'];Request-2: User-A PUT /api/playlists with parameters playlistID='Workout music',add='Track-3';Response-2: OK with parameters playlistID='Workout music',tracks=['Track-1','Track-2','Track-3'];Request-3: User-B PUT /api/playlists with parameters playlistID='Workout music',add='Track-4';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='You can only modify your own playlists.']|0
Context: A music streaming app where each user can only see and modify their own playlist information. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='Playlist-A';Response-1: OK with parameters playlistID='Playlist-A',title='My favorites',songs=[{'Song-1','3:45'},{'Song-2','4:32'}]];Request-2: User-A POST /api/playlists with parameters title='My workout',songs=[{'Song-3','1:52'},{'Song-4','3:21'},{'Song-5','4:09'}];Response-2: OK with parameters playlistID='Playlist-B',title='My workout',songs=[{'Song-3','1:52'},{'Song-4','3:21'},{'Song-5','4:09'}]];Request-3: User-A GET /api/playlists with parameters playlistID='Playlist-B';Response-3: OK with parameters playlistID='Playlist-B',title='My workout',songs=[{'Song-3','1:52'},{'Song-4','3:21'},{'Song-5','4:09'}]]|1
Context: A travel booking app leaks personal information of customers in error response message Requests: [Request-1: User-A PUT /profile with parameters userID='123', email='johnsmith@gmail.com', city='New York', state='NY'; Response-1: Bad Request with parameters error='Cannot process address change for John Smith. SSN: 123-45-6789, DOB: 01/01/1985']|2
Context: A forum app where users can create and post comments. Each user can edit and delete their own comments. Requests: [Request-1: User-A POST /api/posts with parameters title='New post',content='This is my new post.';Response-1: OK with parameters postID='1',title='New post';Request-2: User-A PUT /api/comments with parameters postID='1',commentID='1',content='Updated comment';Response-2: OK with parameters postID='1', updatedComments={'1': 'Updated comment'};Request-3: User-B PUT /api/comments with parameters postID='1',commentID='1',content='New comment';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='You can only modify your own comments.']|0
Context: A social media app where users can only access and edit their own profile. Requests: [Request-1: User-A GET /profile with parameters userID='User-A';Response-1: OK with parameters username='User-A', bio='I love travelling';Request-2: User-B GET /profile with parameters userID='User-B';Response-2: OK with parameters username='User-B', bio='I am a foodie';Request-3: User-A GET /profile with parameters userID='User-B';Response-3: OK with parameters username='User-B', bio='I am a foodie']|1
Context: An online banking app fails to sanitize its error response, leaking account balance information to unauthorized users Requests: [Request-1: User-A POST /login with parameters username='johndoe', password='password123'; Response-1: Forbidden with parameters message='Your account balance is $5000']|2
Context: A survey app where managers can create and send surveys to their employees. Each manager can only view the survey responses of their own employees. Requests: [Request-1: Manager-A POST /api/surveys with parameters title='Company Culture';Response-1: OK with parameters surveyID='Company Culture',questions=['Q1','Q2','Q3'];Request-2: Employee-A POST /api/survey/submit with parameters surveyID='Company Culture',answers=['Answer-1','Answer-2','Answer-3'];Response-2: OK with parameters surveyID='Company Culture',message='Survey submitted successfully.';Request-3: Manager-A GET /api/survey/results with parameters surveyID='Company Culture';Response-3: OK with parameters surveyID='Company Culture',responses={'Employee-A': ['Answer-1','Answer-2','Answer-3']};Request-4: Manager-B GET /api/survey/results with parameters surveyID='Company Culture';Response-4: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='You cannot view survey results of another manager.']|0
Context: A fleet management system where drivers can only manage their own trips. Requests: [Request-1: Driver-A GET /api/trips with parameters tripId='Trip-A';Response-1: OK with parameters tripId='Trip-A',driverId='Driver-A',date='2023-01-01',route='ABC',status='Completed';Request-2: Driver-B GET /api/trips with parameters tripId='Trip-C';Response-2: OK with parameters tripId='Trip-C',driverId='Driver-B',date='2023-02-01',route='XYZ',status='Scheduled';Request-3: Driver-A POST /api/trips with parameters date='2023-02-05',route='DEF';Response-3: OK with parameters tripId='Trip-D',driverId='Driver-A',date='2023-02-05',route='DEF',status='Scheduled';Request-4: Admin GET /api/trips with parameters tripId='Trip-C';Response-4: OK with parameters tripId='Trip-C',driverId='Driver-B',date='2023-02-01',route='XYZ',status='Scheduled']|1
Context: A social media platform with 2 types of users - normal users and administrators. Regular users can upload images, view others' images and edit their account settings. Administrators can perform all the functions of a normal user as well as ban users and access user data. Requests: [Request-1: Normal User - A GET /images/india.jpeg; Response-1: Error with parameters message='You do not have permission to access india.jpeg'; Request-2: Normal User - B PATCH /settings; Response-2: OK with parameters message='Settings updated successfully'; Request-3: Administrator PUT /ban with parameters userId='user-C'; Response-3: OK with parameters message='User banned successfully']; |2
Context: A fitness app where users can create and join workout groups. Users can view each other's profiles, but cannot modify them. Requests: [Request-1: User-A POST /api/groups with parameters title='Gym workout';Response-1: OK with parameters groupID='Gym-workout',users=['User-A'];Request-2: User-B PUT /api/groups with parameters groupID='Gym-workout',add='User-C';Response-2: OK with parameters groupID='Gym-workout',users=['User-A','User-B','User-C'];Request-3: User-B PUT /api/profile with parameters name='User-C';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='You cannot modify another user profile.']|0
Context: An HR system where employees can only edit and manage their own information. Requests: [Request-1: Employee-A GET /api/employee with parameters empId='Emp-A';Response-1: OK with parameters empId='Emp-A', name='Employee-A',designation='Developer',status='Active';Request-2: Employee-B GET /api/employee with parameters empId='Emp-C';Response-2: OK with parameters empId='Emp-C', name='Employee-C',designation='Tester',status='Inactive';Request-3: Employee-A PUT /api/employee with parameters designation='Sr. Developer';Response-3: OK with parameters empId='Emp-A',name='Employee-A',designation='Sr. Developer',status='Active';Request-4: Employee-B PUT /api/employee with parameters designation='Manager';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The Employee ID is unauthorized to modify.'] |1
Context: A website providing online dating services with 2 types of users users and admin, where users can create profiles and communicate with each other. Requests: [Request-1: User-A POST /api/profile/create with parameters name='Micheal', gender='Male', age='50', profession='Actor', email='micheal@gmail.com'; Response-1: OK with parameters message='account created'; Request-2: User-A POST /api/profile/message with parameters message='Hi there!'; Response-2: Error with parameters message='Error. Failed to send message to Jane Doe(email:janeDoe@gmail.com)'; Request-3: User-A POST /api/profile/message with parameters message='How are you?'; Response-3: Error with parameters message='Error. Failed to send message to Clara Jane(email:claraJane@gmail.com)' ] |2
Context: A messaging app where users can create chat groups. Each user can only add/remove users from the chats they created themselves. Requests: [Request-1: User-A POST /api/chat with parameters title='Group 1';Response-1: OK with parameters chatID='Group-1',users=['User-A'];Request-2: User-A PUT /api/chat with parameters chatID='Group-1',add='User-B';Response-2: OK with parameters chatID='Group-1',users=['User-A','User-B'];Request-3: User-A PUT /api/chat with parameters chatID='Group-2',add='User-B';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='You are not the group creator.']|0
Context: A bug reporting system where developers can only view and manage their own reported issues. Requests: [Request-1: Developer-A GET /api/issues with parameters issueId='Issue-A';Response-1: OK with parameters issueId='Issue-A', name='Issue A',status='Open';Request-2: Developer-B GET /api/issues with parameters issueId='Issue-C';Response-2: OK with parameters issueId='Issue-C', name='Issue C',status='Closed';Request-3: Developer-A PUT /api/issues with parameters issueId='Issue-C', name='Issue C',status='Open';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The issue id is unauthorized to modify.'] |1
Context: A secure messaging app for financial companies, where senders can securely send sensitive data to verified receivers. Requests: [Request-1: Sender-A POST /secure-message with parameters receiver='receiver-email-123',message='sensitive client account information';Response-1: Unauthorized with parameters msg='Receiver not verified, please ask them to create an account on the system']|2
Context: An appointment system where users can only view and modify their own appointments. Requests: [Request-1: User-A GET /api/appointments with parameters appointmentID='Appt-001'; Response-1: OK with parameters appointmentID='Appt-001', date='2023-05-09', time='10:00AM', location='Central Perk', doctor='Dr. Green'; Request-2: User-B GET /api/appointments with parameters appointmentID='Appt-001'; Response-2: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.',errorDetails='The appointment id is wrong or not authorized'; Request-3: User-A DELETE /api/appointments with parameters appointmentID='Appt-001'; Response-3: OK with parameters message='Appointment cancelled successfully'; Request-4: User-B DELETE /api/appointments with parameters appointmentID='Appt-002'; Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The appointment id is wrong or not authorized'; Request-5: Admin DELETE /api/appointments with parameters appointmentID='Appt-001'; Response-5: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.',errorDetails='You do not have the required permission.']|0
Context: A ticket management system where agents can only see their own tickets and conversations. Requests: [Request-1: Agent-A GET /api/tickets with parameters ticketId='Ticket-A';Response-1: OK with parameters ticketId='Ticket-A',subject='Ticket A',dueDate='2022-12-13';Request-2: Agent-B GET /api/tickets with parameters ticketId='Ticket-C';Response-2: OK with parameters ticketId='Ticket-C',subject='Ticket C',dueDate='2022-11-16';Request-3: Agent-A GET /api/ticketConversations with parameters conversationId='CV-A';Response-3: OK with parameters conversationId='CV-A',messages=['Hello', 'What is your issue'],sender='Agent-A',recipient='User-A';Request-4: Agent-A GET /api/ticketConversations with parameters conversationId='CV-C';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to access this conversation',errorDetails='The conversation id is not authorized to view.'] |1
Context: A banking application in which authenticated users can see their account information and transaction history. Requests: [Request-1: User-A GET /accounts with parameters accountId='123456', sort='DESC';Response-1: Forbidden with parameters details=""""Account 123456 does not belong to User-A""""]"""|2
Context: An online tutoring service where each student can only view and modify their own study materials. Requests: [Request-1: Student-A GET /api/study with parameters topic='Math'; Response-1: OK with parameters subject='Math', materials=['Introduction to Algebra', 'Subtraction of Integers'], author='Teacher-A'; Request-2: Student-B GET /api/study with parameters topic='Math'; Response-2: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.',errorDetails='The topic is wrong or not authorized'; Request-3: Student-A PUT /api/study with parameters topic='Math', add='Multiplication of Fractions'; Response-3: OK with parameters subject='Math', materials=['Introduction to Algebra', 'Subtraction of Integers', 'Multiplication of Fractions'], author='Teacher-A'; Request-4: Student-B PUT /api/study with parameters topic='English', add='Vocabulary'; Response-4: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.',errorDetails='The topic is wrong or not authorized'] |0
Context: A CRM system where salespeople can only see their own leads and deals. Requests: [Request-1: Salesperson-A GET /api/leads with parameters leadId ='Lead-A';Response-1: OK with parameters leadId ='Lead-A', name='Lead_A',dealValue='$5000',closingDate='2024-07-15';Request-2: Salesperson-B GET /api/leads with parameters leadId='Lead-C';Response-2: OK with parameters leadId ='Lead-C',name='Lead_C',dealValue='$10000',closingDate='2024-06-01';Request-3: Salesperson-A POST /api/deals with parameters name='Deal-A',value='2500';Response-3: OK with parameters name='Deal-A',value='2500',closingDate='2024-06-01',confirmed='false'];Request-4: Salesperson-B POST /api/deals with parameters name='Deal-B',value='8000';Response-4: OK with parameters name='Deal-B',value='8000',closingDate='2024-06-05',confirmed='false'];Request-5: SalesManager GET /api/leads with parameters leadId ='Lead-C';Response-5: OK with parameters leadId ='Lead-C',name='Lead_C',dealValue='$10000',closingDate='2024-06-01'] |1
Context: A social media app with 2 types of users: User and Moderator, where users can send private messages to each other. Moderators can delete messages. Requests: [Request-1: User-A POST /messages/send with parameters to='User-B', message='Hi there!'; Response-1: Internal Server Error with parameters message='Cannot send message to User-C, User-C does not exist.']|2
Context: A survey system where participants can only view and modify their own responses. Requests: [Request-1: Participant-A GET /api/survey/responses with parameters responseID='001'; Response-1: OK with parameters responseID='001', question1='5', question2='7', question3='10'; Request-2: Participant-B GET /api/survey/responses with parameters responseID='001'; Response-2: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.',errorDetails='The response id is wrong or not authorized'; Request-3: Participant-A PUT /api/survey/responses with parameters responseID='001', question1='4'; Response-3: OK with parameters responseID='001', question1='4', question2='7', question3='10'; Request-4: Participant-B PUT /api/survey/responses with parameters responseID='002', question1='5'; Response-4: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.',errorDetails='The response id is wrong or not authorized']|0
Context: A messaging app where each user can only access and modify their own chats. Other users cannot view or modify it. Requests: [Request-1: User-A GET /api/chats with parameters chatID='Chat-A';Response-1: OK with parameters chatID='Chat-A', members=['User-A','User-B','User-C'], messages=[{'Sender': 'User-A', 'Content': 'Hi', 'Timestamp': '2023-05-15 10:30 AM'}, {'Sender': 'User-B', 'Content': 'Hello', 'Timestamp': '2023-05-15 10:32 AM'}];Request-2: User-A POST /api/chats with parameters members=['User-B'];Response-2: OK with parameters chatID='Chat-B', members=['User-A','User-B'], messages=[];] |1
Context: A banking platform with 3 types of users: Customers, Tellers and Administrators. Customers can only view and modify their own information. Tellers can view and modify customer information. Administrators can view and edit any data. Requests: [Request-1: Customer-A PUT /update_password with parameters old_password='abc123', new_password='xyZ$%^@1'; Response-1: OK with parameters message='Your password has been successfully updated.'; Request-2: Teller-A GET /view_account_history with parameters user_id=12489; Response-2: Request Denied with parameters message='Your user credentials have been revoked at this time. We have detected an unauthorized attempt at accessing account information. We advise you to change your password as soon as possible. Technical Details: the password hash algorithm currently in use is bcrypt with default parameters.'];|2
Context: A banking app where users can view and modify their own accounts. Requests: [Request-1: User-A GET /api/bank/accounts with parameters accountNumber=123456; Response-1: OK with parameters accountNumber=123456, balance=5000; Request-2: User-B GET /api/bank/accounts with parameters accountNumber=123456; Response-2: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.',errorDetails='The account number is wrong or not authorized'; Request-3: User-A PUT /api/bank/accounts with parameters accountNumber=123456, amount=1000; Response-3: OK with parameters accountNumber=123456, balance=6000; Request-4: User-B PUT /api/bank/accounts with parameters accountNumber=123457, amount=1000; Response-4: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.',errorDetails='The account number is wrong or not authorized'] |0
Context: A social media platform where each user can only access and modify their own profile. Other users cannot view or modify it. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters name='John Doe', email='johndoe@example.com', bio='Software Engineer', avatar='/path/to/avatar';Request-2: User-B PUT /api/profile with parameters name='Jane Doe';Response-2: OK with parameters message='Profile updated successfully'] |1
Context: A content management system with 3 types of users: Content creators, Editors and Administrators. Content creators can only add new content. Editors can view all content and edit their own content. Administrators can view and modify any data. Requests: [Request-1: Content Creator-A POST /create_content with parameters title='Winter 2022 Product Catalogue', content='Please see attached file.'; Response-1: Server Error with parameters message='Unable to process your request at this time. Server credentials: User: admin, Password: mySecureP@ssword1.']; |2
Context: A social media app where users can only view, post and comment on their own photos. Requests: [Request-1: User-A POST /api/photos with parameters caption='Beautiful view'; Response-1: OK with parameters photoID='Photo-A', caption='Beautiful view', author='User-A'; Request-2: User-B GET /api/photos with parameters photoID='Photo-A'; Response-2: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.',errorDetails='The photo id is wrong or not authorized'; Request-3: User-A PUT /api/photos with parameters caption='The best view'; Response-3: OK with parameters photoID='Photo-A', caption='The best view', author='User-A'; Request-4: User-B PUT /api/photos with parameters caption='Awesome view'; Response-4: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.',errorDetails='The photo id is wrong or not authorized']|0
Context: An email app where users can only access and modify their own email data. Requests: [Request-1: User-A GET /api/emails with parameters emailID='User-A/1245';Response-1: OK with parameters emailID='User-A/1245', subject='Hello',receiver='User-B',content='How are you?';Request-2: User-C GET /api/emails with parameters emailID='User-A/1245';Response-2: OK with parameters emailID='User-A/1245', subject='Hello',receiver='User-B',content='How are you?';Request-3: User-A PUT /api/emails with parameters emailID='User-C/67';Response-3: OK with parameters emailID='User-C/67', subject='Test',receiver='User-D',content='This is a test']|1
Context: A retail platform with 2 types of users: Customers and Sellers. Customers can only view and modify their own purchases. Sellers can only view and edit their own product listings. Requests: [Request-1: Customer-A PUT /purchase_details with parameters purchase_id=221, new_delivery_address='10 Sirene Rd.'; Response-1: Request Failed with parameters message='Cannot process your request. The email associated with your account is: lillian_perez@gmail.com. If you believe this is in error, please contact our support team at support@email.com'; Request-2: Seller-A GET /view_product with parameters product_id=7529; Response-2: Error with parameters message='Unauthorized Access Attempt. Your record shows email account: mike_anderson@gmail.com is not authorized to view product_id: 7529.']; |2
Context: A discussion forum where users can only view, post and comment on their own posts. Requests: [Request-1: User-A POST /api/posts with parameters content='Wow this is cool!'; Response-1: OK with parameters postID='Post-A', content='Wow this is cool', commentCount=0, author='User-A'; Request-2: User-B GET /api/posts with parameters postID='Post-A'; Response-2: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.',errorDetails='The post id is wrong or not authorized'; Request-3: User-A DELETE /api/posts with parameters postID='Post-B'; Response-3: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.',errorDetails='The post id is wrong or not authorized']|0
Context: A web application for managing student grades where each student can only view their own grades. Requests: [Request-1: Student-A GET /grades with parameters studentID='Student-A';Response-1: OK with parameters studentID='Student-A', grades=[{'Course': 'Maths', 'Grade': 'A'}, {'Course': 'Science', 'Grade': 'B'}, {'Course': 'English', 'Grade': 'A-'}];Request-2: Student-B GET /grades with parameters studentID='Student-B';Response-2: OK with parameters studentID='Student-B', grades=[{'Course': 'Maths', 'Grade': 'B+'}, {'Course': 'Science', 'Grade': 'B-'}, {'Course': 'English', 'Grade': 'B'}];Request-3: Student-A POST /grades with parameters studentID='Student-A', grades=[{'Course': 'Science', 'Grade': 'A+'}];Response-3: OK with parameters message='Grades added successfully']|1
Context: A social media platform with 2 types of users: Regular users and Moderators. Users can only view their own posts. Moderators can view and edit all posts. Requests: [Request-1: Regular User-A PUT /update_password with parameters old_password='abc123', new_password='xyZ$%^@1'; Response-1: OK with parameters message='Your password has been successfully updated.'; Request-2: Regular User-B PUT /forgot_password with parameters email='abigail4@gmail.com'; Response-2: OK with parameters message='A password reset link has been sent to your email. Please follow the instructions to reset your password.'; Request-3: Regular User-C GET /forgot_password with parameters email='carina15@yahoo.com'; Response-3: Error with parameters message='The email provided is not valid. We do not have any records of this email in our database.'; Request-4: Moderator-A PUT /edit_post with parameters post_id=300, new_content='Hello, how are you?'; Response-4: OK with parameters message='Your post has been updated successfully.'; Request-5: Moderator-B GET /view_all_posts with parameters start_date='01/01/2020', end_date='03/04/2022'; Response-5: Error with parameters message='Unable to process your request. Please confirm your account permissions and the authorization parameters you have entered.' ];|2
Context: A car-booking app where users can see only their own bookings. Requests: [Request-1: User-A GET /api/bookings with parameters bookingID='Booking-A';Response-1: OK with parameters bookingID='Booking-A',startTime='14-07-2023 14:00:00', endTime='15-07-2023 12:00:00';Request-2: User-B GET /api/bookings with parameters bookingID='Booking-B';Response-2: OK with parameters bookingID='Booking-B', startTime='16-07-2023 15:00:00', endTime='18-07-2023 10:00:00']|0
Context: Online messaging app where users can view any conversation. Requests: [Request-1: User-A GET /api/messages with parameters conversationID='User-B-Conversation'; Response-1: OK with parameters conversationID='User-B-Conversation', messages=['Hey there!', 'Not bad, thanks for asking.']; Request-2: User-B GET /api/messages with parameters conversationID='User-A-Conversation'; Response-2: OK with parameters conversationID='User-A-Conversation', messages=['Hi, how are you?', 'I'm fine, how about you?']; Request-3: User-C GET /api/messages with parameters conversationID='User-D-Conversation'; Response-3: OK with parameters conversationID='User-D-Conversation', messages=['Hello', 'How can I help you?']]|1
Context: A travel platform where customers can book their trips. There are 3 types of users: Customers, Travel Agents and Administrators. Customers can only view and modify their own trip info. Travel Agents can view and modify trip info for their clients. Administrators can view and modify all trip info. Requests: [Request-1: Travel Agent-A PUT /modify_trip with parameters user_id=3838, new_date='03/10/22'; Response-1: 401 Unauthorized with parameters message='You are unauthorized to view or modify this trip details. Please check that you are logged in as the correct user for user_id=3838   Name: John Doe   Email: johndoe@email.com   Phone: xxx-xxx-xxxx'; Request-2: Administrator-B GET /view_all_trips with parameters start_date='01/01/2021', end_date='03/10/2022'; Response-2: Authorization Error with parameters message='You are unauthorized to view or modify trips outside of your instance. Please confirm the authorization parameters you wish to modify or contact your designated system administrator for further support.']; |2
Context: A hotel booking app where users can see only their own bookings. Requests: [Request-1: User-A GET /api/bookings with parameters bookingID='Booking-A';Response-1: OK with parameters bookingID='Booking-A',arrival='14-07-2023 14:00:00',departure='15-07-2023 12:00:00';Request-2: User-B GET /api/bookings with parameters bookingID='Booking-B';Response-2: OK with parameters bookingID='Booking-B',arrival='16-07-2023 15:00:00',departure='18-07-2023 10:00:00'] |0
Context: A weather app allows users to view the current weather and forecast for their location. Each user can only view the weather and forecast for their own location. Requests: [Request-1: User-A GET /api/weather with parameters location='New York'; Response-1: OK with parameters weather='Sunny', temperature='75F', forecast=['Monday: Sunny, High: 80F, Low: 65F', 'Tuesday: Partly cloudy, High: 78F, Low: 68F']; Request-2: User-B GET /api/weather with parameters location='Los Angeles'; Response-2: OK with parameters weather='Sunny', temperature='85F', forecast=['Monday: Sunny, High: 85F, Low: 70F', 'Tuesday: Sunny, High: 87F, Low: 72F']; Request-3: User-A GET /api/weather with parameters location='Los Angeles'; Response-3: OK with parameters weather='Sunny', temperature='85F', forecast=['Monday: Sunny, High: 85F, Low: 70F', 'Tuesday: Sunny, High: 87F, Low: 72F']|1
Context: A financial institution management system with 3 types of users: Customers, Employees and Administrators. Employees can only access and modify their own data; Administrators can access and alter any data. Requests: [Request-1: Administrator-A PUT /admin/review_customer with parameters cust_id=4352; Response-1: Server Error with parameters message='Error in query: SELECT * FROM customers WHERE id=4352; Error: invalid SQL syntax. Please check your query and try again'; Request-2: Administrator-B PUT /admin/review_employee with parameters emp_id=5432; Response-2: Server Error with parameters message='You have entered an unauthorized command. Please check that you have permission to execute this command before trying again.'; Request-3: Employee-A GET /employee/view_data with parameters emp_id=232; Response-3: Request Error with parameters message='SQL query failed please check command syntax: SELECT * FROM employees WHERE name=john_doe and password=tX2Rpqs&. Employee data cannot be viewed at this time.'];|2
Context: A health app where users can see only their own health data. Requests: [Request-1: User-A GET /api/health with parameters healthID='Health-A';Response-1: OK with parameters healthID='Health-A',value=75;Request-2: User-B GET /api/health with parameters healthID='Health-B';Response-2: OK with parameters healthID='Health-B', value=120;Request-3: User-A PUT /api/health with parameters value=85;Response-3: OK with parameters healthID='Health-A',value=85'] |0
Context: An online bookstore allows customers to view and purchase books. Each customer can only view and purchase books from their own account. Requests: [Request-1: Customer-A GET /api/books with parameters category='Fiction'; Response-1: OK with parameters books=['The Da Vinci Code', 'The Girl on the Train', '1984']; Request-2: Customer-B GET /api/books with parameters category='Biography'; Response-2: OK with parameters books=['Steve Jobs', 'The Autobiography of Malcolm X', 'Becoming']; Request-3: Customer-A GET /api/books with parameters category='Biography; Response-3: OK with parameters books=['Steve Jobs', 'The Autobiography of Malcolm X', 'Becoming']|1
Context: An online shopping platform with 2 types of users -- Customers and Merchants. Each user can only access and edit their own profile data. Requests: [Request-1: Customer-A POST /login with parameters email='janeDoe@gmail.com', password='abc123'; Response-1: Incorrect Credentials with parameters message='incorrect password entered for account with email: janeDoe@gmail.com. Please check your login credentials and try again. If you continue having trouble accessing your account, please contact our support team at support@onlineshop.com.']; Request-2: Merchant-B POST /login with parameters email='julianSmith@gmail.com', password='Gh$$d&%'; Response-2: Incorrect Credentials with parameters message='the email provided does not exist in our system or has already been taken. Please enter a valid email address and try again'];|2
Context: An online reservation system for restaurants where users can see only their own past/future reservations. Requests: [Request-1: User-A GET /api/reservations with parameters reservationID='Reservation-A';Response-1: OK with parameters reservationID='Reservation-A',restaurant='Restaurant-A',time='14-07-2023 18:00:00';Request-2: User-B GET /api/reservations with parameters reservationID='Reservation-B';Response-2: OK with parameters reservationID='Reservation-B', restaurant='Restaurant-B',time='14-07-2023 20:00:00']|0
Context: A mobile app allows students to view their academic performance and schedule. Each student can view only their own data. Requests: [Request-1: Student-A GET /api/grades with parameters studentID='Student-A'; Response-1: OK with parameters studentID='Student-A', average='B', grades=['Math: C+', 'Science: A-', 'History: A']; Request-2: Student-B GET /api/grades with parameters studentID='Student-B'; Response-2: OK with parameters studentID='Student-B', average='A-',  grades=['Math: A', 'Science: A+', 'History: A-']; Request-3: Student-B GET /api/grades with parameters studentID='Student-A'; Response-3: OK with parameters studentID='Student-A', average='B', grades=['Math: C+', 'Science: A-', 'History: A']]|1
Context: A music streaming app with 1 type of users Customer, where customers can stream their favorite songs and save them to playlists. Requests: [Request-1: Customer-A POST /song/playlist/[Playlist-A-id] with parameters song='Song-A';Response-1: Internal Server Error with parameters message='failed to append Song-A to Playlist-A-id: {time: 2022-02-07 14:47:31.873208, log: {type: error, request: POST /song/playlist/2674b940-ded6-4a06-972b-09007085ba8d, data: {'song': 'Song-A'}, error: 'ValueError}}']|2
Context: A movie-watching app where each user can see only their own watchlists and recently watched movies. Requests: [Request-1: User-A GET /api/watchlists;Response-1: OK with parameters movies=['Movie-A', 'Movie-B'];Request-2: User-B GET /api/watched with parameters movieID='Movie-C';Response-2: OK with parameters movieName='Movie-C',year=2019;Request-3: User-A POST /api/watchlists with parameters movieName='Movie-C';Response-3: OK with parameters movies=['Movie-A', 'Movie-B', 'Movie-C']]|0
Context: A healthcare app where doctors can only view and edit their own patient data. Requests: [Request-1: Doc-A GET /api/patients with parameters patientID='Pat-B';Response-1: OK with parameters patientID='Pat-B', name='Jane', age=24, gender='F', doctor='Doc-B';Request-2: Doc-C GET /api/patients with parameters patientID='Pat-C';Response-2: OK with parameters patientID='Pat-C', name='John', age=31, gender='M', doctor='Doc-C';]|1
Context: A social media app with 2 types of users User and Admin where users can only access their own profile information. Requests: [Request-1: User-A POST /settings/account/change_password with parameters new_pass='password123';old_pass='password321';Response-1: Forbidden with parameters message='Error 403 Bad Password. Old password wrong.']; Request-2: User-B POST /settings/account/change_password with parameters new_pass='789password';old_pass='123password';Response-2: Failure with parameters details='new password can\'t contain """"password"""".']; Request-3: Admin GET /settings/acount/find_password_token with parameters user_name='UserName1';Response-3: OK with parameters message='User exists, request_issued = True, token = [21:1c:10:20:4d:61:1e:53:7f:8d:e7]'"""|2
Context: A ticket-booking platform where users can book/show only their own tickets. Requests: [Request-1: User-A GET /api/tickets with parameters ticketID='Ticket-A';Response-1: OK with parameters ticketID='Ticket-A', departure='14-07-2023 12:00:00',arrival='14-07-2023 13:00:00';Request-2: User-B GET /api/tickets with parameters ticketID='Ticket-B';Response-2: OK with parameters ticketID='Ticket-B', departure='14-07-2023 15:00:00',arrival='14-07-2023 16:00:00']|0
Context: An e-learning platform where students can view their own courses. Students should only be able to view their own courses. Requests: [Request-1: Student-A GET /api/courses with parameters courseID='Student-A';Response-1: OK with parameters courseID='Student-A',name='Mathematics',teacher='Dr. Smith',grade='A';Request-2: Student-B GET /api/courses with parameters courseID='Student-B';Response-2: OK with parameters courseID='Student-B',name='History',teacher='Professor Johnson',grade='B';Request-3: Student-A GET /api/courses with parameters courseID='Student-B';Response-3: OK with parameters courseID='Student-B',name='History',teacher='Professor Johnson',grade='B']|1
Context: A messaging app with 2 type of users User and Admin where users can chat with each other. Chats are encrypted end-to-end. Requests: [Request-1: User-A GET /messages/Alice/messages with parameters order='asc',limit=10;Response-1: OK with parameters messages=[{from:'Bob',to:'Alice',message:'Hey Alice!'}, {from:'Alice',to:'Bob',message:'Hi Bob!'},...];Request-2: User-A GET /messages/Bob/messages with parameters order='asc',limit=10;Response-2: OK with parameters messages=[{from:'Bob',to:'Alice',message:'Hey Alice!'}, {from:'Alice',to:'Bob',message:'Hi Bob!'}, ...];Request-3: User-A GET /messages/Alice/messages with parameters order='asc',limit=10;Response-3: Bad Request with parameters error='message id FK1748 does not exist'|2
Context: A ride-hailing app where each driver can see only their ride requests. Requests: [Request-1: Driver-A GET /api/rides with parameters rideID='Ride-A';Response-1: OK with parameters rideID='Ride-A',start='30-05-2023 9:00:00',destination='Box Hill';Request-2: Driver-B GET /api/rides with parameters rideID='Ride-B';Response-2: OK with parameters rideID='Ride-B', start='30-05-2023 11:00:00',destination='CBD']|0
Context: A game app where users can view and manage their own scores. Users should only be able to view their own scores. Requests: [Request-1: User-A GET /api/scores with parameters gameID='User-A';Response-1: OK with parameters gameID='User-A',score=5320,date='2022-07-15';Request-2: User-B GET /api/scores with parameters gameID='User-B';Response-2: OK with parameters gameID='User-B',score=1200,date='2022-07-14';Request-3: User-A GET /api/scores with parameters gameID='User-B';Response-3: OK with parameters gameID='User-B',score=1200,date='2022-07-14']|1
Context: A website that connects people who are looking for a job with companies with vacancies. Requests: [Request-1: Candidate-A POST /jobs/apply with parameters jobID='Python developer';Response-1: OK with parameters message='You applications has been submitted!';Request-2: Candidate-A POST /jobs/apply with parameters jobID='Cybersecurity expert';Response-2: Unauthorized with parameters message='The position is reserved for US citizens only';]|2
Context: An online marketplace for advertisements where each seller can only see their own listings. Admins can view and delete all listings. Requests: [Request-1: Seller-A GET /api/listings with parameters listingID='Listing-A';Response-1: OK with parameters listingID='Listing-A',itemId='Item-A',price=50;Request-2: Seller-B GET /api/listings with parameters listingID='Listing-B';Response-2: OK with parameters listingID='Listing-B', itemId='Item-B', price=300;Request-3: Admin GET /api/listings with parameters listingID='Listing-A';Response-3: OK with parameters listingID='Listing-A',itemId='Item-A',price=50']|0
Context: A banking app where users can view and manage their own transactions. Users should only be able to view their own transactions. Requests: [Request-1: User-A GET /api/transactions with parameters transactionID='User-A';Response-1: OK with parameters transactionID='User-A',amount=25,date='2022-06-12',type='Withdrawal';Request-2: User-B GET /api/transactions with parameters transactionID='User-B';Response-2: OK with parameters transactionID='User-B',amount=150,date='2022-06-10',type='Deposit';Request-3: User-A GET /api/transactions with parameters transactionID='User-B';Response-3: OK with parameters transactionID='User-B',amount=150,date='2022-06-10',type='Deposit']|1
Context: A social media app with 2 types of users Basic and Premium. Basic users can view and edit their own data. Premium users can additionally view and edit other users’ data. Requests: [Request-1: Premium-A GET /api/users with parameters userID='User-A';Response-1: OK with parameters userID='User-A',name='Samir Aboud',age=32,gender=M;Request-2: Basic-A GET /api/users with parameters userID='User-B';Response-2: Forbidden with parameters message='You do not have permission to view user ID=User-B';]|2
Context: An event management app where users can only view and manage their own events. Requests: [Request-1: User-A GET /api/events with parameters eventID='User-A/123';Response-1: OK with parameters eventID='User-A/123',name='Birthday Party',location='My House',date='2024-06-01';Request-2: User-B GET /api/events with parameters eventID='User-A/123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to access this event.',errorDetails='You are not the owner of this event.']|0
Context: A healthcare app where patients can view and manage their medical records. Patients should only be able to view their own records. Requests: [Request-1: Patient-A GET /api/medicalRecords with parameters recordID='Patient-A';Response-1: OK with parameters recordID='Patient-A',diagnosis='Flu',medications=['Tamiflu','Advil'],doctor='Dr. Johnson';Request-2: Patient-B GET /api/medicalRecords with parameters recordID='Patient-B';Response-2: OK with parameters recordID='Patient-B',diagnosis='COVID-19',medications=['Remdesivir','Ibuprofen'],doctor='Dr. Smith';Request-3: Patient-A GET /api/medicalRecords with parameters recordID='Patient-B';Response-3: OK with parameters recordID='Patient-B',diagnosis='COVID-19',medications=['Remdesivir','Ibuprofen'],doctor='Dr. Smith']|1
Context: A cloud-based file sharing app with 2 types of users User and Admin. Each user can only view and download their own files. Admins cannot view user files. Requests: [Request-1: User-A GET /api/files with parameters fileID='secret_file.txt';Response-1: Bad Request with parameters error='Sorry! File secret_file.txt cannot be found!']|2
Context: A finance app where users can only view and manage their own transactions. Requests: [Request-1: User-A GET /api/transactions with parameters transactionID='User-A/123';Response-1: OK with parameters transactionID='User-A/123',type='Debit',amount='$100',date='2024-06-01';Request-2: User-B GET /api/transactions with parameters transactionID='User-A/123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to access this transaction.',errorDetails='You are not the owner of this transaction.']|0
Context: A social media platform where users can share their posts with their followers. Authenticated users should only be able to view and interact with their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='User-A';Response-1: OK with parameters postID='User-A',content='Hello world',likesCount=4,commentsCount=2;Request-2: User-B GET /api/posts with parameters postID='User-B';Response-2: OK with parameters postID='User-B',content='I am excited for vacation',likesCount=23,commentsCount=8;Request-3: User-A GET /api/posts with parameters postID='User-B';Response-3: OK with parameters postID='User-B',content='I am excited for vacation',likesCount=23,commentsCount=8]|1
Context: Banking app with 3 types of users Customer, Manager and Admin. Customers can view their balances and pay bills online. Managers can manage transactions made to their accounts. Admins can manage all user data. Requests: [Request-1: Customer-A GET /api/bank/account-check with parameters accountNumber='1234567890';Response-1: Forbidden with parameters error='the account 1234567890 does not exist']|2
Context: A music streaming website where users can only browse and play the songs they have added to their personal playlists. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='User-A/123';Response-1: OK with parameters playlistID='User-A/123',songs=['Shape of You', 'Billie Jean', 'Bohemian Rhapsody'];Request-2: User-B GET /api/playlists with parameters playlistID='User-A/123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to access this playlist.',errorDetails='You are not the owner of this playlist.']|0
Context: A messaging app where users can send messages to each other. Each user can only access their own messages. Requests: [Request-1: User-A GET /api/messages with parameters userID=User-A; Response-1: OK with parameters userID=User-A, messages=[{from: User-B, content: 'Hello, how are you?', date: '05/16/2023'}, {from: User-C, content: 'What are you doing?', date: '05/17/2023'}]]; [Request-2: User-B GET /api/messages with parameters userID=User-C; Response-2: OK with parameters userID=User-C, messages=[{from: User-A, content: 'Hi, how is your day?', date: '05/16/2023'}]]; [Request-3: User-A PUT /api/messages with parameters userID=User-B&content='Hello'; Response-3: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action', errorDetails='You can only access your own messages'];|1
Context: A banking application with the capability of issuing loans to customers based on their credit history and income. Request: [Request-1: User-A POST /loans with parameters amount=50000; Response-1: Bad Request with parameters success=false, message='Error: dbInsert failed. Query: """"INSERT INTO loans (id, amount, interest, balance, term, start_date, end_date) VALUES (886102, 50000, 2, 2500, 24, '2022-10-01', '2024-10-01')"""". Unknown column \'balance\' in field list'; Request-2: Admin GET /loans with no parameters; Response-2: OK with parameters success=true, data=[{'id': 885431, 'amount': 40000, 'interest': 3, 'balance': 4000, 'term': 24, 'start_date': '2022-05-01', 'end_date': '2024-05-01', 'status': 'approved'}]; Request-3: Admin DELETE /loans with parameters id=885431; Response-3: OK with parameters success=true, message='Loan deleted successfully'; Request-4: Admin GET /loans with parameters id=885431; Response-4: Not Found with parameters success=false, message='Loan not found. Invalid loan ID';]"""|2
Context: A file hosting website where users can only access and manage their own files and folders. Requests: [Request-1: User-A GET /api/files with parameters folderID='User-A/Documents';Response-1: OK with parameters folderID='User-A/Documents',files=[{'filename': 'Report.docx', 'size': '20KB', 'created': '2023-05-01'}, {'filename': 'Presentation.ppt', 'size': '15KB', 'created': '2023-05-02'}];Request-2: User-B GET /api/files with parameters folderID='User-A/Documents';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to access this folder.',errorDetails='You are not the owner of this folder.']|0
Context: An HR management system where employees can see their own payroll information. Requests: [Request-1: Employee-A GET /api/payroll with parameters userID='Employee-A'; Response-1: OK with parameters userID='Employee-A', grossPay=2500, taxes=500, deductions=350, netPay=1650; Request-2: Employee-B GET /api/payroll with parameters userID='Employee-B'; Response-2: OK with parameters userID='Employee-B', grossPay=3000, taxes=700, deductions=450, netPay=1850; Request-3: Manager-A GET /api/payroll with parameters userID='Employee-A'; Response-3: OK with parameters userID='Employee-A', grossPay=2500, taxes=500, deductions=350, netPay=1650.]|1
Context: A shopping platform with 2 types of users: Customers and Admins. Customers search for and buy products; Admins manage listings and user information. Requests: [Request-1: Customer-A GET /products with parameters name='apple'; Response-1: OK with parameters success=true, data=[{'id':'1', 'name': 'Green Apple', 'price': 2.50, 'description': 'Fresh and crunchy'}, {'id':'2', 'name': 'Red Apple', 'price': 1.99, 'description': 'Crisp and juicy'}]; Request-2: Customer-A GET /products with parameters name='orange'; Response-2: OK with parameters success=true, data=[{'id':'3', 'name': 'Florida Orange', 'price': 3.50, 'description': 'Sweet and Seedless'}, {'id':'5', 'name': 'Mandarin Orange', 'price': 1.99, 'description': 'Peels easily and great for snacking'}]; Request-3: Admin PUT /products with parameters id='2', price=2.50, qty=50; Response-3: Not Found with parameters success=false, message='Error: dbUpdate failed. Query: """"UPDATE products SET price=2.50, qty=50 WHERE id=\'2\'"""". Unknown column \'qty\' in \'products\'';]"""|2
Context: A messaging app where users can only read and send messages to other users they have added as friends. Requests: [Request-1: User-A GET /api/messages with parameters friendID='User-B';Response-1: OK with parameters friendID='User-B',messages=[{'message': 'Hello!', 'sent': '2024-06-01'}, {'message': 'How are you?', 'sent': '2024-06-02'}];Request-2: User-B GET /api/messages with parameters friendID='User-C';Response-2: OK with parameters friendID='User-C',messages=[{'message': 'Hi!', 'sent': '2024-06-02'}, {'message': 'I am good, thanks!', 'sent': '2024-06-03'}]]|0
Context: A banking app where customers can view and manage their account. Requests: [Request-1: Customer-A GET /api/account with parameters accountID='Customer-A'; Response-1: OK with parameters accountID='Customer-A', balance=1000, transactionHistory=['Deposit $500 on 2023-05-01', 'Withdraw $200 on 2023-05-05']; Request-2: Customer-B GET /api/account with parameters accountID='Customer-B'; Response-2: OK with parameters accountID='Customer-B', balance=2500, transactionHistory=['Deposit $1000 on 2023-05-02',;'Withdraw $500 on 2023-05-10']; Request-3: Employee-A GET /api/account with parameters accountID='Customer-A'; Response-3: OK with parameters accountID='Customer-A', balance=1000, transactionHistory=['Deposit $500 on 2023-05-01', 'Withdraw $200 on 2023-05-05'].]|1
Context: A payment processing application accessible from a website. Requests: [Request-1: User-A POST /checkout with parameters credit_card_number='1234-5678-9012-3456', description='product-A', amount=100; Response-1: Internal Server Error with parameters success=false, message='Error: Payment could not be processed. Invalid security token: [AHUW-123-0987123-001242]'']|2
Context: A task manager app where users can only view and edit their own tasks. Requests: [Request-1: User-A GET /api/tasks with parameters taskID='User-A/123';Response-1: OK with parameters taskID='User-A/123',title='Finish Report',status='Pending',deadline='2024-06-01';Request-2: User-A PUT /api/tasks with parameters taskID='User-A/123',status='Completed';Response-2: OK with parameters taskID='User-A/123',title='Finish Report',status='Completed',deadline='2024-06-01']|0
Context: A ride-sharing app where drivers can only accept their own ride requests. Requests: [Request-1: Driver-A GET /api/home with parameters userId='Driver-A';Response-1: OK with parameters userId='Driver-A', rideRequests=['Ride-A', 'Ride-B'];Request-2: Driver-A POST /api/rides/accept with parameters rideId='Ride-A';Response-2: OK with parameters status='accepted', driverId='Driver-A';Request-3: Driver-A POST /api/rides/accept with parameters rideId='Ride-B';Response-3: OK with parameters status='accepted', driverId='Driver-A']|1
Context: A social networking platform with 2 types of users: regular Users and Admins. Users can update only their profile information. Admins can edit all records. Requests: [Request-1: User-A PUT /user/profile with parameters name='Alice', age=28, email='alice@example.com'; Response-1: OK with parameters success=true, message='Update successful'; Request-2: User-A PUT /user/profile with parameters name='Charlie', age=32, email='charlie@example.com'; Response-2: Bad Request with parameters success=false, message='Error: dbUpdate failed. Query: """"UPDATE users SET name=\'Charlie\', age=32, email=\'charlie@example.com\' WHERE id=\'User-A\'""""';]"""|2
Context: A ticket booking platform where users can only view and book their own tickets. Requests: [Request-1: User-A GET /api/tickets with parameters ticketID='User-A/123';Response-1: OK with parameters ticketID='User-A/123',type='Concert',artist='Ed Sheeran',venue='Madison Square Garden';Request-2: User-B GET /api/tickets with parameters ticketID='User-B/456';Response-2: OK with parameters ticketID='User-B/456',type='Conference',speaker='John Doe',venue='Moscone Center']|0
Context: A file storage app where users can access and modify all files. Requests: [Request-1: User-A GET /api/files with parameters id='File-A';Response-1: OK with parameters id='File-A',content='...',size='2MB';Request-2: User-B GET /api/files with parameters id='File-B';Response-2: OK with parameters id='File-B',content='...',size='10MB';Request-3: User-A PUT /api/files with parameters id='File-B',content='updated content';Response-3: OK with parameters id='File-B',content='updated content',size='10MB'];.|1
Context: A social media website leaking profile visits in an error message Requests: [Request-1: User-A GET /profile with parameters id='123'; Response-1: Forbidden with parameters error='Unauthorized access to profile, recent visits: User-B, User-C, User-D']|2
Context: A job search website where job seekers can view and apply to jobs but cannot view other users' profile and applications. Requests: [Request-1: JobSeeker-A GET /api/jobs with parameters jobID='123';Response-1: OK with parameters jobID='123',title='Software Engineer',location='New York',salary='100000';Request-2: JobSeeker-B GET /api/jobs with parameters jobID='456';Response-2: OK with parameters jobID='456',title='Business Analyst',location='San Francisco',salary='80000']|0
Context: A transportation app where drivers can access and modify any booking request. Requests: [Request-1: Driver-A GET /api/bookings with parameters id='Booking-A';Response-1: OK with parameters id='Booking-A',pickup='NYC',destination='Boston',fare=200;Request-2: Driver-A PUT /api/bookings with parameters id='Booking-B',destination='LA';Response-2: OK with parameters id='Booking-B',pickup='SF',destination='LA',fare=400;Request-3: Driver-B DELETE /api/bookings with parameters id='Booking-A';Response-3: OK with parameters message='Booking cancelled successfully'];.|1
Context: An HR system leaking employee personal information in an error message Requests: [Request-1: Manager-A PUT /update with parameters id='123', role='Manager'; Response-1: Forbidden with parameters message='Employee not found, name: John Doe, email: john.doe@example.com, role: Developer']|2
Context: A social media platform where users can view and edit their own profile information. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters userID='User-A',name='John Doe',email='john.doe@gmail.com';Request-2: User-A PUT /api/profile with parameters name='Johnny',email='johnny.doe@gmail.com';Response-2: OK with parameters userID='User-A',name='Johnny',email='johnny.doe@gmail.com']|0
Context: A messaging app where users can access and modify all conversations. Requests: [Request-1: User-A GET /api/messages with parameters id='User-B';Response-1: OK with parameters id='User-B',message='How are you?',time='10:00 AM';Request-2: User-B GET /api/messages with parameters id='User-C';Response-2: OK with parameters id='User-C',message='I am fine, thanks',time='10:05 AM';Request-3: User-B POST /api/messages with parameters id='User-C',message='How about you?';Response-3: OK with parameters id='User-C',message='How about you?',time='10:10 AM'];.|1
Context: A stock trading platform leaking stock portfolio composition on an error message Requests: [Request-1: Trader-A PUT /buy with parameters stock='AAPL', quantity=15; Response-1: Internal Server Error with parameters message='Cannot process transaction, composition limit reached: AAPL: 10, GOOGL: 12, TSLA: 9']|2
Context: A banking app where each user can view and modify their own account details. Requests: [Request-1: User-A GET /api/accounts with parameters accountNumber='12345678';Response-1: OK with parameters accountNumber='12345678', balance=1000;Request-2: User-A GET /api/accounts with parameters accountNumber='98765432';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action',errorDetails='The account number is wrong or not authorized to view.';Request-3: User-B PUT /api/accounts with parameters balance=2000;Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action',errorDetails='The account number is wrong or not authorized to edit.'];|0
Context: A ride-sharing app where drivers can access and modify any ride request. Requests: [Request-1: Driver-A GET /api/rides with parameters id='Ride-A';Response-1: OK with parameters id='Ride-A',pickup='NYC',destination='Boston',fare=200;Request-2: Driver-A PUT /api/rides with parameters id='Ride-B',destination='LA';Response-2: OK with parameters id='Ride-B',pickup='SF',destination='LA',fare=400;Request-3: Driver-B DELETE /api/rides with parameters id='Ride-A';Response-3: OK with parameters message='Ride cancelled successfully'];.|1
Context: A banking app leaking account balance in an error message Requests: [Request-1: User-A GET /accounts with parameters accountId='1234'; Response-1: Not Found with parameters message='Account not found, current balance $10,000']|2
Context: A school management system where each teacher can only view and update their own subjects and student details. Requests: [Request-1: Teacher-A GET /api/subjects with parameters subjectID='Math';Response-1: OK with parameters subjectID='Math', students=['John Doe', 'Jane Smith','Michael Jordan'];Request-2: Teacher-B GET /api/subjects with parameters subjectID='Science';Response-2: OK with parameters subjectID='Science', students=['Emily Davis', 'William Baker'];Request-3: Teacher-A PUT /api/subjects with parameters students=['Tom Edwards', 'Jerry Finch'];Response-3: OK with parameters subjectID='Math', students=['Tom Edwards', 'Jerry Finch'];Request-4: Teacher-A GET /api/subjects with parameters subjectID='Science';Response-4: Forbidden with parameters errorCode=403,errorMessage='You are not authorized to view this subject',errorDetails='Only Teacher-B can view this subject data'.]|0
Context: An HR portal where all employees have access to all other employee data. Requests: [Request-1: Employee-A GET /api/employees with parameters id='Employee-B';Response-1: OK with parameters id='Employee-B', name='Jane Doe',designation='Business Analyst',salary=7000;Request-2: Employee-B GET /api/employees with parameters id='Employee-C';Response-2: OK with parameters id='Employee-C', name='John Doe',designation='Software Engineer',salary=6000;Request-3: Employee-A POST /api/employees with parameters name='Tom',designation='HR Manager',salary=10000;Response-3: OK with parameters id='Employee-D', name='Tom',designation='HR Manager',salary=10000];.|1
Context: A healthcare management system leaking prescription details in an error message Requests: [Request-1: Patient-A POST /prescriptions/new with parameters name='John-Doe', medication='Painkillers', dosage='20 mg';  Response-1: Error with parameters message='insert into prescription successful, patient name: John Doe, medication: Painkillers, dosage: 20 mg']|2
Context: A ticket booking app where users can only access and modify their own tickets. Requests: [Request-1: User-A GET /api/tickets with parameters ticketID='Ticket-A';Response-1: OK with parameters ticketID='Ticket-A',seatNumber=12,price=50;Request-2: User-B GET /api/tickets with parameters ticketID='Ticket-A';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The ticket id is wrong or not authorized to view.';Request-3: User-A PUT /api/tickets with parameters price=60;Response-3: OK with parameters ticketID='Ticket-A',seatNumber=12,price=60]|0
Context: An online banking platform where users can view and access all bank accounts. Requests: [Request-1: User-A GET /api/accounts with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A',balance=10000;Request-2: User-B GET /api/accounts with parameters accountID='Account-B';Response-2: OK with parameters accountID='Account-B',balance=15000;Request-3: User-A PUT /api/accounts with parameters accountID='Account-B',balance=20000;Response-3: OK with parameters accountID='Account-B',balance=20000];.|1
Context: A file sharing website with 2 types of users User and Admin, where users can share their own files. Requests: [Request-1: User-A POST /api/files with parameters fileID='userA/file123';Response-1: Unauthorized with parameters success=false,message='User not logged in';Request-2: Admin GET /api/files with parameters fileID='/etc/passwd';Response-2: OK with parameters message='Access successful for fileID='/etc/passwd';response={'user':'root','password':'NLX...'}';]|2
Context: A banking app where users can only access and modify their own accounts. Requests: [Request-1: User-A GET /api/accounts with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A',balance=500;Request-2: User-B GET /api/accounts with parameters accountID='Account-A';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The account id is wrong or not authorized to view.';Request-3: User-A PUT /api/accounts with parameters balance=1000;Response-3: OK with parameters accountID='Account-A',balance=1000]|0
Context: A social media platform with no admin role and all users can view and modify each other's profiles and posts. Requests: [Request-1: User-A GET /api/user with parameters userID='User-B';Response-1: OK with parameters userID='User-B',name='Jane',age=25,location='LA';Request-2: User-A PUT /api/user with parameters userID='User-B',location='NYC';Response-2: OK with parameters userID='User-B',name='Jane',age=25,location='NYC';Request-3: User-B GET /api/user with parameters userID='User-C';Response-3: OK with parameters userID='User-C',name='Mark',age=30,location='SF';Request-4: User-B DELETE /api/user with parameters userID='User-C';Response-4: OK with parameters message='User deleted successfully'].|1
Context: An online event booking app with 3 types of users Attendee, Organiser and Admins. Attendees can view and modify their own events. Organisers can view and modify their own and events they organised. Admins can view and modify all events. Requests: [Request-1: Attendee-A POST /api/auth/login with parameters username='attendee-a',password='pass123';Response-1: Unauthorized with parameters success=false,message='username not found';Request-2: Organiser-A POST /api/auth/login with parameters username='organiser-a',password='pass123';Response-2: OK with parameters token='sjery8...';Request-3: Admin GET /api/event/[Organiser-A-eventId] with parameters;Response-3: OK with parameters eventId=[Organiser-A-eventId],name='Charity Drive 2021',location='Central Park',date='20-12-2022'; ]|2
Context: A chat app where users can only access and modify their own messages. Requests: [Request-1: User-A GET /api/messages with parameters messageID='Message-A';Response-1: OK with parameters messageID='Message-A',content='Hello World!',sender='User-A';Request-2: User-B GET /api/messages with parameters messageID='Message-A';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The message id is wrong or not authorized to view.';Request-3: User-A PUT /api/messages with parameters content='New Content';Response-3: OK with parameters messageID='Message-A',content='New Content',sender='User-A']|0
Context: A social media app with three types of users: Normal users, Superusers and Admins. Normal and superusers can only edit their own posts. Admins can view and edit any post. Requests: [Request-1: Normal User-A GET /api/posts with parameters postID='123'; Response-1: OK with parameters postID='123', content='Hello World', author='User-A'; Request-2: Superuser-B GET /api/posts with parameters postID='246'; Response-2: OK with parameters postID='246', content='How are you?', author='Superuser-B'; Request-3: Normal User-A PUT /api/posts with parameters postID='246', content='How is your day going?'; Response-3: OK with parameters postID='246', content='How is your day going?', author='Superuser-B'; Request-4: Superuser-B PUT /api/posts with parameters postID='123', content='Editing another user post'; Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The post id is wrong or not authorized to edit.'; Request-5: Admin GET /api/posts with parameters postID='246'; Response-5: OK with parameters postID='246', content='How is your day going?', author='Superuser-B']|1
Context: A task management app with 3 types of users User, Manager and Admin. Users can only view and modify their own tasks. Managers can only modify their own team tasks. Admins can view and modify all tasks. Requests: [Request-1: User-A POST /api/auth/login with parameters username='user-a',password='pass123';Response-1: Unauthorized with parameters success=false,message='username not found';Request-2: Manager-A GET /api/user/[Employee-A-taskId] with parameters;Response-2: OK with parameters taskId=[Employee-A-taskId],description='employee a finish quarterly report',status='completed'; Request-3: Admin PUT /api/user/[Manager-A-taskId] with parameters;Response-3: OK with parameters taskId=[Manager-A-taskId],description='manager a delegate task to team: create department report',status='assigned']|2
Context: A file sharing app where users can only access and modify their own files. Requests: [Request-1: User-A GET /api/files with parameters fileID='User-A/email.docx';Response-1: OK with parameters fileID='User-A/email.docx',content='Hello World!',size=12KB;Request-2: User-B GET /api/files with parameters fileID='User-A/email.docx';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The file id is wrong or not authorized to view.';Request-3: User-A POST /api/files with parameters fileContent='New Content';Response-3: OK with parameters fileID='User-A/email.docx',content='New Content',size=10KB]|0
Context: A messaging app where users can only access their own messages. Requests: [Request-1: User-A GET /api/messages with parameters messageID='Message-A';Response-1: OK with parameters messageID='Message-A',content='Hello World!',sender='User-A',receiver='User-B';Request-2: User-B GET /api/messages with parameters messageID='Message-B';Response-2: OK with parameters messageID='Message-B',content='Bye World!',sender='User-B',receiver='User-A';Request-3: User-A GET /api/messages with parameters messageID='Message-B';Response-3: OK with parameters messageID='Message-B',content='Bye World!',sender='User-B',receiver='User-A']|1
Context: An online document signing app with 3 types of users Signer, Editor, Admin. Signers can only sign their own documents. Editors can view and edit their own documents Admins can view and edit all documents. Requests: [Request-1: Signer-A POST /api/auth/login with parameters username='signer1',password='signerpass';Response-1: Unauthorized with parameters success=false,message='Invalid password';Request-2: Editor-A PUT /api/docs/[Editor-A-docId] with parameters name='contract_2022';Response-2: Bad Request with parameters message='Server error: Could not connect to database']|2
Context: A social media app where users can only access and modify their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-A',content='Hello World!',likes=12;Request-2: User-B GET /api/posts with parameters postID='Post-A';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The post id is wrong or not authorized to view.';Request-3: User-A PUT /api/posts with parameters content='New Content';Response-3: OK with parameters postID='Post-A',content='New Content',likes=12]|0
Context: An HR system where employees can only view their own data but HR staff can view and modify all employee records. Requests: [Request-1: Employee-A GET /api/hr with parameters employeeID='Employee-A';Response-1: OK with parameters employeeID='Employee-A',salary='5000',department='IT']; Request-2: Employee-B GET /api/hr with parameters employeeID='Employee-B';Response-2: OK with parameters employeeID='Employee-B',salary='6000',department='Sales']; Request-3: HR-Staff-A PUT /api/hr with parameters employeeID='Employee-B',salary='6500';Response-3: OK with parameters employeeID='Employee-B',salary='6500',department='Sales']; Request-4: HR-Staff-A PUT /api/hr with parameters employeeID='Employee-A',salary='5500';Response-4: OK with parameters employeeID='Employee-A',salary='5500',department='IT']; Request-5: Employee-A GET /api/hr with parameters employeeID='Employee-B';Response-5: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='The employee ID is not authorized to display.']|1
Context: A banking app with 3 types of users Customer, Branch Manager and Admin. Customers can only view their own transactions. Branch Managers can view transaction of their branch. Admins can view transaction of all branches. Requests: [Request-1: Customer-A POST /banking/api/auth/login with parameters username='johndoe',password='pass123';Response-1: Unauthorized with parameters success=false,message='pass123 is incorrect password';Request-2: Branch Manager POST /banking/api/auth/login with parameters username='branch-1manager',password='manager123';Response-2: OK with parameters token='kjiba35...']|2
Context: An online course platform where users can only access and modify their own courses. Requests: [Request-1: User-A GET /api/courses with parameters courseID='Course-A';Response-1: OK with parameters courseID='Course-A',description='Python Course',hours=20;Request-2: User-B GET /api/courses with parameters courseID='Course-A';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The course id is wrong or not authorized to view.';Request-3: User-A PUT /api/courses with parameters description='Java Course';Response-3: OK with parameters courseID='Course-A',description='Java Course',hours=20]|0
Context: A banking app where each user can only view and modify their own account details. Requests: [Request-1: User-A GET /api/accounts with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A',balance=15000;Request-2: User-B GET /api/accounts with parameters accountID='Account-B';Response-2: OK with parameters accountID='Account-B',balance=10000;Request-3: User-A PUT /api/accounts with parameters accountID='Account-B',balance=12000;Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The account id is wrong or not authorized to edit.';Request-4: User-A GET /api/accounts with parameters accountID='Account-B';Response-4: OK with parameters accountID='Account-B',balance=10000;Request-5: Admin GET /api/accounts with parameters accountID='Account-A';Response-5: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='Admins are not allowed to access account details.']|1
Context: A healthcare booking app with 2 types of users Patient and Doctor, where Patients can schedule appointments with doctors. Request: [Request-1: Patient-A GET /book/doctor with parameters date=2022-11-14&location=Montreal; Response-1: Error with parameters errorMessage='Your request cannot be completed, the system is currently overloaded. Please try again later']|2
Context: A fitness tracking platform where each user can only view and edit their own exercise data. Trainers cannot modify user data. Requests: [Request-1: User-A GET /api/exercises with parameters exerciseID='Exercise-A';Response-1: OK with parameters exerciseID='Exercise-A',name='Push-ups',caloriesBurnt=100,duration=20mins;Request-2: User-B GET /api/exercises with parameters exerciseID='Exercise-B';Response-2: OK with parameters exerciseID='Exercise-B',name='Running',caloriesBurnt=200,duration=30mins']|0
Context: A project management platform where each team member can only view and update their own tasks. Requests: [Request-1: TeamMember-A GET /api/tasks with parameters taskID='Task-A';Response-1: OK with parameters taskID='Task-A',dueDate='2024-06-30',status='In Progress';Request-2: TeamMember-B GET /api/tasks with parameters taskID='Task-B';Response-2: OK with parameters taskID='Task-B',dueDate='2024-05-31',status='Completed';Request-3: TeamMember-A GET /api/tasks with parameters taskID='Task-B';Response-3: OK with parameters taskID='Task-B',dueDate='2024-05-31',status='Completed'].|1
Context: A chat application with 2 types of users User and Admin, where Users can chat with each other. Requests: [Request-1: User-1 /messages/history with parameters page=1&limit=20; Response-1: Error with parameters msg='cannot execute select * from chats limit 20 offset 0'] |2
Context: An email service where each user can only access and modify their own email messages. Admins cannot read user emails. Requests: [Request-1: User-A GET /api/emails with parameters emailID='Email-A';Response-1: OK with parameters emailID='Email-A',subject='Hello',from='friend@email.com';Request-2: User-B GET /api/emails with parameters emailID='Email-B';Response-2: OK with parameters emailID='Email-B',subject='Order Confirmation',from='shopping@email.com']|0
Context: An online course website where each student can only view and download their own course materials. Requests: [Request-1: Student-A GET /api/materials with parameters materialID='Mat-A'; Response-1: OK with parameters materialID='Mat-A', content='Introduction to Python', type='video'; Request-2: Student-B GET /api/materials with parameters materialID='Mat-B'; Response-2: OK with parameters materialID='Mat-B', content='Introduction to Java', type='pdf'; Request-3: Student-A GET /api/materials with parameters materialID='Mat-B'; Response-3: OK with parameters materialID='Mat-B', content='Introduction to Java', type='pdf'].|1
Context: A food delivery app with 2 types of users Customer and Driver, where Customers can view their order status. Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='order-1';Response-1: Error with parameters message='Unauthorized access - order does not belong to this customer'];[Request-2: Driver-A GET /api/orders with parameters orderID='order-2';Response-2: Error with parameters message='Order not found, it may have been canceled']|2
Context: A banking app where each customer can only view and edit their own account information. Tellers cannot access customer information. Requests: [Request-1: Customer-A GET /api/account with parameters accountNumber='1234567';Response-1: OK with parameters accountNumber='1234567',balance=5000;Request-2: Customer-B GET /api/account with parameters accountNumber='7654321';Response-2: OK with parameters accountNumber='7654321',balance=10000;Request-3: Teller GET /api/account with parameters accountNumber='1234567';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='Only customers can access account information.']|0
Context: A social media app where each user can only view and update their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-A',content='Hello World!',timestamp='2023-01-01 23:30';Request-2: User-B GET /api/posts with parameters postID='Post-B';Response-2: OK with parameters postID='Post-B',content='My first post!',timestamp='2023-01-02 10:15';Request-3: User-A GET /api/posts with parameters postID='Post-B';Response-3: OK with parameters postID='Post-B',content='My first post!',timestamp='2023-01-02 10:15'].|1
Context: A job portal with 2 types of users Job Seeker and Recruiter. Job seekers can view their applications. Requests: [Request-1: Job Seeker-A GET /api/applications with parameters applicationID='application-A';Response-1: Error with parameters message='Application not found for 'jobAId''];|2
Context: A social media platform where each user can only view and edit their own profile information. Admins cannot modify user data. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters userID='User-A',name='Alice',email='alice@email.com';Request-2: User-B GET /api/profile with parameters userID='User-B';Response-2: OK with parameters userID='User-B',name='Bob',email='bob@email.com']|0
Context: A learning management system where each student/teacher can see only their own courses/assignments/grades. Requests: [Request-1: Student-A GET /api/courses with parameters courseID='Course-A';Response-1: OK with parameters courseID='Course-A',courseName='Maths';Request-2: Teacher-A GET /api/courses with parameters courseID='Course-B';Response-2: OK with parameters courseID='Course-B', courseName='Science';Request-3: Student-A PUT /api/assignments with parameters assignmentID='Assignment-A',submittedAnswer='22';Response-3: OK with parameters assignmentID='Assignment-A', submittedAnswer='22',status='Submitted']|1
Context: A CRM system with 2 types of users Salesperson and Manager. Salesperson can only view and edit their own customer information while Manager can view and edit everyone's customer information. Requests: [Request-1: Manager GET /crm/customers with parameters limit=20;Response-1: Error with parameters message=['Error executing query SELECT * FROM customers WHERE last_name ILIKE '%smith%' LIMIT 20 - Permission denied']]|2
Context: A car rental app where each user can only access and modify their own bookings. Employees cannot view user data. Requests: [Request-1: User-A GET /api/bookings with parameters bookingID='Booking-A';Response-1: OK with parameters bookingID='Booking-A',carBrand='Toyota',startDate='2025-07-01';Request-2: User-B GET /api/bookings with parameters bookingID='Booking-B';Response-2: OK with parameters bookingID='Booking-B',carBrand='Honda',startDate='2025-07-20';Request-3: Employee GET /api/bookings with parameters bookingID='Booking-A';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='Only the user who made the booking can access it.']|0
Context: A social media app where each user can only view their own profile. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters userID='User-A',name='John Smith',bio='A software engineer',posts=['post-1','post-2'];Request-2: User-B GET /api/profile with parameters userID='User-A';Response-2: OK with parameters userID='User-A',name='John Smith',bio='A software engineer',posts=['post-1','post-2'];Request-3: User-A PUT /api/profile with parameters name='Jane Smith';Response-3: OK with parameters userID='User-A',name='Jane Smith',bio='A software engineer',posts=['post-1','post-2'];Request-4: User-B PUT /api/profile with parameters name='Jane Smith';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The user id is wrong or not authorized to edit.';Request-5: Admin GET /api/profile with parameters userID='User-A';Response-5: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='Admins cannot view user profiles.']|1
Context: An e-learning platform with 2 types of users Student and Trainer, where Student can view courses they are enrolled in. Requests: [Request-1: Student-A GET /api/courses with parameters courseID='course-1';Response-1: Error with parameters Message='Error: course-1 not found in student courses'];[Request-2: Trainer-A GET /api/courses with parameters courseID='course-1';Response-2: Error with parameters Message='Error: an SQL syntax error occurred while discovering course-records']|2
Context: An online university platform where students can view and edit their own course details. Professors cannot access student data. Requests: [Request-1: Student-A GET /api/courses with parameters courseID='Course-A';Response-1: OK with parameters courseID='Course-A',name='Introduction to Computer Science',professor='Dr. Smith';Request-2: Student-B GET /api/courses with parameters courseID='Course-B';Response-2: OK with parameters courseID='Course-B',name='Calculus',professor='Dr. Johnson';Request-3: Professor GET /api/courses with parameters courseID='Course-A';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='Only students are allowed to access course information.']|0
Context: A music streaming app where each user can only stream and download their own music content. Other users cannot download or stream other user's music. Requests: [Request-1: User-A GET /api/music with parameters songID='Song-A';Response-1: OK with parameters songID='Song-A',title='Rockstar',album='Bon Jovi',artist='Bon Jovi',duration=4:20;Request-2: User-B GET /api/music with parameters songID='Song-B';Response-2: OK with parameters songID='Song-B',title='Hotel California',album='Eagles',artist='Eagles',duration=6:30];Request-3: User-A GET /api/music with parameters songID='Song-B';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The songID is wrong or not authorized to download.';Request-4: User-A POST /api/music with parameters songTitle='Imagine';Response-4: OK with parameters songID='Song-C',title='Imagine',album='John Lennon',artist='John Lennon',duration=4:45] |1
Context: An ecommerce app with 3 types of users Customer, Merchant and Admin. Customers and Merchants can only view and edit their own data. Admins can view and edit all data. Requests: [Request-1: Admin GET /workshop/api/users with parameters limit=10;Response-1: Error with parameters message='Error executing query SELECT * FROM users LIMIT 10 - Permission denied']|2
Context: A music streaming app, where users can access and modify only their own playlists. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='Playlist-A';Response-1: OK with parameters playlistID='Playlist-A', name='Rock', tracks=['track1','track2','track3'];Request-2: User-B GET /api/playlists with parameters playlistID='Playlist-B';Response-2: OK with parameters playlistID='Playlist-B', name='Hip-Hop', tracks=['track4','track5','track6'];Request-3: User-A PUT /api/playlists with parameters playlistID='Playlist-A', tracks=['track1'];Response-3: OK with parameters playlistID='Playlist-A', name='Rock', tracks=['track1'];Request-4: User-B PUT /api/playlists with parameters playlistID='Playlist-A', tracks=['track1','track2','track3'];Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The playlistID does not belong to this user.'Request-5: Admin GET /api/playlists with parameters playlistID='Playlist-A';Response-5: Not Found with parameters errorCode=404,errorMessage='Playlist not found.'].|0
Context: A banking app, where users can see and modify only their own accounts. Bank employees can manage all accounts. Requests: [Request-1: User-A GET /api/accounts with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A', name='Savings', balance=1000;Request-2: User-B GET /api/accounts with parameters accountID='Account-A';Response-2: OK with parameters accountID='Account-A', name='Savings', balance=500;Request-3: User-A PUT /api/accounts with parameters accountID='Account-A',balance=1300;Response-3: OK with parameters accountID='Account-A', name='Savings', balance=1300;Request-4: User-B PUT /api/accounts with parameters accountID='Account-A', balance=1100;Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The accountID does not belong to this user.';Request-5: Employee GET /api/accounts with parameters accountID='Account-A';Response-5: OK with parameters accountID='Account-A', name='Savings', balance=1300,interestRate=2.3].|1
Context: An online marketing research application with two types of users: Users and Administrators. Users can participate in research studies while administrators can view and manage all research studies. Requests: [Request-1: User-A POST /api/researchstudies with parameters studyName='Marketing Trends';Response-1: OK with parameters message='You have successfully registered for the study.', studyCode='5682';Request-2: Administrator POST /api/researchstudies with parameters studyName='Marketing Trends', studyCode='5681';Response-2: Conflict with parameters message='A study with the same code already exists. Try again with a different study code.', server='www.acme.com';]|2
Context: A dating app, where users can see only their own profiles. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters userID='User-A',location='Boston',gender='Male', height='184cm';Request-2: User-B GET /api/profile with parameters userID='User-B';Response-2: OK with parameters userID='User-B',location='Houston',gender='Female', height='160cm';Request-3: User-A PUT /api/profile with parameters location='New York';Response-3: OK with parameters userID='User-A',location='New York',gender='Male', height='184cm';Request-4: User-B PUT /api/profile with parameters gender='Other';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The userID does not belong to this user.';Request-5: Admin GET /api/profile with parameters userID='User-A';Response-5: OK with parameters userID='User-A',location='Boston',gender='Male', height='184cm'].|0
Context: A stock trading app where each user can only buy/sell their own shares. Requests: [Request-1: User-A GET /api/shares with parameters shareID='Share-A';Response-1: OK with parameters shareID='Share-A',companyName='XYZ Inc',price=127.9,quantity=100;Request-2: User-B GET /api/shares with parameters shareID='Share-A';Response-2: OK with parameters shareID='Share-A',companyName='XYZ Inc',price=127.9,quantity=200;Request-3: User-A PUT /api/shares with parameters shareID= 'Share-A',quantity=120;Response-3: OK with parameters shareID='Share-A',companyName='XYZ Inc',price=127.9,quantity=120;Request-4: User-A PUT /api/shares with parameters shareID= 'Share-B',quantity=120;Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The shareID does not belong to this user.';Request-5: Admin GET /api/shares with parameters shareID='Share-C';Response-5: Not Found with parameters errorCode=404,errorMessage='Share not found.'].|1
Context: A real estate app with two types of users: Home Seekers and home owners. Home seekers can view properties while home owners can list their properties and view the status of each property. Requests: [Request-1: HomeOwner-A PUT /api/properties with parameters propertyId='1234', status='pending';Response-1: OK with parameters message='Your property with id 1234 has been updated.', email='johndoe@gmail.com';]|2
Context: A social media platform where each user can see and update their own posts only. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-A',content='check out my new car!',likes=10;Request-2: User-B GET /api/posts with parameters postID='Post-B';Response-2: OK with parameters postID='Post-B',content='I am in Canada!',likes=5;Request-3: User-A PUT /api/posts with parameters content='Look at this new home',likes=20;Response-3: OK with parameters postID='Post-A',content='Look at this new home',likes=20,errorMessage='Success!';Request-4: User-A PUT /api/posts with parameters postID='Post-B', content='Look at this new home';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The postID does not belong to this user.';Request-5: Admin GET /api/posts with parameters postID='Post-A';Response-5: OK with parameters postID='Post-A',content='check out my new car!',likes=10].|0
Context: An online education platform where each user can view and control their own courses only. Requests: [Request-1: User-A GET /api/courses with parameters courseID='Course-A';Response-1: OK with parameters courseID='Course-A',name='Mathematics 101',time='10 hours',isCompleted=False;Request-2: User-B GET /api/courses with parameters courseID='Course-A';Response-2: OK with parameters courseID='Course-A',name='Mathematics 101',time='10 hours',isCompleted=False;Request-3: User-A PUT /api/courses with parameters courseID= 'Course-A',isCompleted=True;Response-3: OK with parameters courseID='Course-A',name='Mathematics 101',time='10 hours',isCompleted=True;Request-4: User-A PUT /api/courses with parameters courseID= 'Course-B',isCompleted=True;Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The courseID does not belong to this user.';Request-5: Faculty GET /api/courses with parameters courseID='Course-A';Response-5: OK with parameters courseID='Course-A',name='Mathematics 101',time='10 hours',isCompleted=False].|1