prompt|labels
Context: A banking app where each user can only access their own accounts and cannot see other users' accounts. Requests: [Request-1: User-A GET /api/accounts with parameters accountNumber='A123';Response-1: OK with parameters accountNumber='A123', balance=1000, owners='User-A';Request-2: User-B GET /api/accounts with parameters accountNumber='B123';Response-2: OK with parameters accountNumber='B123', balance=1500, owners='User-B';Request-3: User-A GET /api/accounts with parameters accountNumber='B123';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to access this account.',errorDetails='The accountNumber is wrong or not authorized to access.''].|0
Context: A messaging app with 3 types of users: regular user, admin, and moderator. Requests: [Request-1: User-A GET /messages with parameters userID='Moderator-B'; Response-1: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The user ID is not authorized to access.']; Request-2: Admin DELETE /messages with parameters messageID='123'; Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You do not have the permission to delete messages.'];]|0
Context: A social media app where each user can only view and edit their own profile. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters userID='User-A',name='John Doe',email='johndoe@example.com';Request-2: User-B GET /api/profile with parameters userID='User-A';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The user ID is wrong or not authorized to edit.';Request-3: User-A PUT /api/profile with parameters email='newemail@example.com';Response-3: OK with parameters message='Profile updated successfully.'];|0
Context: An online food ordering and delivery platform that allows users to place orders only under their own account. Requests: [Request-1: User-A POST /api/orders with parameters food='Pizza';Response-1: OK with parameters food='Pizza',status='pending';Request-2: User-A GET /api/orders;Response-2: OK with parameters orders=[{status='pending',food='Pizza'}];Request-3: User-B PUT /api/orders with parameters orderID='5',food='Definitely not pizza';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.', errorDetails='You do not have the permission to modify this order.']|0
Context: A job search website where job seekers can view and apply to jobs but cannot view other users' profile and applications. Requests: [Request-1: JobSeeker-A GET /api/jobs with parameters jobID='123';Response-1: OK with parameters jobID='123',title='Software Engineer',location='New York',salary='100000';Request-2: JobSeeker-B GET /api/jobs with parameters jobID='456';Response-2: OK with parameters jobID='456',title='Business Analyst',location='San Francisco',salary='80000']|0
Context: An HR system leaking employee personal information in an error message Requests: [Request-1: Manager-A PUT /update with parameters id='123', role='Manager'; Response-1: Forbidden with parameters message='Employee not found, name: John Doe, email: john.doe@example.com, role: Developer']|2
Context: An online food ordering app where customers can view only their own order history. Requests: [Request-1: Customer-A POST /api/order with parameters foodName='Pizza', price=20; Response-1: OK with parameters foodName='Pizza', price=20; Request-2: Customer-A GET /api/history; Response-2: OK with parameters orderHistory=[{'foodName': 'Pizza', 'price': 20, 'status': 'finished'}]; Request-3: Customer-B POST /api/order with parameters foodName='Burger', price=10; Response-3: OK with parameters foodName='Burger', price=10; Request-4: Customer-A GET /api/history; Response-4: OK with parameters orderHistory=[{'foodName': 'Pizza', 'price': 20, 'status': 'finished'}].]|0
Context: A messaging app where users can create chat groups. Each user can only add/remove users from the chats they created themselves. Requests: [Request-1: User-A POST /api/chat with parameters title='Group 1';Response-1: OK with parameters chatID='Group-1',users=['User-A'];Request-2: User-A PUT /api/chat with parameters chatID='Group-1',add='User-B';Response-2: OK with parameters chatID='Group-1',users=['User-A','User-B'];Request-3: User-A PUT /api/chat with parameters chatID='Group-2',add='User-B';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='You are not the group creator.']|0
Context: A file storage app where users can access and modify all files. Requests: [Request-1: User-A GET /api/files with parameters id='File-A';Response-1: OK with parameters id='File-A',content='...',size='2MB';Request-2: User-B GET /api/files with parameters id='File-B';Response-2: OK with parameters id='File-B',content='...',size='10MB';Request-3: User-A PUT /api/files with parameters id='File-B',content='updated content';Response-3: OK with parameters id='File-B',content='updated content',size='10MB'];.|1
Context: An appointment scheduling app where users can view and edit their own appointments. Requests: [Request-1: User-A POST /api/appointments with parameters date='2022-06-01', time='09:00',description='Appointment with doctor';Response-1: OK with parameters appointmentID='123',date='2022-06-01',time='09:00',description='Appointment with doctor',userID='User-A';Request-2: User-A GET /api/appointments with parameters appointmentID='123';Response-2: OK with parameters appointmentID='123',date='2022-06-01',time='09:00',description='Appointment with doctor',userID='User-A';Request-3: User-A PUT /api/appointments with parameters date='2022-06-02', time='10:00',description='Appointment with dentist',appointmentID='123';Response-3: OK with parameters appointmentID='123',date='2022-06-02',time='10:00',description='Appointment with dentist',userID='User-A';Request-4: User-B GET /api/appointments with parameters appointmentID='123'; Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not authorized to access this appointment.'; Request-5: Admin PUT /api/appointments with parameters date='2022-06-03', time='11:00',description='Appointment with admin',appointmentID='123'; Response-5: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not authorized to edit this appointment.'] |0
Context: A social media platform with no admin role and all users can view and modify each other's profiles and posts. Requests: [Request-1: User-A GET /api/user with parameters userID='User-B';Response-1: OK with parameters userID='User-B',name='Jane',age=25,location='LA';Request-2: User-A PUT /api/user with parameters userID='User-B',location='NYC';Response-2: OK with parameters userID='User-B',name='Jane',age=25,location='NYC';Request-3: User-B GET /api/user with parameters userID='User-C';Response-3: OK with parameters userID='User-C',name='Mark',age=30,location='SF';Request-4: User-B DELETE /api/user with parameters userID='User-C';Response-4: OK with parameters message='User deleted successfully'].|1
Context: An online tutoring app where tutors can only view and provide feedback to students in their class. Requests: [Request-1: Tutor-A GET /api/feedback with parameters studentID=Student-B-123';Response-1: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The student ID is not authorized to access.']; Request-2: Tutor-B PUT /api/feedback with parameters studentID='Student-A-234', feedback='Good job on test!'; Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The student ID is not authorized to edit.'];]|0
Context: A ride-sharing app where drivers can access and modify any ride request. Requests: [Request-1: Driver-A GET /api/rides with parameters id='Ride-A';Response-1: OK with parameters id='Ride-A',pickup='NYC',destination='Boston',fare=200;Request-2: Driver-A PUT /api/rides with parameters id='Ride-B',destination='LA';Response-2: OK with parameters id='Ride-B',pickup='SF',destination='LA',fare=400;Request-3: Driver-B DELETE /api/rides with parameters id='Ride-A';Response-3: OK with parameters message='Ride cancelled successfully'];.|1
Context: A chat room application where users can create chat rooms to chat with others. Requests: [Request-1: User-A POST /api/chat with parameters chatRoomID='Chat-Room-A';Response-1: OK with parameters chatRoomID='Chat-Room-A',chatHistory=['User-A: Hi', 'User-B: Hello', 'User-A: How are you?']]; Request-2: User-B GET /api/chat with parameters chatRoomID='Chat-Room-A'; Response-2: OK with parameters chatRoomID='Chat-Room-A',chatHistory=['User-A: Hi', 'User-B: Hello', 'User-A: How are you?']]; Request-3: User-A GET /api/chat with parameters chatRoomID='Chat-Room-B';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='The chat room ID is not authorized to display.']|0
Context: A fitness app where users can view graphs and stats of their workouts. Requests: [Request-1: User-A GET /api/workouts with parameters date='2021-05-26';Response-1: OK with parameters date='2021-05-26',duration='60',caloriesBurned=200,workoutType='Running']; Request-2: User-A GET /api/graphs with parameters workoutType='Running'; Response-2: OK with parameters workoutType='Running',data=[{'2021-05-26': {'duration': '60', 'caloriesBurned': '200'}}, {'2021-05-27': {'duration': '55', 'caloriesBurned': '190'}}, {'2021-05-29': {'duration': '70','caloriesBurned': '250'}}]]; Request-3: User-B GET /api/workouts with parameters date='2021-05-26';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.', errorDetails='The user ID is not authorized to display.']|0
Context: A task management system where employees can view and update their own tasks but team leaders can view the status of all team members. Requests: [Request-1: Employee-A GET /api/tasks with parameters taskID='Task-A';Response-1: OK with parameters taskID='Task-A',status='completed',assignee='Employee-A']; Request-2: Employee-B GET /api/tasks with parameters taskID='Task-B';Response-2: OK with parameters taskID='Task-B',status='in-progress',assignee='Employee-B']; Request-3: Team-Leader-A GET /api/tasks with parameters taskID='Task-B'; Response-3: OK with parameters taskID='Task-B',status='in-progress',assignee='Employee-B',assigner='Team-Leader-A']; Request-4: Team-Leader-A PUT /api/tasks with parameters taskID='Task-A',status='in-progress'; Response-4: OK with parameters taskID='Task-A',status='in-progress',assignee='Employee-A',assigner='Team-Leader-A']; Request-5: Employee-A GET /api/tasks with parameters taskID='Task-C';Response-5: Forbidden with parameters errorCode=403,errorMessage= 'You are not allowed to perform this action.',errorDetails='The task ID is not authorized to display.']|0
Context: A ride-sharing app where drivers can only accept their own ride requests. Requests: [Request-1: Driver-A GET /api/home with parameters userId='Driver-A';Response-1: OK with parameters userId='Driver-A', rideRequests=['Ride-A', 'Ride-B'];Request-2: Driver-A POST /api/rides/accept with parameters rideId='Ride-A';Response-2: OK with parameters status='accepted', driverId='Driver-A';Request-3: Driver-A POST /api/rides/accept with parameters rideId='Ride-B';Response-3: OK with parameters status='accepted', driverId='Driver-A']|1
Context: An online marketplace where each user can view and buy products available for sale. Requests: [Request-1: Customer-A GET /api/products with parameters productId=1; Response-1: OK with parameters productId=1, productName='Product-1', price=50, description='The best product'; Request-2: Customer-A GET /api/products with parameters productId=2; Response-2: OK with parameters productId=2, productName='Product-2', price=100, description='Another product'; Request-3: Customer-B GET /api/products with parameters productId=1; Response-3: OK with parameters productId=1, productName='Product-1', price=50, description='The best product'.]|0
Context: A CRM system with 2 types of users Salesperson and Manager. Salesperson can only view and edit their own customer information while Manager can view and edit everyone's customer information. Requests: [Request-1: Manager GET /crm/customers with parameters limit=20;Response-1: Error with parameters message=['Error executing query SELECT * FROM customers WHERE last_name ILIKE '%smith%' LIMIT 20 - Permission denied']]|2
Context: A blogging platform where each writer can create and edit their own blog posts. Requests: [Request-1: Writer-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-A',content='Some content';Request-2: Writer-B GET /api/posts with parameters postID='Post-A';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The post id is wrong or not authorized to edit.';Request-3: Admin GET /api/posts with parameters postID='Post-A';Response-3: OK with parameters postID='Post-A',content='Some content']|0
Context: A project management app where each user can only access and modify their own projects. Requests: [Request-1: User-A GET /api/projects with parameters projectID='User-B/123';Response-1: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The project ID is wrong or not authorized to access.'];Request-2: User-A POST /api/projects with parameters projectName='New Project';Response-2: OK with parameters message='Project added successfully.'];|0
Context: A fitness app where each user can only view and update their own profile. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters name='John Doe', height='165cm',weight='60kg', targetWeight='65kg', targetDate='2024-07-01';Request-2: User-B GET /api/profile with parameters userID='User-B';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to access this profile.',errorDetails='The user id is wrong or not authorized to access.';Request-3: User-A PUT /api/profile with parameters weight='61kg';Response-3: OK with parameters name='John Doe', height='165cm',weight='61kg', targetWeight='65kg', targetDate='2024-07-01';Request-4: User-B PUT /api/profile with parameters weight='80kg';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to update this profile.',errorDetails='The user id or role is not authorized to update.']|0
Context: A file sharing app where users can only access and modify their own files. Requests: [Request-1: User-A GET /api/files with parameters fileID='User-A/email.docx';Response-1: OK with parameters fileID='User-A/email.docx',content='Hello World!',size=12KB;Request-2: User-B GET /api/files with parameters fileID='User-A/email.docx';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The file id is wrong or not authorized to view.';Request-3: User-A POST /api/files with parameters fileContent='New Content';Response-3: OK with parameters fileID='User-A/email.docx',content='New Content',size=10KB]|0
Context: An online tutoring service where each student can only view and modify their own study materials. Requests: [Request-1: Student-A GET /api/study with parameters topic='Math'; Response-1: OK with parameters subject='Math', materials=['Introduction to Algebra', 'Subtraction of Integers'], author='Teacher-A'; Request-2: Student-B GET /api/study with parameters topic='Math'; Response-2: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.',errorDetails='The topic is wrong or not authorized'; Request-3: Student-A PUT /api/study with parameters topic='Math', add='Multiplication of Fractions'; Response-3: OK with parameters subject='Math', materials=['Introduction to Algebra', 'Subtraction of Integers', 'Multiplication of Fractions'], author='Teacher-A'; Request-4: Student-B PUT /api/study with parameters topic='English', add='Vocabulary'; Response-4: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.',errorDetails='The topic is wrong or not authorized'] |0
Context: A mobile banking app where customers can access their account information and make transactions. Requests: [Request-1: Customer-A GET /api/accounts with parameters accountID='Customer-A';Response-1: OK with parameters accountID='Customer-A',balance='5000';Request-2: Customer-A POST /api/transactions with parameters toAccount='Customer-B', amount='1000';Response-2: OK with parameters transactionID='123',fromAccount='Customer-A',toAccount='Customer-B',amount='1000';Request-3: Customer-A GET /api/transactions with parameters transactionID='123';Response-3: OK with parameters transactionID='123',fromAccount='Customer-A',toAccount='Customer-B',amount='1000';Request-4: Customer-B GET /api/accounts with parameters accountID='Customer-A'; Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not authorized to access this account.'; Request-5: Admin GET /api/accounts with parameters accountID='Customer-A'; Response-5: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='Only customers can access their account.']|0
Context: A food delivery app with 2 types of users Customer and Driver, where Customers can view their order status. Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='order-1';Response-1: Error with parameters message='Unauthorized access - order does not belong to this customer'];[Request-2: Driver-A GET /api/orders with parameters orderID='order-2';Response-2: Error with parameters message='Order not found, it may have been canceled']|2
Context: A retail app where customers can view their own order history. Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',totalPrice=12;Request-2: Customer-B GET /api/orders with parameters orderID='Order-B';Response-2: OK with parameters orderID='Order-B',totalPrice=155;Request-3: Customer-A GET /api/orders with parameters orderID='Order-B';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The order id is wrong or not authorized to display.']|0
Context: A banking app where each user can view and modify their own account details. Requests: [Request-1: User-A GET /api/accounts with parameters accountNumber='12345678';Response-1: OK with parameters accountNumber='12345678', balance=1000;Request-2: User-A GET /api/accounts with parameters accountNumber='98765432';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action',errorDetails='The account number is wrong or not authorized to view.';Request-3: User-B PUT /api/accounts with parameters balance=2000;Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action',errorDetails='The account number is wrong or not authorized to edit.'];|0
Context: A social media app where users can only access and modify their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-A',content='Hello World!',likes=12;Request-2: User-B GET /api/posts with parameters postID='Post-A';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The post id is wrong or not authorized to view.';Request-3: User-A PUT /api/posts with parameters content='New Content';Response-3: OK with parameters postID='Post-A',content='New Content',likes=12]|0
Context: An HR system where employees can only view their own data but HR staff can view and modify all employee records. Requests: [Request-1: Employee-A GET /api/hr with parameters employeeID='Employee-A';Response-1: OK with parameters employeeID='Employee-A',salary='5000',department='IT']; Request-2: Employee-B GET /api/hr with parameters employeeID='Employee-B';Response-2: OK with parameters employeeID='Employee-B',salary='6000',department='Sales']; Request-3: HR-Staff-A PUT /api/hr with parameters employeeID='Employee-B',salary='6500';Response-3: OK with parameters employeeID='Employee-B',salary='6500',department='Sales']; Request-4: HR-Staff-A PUT /api/hr with parameters employeeID='Employee-A',salary='5500';Response-4: OK with parameters employeeID='Employee-A',salary='5500',department='IT']; Request-5: Employee-A GET /api/hr with parameters employeeID='Employee-B';Response-5: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='The employee ID is not authorized to display.']|1
Context: An online marketing research application with two types of users: Users and Administrators. Users can participate in research studies while administrators can view and manage all research studies. Requests: [Request-1: User-A POST /api/researchstudies with parameters studyName='Marketing Trends';Response-1: OK with parameters message='You have successfully registered for the study.', studyCode='5682';Request-2: Administrator POST /api/researchstudies with parameters studyName='Marketing Trends', studyCode='5681';Response-2: Conflict with parameters message='A study with the same code already exists. Try again with a different study code.', server='www.acme.com';]|2
Context: A messaging app where users can send messages to each other. Users can only view conversations which they have been added to. Requests: [Request-1: User-A POST /api/newChat with parameters user='User-B';Response-1: OK with parameters chatID='1001';Request-2: User-B POST /api/send with parameters chatID='1001',message='Hello, world!';Response-2: OK with parameters messageID='3001';Request-3: User-A GET /api/chat with parameters chatID='1001';Response-4: OK with parameters messages=['User-A: Hi', 'User-B: Hello, world!']]|0
Context: A fitness tracking app where each user can only access and modify their own progress. Requests: [Request-1: User-A GET /api/progress with parameters workoutID='User-B/123';Response-1: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The workout ID is wrong or not authorized to access.'];Request-2: User-A PUT /api/progress with parameters workoutID='User-A/567', setsCompleted='2', repsCompleted='20', weightLifted='50';Response-2: OK with parameters message='Progress updated successfully.'];|0
Context: A banking app with 3 types of users Customer, Branch Manager and Admin. Customers can only view their own transactions. Branch Managers can view transaction of their branch. Admins can view transaction of all branches. Requests: [Request-1: Customer-A POST /banking/api/auth/login with parameters username='johndoe',password='pass123';Response-1: Unauthorized with parameters success=false,message='pass123 is incorrect password';Request-2: Branch Manager POST /banking/api/auth/login with parameters username='branch-1manager',password='manager123';Response-2: OK with parameters token='kjiba35...']|2
Context: A fitness app where users can create and join workout groups. Users can view each other's profiles, but cannot modify them. Requests: [Request-1: User-A POST /api/groups with parameters title='Gym workout';Response-1: OK with parameters groupID='Gym-workout',users=['User-A'];Request-2: User-B PUT /api/groups with parameters groupID='Gym-workout',add='User-C';Response-2: OK with parameters groupID='Gym-workout',users=['User-A','User-B','User-C'];Request-3: User-B PUT /api/profile with parameters name='User-C';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='You cannot modify another user profile.']|0
Context: A social media app allowing users to post, like, and share any post. Requests: [Request-1: User-A POST /api/posts with parameters message='Hello World'; Response-1: OK with parameters postID='123', message='Hello World', likes=0, shares=0;Request-2: User-B GET /api/posts with parameters postID='123';Response-2: OK with parameters postID='123', message='Hello World', likes=0, shares=0;Request-3: User-A PUT /api/posts with parameters postID='123', message='Updated Message';Response-3: OK with parameters postID='123', message='Updated Message', likes=0, shares=0;Request-4: User-B DELETE /api/posts with parameters postID='123';Response-4: OK with parameters postID='123', message='Updated Message', likes=0, shares=0]|0
Context: An airline reservation system where each user can book only their own tickets. Requests: [Request-1: User-A GET /api/bookings with parameters bookingID='User-B/123456';Response-1: OK with parameters message='This booking does not belong to you'];Request-2: User-B GET /api/flights with parameters date='2024-06-15', from='San Francisco', to='Tokyo';Response-2: OK with parameters flightID='456', from='San Francisco', to='Tokyo',date='2024-06-15', price=2000;Request-3: User-A POST /api/bookings with parameters flightID=123, quantity=2;Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not authorized to book tickets for another user'|0
Context: A healthcare booking app with 2 types of users Patient and Doctor, where Patients can schedule appointments with doctors. Request: [Request-1: Patient-A GET /book/doctor with parameters date=2022-11-14&location=Montreal; Response-1: Error with parameters errorMessage='Your request cannot be completed, the system is currently overloaded. Please try again later']|2
Context: A transportation app where drivers can access and modify any booking request. Requests: [Request-1: Driver-A GET /api/bookings with parameters id='Booking-A';Response-1: OK with parameters id='Booking-A',pickup='NYC',destination='Boston',fare=200;Request-2: Driver-A PUT /api/bookings with parameters id='Booking-B',destination='LA';Response-2: OK with parameters id='Booking-B',pickup='SF',destination='LA',fare=400;Request-3: Driver-B DELETE /api/bookings with parameters id='Booking-A';Response-3: OK with parameters message='Booking cancelled successfully'];.|1
Context: A forum app where users can create and post comments. Each user can edit and delete their own comments. Requests: [Request-1: User-A POST /api/posts with parameters title='New post',content='This is my new post.';Response-1: OK with parameters postID='1',title='New post';Request-2: User-A PUT /api/comments with parameters postID='1',commentID='1',content='Updated comment';Response-2: OK with parameters postID='1', updatedComments={'1': 'Updated comment'};Request-3: User-B PUT /api/comments with parameters postID='1',commentID='1',content='New comment';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='You can only modify your own comments.']|0
Context: An appointment system where users can only view and modify their own appointments. Requests: [Request-1: User-A GET /api/appointments with parameters appointmentID='Appt-001'; Response-1: OK with parameters appointmentID='Appt-001', date='2023-05-09', time='10:00AM', location='Central Perk', doctor='Dr. Green'; Request-2: User-B GET /api/appointments with parameters appointmentID='Appt-001'; Response-2: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.',errorDetails='The appointment id is wrong or not authorized'; Request-3: User-A DELETE /api/appointments with parameters appointmentID='Appt-001'; Response-3: OK with parameters message='Appointment cancelled successfully'; Request-4: User-B DELETE /api/appointments with parameters appointmentID='Appt-002'; Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The appointment id is wrong or not authorized'; Request-5: Admin DELETE /api/appointments with parameters appointmentID='Appt-001'; Response-5: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.',errorDetails='You do not have the required permission.']|0
Context: A music streaming app where each user can only access and edit their own playlists. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='Playlist-A';Response-1: OK with parameters playlistID='Playlist-A',songs=['Song1','Song2'];Request-2: User-B GET /api/playlists with parameters playlistID='Playlist-B';Response-2: OK with parameters playlistID='Playlist-B',songs=['Song3','Song4'];Request-3: User-A POST /api/playlists with parameters playlistName='New Playlist',songs=['Song5','Song6'];Response-3: OK with parameters playlistID='Playlist-C', playlistName='New Playlist',songs=['Song5','Song6']]|0
Context: A movie-watching app where each user can see only their own watchlists and recently watched movies. Requests: [Request-1: User-A GET /api/watchlists;Response-1: OK with parameters movies=['Movie-A', 'Movie-B'];Request-2: User-B GET /api/watched with parameters movieID='Movie-C';Response-2: OK with parameters movieName='Movie-C',year=2019;Request-3: User-A POST /api/watchlists with parameters movieName='Movie-C';Response-3: OK with parameters movies=['Movie-A', 'Movie-B', 'Movie-C']]|0
Context: A social media website where each user can only access and modify their own posts and comments. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-B-123';Response-1: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The post ID is wrong or not authorized to access.'];Request-2: User-A POST /api/comments with parameters postID='Post-B-123', content='Great post!';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The post ID is wrong or not authorized to comment.'];|0
Context: A banking app where customers can view and manage their account. Requests: [Request-1: Customer-A GET /api/account with parameters accountID='Customer-A'; Response-1: OK with parameters accountID='Customer-A', balance=1000, transactionHistory=['Deposit $500 on 2023-05-01', 'Withdraw $200 on 2023-05-05']; Request-2: Customer-B GET /api/account with parameters accountID='Customer-B'; Response-2: OK with parameters accountID='Customer-B', balance=2500, transactionHistory=['Deposit $1000 on 2023-05-02',;'Withdraw $500 on 2023-05-10']; Request-3: Employee-A GET /api/account with parameters accountID='Customer-A'; Response-3: OK with parameters accountID='Customer-A', balance=1000, transactionHistory=['Deposit $500 on 2023-05-01', 'Withdraw $200 on 2023-05-05'].]|1
Context: A social media platform where each user can view and update their own posts. Requests: [Request-1: User-A PUT /api/posts with parameters postId='post-123', content='new content'; Response-1: OK with parameters postId='post-123', content='new content'; Request-2: User-A GET /api/posts with parameters postId='post-123'; Response-2: OK with parameters postId='post-123', content='new content'; Request-3: User-B PUT /api/posts with parameters postId='post-123', content='hacked content'; Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.']|0
Context: A project management platform where each team member can only view and update their own tasks. Requests: [Request-1: TeamMember-A GET /api/tasks with parameters taskID='Task-A';Response-1: OK with parameters taskID='Task-A',dueDate='2024-06-30',status='In Progress';Request-2: TeamMember-B GET /api/tasks with parameters taskID='Task-B';Response-2: OK with parameters taskID='Task-B',dueDate='2024-05-31',status='Completed';Request-3: TeamMember-A GET /api/tasks with parameters taskID='Task-B';Response-3: OK with parameters taskID='Task-B',dueDate='2024-05-31',status='Completed'].|1
Context: A chat application where users have private conversations with friends. Requests: [Request-1: User-A POST /api/conversations with parameters friendID='User-B', message='Hey there!';Response-1: OK with parameters conversationID='3223', message='Hey there!', senderID='User-A', receiverID='User-B', dateTime='2023-05-01';Request-2: User-A GET /api/conversations with parameters conversationID='3224';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to view the conversation',errorDetails='The conversation id is wrong or not authorized to view.']|0
Context: An online booking system where each user can only book, view and edit their own bookings. Requests: [Request-1: Customer-A GET /api/bookings with parameters bookingID='Customer-A/123';Response-1: OK with parameters bookingID='Customer-A/123',from='New York',to='Paris',date='2024-06-01';Request-2: Customer-B GET /api/bookings with parameters bookingID='Customer-A/123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The booking id is wrong or not authorized to view.';Request-3: Customer-A PUT /api/bookings with parameters bookingID='Customer-A/123',date='2024-06-02';Response-3: OK with parameters bookingID='Customer-A/123',from='New York',to='Paris',date='2024-06-02']|0
Context: A chess gaming app where each user can only access and modify their own game boards. Requests: [Request-1: User-A GET /api/boards with parameters boardID='Board-A';Response-1: OK with parameters boardID='Board-A',position=[['R','N','B','Q','K','B','N','R'],['P','P','P','P','P','P','P','P'],[' ',' ',' ',' ',' ',' ',' ',' ' ],[' ',' ',' ',' ',' ',' ',' ',' '],[' ',' ',' ',' ',' ',' ',' ',' '],[' ',' ',' ',' ',' ',' ',' ',' '],['p','p','p','p','p','p','p','p'],['r','n','b','q','k','b','n','r']],isCheck=false;Request-2: User-B GET /api/boards with parameters boardID='Board-B';Response-2: OK with parameters boardID='Board-B',position=[['R','N','B','Q','K','B','N','R'],['P','P','P','P','P','P','P','P'],[' ',' ',' ',' ',' ',' ',' ',' ' ],[' ',' ',' ',' ',' ',' ',' ',' '],[' ',' ',' ',' ',' ',' ',' ',' '],[' ',' ',' ',' ',' ',' ',' ',' '],['p','p','p','p','p','p','p','p'],['r','n','b','q','k','b','n','r']],isCheck=false;Request-3: User-A GET /api/boards with parameters boardID='Board-B';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to access this board.',errorDetails='The boardID is wrong or not authorized to access.''].|0
Context: A booking app where each user can only book, view and edit their own bookings. Requests: [Request-1: Customer-A POST /api/bookings with parameters from='New York',to='Paris',date='2024-06-01';Response-1: OK with parameters bookingID='Customer-A/123',from='New York',to='Paris',date='2024-06-01';Request-2: Customer-B GET /api/bookings with parameters bookingID='Customer-A/123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The booking id is wrong or not authorized to view.';Request-3: Customer-A PUT /api/bookings with parameters bookingID='Customer-A/123',date='2024-06-02';Response-3: OK with parameters bookingID='Customer-A/123',from='New York',to='Paris',date='2024-06-02']|0
Context: A music streaming website where each user can only listen and download their own playlists. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='Playlist-A';Response-1: OK with parameters playlistID='Playlist-A', title='My favorites',songs=['song1','song2','song3'];Request-2: User-B GET /api/playlists with parameters playlistID='Playlist-B';Response-2: OK with parameters playlistID='Playlist-B', title='Best of 2023',songs=['song4','song5','song6'];Request-3: User-A GET /api/playlists with parameters playlistID='Playlist-B';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to access this playlist.',errorDetails='The playlistID is wrong or not authorized to access.''].|0
Context: An e-learning platform where students should only be allowed to see their own coursework and grades. Teachers have access to all coursework and grades. Requests: [Request-1: Student-A GET /api/coursework with parameters courseId='Class-1';Response-1: OK with parameters coursework='Answer these 5 questions.';Request-2: Student-A GET /api/grades with parameters courseId='Class-1';Response-2: OK with parameters grade=80;Request-3: Student-B GET /api/coursework with parameters courseId='Class-1';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.', errorDetails='You are not authorized to view this coursework.';Request-4: Teacher GET /api/coursework with parameters courseId='Class-1';Response-4: OK with parameters coursework=['Answer these 5 questions.', 'Write a summary.'];Request-5: Teacher GET /api/grades with parameters courseId='Class-1';Response-5: OK with parameters grades=[70,80,90]]|0
Context: An e-learning platform with 2 types of users Student and Trainer, where Student can view courses they are enrolled in. Requests: [Request-1: Student-A GET /api/courses with parameters courseID='course-1';Response-1: Error with parameters Message='Error: course-1 not found in student courses'];[Request-2: Trainer-A GET /api/courses with parameters courseID='course-1';Response-2: Error with parameters Message='Error: an SQL syntax error occurred while discovering course-records']|2
Context: A mobile banking app where each user can only access and modify their own finances. Requests: [Request-1: User-A GET /api/finances with parameters accountID='User-B/12345';Response-1: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The account ID is wrong or not authorized to access.']; Request-2: User-B PUT /api/finances with parameters accountID='User-A/23456', amount='1000'; Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The account ID is wrong or not authorized to edit.'];|0
Context: A car-booking app where users can see only their own bookings. Requests: [Request-1: User-A GET /api/bookings with parameters bookingID='Booking-A';Response-1: OK with parameters bookingID='Booking-A',startTime='14-07-2023 14:00:00', endTime='15-07-2023 12:00:00';Request-2: User-B GET /api/bookings with parameters bookingID='Booking-B';Response-2: OK with parameters bookingID='Booking-B', startTime='16-07-2023 15:00:00', endTime='18-07-2023 10:00:00']|0
Context: A food delivery app where each user can only view their own order history. Requests: [Request-1: User-A GET /api/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',totalPrice=12,restaurant='Burger King';Request-2: User-B GET /api/orders with parameters orderID='Order-B';Response-2: OK with parameters orderID='Order-B',totalPrice=155,restaurant='Pizza Hut';Request-3: User-A GET /api/orders with parameters orderID='Order-B';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The order id is wrong or not authorized to display.']|0
Context: A messaging app where each user can only send, receive and delete their own messages. Requests: [Request-1: User-A POST /api/messages with parameters to='User-B',content='Hello World!';Response-1: OK with parameters messageID='User-A/123',date='2023-06-20 10:20:30',from='User-A',to='User-B',content='Hello World!';Request-2: User-B GET /api/messages with parameters messageID='User-A/123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The message id is wrong or not authorized to view.';Request-3: User-A DELETE /api/messages with parameters messageID='User-A/123';Response-3: OK with parameters messageID='User-A/123',status='Deleted']|0
Context: An online education platform where students can view and edit their own profiles. Requests: [Request-1: Student-A GET /api/student with parameters studentID='Student-A';Response-1: OK with parameters studentID='Student-A',name='John Doe',email='johndoe@example.com', school='ABC School';Request-2: Student-A POST /api/student with parameters name='John',email='john@example.com',school='XYZ School';Response-2: OK with parameters studentID='Student-A',name='John',email='john@example.com', school='XYZ School';Request-3: Student-B GET /api/student with parameters studentID='Student-A'; Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not authorized to access this student profile.'; Request-4: Student-A GET /api/student with parameters studentID='Student-B'; Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not authorized to access this student profile.'; Request-5: Admin GET /api/student with parameters studentID='Student-A'; Response-5: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='Only students can access their profiles.'] |0
Context: A messaging app where each user can only view conversations that they are part of. Requests: [Request-1: User-A GET /api/conversations with parameters conversationID='Conv-A';Response-1: OK with parameters messages=[Message-1, Message-2];Request-2: User-B GET /api/conversations with parameters conversationID='Conv-B';Response-2: OK with parameters messages=[Message-3];Request-3: User-A GET /api/conversations with parameters conversationID='Conv-B';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='The conversation id is not authorized to display.'] |0
Context: A banking platform where each user can view and modify their own account information. Requests: [Request-1: Customer-A PUT /api/accounts with parameters accountID='Customer-A', balance=1500; Response-1: OK with parameters accountID='Customer-A', balance=1500; Request-2: Customer-A GET /api/accounts with parameters accountID='Customer-A'; Response-2: OK with parameters accountID='Customer-A',balance=1500,transactionhistory=['Deposit $500 on 2023-05-06']; Request-3: Customer-B PUT /api/accounts with parameters accountID='Customer-A', balance=2500; Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.']|0
Context: An election voting app where voters can only view and modify their own ballot. Requests: [Request-1: Voter-A PUT /api/vote with parameters voteFor='candidate-123'; Response-1: OK with parameters voteFor='candidate-123'; Request-2: Voter-A GET /api/vote; Response-2: OK with parameters voteFor='candidate-123'; Request-3: Voter-B PUT /api/vote with parameters voteFor='candidate-234'; Response-3: OK with parameters voteFor='candidate-234'; Request-4: Voter-A GET /api/vote; Response-4: OK with parameters voteFor='candidate-123'.]|0
Context: A social media platform where users can share posts and follow other users. Users can only view and edit their own posts. Requests: [Request-1: User-A POST /api/posts with parameters title='Post-A', content='This is my first post.'; Response-1: OK with parameters postID='123',title='Post-A',content='This is my first post.',userID='User-A'; Request-2: User-A GET /api/posts with parameters postID='123';Response-2: OK with parameters postID='123',title='Post-A',content='This is my first post.',userID='User-A';Request-3: User-A PUT /api/posts with parameters title='Post-Changed', content='This is my edited post.',postID='123'; Response-3: OK with parameters postID='123',title='Post-Changed',content='This is my edited post.',userID='User-A';Request-4: User-B GET /api/posts with parameters postID='123'; Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not authorized to access this post.'; Request-5: Admin PUT /api/posts with parameters title='Post-Admin-Changed', content='This is an admin edited post.',postID='123'; Response-5: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not authorized to edit this post.'] |0
Context: A healthcare management system leaking prescription details in an error message Requests: [Request-1: Patient-A POST /prescriptions/new with parameters name='John-Doe', medication='Painkillers', dosage='20 mg';  Response-1: Error with parameters message='insert into prescription successful, patient name: John Doe, medication: Painkillers, dosage: 20 mg']|2
Context: A banking app where each customer can only view and edit their own account information. Tellers cannot access customer information. Requests: [Request-1: Customer-A GET /api/account with parameters accountNumber='1234567';Response-1: OK with parameters accountNumber='1234567',balance=5000;Request-2: Customer-B GET /api/account with parameters accountNumber='7654321';Response-2: OK with parameters accountNumber='7654321',balance=10000;Request-3: Teller GET /api/account with parameters accountNumber='1234567';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='Only customers can access account information.']|0
Context: A flight booking app where each user can view and modify only their own reservation information. Requests: [Request-1: Passenger-A POST /api/reservations with parameters flightNumber='FA123', itinerary=[{'origin': 'LAX', 'destination': 'SFO', 'duration': 360}]; Response-1: OK with parameters flightNumber='FA123',itinerary=[{'origin': 'LAX', 'destination': 'SFO', 'duration': 360},{'origin': 'SFO', 'destination': 'LAX', 'duration': 360}]; Request-2: Passenger-A GET /api/reservations; Response-2: OK with parameters reservations=[{'flightNumber': 'FA123', 'itinerary': [{'origin': 'LAX', 'destination': 'SFO', 'duration': 360},{'origin': 'SFO', 'destination': 'LAX', 'duration': 360}]}]; Request-3: Passenger-B POST /api/reservations with parameters flightNumber='FB234', itinerary=[{'origin': 'SFO', 'destination': 'JFK', 'duration': 480}]; Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.']|0
Context: A password manager website where each user can only access and modify their own passwords. Requests: [Request-1: User-A GET /api/passwords with parameters passwordID='User-B/123';Response-1: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The password ID is wrong or not authorized to access.'];Request-2: User-A PATCH /api/passwords with parameters passwordID='User-A/123', siteName='Facebook', URL='https://www.facebook.com', username='userFB', password='passwordFB'; Response-2: OK with parameters message='Password info updated.'];|0
Context: A messaging app where users can only read and send messages to other users they have added as friends. Requests: [Request-1: User-A GET /api/messages with parameters friendID='User-B';Response-1: OK with parameters friendID='User-B',messages=[{'message': 'Hello!', 'sent': '2024-06-01'}, {'message': 'How are you?', 'sent': '2024-06-02'}];Request-2: User-B GET /api/messages with parameters friendID='User-C';Response-2: OK with parameters friendID='User-C',messages=[{'message': 'Hi!', 'sent': '2024-06-02'}, {'message': 'I am good, thanks!', 'sent': '2024-06-03'}]]|0
Context: An online marketplace for advertisements where each seller can only see their own listings. Admins can view and delete all listings. Requests: [Request-1: Seller-A GET /api/listings with parameters listingID='Listing-A';Response-1: OK with parameters listingID='Listing-A',itemId='Item-A',price=50;Request-2: Seller-B GET /api/listings with parameters listingID='Listing-B';Response-2: OK with parameters listingID='Listing-B', itemId='Item-B', price=300;Request-3: Admin GET /api/listings with parameters listingID='Listing-A';Response-3: OK with parameters listingID='Listing-A',itemId='Item-A',price=50']|0
Context: A food delivery app where users can order food and view their order history. Requests: [Request-1: User-A POST /api/orders with parameters restaurant='Restaurant-A',foodName='Pizza',quantity='2',deliveryAddress='123 Main St.'; Response-1: OK with parameters orderID='User-A/1';Request-2: User-A GET /api/orders with parameters orderID='User-A/1';Response-2: OK with parameters orderID='User-A/1', restaurant='Restaurant-A',foodName='Pizza',quantity='2',status='Delivered';Request-3: User-B GET /api/orders with parameters orderID='User-B/1';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to view this order.', errorDetails='The order id is not authorized to display'] |0
Context: A chat app where users can only access and modify their own messages. Requests: [Request-1: User-A GET /api/messages with parameters messageID='Message-A';Response-1: OK with parameters messageID='Message-A',content='Hello World!',sender='User-A';Request-2: User-B GET /api/messages with parameters messageID='Message-A';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The message id is wrong or not authorized to view.';Request-3: User-A PUT /api/messages with parameters content='New Content';Response-3: OK with parameters messageID='Message-A',content='New Content',sender='User-A']|0
Context: An e-learning platform where students can access their own courses and assignments. Requests: [Request-1: Student-A GET /api/courses with parameters courseID=123;Response-1: OK with parameters courseID=123, title='Introduction to Programming', instructor='Dr. Johnson', assignments=[{'title': 'Assignment-1','dueDate': '05-05-2023'}, {'title':'Assignment-2','dueDate': '10-10-2023'}];Request-2: Student-B GET /api/courses with parameters courseID=456;Response-2: OK with parameters courseID=456, title='The History of Art', instructor='Professor Smith', assignments=[{'title': 'Essay-1','dueDate': '06-06-2023'}, {'title':'Essay-2','dueDate': '12-12-2023'}];Request-3: Student-A POST /api/assignments-submissions with parameters assignmentID='456/Assignment-2', file='Submission.docx';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You cannot submit assignments for another student'|0
Context: A cloud-based password storage and management application. Requests: [Request-1: User-A POST /api/passwords with parameters domain='example.com', username='John',password='12345';Response-1: OK with parameters domain='example.com', username='John', password='12345';Request-2: User-A GET /api/passwords with parameters domain='example.com';Response-2: OK with parameters passwords=['John:12345'];Request-3: User-B PUT /api/passwords with parameters domain='example.com',username='Admin',password='12345';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.', errorDetails='You do not own this password entry.']|0
Context: A task management app with 3 types of users User, Manager and Admin. Users can only view and modify their own tasks. Managers can only modify their own team tasks. Admins can view and modify all tasks. Requests: [Request-1: User-A POST /api/auth/login with parameters username='user-a',password='pass123';Response-1: Unauthorized with parameters success=false,message='username not found';Request-2: Manager-A GET /api/user/[Employee-A-taskId] with parameters;Response-2: OK with parameters taskId=[Employee-A-taskId],description='employee a finish quarterly report',status='completed'; Request-3: Admin PUT /api/user/[Manager-A-taskId] with parameters;Response-3: OK with parameters taskId=[Manager-A-taskId],description='manager a delegate task to team: create department report',status='assigned']|2
Context: An online course platform where students can access only their own course material. Requests: [Request-1: Student-A GET /api/courses with parameters courseId='course-123'; Response-1: OK with parameters courseId='course-123', content='course material'; Request-2: Student-B GET /api/courses with parameters courseId='course-234'; Response-2: OK with parameters courseId='course-234', content='course material'; Request-3: Student-A GET /api/courses with parameters courseId='course-234'; Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.']|0
Context: A social media platform where users can view and edit their own profile information. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters userID='User-A',name='John Doe',email='john.doe@gmail.com';Request-2: User-A PUT /api/profile with parameters name='Johnny',email='johnny.doe@gmail.com';Response-2: OK with parameters userID='User-A',name='Johnny',email='johnny.doe@gmail.com']|0
Context: A music streaming website where users can only browse and play the songs they have added to their personal playlists. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='User-A/123';Response-1: OK with parameters playlistID='User-A/123',songs=['Shape of You', 'Billie Jean', 'Bohemian Rhapsody'];Request-2: User-B GET /api/playlists with parameters playlistID='User-A/123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to access this playlist.',errorDetails='You are not the owner of this playlist.']|0
Context: A hotel booking app where users can see only their own bookings. Requests: [Request-1: User-A GET /api/bookings with parameters bookingID='Booking-A';Response-1: OK with parameters bookingID='Booking-A',arrival='14-07-2023 14:00:00',departure='15-07-2023 12:00:00';Request-2: User-B GET /api/bookings with parameters bookingID='Booking-B';Response-2: OK with parameters bookingID='Booking-B',arrival='16-07-2023 15:00:00',departure='18-07-2023 10:00:00'] |0
Context: A file hosting website where users can only access and manage their own files and folders. Requests: [Request-1: User-A GET /api/files with parameters folderID='User-A/Documents';Response-1: OK with parameters folderID='User-A/Documents',files=[{'filename': 'Report.docx', 'size': '20KB', 'created': '2023-05-01'}, {'filename': 'Presentation.ppt', 'size': '15KB', 'created': '2023-05-02'}];Request-2: User-B GET /api/files with parameters folderID='User-A/Documents';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to access this folder.',errorDetails='You are not the owner of this folder.']|0
Context: An online course platform where users can only access and modify their own courses. Requests: [Request-1: User-A GET /api/courses with parameters courseID='Course-A';Response-1: OK with parameters courseID='Course-A',description='Python Course',hours=20;Request-2: User-B GET /api/courses with parameters courseID='Course-A';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The course id is wrong or not authorized to view.';Request-3: User-A PUT /api/courses with parameters description='Java Course';Response-3: OK with parameters courseID='Course-A',description='Java Course',hours=20]|0
Context: An online shopping app, where each customer can only access and modify their own cart. Requests: [Request-1: Customer-A GET /api/cart with parameters cartID='Customer-A';Response-1: OK with parameters cartID='Customer-A',items=[{'name':'product-1','price':10},{'name':'product-2','price':20}];Request-2: Customer-B GET /api/cart with parameters cartID='Customer-A';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The cart id is wrong or not authorized to view.';Request-3: Customer-A PUT /api/cart with parameters cartID='Customer-A',items=[{'name':'product-1','price':10},{'name':'product-2','price':20},{'name':'product-3','price':30}];Response-3: OK with parameters cartID='Customer-A',items=[{'name':'product-1','price':10},{'name':'product-2','price':20},{'name':'product-3','price':30}]|0
Context: A reservation booking app where each user can only view and modify their own reservations. Requests: [Request-1: User-A POST /api/reservations with parameters hotelName='Hilton', roomID='123', startTime='2025-06-01', endTime='2025-06-08';Response-1: OK with parameters reservationID='1234', hotelName='Hilton', roomID='123', startTime='2025-06-01', endTime='2025-06-08';Request-2: User-B GET /api/reservations with parameters reservationID='1234';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to view this reservation.',errorDetails='The reservation id or role is not authorized to view.'];Request-3: User-A PUT /api/reservations with parameters endTime='2026-06-08';Response-3: OK with parameters reservationID='1234', hotelName='Hilton', roomID='123', startTime='2025-06-01', endTime='2026-06-08';Request-4: User-B PUT /api/reservations with parameters hotelName='Sheraton';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to update this reservation.',errorDetails='The reservation id or role is not authorized to update.']|0
Context: A banking app where each user can only view and edit their own accounts and transactions. Requests: [Request-1: User-A GET /api/accounts with parameters accID='User-B/123456';Response-1: OK with parameters message='This accID does not belong to you'];Request-2: User-A PUT /api/accounts with parameters balance=5000;Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not authorized to modify account balances';Request-3: User-B POST /api/transfer with parameters fromAccID='User-B/123456', toAccID='User-A/789012', amount=500;Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not authorized to transfer money from account [User-B/123456]'|0
Context: A file sharing website with 2 types of users User and Admin, where users can share their own files. Requests: [Request-1: User-A POST /api/files with parameters fileID='userA/file123';Response-1: Unauthorized with parameters success=false,message='User not logged in';Request-2: Admin GET /api/files with parameters fileID='/etc/passwd';Response-2: OK with parameters message='Access successful for fileID='/etc/passwd';response={'user':'root','password':'NLX...'}';]|2
Context: A social media app where users can only view, post and comment on their own photos. Requests: [Request-1: User-A POST /api/photos with parameters caption='Beautiful view'; Response-1: OK with parameters photoID='Photo-A', caption='Beautiful view', author='User-A'; Request-2: User-B GET /api/photos with parameters photoID='Photo-A'; Response-2: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.',errorDetails='The photo id is wrong or not authorized'; Request-3: User-A PUT /api/photos with parameters caption='The best view'; Response-3: OK with parameters photoID='Photo-A', caption='The best view', author='User-A'; Request-4: User-B PUT /api/photos with parameters caption='Awesome view'; Response-4: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.',errorDetails='The photo id is wrong or not authorized']|0
Context: An ecommerce app with 3 types of users Customer, Merchant and Admin. Customers and Merchants can only view and edit their own data. Admins can view and edit all data. Requests: [Request-1: Admin GET /workshop/api/users with parameters limit=10;Response-1: Error with parameters message='Error executing query SELECT * FROM users LIMIT 10 - Permission denied']|2
Context: A news app where users can create and share articles. Each user can only edit or delete their own articles. Requests: [Request-1: User-A POST /api/articles with parameters title='New article',content='This is my new article.';Response-1: OK with parameters articleID='1',title='New article';Request-2: User-A PUT /api/articles with parameters articleID='1',newTitle='Updated article',newContent='Updated content';Response-2: OK with parameters articleID='1',title='Updated article',content='Updated content';Request-3: User-B DELETE /api/articles with parameters articleID='1';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='You can only delete your own articles.']|0
Context: An email platform where each user can only view their own emails. Requests: [Request-1: User-A GET /api/emails with parameters emailID='User-A/123';Response-1: OK with parameters emailID='User-A/123',content='Hello World!',date='2023-06-20 10:20:30',sender='def@abc.com',recipient='User-A';Request-2: User-A GET /api/emails with parameters emailID='User-B/123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The email id is wrong or not authorized to view.'];Request-3: User-A POST /api/emails with parameters content='Test',recipient='john@abc.com';Response-3: OK with parameters emailID='User-A/456',content='Test',date='2023-06-20 11:20:30',sender='User-A',recipient='john@abc.com']|0
Context: An inventory management app where each user can only view and update their own inventory list. Requests: [Request-1: User-A GET /api/inventory with parameters itemID='1234';Response-1: OK with parameters itemName='Jeffery', itemPrice='100', itemQuantity='10'; Request-2: User-B GET /api/inventory with parameters itemName='Jeffery';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to access this inventory item.',errorDetails='The item id or role is not authorized to view.'];Request-3: User-A PUT /api/inventory with parameters itemQuantity='11';Response-3: OK with parameters itemName='Jeffery', itemPrice='100', itemQuantity='11';Request-4: User-B PUT /api/inventory with parameters itemPrice='120';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to update this inventory item.',errorDetails='The item id or role is not authorized to update.']|0
Context: A workout tracking app where each user has access to all workout data. Requests: [Request-1: User-A GET /api/workouts with parameters workoutID='123';Response-1: OK with parameters workoutID='123', exercise='Squats',weight=100,reps=10,start_time='2024-06-07 13:00';Request-2: User-A PUT /api/workouts with parameters workoutID='124', exercise='Deadlifts',weight=150,reps=10,start_time='2024-06-08 13:00';Response-2: OK with parameters workoutID='124', exercise='Deadlifts',weight=150,reps=10,start_time='2024-06-08 13:00';Request-3: User-A DELETE /api/workouts with parameters workoutID='124';Response-3: OK with parameters workoutID='124']|0
Context: A file sharing app, where each user can only view and download their own files. Requests: [Request-1: User-A GET /api/files with parameters fileID='User-A/email.docx';Response-1: OK with parameters fileID='User-A/email.docx',content='Hello World!',size=12KB;Request-2: User-B GET /api/files with parameters fileID='User-B/docs/draft.docx';Response-2: OK with parameters fileID='User-B/docs/draft.docx', content=['...'],size=1.3MB;Request-3: User-A GET /api/files with parameters fileID='User-B/email.docx';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The file id is wrong or not authorized to view.';Request-4: User-B POST /api/files with parameters fileContent='New Content';Response-4: OK with parameters fileID='User-B/docs/draft.docx',content='New Content',size=1.2MB]|0
Context: A news app where each user can only access and edit their own news preferences. Requests: [Request-1: User-A GET /api/news with parameters userID='User-A';Response-1: OK with parameters userID='User-A',preferences=['Politics','Technology'];Request-2: User-B GET /api/news with parameters userID='User-B';Response-2: OK with parameters userID='User-B',preferences=['Business','Sports'];Request-3: User-A POST /api/news with parameters preferences=['Science','Health'];Response-3: OK with parameters userID='User-A', preferences=['Politics','Technology','Science','Health']]|0
Context: A music streaming app, where users can access and modify only their own playlists. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='Playlist-A';Response-1: OK with parameters playlistID='Playlist-A', name='Rock', tracks=['track1','track2','track3'];Request-2: User-B GET /api/playlists with parameters playlistID='Playlist-B';Response-2: OK with parameters playlistID='Playlist-B', name='Hip-Hop', tracks=['track4','track5','track6'];Request-3: User-A PUT /api/playlists with parameters playlistID='Playlist-A', tracks=['track1'];Response-3: OK with parameters playlistID='Playlist-A', name='Rock', tracks=['track1'];Request-4: User-B PUT /api/playlists with parameters playlistID='Playlist-A', tracks=['track1','track2','track3'];Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The playlistID does not belong to this user.'Request-5: Admin GET /api/playlists with parameters playlistID='Playlist-A';Response-5: Not Found with parameters errorCode=404,errorMessage='Playlist not found.'].|0
Context: A task management app where each user can only create, view and edit their own tasks. Requests: [Request-1: User-A POST /api/tasks with parameters title='Complete Homework',description='Math and Science',date='2023-06-20 10:20:30';Response-1: OK with parameters taskID='User-A/123',title='Complete Homework',description='Math and Science',date='2023-06-20 10:20:30',status='Open';Request-2: User-B GET /api/tasks with parameters taskID='User-A/123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The task id is wrong or not authorized to view.';Request-3: User-A PUT /api/tasks with parameters taskID='User-A/123',status='In Progress';Response-3: OK with parameters taskID='User-A/123',title='Complete Homework',description='Math and Science',date='2023-06-20 10:20:30',status='In Progress']|0
Context: An email service where each user can only access and modify their own email messages. Admins cannot read user emails. Requests: [Request-1: User-A GET /api/emails with parameters emailID='Email-A';Response-1: OK with parameters emailID='Email-A',subject='Hello',from='friend@email.com';Request-2: User-B GET /api/emails with parameters emailID='Email-B';Response-2: OK with parameters emailID='Email-B',subject='Order Confirmation',from='shopping@email.com']|0
Context: A calendar app where users can only view and edit their own events. Requests: [Request-1: User-A GET /api/events with parameters eventID='Event-A';Response-1: OK with parameters eventID='Event-A',title='Meeting',startTime='2024-06-01T10:00:00Z',endTime='2024-06-01T12:00:00Z';Request-2: User-B GET /api/events with parameters eventID='Event-B';Response-2: OK with parameters eventID='Event-B',title='Interview',startTime='2024-06-15T14:00:00Z',endTime='2024-06-15T16:00:00Z';Request-3: User-A PUT /api/events with parameters title='New Meeting';Response-3: OK with parameters eventID='Event-A',title='New Meeting',startTime='2024-06-01T10:00:00Z',endTime='2024-06-01T12:00:00Z']|0
Context: A discussion forum where users can only view, post and comment on their own posts. Requests: [Request-1: User-A POST /api/posts with parameters content='Wow this is cool!'; Response-1: OK with parameters postID='Post-A', content='Wow this is cool', commentCount=0, author='User-A'; Request-2: User-B GET /api/posts with parameters postID='Post-A'; Response-2: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.',errorDetails='The post id is wrong or not authorized'; Request-3: User-A DELETE /api/posts with parameters postID='Post-B'; Response-3: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.',errorDetails='The post id is wrong or not authorized']|0
Context: A ticketing system where customers can view their own tickets and agents can review all tickets. Requests: [Request-1: Customer-A GET /api/tickets with parameters ticketID='Ticket-A';Response-1: OK with parameters ticketID='Ticket-A',message='I have a problem with my device', status='open']; Request-2: Customer-B GET /api/tickets with parameters ticketID='Ticket-B';Response-2: OK with parameters ticketID='Ticket-B',message='I am having issues with the app login', status='open']; Request-3: Agent-A GET /api/tickets with parameters ticketID='Ticket-B'; Response-3: OK with parameters ticketID='Ticket-B',message='I am having issues with the app login', status='open',assignee='Agent-A',assigner='Admin']; Request-4: Agent-A PUT /api/tickets with parameters ticketID='Ticket-A',status='closed';Response-4: OK with parameters ticketID='Ticket-A',message='I have a problem with my device', status='closed']; Request-5: Customer-A GET /api/tickets with parameters ticketID='Ticket-C';Response-5: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='The ticket ID is not authorized to display.']|0
Context: A personal finance app where users can manage their own transactions and bills. Requests: [Request-1: User-A GET /api/transactions with parameters txnID=1234;Response-1: OK with parameters message='This transaction does not belong to you'];Request-2: User-B GET /api/bills with parameters billID=5678;Response-2: OK with parameters dueDate='2024-07-01',amount=250;Request-3: User-A POST /api/bills-payments with parameters billID=5678, amount=250;Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not authorized to pay bills for another user'|0
Context: A task manager app where users can only view and edit their own tasks. Requests: [Request-1: User-A GET /api/tasks with parameters taskID='User-A/123';Response-1: OK with parameters taskID='User-A/123',title='Finish Report',status='Pending',deadline='2024-06-01';Request-2: User-A PUT /api/tasks with parameters taskID='User-A/123',status='Completed';Response-2: OK with parameters taskID='User-A/123',title='Finish Report',status='Completed',deadline='2024-06-01']|0
Context: A real estate app with two types of users: Home Seekers and home owners. Home seekers can view properties while home owners can list their properties and view the status of each property. Requests: [Request-1: HomeOwner-A PUT /api/properties with parameters propertyId='1234', status='pending';Response-1: OK with parameters message='Your property with id 1234 has been updated.', email='johndoe@gmail.com';]|2
Context: A video streaming app where each user can only access and view their own videos. Requests: [Request-1: User-A GET /api/videos with parameters videoID='User-B/video1.mp4';Response-1: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The video ID is wrong or not authorized to access.']; Request-2: User-B PUT /api/videos with parameters videoID='User-A/video2.avi', content='New content'; Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The video ID is wrong or not authorized to edit.'];]|0
Context: A cloud-based workspace where users can create documents which can only be edited by the owner of the respective document. Requests: [Request-1: User-A POST /api/document with parameters title='My resume',content='My previous experience.';Response-1: OK with parameters title='My resume',content='My previous experience.';Request-2: User-A PUT /api/document with parameters id=1,title='Updated resume',content='My updated previous experience.';Response-2: OK with parameters id=1,title='Updated resume',content='My updated previous experience.';Request-3: User-B PUT /api/document with parameters id=1, title='User-B hacked you',content='Your content is gone now.';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.', errorDetails='You do not own this document.']|0
Context: A survey system where participants can only view and modify their own responses. Requests: [Request-1: Participant-A GET /api/survey/responses with parameters responseID='001'; Response-1: OK with parameters responseID='001', question1='5', question2='7', question3='10'; Request-2: Participant-B GET /api/survey/responses with parameters responseID='001'; Response-2: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.',errorDetails='The response id is wrong or not authorized'; Request-3: Participant-A PUT /api/survey/responses with parameters responseID='001', question1='4'; Response-3: OK with parameters responseID='001', question1='4', question2='7', question3='10'; Request-4: Participant-B PUT /api/survey/responses with parameters responseID='002', question1='5'; Response-4: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.',errorDetails='The response id is wrong or not authorized']|0
Context: An insurance app where clients can view their policies and claims. Requests: [Request-1: Client-A GET /api/policies with parameters policyID='Policy-A'; Response-1: OK with parameters policyID='Policy-A', startDate='2021-05-01', endDate='2022-05-01', totalAmount='500',dueAmount='100']; Request-2: Client-A GET /api/claims with parameters claimID='Claim-A';Response-2: OK with parameters claimID='Claim-A',claimDate='2021-05-10',status='Pending',dueAmount='0']; Request-3: Client-A GET /api/policies with parameters policyID='Policy-B';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.', errorDetails='The policy ID is not authorized to display.']|0
Context: A web app that stores blog content, where only the writer of the content can edit or delete it. Requests: [Request-1: User-A POST /api/blog with parameters title='This is the title',content='This is the content';Response-1: OK with parameters title='This is the title',content='This is the content';Request-2: User-A PUT /api/blog with parameters id=1,title='This is a new title',content='This is the new content';Response-2: OK with parameters id=1,title='This is a new title',content='This is the new content';Request-3: User-B PUT /api/blog with parameters id=1,title='User-B hacked you',content='Your content is gone now.';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.', errorDetails='You do not own this blog post.']|0
Context: An online education platform where each user can view and control their own courses only. Requests: [Request-1: User-A GET /api/courses with parameters courseID='Course-A';Response-1: OK with parameters courseID='Course-A',name='Mathematics 101',time='10 hours',isCompleted=False;Request-2: User-B GET /api/courses with parameters courseID='Course-A';Response-2: OK with parameters courseID='Course-A',name='Mathematics 101',time='10 hours',isCompleted=False;Request-3: User-A PUT /api/courses with parameters courseID= 'Course-A',isCompleted=True;Response-3: OK with parameters courseID='Course-A',name='Mathematics 101',time='10 hours',isCompleted=True;Request-4: User-A PUT /api/courses with parameters courseID= 'Course-B',isCompleted=True;Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The courseID does not belong to this user.';Request-5: Faculty GET /api/courses with parameters courseID='Course-A';Response-5: OK with parameters courseID='Course-A',name='Mathematics 101',time='10 hours',isCompleted=False].|1
Context: A news website where each user can only view and comment on their own articles. Requests: [Request-1: User-A GET /api/articles with parameters articleID='Article-A';Response-1: OK with parameters articleID='Article-A', title='COVID19 vaccine news',content='A new vaccine has been found!', author='User-A';Request-2: User-B GET /api/articles with parameters articleID='Article-B';Response-2: OK with parameters articleID='Article-B', title='Mars mission news',content='NASA launches new spacecraft', author='User-B';Request-3: User-A GET /api/articles with parameters articleID='Article-B';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to access this article.',errorDetails='The articleID is wrong or not authorized to access.''].|0
Context: A social media app where each user can view and edit their own profiles and posts. Requests: [Request-1: User-A GET /api/profile with parameters profileID='User-B';Response-1: OK with parameters message='This profile is not available to you'];Request-2: User-B POST /api/posts with parameters text='Hello World';Response-2: OK with parameters message='Post created successfully';Request-3: User-A DELETE /api/posts with parameters postID=123;Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not authorized to delete post with ID 123'|0
Context: A task management app where each user can only access their own tasks. Requests: [Request-1: User-A GET /api/tasks with parameters taskID='123';Response-1: OK with parameters taskID='123',description='Task 1',priority='High',status='Incomplete';Request-2: User-B GET /api/tasks with parameters taskID='123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The task ID is wrong or not authorized to access.'; Request-3: User-A POST /api/tasks with parameters description='Task 2',priority='Low'; Response-3: OK with parameters taskID='124',description='Task 2',priority='Low',status='Incomplete']|0
Context: An online gaming app where each player can only access their own game records. Requests: [Request-1: Player-A GET /api/games with parameters gameID='Game-A';Response-1: OK with parameters gameID='Game-A',duration=10,results=['Win','Lose'];Request-2: Player-B GET /api/games with parameters gameID='Game-B';Response-2: OK with parameters gameID='Game-B',duration=5,results=['Lose','Win'];Request-3: Player-A GET /api/games with parameters gameID='Game-B';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The game id is wrong or not authorized to view.']|0
Context: A stock trading app where each user can only buy/sell their own shares. Requests: [Request-1: User-A GET /api/shares with parameters shareID='Share-A';Response-1: OK with parameters shareID='Share-A',companyName='XYZ Inc',price=127.9,quantity=100;Request-2: User-B GET /api/shares with parameters shareID='Share-A';Response-2: OK with parameters shareID='Share-A',companyName='XYZ Inc',price=127.9,quantity=200;Request-3: User-A PUT /api/shares with parameters shareID= 'Share-A',quantity=120;Response-3: OK with parameters shareID='Share-A',companyName='XYZ Inc',price=127.9,quantity=120;Request-4: User-A PUT /api/shares with parameters shareID= 'Share-B',quantity=120;Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The shareID does not belong to this user.';Request-5: Admin GET /api/shares with parameters shareID='Share-C';Response-5: Not Found with parameters errorCode=404,errorMessage='Share not found.'].|1
Context: A banking app allowing customers to view their transactional history. Requests: [Request-1: Customer-A GET /api/transactions with parameters transactionID='1234';Response-1: OK with parameters from='Saving A/c',to='Merchant A/C', amount='1000', transactionTime='2023-05-01';Request-2: Customer-B GET /api/transactions with parameters transactionID='3456';Response-2: OK with parameters from='Checking A/c',to='Merchant A/C', amount='2000', transactionTime='2023-05-02']|0
Context: A ride-hailing app where each driver can see only their ride requests. Requests: [Request-1: Driver-A GET /api/rides with parameters rideID='Ride-A';Response-1: OK with parameters rideID='Ride-A',start='30-05-2023 9:00:00',destination='Box Hill';Request-2: Driver-B GET /api/rides with parameters rideID='Ride-B';Response-2: OK with parameters rideID='Ride-B', start='30-05-2023 11:00:00',destination='CBD']|0
Context: An HR management system where employees can see their own payroll information. Requests: [Request-1: Employee-A GET /api/payroll with parameters userID='Employee-A'; Response-1: OK with parameters userID='Employee-A', grossPay=2500, taxes=500, deductions=350, netPay=1650; Request-2: Employee-B GET /api/payroll with parameters userID='Employee-B'; Response-2: OK with parameters userID='Employee-B', grossPay=3000, taxes=700, deductions=450, netPay=1850; Request-3: Manager-A GET /api/payroll with parameters userID='Employee-A'; Response-3: OK with parameters userID='Employee-A', grossPay=2500, taxes=500, deductions=350, netPay=1650.]|1
Context: A job portal with 2 types of users Job Seeker and Recruiter. Job seekers can view their applications. Requests: [Request-1: Job Seeker-A GET /api/applications with parameters applicationID='application-A';Response-1: Error with parameters message='Application not found for 'jobAId''];|2
Context: A movie streaming app where each user can access only their own watchlist. Requests: [Request-1: User-A POST /api/watchlist with parameters movieID='tt1010101', title='The Matrix', year=1999; Response-1: OK with parameters movieID='tt1010101', title='The Matrix', year=1999; Request-2: User-A GET /api/watchlist; Response-2: OK with parameters watchlist=['The Matrix']; Request-3: User-B POST /api/watchlist with parameters movieID='tt2020202', title='The Dark Knight', year=2008; Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.']|0
Context: A fitness tracking platform where each user can only view and edit their own exercise data. Trainers cannot modify user data. Requests: [Request-1: User-A GET /api/exercises with parameters exerciseID='Exercise-A';Response-1: OK with parameters exerciseID='Exercise-A',name='Push-ups',caloriesBurnt=100,duration=20mins;Request-2: User-B GET /api/exercises with parameters exerciseID='Exercise-B';Response-2: OK with parameters exerciseID='Exercise-B',name='Running',caloriesBurnt=200,duration=30mins']|0
Context: A car-sharing app where users can rent and reserve cars. Each user can only make reservations for their own account. Requests: [Request-1: User-A POST /api/rentals with parameters carID='car1',startDate='2022-06-01',endDate='2022-06-07';Response-1: OK with parameters reservationID='Reservation-1',carID='car1',startDate='2022-06-01',endDate='2022-06-07',userID='User-A';Request-2: User-B POST /api/rentals with parameters carID='car2',startDate='2022-06-01',endDate='2022-06-07';Response-2: OK with parameters reservationID='Reservation-2',carID='car2',startDate='2022-06-01',endDate='2022-06-07',userID='User-B';Request-3: User-C GET /api/rentals with parameters reservationID='Reservation-1';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='You can only view your own reservations.']|0
Context: A music streaming app where each user can only stream and download their own music content. Other users cannot download or stream other user's music. Requests: [Request-1: User-A GET /api/music with parameters songID='Song-A';Response-1: OK with parameters songID='Song-A',title='Rockstar',album='Bon Jovi',artist='Bon Jovi',duration=4:20;Request-2: User-B GET /api/music with parameters songID='Song-B';Response-2: OK with parameters songID='Song-B',title='Hotel California',album='Eagles',artist='Eagles',duration=6:30];Request-3: User-A GET /api/music with parameters songID='Song-B';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The songID is wrong or not authorized to download.';Request-4: User-A POST /api/music with parameters songTitle='Imagine';Response-4: OK with parameters songID='Song-C',title='Imagine',album='John Lennon',artist='John Lennon',duration=4:45] |1
Context: A messaging app where each user can only see and send messages to their own contacts. Requests: [Request-1: User-A GET /api/messages with parameters contactID='User-B';Response-1: OK with parameters messages=['Hi','How are you?','Got your message!','Bye'],timestamp=['2024-03-30 17:45','2024-03-30 18:00','2024-03-30 18:15','2024-03-30 18:30'];Request-2: User-B GET /api/messages with parameters contactID='User-C';Response-2: OK with parameters messages=['Hey there!','I am doing great, thank you for asking.','No worries!'],timestamp=['2024-03-30 18:45','2024-03-30 19:00','2024-03-30 19:15'];Request-3: User-A GET /api/messages with parameters contactID='User-C';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to access this contact.',errorDetails='The contactID is wrong or not authorized to access.''].|0
Context: A banking app where users can only access and modify their own accounts. Requests: [Request-1: User-A GET /api/accounts with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A',balance=500;Request-2: User-B GET /api/accounts with parameters accountID='Account-A';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The account id is wrong or not authorized to view.';Request-3: User-A PUT /api/accounts with parameters balance=1000;Response-3: OK with parameters accountID='Account-A',balance=1000]|0
Context: A file-sharing app where each user can only access their own files, except for group folders. Requests: [Request-1: User-A GET /files with parameters fileID='User-A/file.docx';Response-1: OK with parameters fileID='User-A/file.docx',content='Hello World!',size=12KB; Request-2: User-B GET /files with parameters fileID='User-A/report.pdf';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to access this file.',errorDetails='The file does not belong to you.';Request-3: User-C GET /files with parameters fileID='Group/shared.docx';Response-3: OK with parameters fileID='Group/shared.docx', content='Welcome to our company!', size=3MB]|0
Context: A banking app where each user can only view and modify their own account details. Requests: [Request-1: User-A GET /api/accounts with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A',balance=15000;Request-2: User-B GET /api/accounts with parameters accountID='Account-B';Response-2: OK with parameters accountID='Account-B',balance=10000;Request-3: User-A PUT /api/accounts with parameters accountID='Account-B',balance=12000;Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The account id is wrong or not authorized to edit.';Request-4: User-A GET /api/accounts with parameters accountID='Account-B';Response-4: OK with parameters accountID='Account-B',balance=10000;Request-5: Admin GET /api/accounts with parameters accountID='Account-A';Response-5: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='Admins are not allowed to access account details.']|1
Context: An online banking platform where users can view and access all bank accounts. Requests: [Request-1: User-A GET /api/accounts with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A',balance=10000;Request-2: User-B GET /api/accounts with parameters accountID='Account-B';Response-2: OK with parameters accountID='Account-B',balance=15000;Request-3: User-A PUT /api/accounts with parameters accountID='Account-B',balance=20000;Response-3: OK with parameters accountID='Account-B',balance=20000];.|1
Context: An online university platform where students can view and edit their own course details. Professors cannot access student data. Requests: [Request-1: Student-A GET /api/courses with parameters courseID='Course-A';Response-1: OK with parameters courseID='Course-A',name='Introduction to Computer Science',professor='Dr. Smith';Request-2: Student-B GET /api/courses with parameters courseID='Course-B';Response-2: OK with parameters courseID='Course-B',name='Calculus',professor='Dr. Johnson';Request-3: Professor GET /api/courses with parameters courseID='Course-A';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='Only students are allowed to access course information.']|0
Context: An HR portal where all employees have access to all other employee data. Requests: [Request-1: Employee-A GET /api/employees with parameters id='Employee-B';Response-1: OK with parameters id='Employee-B', name='Jane Doe',designation='Business Analyst',salary=7000;Request-2: Employee-B GET /api/employees with parameters id='Employee-C';Response-2: OK with parameters id='Employee-C', name='John Doe',designation='Software Engineer',salary=6000;Request-3: Employee-A POST /api/employees with parameters name='Tom',designation='HR Manager',salary=10000;Response-3: OK with parameters id='Employee-D', name='Tom',designation='HR Manager',salary=10000];.|1
Context: An online course website where each student can only view and download their own course materials. Requests: [Request-1: Student-A GET /api/materials with parameters materialID='Mat-A'; Response-1: OK with parameters materialID='Mat-A', content='Introduction to Python', type='video'; Request-2: Student-B GET /api/materials with parameters materialID='Mat-B'; Response-2: OK with parameters materialID='Mat-B', content='Introduction to Java', type='pdf'; Request-3: Student-A GET /api/materials with parameters materialID='Mat-B'; Response-3: OK with parameters materialID='Mat-B', content='Introduction to Java', type='pdf'].|1
Context: A social media app with three types of users: Normal users, Superusers and Admins. Normal and superusers can only edit their own posts. Admins can view and edit any post. Requests: [Request-1: Normal User-A GET /api/posts with parameters postID='123'; Response-1: OK with parameters postID='123', content='Hello World', author='User-A'; Request-2: Superuser-B GET /api/posts with parameters postID='246'; Response-2: OK with parameters postID='246', content='How are you?', author='Superuser-B'; Request-3: Normal User-A PUT /api/posts with parameters postID='246', content='How is your day going?'; Response-3: OK with parameters postID='246', content='How is your day going?', author='Superuser-B'; Request-4: Superuser-B PUT /api/posts with parameters postID='123', content='Editing another user post'; Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The post id is wrong or not authorized to edit.'; Request-5: Admin GET /api/posts with parameters postID='246'; Response-5: OK with parameters postID='246', content='How is your day going?', author='Superuser-B']|1
Context: A music streaming app where each user can only access their own playlists. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='123';Response-1: OK with parameters playlistID='123',name='My Favorites',tracks=['Song 1', 'Song 2', 'Song 3']; Request-2: User-B GET /api/playlists with parameters playlistID='123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The playlist ID is wrong or not authorized to access.';Request-3: User-A POST /api/playlists with parameters name='My Workouts',tracks=['Song 4', 'Song 5']; Response-3: OK with parameters playlistID='124',name='My Workouts',tracks=['Song 4', 'Song 5']]|0
Context: An event management app where users can only view and manage their own events. Requests: [Request-1: User-A GET /api/events with parameters eventID='User-A/123';Response-1: OK with parameters eventID='User-A/123',name='Birthday Party',location='My House',date='2024-06-01';Request-2: User-B GET /api/events with parameters eventID='User-A/123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to access this event.',errorDetails='You are not the owner of this event.']|0
Context: A social media platform where each user can only view and modify their own posts and comments. Requests: [Request-1: User-A POST /api/posts with parameters postContent='Hello World!';Response-1: OK with parameters postID='1234', postContent='Hello World!', dateTime='2023-05-01';Request-2: User-B POST /api/comments with parameters postID='1234', commentContent='Nice!';Response-2: OK with parameters commentID='3456', postID='1234', commentContent='Nice!', dateTime='2023-05-02';Request-3: User-A DELETE /api/posts with parameters postID='3456';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to delete this post.',errorDetails='The post id or role is not authorized to delete.']|0
Context: A music app where users can create and share playlists. Each user can only modify their own playlists. Requests: [Request-1: User-A POST /api/playlists with parameters title='Workout music';Response-1: OK with parameters playlistID='Workout music',tracks=['Track-1','Track-2'];Request-2: User-A PUT /api/playlists with parameters playlistID='Workout music',add='Track-3';Response-2: OK with parameters playlistID='Workout music',tracks=['Track-1','Track-2','Track-3'];Request-3: User-B PUT /api/playlists with parameters playlistID='Workout music',add='Track-4';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='You can only modify your own playlists.']|0
Context: A ticket-booking platform where users can book/show only their own tickets. Requests: [Request-1: User-A GET /api/tickets with parameters ticketID='Ticket-A';Response-1: OK with parameters ticketID='Ticket-A', departure='14-07-2023 12:00:00',arrival='14-07-2023 13:00:00';Request-2: User-B GET /api/tickets with parameters ticketID='Ticket-B';Response-2: OK with parameters ticketID='Ticket-B', departure='14-07-2023 15:00:00',arrival='14-07-2023 16:00:00']|0
Context: A password manager where each user can only access their own passwords. Requests: [Request-1: User-A GET /api/passwords with parameters passwordID='facebook';Response-1: OK with parameters passwordID='facebook',username='john.doe',password='12345';Request-2: User-B GET /api/passwords with parameters passwordID='facebook';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The password ID is wrong or not authorized to access.'; Request-3: User-A PUT /api/passwords with parameters passwordID='facebook',username='jane.doe';Response-3: OK with parameters passwordID='facebook',username='jane.doe',password='12345']|0
Context: An online gaming platform where each user can only view their own game leaderboard. Requests: [Request-1: User-A GET /api/leaderboard with parameters gameID='Game-A';Response-1: OK with parameters score=1500;Request-2: User-B GET /api/leaderboard with parameters gameID='Game-B';Response-2: OK with parameters score=2000;Request-3: User-A GET /api/leaderboard with parameters gameID='Game-B'; Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The game id is wrong or not authorized to display.']|0
Context: A messaging app where users can only access their own messages. Requests: [Request-1: User-A GET /api/messages with parameters messageID='Message-A';Response-1: OK with parameters messageID='Message-A',content='Hello World!',sender='User-A',receiver='User-B';Request-2: User-B GET /api/messages with parameters messageID='Message-B';Response-2: OK with parameters messageID='Message-B',content='Bye World!',sender='User-B',receiver='User-A';Request-3: User-A GET /api/messages with parameters messageID='Message-B';Response-3: OK with parameters messageID='Message-B',content='Bye World!',sender='User-B',receiver='User-A']|1
Context: An online rental app where each customer can view their own rental agreements. Requests: [Request-1: Customer-A GET /api/agreements with parameters agreementID='Agreement-A';Response-1: OK with parameters agreementID='Agreement-A',rentalItem='Car-X';Request-2: Customer-B GET /api/agreements with parameters agreementID='Agreement-B';Response-2: OK with parameters agreementID='Agreement-B', rentalItem='Bike-Y';Request-3: Customer-A GET /api/agreements with parameters agreementID='Agreement-B';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.', errorDetails='The agreement id is not authorized to display.']|0
Context: A dating app, where users can see only their own profiles. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters userID='User-A',location='Boston',gender='Male', height='184cm';Request-2: User-B GET /api/profile with parameters userID='User-B';Response-2: OK with parameters userID='User-B',location='Houston',gender='Female', height='160cm';Request-3: User-A PUT /api/profile with parameters location='New York';Response-3: OK with parameters userID='User-A',location='New York',gender='Male', height='184cm';Request-4: User-B PUT /api/profile with parameters gender='Other';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The userID does not belong to this user.';Request-5: Admin GET /api/profile with parameters userID='User-A';Response-5: OK with parameters userID='User-A',location='Boston',gender='Male', height='184cm'].|0
Context: A ticket booking platform where users can only view and book their own tickets. Requests: [Request-1: User-A GET /api/tickets with parameters ticketID='User-A/123';Response-1: OK with parameters ticketID='User-A/123',type='Concert',artist='Ed Sheeran',venue='Madison Square Garden';Request-2: User-B GET /api/tickets with parameters ticketID='User-B/456';Response-2: OK with parameters ticketID='User-B/456',type='Conference',speaker='John Doe',venue='Moscone Center']|0
Context: A health app where users can see only their own health data. Requests: [Request-1: User-A GET /api/health with parameters healthID='Health-A';Response-1: OK with parameters healthID='Health-A',value=75;Request-2: User-B GET /api/health with parameters healthID='Health-B';Response-2: OK with parameters healthID='Health-B', value=120;Request-3: User-A PUT /api/health with parameters value=85;Response-3: OK with parameters healthID='Health-A',value=85'] |0
Context: A social network platform where users can create posts visible only to their friends. Each user has friends stored in their profile. Requests: [Request-1: User-A GET /api/friends;Response-1: OK with parameters friends=['User-B', 'User-C'];Request-2: User-A POST /api/post with parameters content='My Happy day.',friends=['User-B', 'User-C'];Response-2: OK with parameters content='My Happy Day.',postedTo=['User-B', 'User-C'];Request-3: User-B GET /api/posts;Response-3: OK with parameters posts=['User-A posted: My Happy Day.']]|0
Context: A payroll management software where an admin can only view and manage the payroll data of employees. Requests: [Request-1: Admin GET /api/payroll with parameters employeeID='Employee-B-123';Response-1: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The employee ID is wrong or not authorized to access.'];Request-2: Admin POST /api/payroll with parameters employeeID='Employee-A-567', salary='5000';Response-2: OK with parameters message='Payroll updated successfully.'];|0
Context: A social media app where each user can only view their own profile. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters userID='User-A',name='John Smith',bio='A software engineer',posts=['post-1','post-2'];Request-2: User-B GET /api/profile with parameters userID='User-A';Response-2: OK with parameters userID='User-A',name='John Smith',bio='A software engineer',posts=['post-1','post-2'];Request-3: User-A PUT /api/profile with parameters name='Jane Smith';Response-3: OK with parameters userID='User-A',name='Jane Smith',bio='A software engineer',posts=['post-1','post-2'];Request-4: User-B PUT /api/profile with parameters name='Jane Smith';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The user id is wrong or not authorized to edit.';Request-5: Admin GET /api/profile with parameters userID='User-A';Response-5: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='Admins cannot view user profiles.']|1
Context: A school management system where each teacher can only view and update their own subjects and student details. Requests: [Request-1: Teacher-A GET /api/subjects with parameters subjectID='Math';Response-1: OK with parameters subjectID='Math', students=['John Doe', 'Jane Smith','Michael Jordan'];Request-2: Teacher-B GET /api/subjects with parameters subjectID='Science';Response-2: OK with parameters subjectID='Science', students=['Emily Davis', 'William Baker'];Request-3: Teacher-A PUT /api/subjects with parameters students=['Tom Edwards', 'Jerry Finch'];Response-3: OK with parameters subjectID='Math', students=['Tom Edwards', 'Jerry Finch'];Request-4: Teacher-A GET /api/subjects with parameters subjectID='Science';Response-4: Forbidden with parameters errorCode=403,errorMessage='You are not authorized to view this subject',errorDetails='Only Teacher-B can view this subject data'.]|0
Context: A stock trading platform leaking stock portfolio composition on an error message Requests: [Request-1: Trader-A PUT /buy with parameters stock='AAPL', quantity=15; Response-1: Internal Server Error with parameters message='Cannot process transaction, composition limit reached: AAPL: 10, GOOGL: 12, TSLA: 9']|2
Context: A social media app where users can only view and edit their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-A',content='Hello World!',media['image1.jpg','image2.png'];Request-2: User-B GET /api/posts with parameters postID='Post-B';Response-2: OK with parameters postID='Post-B',content='Bye World!',media['video1.mp4','image3.png'];Request-3: User-A PUT /api/posts with parameters content='New Content';Response-3: OK with parameters postID='Post-A',content='New Content',media['image1.jpg','image2.png']]|0
Context: A weather app where users can set their preferred location and view the weather forecast. Requests: [Request-1: User-A PUT /api/location with parameters latitude='50.0616',longitude='8.6719';Response-1: OK with parameters location='Frankfurt am Main, Germany';Request-2: User-A GET /api/weather;Response-2: OK with parameters temperature=25°C, humidity=40%, wind='5m/s';Request-3: User-A PUT /api/location with parameters latitude='10',longitude='20';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.', errorDetails='The location is not authorized.']|0
Context: A banking app where users can view and edit their own bank accounts and transactions. Requests: [Request-1: User-A GET /api/accounts with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A',balance=500;Request-2: User-B GET /api/accounts with parameters accountID='Account-B';Response-2: OK with parameters accountID='Account-B',balance=1000;Request-3: User-A PUT /api/accounts with parameters balance=550;Response-3: OK with parameters accountID='Account-A',balance=550]|0
Context: An online store with 3 types of users: Customer, Manager, and Administrator. Customers can only view their own orders while managers and administrators can view all orders. Requests: [Request-1: Customer-A POST /api/login with parameters username='Jenny123', password='mypassword';Response-1: Unauthorized with parameters message='Invalid password. Please try again.';Request-2: Manager-A GET /api/orders with parameters;Response-2: OK with parameters orders=[{'orderId':'12345','customerName':'Jenny123','totalPrice':123.45,'orderDate':'10/01/2022'}, {'orderId':'98765','customerName':'Jake987','totalPrice':98.76,'orderDate':'09/15/2022'}];Request-3: Administrator GET /api/orders with parameters;Response-3: OK with parameters orders=[{'orderId':'12345','customerName':'Jenny123','totalPrice':123.45,'orderDate':'10/01/2022'}, {'orderId':'98765','customerName':'Jake987','totalPrice':98.76,'orderDate':'09/15/2022'}, {'orderId':'11111','customerName':'Admin','totalPrice':100.00,'orderDate':'09/20/2022'}]|2
Context: A banking app, where users can see and modify only their own accounts. Bank employees can manage all accounts. Requests: [Request-1: User-A GET /api/accounts with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A', name='Savings', balance=1000;Request-2: User-B GET /api/accounts with parameters accountID='Account-A';Response-2: OK with parameters accountID='Account-A', name='Savings', balance=500;Request-3: User-A PUT /api/accounts with parameters accountID='Account-A',balance=1300;Response-3: OK with parameters accountID='Account-A', name='Savings', balance=1300;Request-4: User-B PUT /api/accounts with parameters accountID='Account-A', balance=1100;Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The accountID does not belong to this user.';Request-5: Employee GET /api/accounts with parameters accountID='Account-A';Response-5: OK with parameters accountID='Account-A', name='Savings', balance=1300,interestRate=2.3].|1
Context: An online document signing app with 3 types of users Signer, Editor, Admin. Signers can only sign their own documents. Editors can view and edit their own documents Admins can view and edit all documents. Requests: [Request-1: Signer-A POST /api/auth/login with parameters username='signer1',password='signerpass';Response-1: Unauthorized with parameters success=false,message='Invalid password';Request-2: Editor-A PUT /api/docs/[Editor-A-docId] with parameters name='contract_2022';Response-2: Bad Request with parameters message='Server error: Could not connect to database']|2
Context: A social media platform where each user can only post, view and edit their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='User-A/123';Response-1: OK with parameters postID='User-A/123',content='Hello World!',date='2023-06-20 10:20:30';Request-2: User-B GET /api/posts with parameters postID='User-A/123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The post id is wrong or not authorized to view.';Request-3: User-A PUT /api/posts with parameters content='Updated Content'; Response-3: OK with parameters postID='User-A/123',content='Updated Content',date='2023-06-20 10:20:30']|0
Context: An online reservation system for restaurants where users can see only their own past/future reservations. Requests: [Request-1: User-A GET /api/reservations with parameters reservationID='Reservation-A';Response-1: OK with parameters reservationID='Reservation-A',restaurant='Restaurant-A',time='14-07-2023 18:00:00';Request-2: User-B GET /api/reservations with parameters reservationID='Reservation-B';Response-2: OK with parameters reservationID='Reservation-B', restaurant='Restaurant-B',time='14-07-2023 20:00:00']|0
Context: A mobile app for tracking personal finances. The app requires login credentials before granting access and allows users to view and modify their own transaction history only. Requests: [Request-1: User-A POST /api/login with parameters username='User-A', password='password';Response-1: OK with parameters message='Login successful';Request-2: User-A GET /api/transactions with parameters transactionID=10;Response-2: OK with parameters transactionID=10,description='Transaction-A',amount=50;Request-3: User-A GET /api/transactions with parameters transactionID=20;Response-3: OK with parameters transactionID=20,description='Transaction-B',amount=-30;Request-4: User-B GET /api/transactions with parameters transactionID=10;Response-4: Forbidden with errorCode=403,errorMessage='You are not allowed to perform this action',errorDetails='Not authorized to view transactions of other users';Request-5: User-A PUT /api/transactions with parameters transactionID=10, amount=100;Response-5: OK with parameters transactionID=10,description='Transaction-A',amount=100]|2
Context: A ticket booking app where users can only access and modify their own tickets. Requests: [Request-1: User-A GET /api/tickets with parameters ticketID='Ticket-A';Response-1: OK with parameters ticketID='Ticket-A',seatNumber=12,price=50;Request-2: User-B GET /api/tickets with parameters ticketID='Ticket-A';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The ticket id is wrong or not authorized to view.';Request-3: User-A PUT /api/tickets with parameters price=60;Response-3: OK with parameters ticketID='Ticket-A',seatNumber=12,price=60]|0
Context: An online attendance system where lecturers can take attendance and view records of their students. Requests: [Request-1: Lecturer-A GET /api/attendance with parameters studentID='Student-A';Response-1: OK with parameters studentID='Student-A',attendanceRecord=[{'05/25/2021 10:00': 'absent'}, {'05/26/2021 11:00': 'present'}, {'05/27/2021 12:00': 'present'}]];Request-2: Student-A GET /api/attendance with parameters studentID='Student-A';Response-2: OK with parameters studentID='Student-A',attendanceRecord=[{'05/25/2021 10:00': 'absent'}, {'05/26/2021 11:00': 'present'}, {'05/27/2021 12:00': 'present'}]];Request-3: Lecturer-A GET /api/attendance with parameters studentID='Student-B';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='The student ID is not authorized to display.'] |0
Context: A social media app where each user can only view and update their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-A',content='Hello World!',timestamp='2023-01-01 23:30';Request-2: User-B GET /api/posts with parameters postID='Post-B';Response-2: OK with parameters postID='Post-B',content='My first post!',timestamp='2023-01-02 10:15';Request-3: User-A GET /api/posts with parameters postID='Post-B';Response-3: OK with parameters postID='Post-B',content='My first post!',timestamp='2023-01-02 10:15'].|1
Context: A blogging platform where users can create and edit their own blog posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='User-A/1';Response-1: OK with parameters postID='User-A/1',title='First Post',content='Hello World!';Request-2: User-A PUT /api/posts with parameters postID='User-A/1',title='First Post Updated', content='Hello World, Updated!';Response-2: OK with parameters postID='User-A/1',title='First Post Updated',content= 'Hello World, Updated!';Request-3: User-A GET /api/posts with parameters postID='User-B/2';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.', errorDetails='The post id is not authorized to display'] |0
Context: A car rental app where each user can only access and modify their own bookings. Employees cannot view user data. Requests: [Request-1: User-A GET /api/bookings with parameters bookingID='Booking-A';Response-1: OK with parameters bookingID='Booking-A',carBrand='Toyota',startDate='2025-07-01';Request-2: User-B GET /api/bookings with parameters bookingID='Booking-B';Response-2: OK with parameters bookingID='Booking-B',carBrand='Honda',startDate='2025-07-20';Request-3: Employee GET /api/bookings with parameters bookingID='Booking-A';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='Only the user who made the booking can access it.']|0
Context: A file sharing app where users can create and join folders. Each user can only add and remove files from their own folders. Requests: [Request-1: User-A POST /api/folders with parameters title='Folder-1',files=['File-1','File-2'];Response-1: OK with parameters folderID='Folder-1',files=['File-1','File-2'];Request-2: User-A PUT /api/folders with parameters folderID='Folder-1',add='File-3';Response-2: OK with parameters folderID='Folder-1',files=['File-1','File-2','File-3'];Request-3: User-B PUT /api/folders with parameters folderID='Folder-1',add='File-4';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='You can only modify your own folders.']|0
Context: A banking app where users can view and modify their own accounts. Requests: [Request-1: User-A GET /api/bank/accounts with parameters accountNumber=123456; Response-1: OK with parameters accountNumber=123456, balance=5000; Request-2: User-B GET /api/bank/accounts with parameters accountNumber=123456; Response-2: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.',errorDetails='The account number is wrong or not authorized'; Request-3: User-A PUT /api/bank/accounts with parameters accountNumber=123456, amount=1000; Response-3: OK with parameters accountNumber=123456, balance=6000; Request-4: User-B PUT /api/bank/accounts with parameters accountNumber=123457, amount=1000; Response-4: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.',errorDetails='The account number is wrong or not authorized'] |0
Context: A banking app leaking account balance in an error message Requests: [Request-1: User-A GET /accounts with parameters accountId='1234'; Response-1: Not Found with parameters message='Account not found, current balance $10,000']|2
Context: A survey app where managers can create and send surveys to their employees. Each manager can only view the survey responses of their own employees. Requests: [Request-1: Manager-A POST /api/surveys with parameters title='Company Culture';Response-1: OK with parameters surveyID='Company Culture',questions=['Q1','Q2','Q3'];Request-2: Employee-A POST /api/survey/submit with parameters surveyID='Company Culture',answers=['Answer-1','Answer-2','Answer-3'];Response-2: OK with parameters surveyID='Company Culture',message='Survey submitted successfully.';Request-3: Manager-A GET /api/survey/results with parameters surveyID='Company Culture';Response-3: OK with parameters surveyID='Company Culture',responses={'Employee-A': ['Answer-1','Answer-2','Answer-3']};Request-4: Manager-B GET /api/survey/results with parameters surveyID='Company Culture';Response-4: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='You cannot view survey results of another manager.']|0
Context: A chat application with 2 types of users User and Admin, where Users can chat with each other. Requests: [Request-1: User-1 /messages/history with parameters page=1&limit=20; Response-1: Error with parameters msg='cannot execute select * from chats limit 20 offset 0'] |2
Context: An online event booking app with 3 types of users Attendee, Organiser and Admins. Attendees can view and modify their own events. Organisers can view and modify their own and events they organised. Admins can view and modify all events. Requests: [Request-1: Attendee-A POST /api/auth/login with parameters username='attendee-a',password='pass123';Response-1: Unauthorized with parameters success=false,message='username not found';Request-2: Organiser-A POST /api/auth/login with parameters username='organiser-a',password='pass123';Response-2: OK with parameters token='sjery8...';Request-3: Admin GET /api/event/[Organiser-A-eventId] with parameters;Response-3: OK with parameters eventId=[Organiser-A-eventId],name='Charity Drive 2021',location='Central Park',date='20-12-2022'; ]|2
Context: A shopping app that allows customers to make purchases. Customers are only allowed to access their own account information and view their own purchase records. Requests: [Request-1: Customer-A GET /api/account with parameters accountID='Customer-A';Response-1: OK with parameters accountID='Customer-A',name='John Doe',email='johndoe@example.com';Request-2: Customer-A GET /api/purchases with parameters purchaseID='123';Response-2: OK with parameters purchaseID='123',totalAmount=50,items.1.name='phone',items.2.price=25;Request-3: Customer-A PATCH /api/account with parameters email='newemail@example.com';Response-3: OK with parameters accountID='Customer-A',name='John Doe',email='newemail@example.com';Request-4: Customer-A GET /api/account with parameters accountID='Customer-B';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not authorized to access this account.';Request-5: Admin GET /api/purchases with parameters purchaseID='123'; Response-5: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='Only customers can access their purchase records.'] |0
Context: A file sharing app where each user can access all shared files. Requests: [Request-1: User-A GET /api/shared-files with parameters fileID='123';Response-1: OK with parameters fileID='123', fileName='Summer Trip.jpg',size=5MB,uploaded_by='User-B';Request-2: User-B GET /api/shared-files with parameters fileID='456';Response-2: OK with parameters fileID='456', fileName='Report.docx',size=2MB,uploaded_by='User-A';Request-3: User-A PUT /api/shared-files with parameter fileID='123', fileName='Updated Summer Trip.jpg'; Response-3: OK with parameters fileID='123', fileName='Updated Summer Trip.jpg',size=5MB,uploaded_by='User-B']|0
Context: A social media platform where each user can see and update their own posts only. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-A',content='check out my new car!',likes=10;Request-2: User-B GET /api/posts with parameters postID='Post-B';Response-2: OK with parameters postID='Post-B',content='I am in Canada!',likes=5;Request-3: User-A PUT /api/posts with parameters content='Look at this new home',likes=20;Response-3: OK with parameters postID='Post-A',content='Look at this new home',likes=20,errorMessage='Success!';Request-4: User-A PUT /api/posts with parameters postID='Post-B', content='Look at this new home';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The postID does not belong to this user.';Request-5: Admin GET /api/posts with parameters postID='Post-A';Response-5: OK with parameters postID='Post-A',content='check out my new car!',likes=10].|0
Context: A gym where each member can reserve a workout machine. Requests: [Request-1: Member-A POST /api/reserve_machine with parameters machineID='1';Response-1: OK with parameters machineID='1',startTime='2023-07-12 16:30:00',endTime='2023-07-12 17:30:00';Request-2: Member-B POST /api/reserve_machine with parameters machineID='2';Response-2: OK with parameters machineID='2',startTime='2023-07-12 16:30:00',endTime='2023-07-12 17:30:00';Request-3: Member-A POST /api/reserve_machine with parameters machineID='2';Response-3:Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='The machine is already reserved.']|0
Context: A social media platform where each user can only view and edit their own profile information. Admins cannot modify user data. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters userID='User-A',name='Alice',email='alice@email.com';Request-2: User-B GET /api/profile with parameters userID='User-B';Response-2: OK with parameters userID='User-B',name='Bob',email='bob@email.com']|0
Context: A movie streaming app where each user can only view their own watch history. Requests: [Request-1: User-A GET /api/history with parameters movieID='Movie-A';Response-1: OK with parameters movieID='Movie-A',duration='2h 30m',watchTime='2023-07-11 20:12:30';Request-2: User-B GET /api/history with parameters movieID='Movie-B';Response-2: OK with parameters movieID='Movie-B',duration='1h 45m',watchTime='2023-07-11 14:50:00';Request-3: User-A GET /api/history with parameters movieID='Movie-B';Response-3: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.',errorDetails='The movie id is wrong or not authorized to display.']|0
Context: A finance app where users can only view and manage their own transactions. Requests: [Request-1: User-A GET /api/transactions with parameters transactionID='User-A/123';Response-1: OK with parameters transactionID='User-A/123',type='Debit',amount='$100',date='2024-06-01';Request-2: User-B GET /api/transactions with parameters transactionID='User-A/123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to access this transaction.',errorDetails='You are not the owner of this transaction.']|0
Context: An online chat app where users can only access their own chat logs. Requests: [Request-1: User-A GET /api/chat with parameters userID='User-A',with='User-B';Response-1: OK with parameters log=['Message-1'];Request-2: User-A POST /api/chat with parameters userID='User-A',with='User-B',message='Hello!';Response-2: OK with parameters status='sent';Request-3: User-B GET /api/chat with parameters userID='User-A',with='User-B';Response-3: OK with parameters log=['Message-1','Hello!'];Request-4: User-A GET /api/chat with parameters userID='User-B',with='User-C';Response-4: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.', errorDetails='The user id is not authorized to display.'] |0
Context: A learning management system where each student/teacher can see only their own courses/assignments/grades. Requests: [Request-1: Student-A GET /api/courses with parameters courseID='Course-A';Response-1: OK with parameters courseID='Course-A',courseName='Maths';Request-2: Teacher-A GET /api/courses with parameters courseID='Course-B';Response-2: OK with parameters courseID='Course-B', courseName='Science';Request-3: Student-A PUT /api/assignments with parameters assignmentID='Assignment-A',submittedAnswer='22';Response-3: OK with parameters assignmentID='Assignment-A', submittedAnswer='22',status='Submitted']|1
Context: A flight reservation system where each booker can view their own bookings. Requests: [Request-1: Booker-A GET /api/bookings with parameters bookingID='Booking-A';Response-1: OK with parameters bookingID='Booking-A', flightNumber='DL-123';Request-2: Booker-B GET /api/bookings with parameters bookingID='Booking-B';Response-2: OK with parameters bookingID='Booking-B', flightNumber='UA-456';Request-3: Booker-A GET /api/bookings with parameters bookingID='Booking-B';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The booking id is wrong or not authorized to display.']|0
Context: A messaging app where users can access and modify all conversations. Requests: [Request-1: User-A GET /api/messages with parameters id='User-B';Response-1: OK with parameters id='User-B',message='How are you?',time='10:00 AM';Request-2: User-B GET /api/messages with parameters id='User-C';Response-2: OK with parameters id='User-C',message='I am fine, thanks',time='10:05 AM';Request-3: User-B POST /api/messages with parameters id='User-C',message='How about you?';Response-3: OK with parameters id='User-C',message='How about you?',time='10:10 AM'];.|1
Context: A social media website leaking profile visits in an error message Requests: [Request-1: User-A GET /profile with parameters id='123'; Response-1: Forbidden with parameters error='Unauthorized access to profile, recent visits: User-B, User-C, User-D']|2
Context: An app for tracking employee attendance where managers can view and update attendance records. Only managers can access this feature. Requests: [Request-1: Manager-A GET /attendance with parameters employeeID='Emp-123';Response-1: OK with parameters employeeID='Emp-123',date='2024-06-01',status='Present';Request-2: Manager-A GET /attendance with parameters employeeID='Emp-456';Response-2: OK with parameters employeeID='Emp-456',date='2024-06-01',status='Absent';Request-3: Manager-A PUT /attendance with parameters employeeID='Emp-123',date='2024-06-02',status='Absent';Response-3: OK with parameters message='Attendance updated successfully';]|0
Context: A social media app allows users to change their password. Requests: [Request-1: User-A POST /profile/change-password with parameters currentPassword='password123', newPassword='newpassword456'; Response-1: OK with parameters message='Password successfully changed!'; Request-2: User-B POST /profile/change-password with parameters currentPassword='oldpw789', newPassword='newpw123'; Response-2: OK with parameters message='Password successfully changed!']|0
Context: A file storage system where users can access and download other users' files. Requests: [Request-1: User-A GET /api/files with parameters userId='User-A';Response-1: OK with parameters files=['File-A', 'File-B'];Request-2: User-B GET /api/files with parameters userId='User-A';Response-2: OK with parameters files=['File-A', 'File-B'];Request-3: User-A GET /api/download with parameters fileId='File-B';Response-3: OK with parameters fileContent='Content of File-B']|0
Context: A social media platform where users can update their profile information. Requests: [Request-1: User-A PUT /api/profile with parameters name='User-A';Response-1: OK with parameters name='User-A';Request-2: User-A GET /api/profile;Response-2: OK with parameters name='User-A', email='user-a@example.com', bio='A developer';Request-3: User-A PUT /api/profile with parameters email='user-a@example.com';Response-3: OK with parameters email='user-a@example.com', bio='A developer']|0
Context: A job search platform where job seekers can apply for jobs. Job seekers can only view and apply for jobs they are qualified for. Requests: [Request-1: Jobseeker-A GET /api/jobs with parameters jobID='Job-A';Response-1: OK with parameters jobID='Job-A',title='Web Developer',company='XYZ corporation',description='We are looking for a web developer...',location='San Francisco',salary='$125,000-$150,000';Request-2: Jobseeker-B GET /api/jobs with parameters jobID='Job-C';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to view this job',errorDetails='You are not qualified for this job.'];Request-3: Jobseeker-A GET /api/jobs with parameters jobID='Job-D';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to view this job',errorDetails='You are not qualified for this job.']|0
Context: A ride-sharing app allows users to book rides with nearby drivers. Each user can only view and book rides for their own account. Requests: [Request-1: User-A GET /api/rides with parameters location='New York'; Response-1: OK with parameters rides=['UberX', 'UberXL', 'UberPOOL']; Request-2: User-B GET /api/rides with parameters location='Los Angeles'; Response-2: OK with parameters rides=['UberX', 'UberXL', 'UberBLACK']; Request-3: User-A GET /api/rides with parameters location='Los Angeles'; Response-3: OK with parameters rides=['UberX', 'UberXL', 'UberBLACK']|0
Context: The app is a messaging platform that allows users to send messages to their contacts. Users can only send messages to their own contacts. Requests: [Request-1: User-A POST /api/messages with parameters recipient='User-B', message='Hello World'; Response-1: OK with parameters messageID='12345',sender='User-A',recipient='User-B',message='Hello World'; Request-2: User-B POST /api/messages with parameters recipient='User-C', message='How are you?'; Response-2: OK with parameters messageID='67890',sender='User-B',recipient='User-C',message='How are you?'; Request-3: User-C POST /api/messages with parameters recipient='User-A', message='Can we meet tomorrow?'; Response-3: OK with parameters messageID='11121',sender='User-C',recipient='User-A',message='Can we meet tomorrow?']|0
Context: A messaging app where users can only see their own messages. Requests: [Request-1: User-A GET /api/messages with parameters userID='User-A';Response-1: OK with parameters userID='User-A', message='Hello there!'; Request-2: User-A POST /api/messages with parameters userID='User-A', message='Hi, how are you?' ;Response-2: OK with parameters message='Hi, how are you?'; userID='User-A';]|0
Context: An app for booking appointments where each user can only view and modify their own appointments. Admins cannot view or modify appointments. Requests: [Request-1: User-A GET /appointments with parameters appointmentID='Appt-A';Response-1: OK with parameters appointmentID='Appt-A',doctor='Dr. Johnson',date='2024-06-01 9:00am',symptoms=['headache'];Request-2: User-B GET /appointments with parameters appointmentID='Appt-B';Response-2: OK with parameters appointmentID='Appt-B',doctor='Dr. Smith',date='2024-06-15 3:00pm',symptoms=['fever'];Request-3: User-A PUT /appointments with parameters appointmentID='Appt-A',symptoms=['back pain'];Response-3: OK with parameters message='Appointment updated successfully';]|0
Context: A chat app where users can join channels and send messages. Each user can only read and send messages to channels they have joined. Admins can read and send messages to any channel. Requests: [Request-1: User-A GET /api/channels/messages with parameters channelID='Channel-A'; Response-1: OK with parameters messages=['Hello', 'How are you?']; Request-2: User-B GET /api/channels/messages with parameters channelID='Channel-B'; Response-2: OK with parameters messages=['Welcome to Channel B', 'Is anyone here?']; Request-3: Admin POST /api/channels/messages with parameters channelID='Channel-A', message='This is an admin message.'; Response-3: OK with parameters message='Your message has been sent.']|0
Context: A music streaming service where users can play songs and create playlists. Each user should only have access to their own songs and playlists. Requests: [Request-1: User-A POST /api/songs with parameters artist='Adele', title='Hello';Response-1: OK with parameters songId='12345678', artist='Adele', title='Hello', length=240;Request-2: User-B GET /api/songs with parameters artist='Adele';Response-2: Forbidden with parameters errorCode=403, errorMessage='You are not allowed to perform this action.', errorDetails='The artist is not authorized to display.']|0
Context: A travel booking website where customers book their own flights. Requests: [Request-1: Customer-A POST /api/flights with parameters from='New York', to='Paris', date='2024-06-01'; Response-1: OK with parameters flightID='123', from='New York', to='Paris',date='2024-06-01', price=1200; Request-2: Customer-B POST /api/flights with parameters from='San Francisco', to='Tokyo', date='2024-06-15'; Response-2: OK with parameters flightID='456', from='San Francisco', to='Tokyo',date='2024-06-15', price=2000; Request-3: Customer-A DELETE /api/flights with parameters flightID='456'; Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The flight ID is wrong or not authorized to delete.']|0
Context: A stock trading app that shows real-time stock prices. Requests: [Request-1: User-A GET /api/stocks with parameters stockCode='AAPL'; Response-1: OK with parameters companyName='Apple Inc.', stockPrice=143; Request-2: User-B GET /api/stocks with parameters stockCode='AMZN'; Response-2: OK with parameters companyName='Amazon.com Inc.', stockPrice=3324]|0
Context: A productivity app where registered users can only access and modify their own tasks. Requests: [Request-1: User-A GET /api/tasks with parameters taskID='Task-A';Response-1: OK with parameters taskID='Task-A',description='Description A';Request-2: User-A GET /api/tasks with parameters taskID='Task-B';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not authorized to view this task.';Request-3: User-B PUT /api/tasks with parameters taskID='Task-A',description='New Description';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not authorized to edit this task.']|0
Context: An online bookstore where users can buy and download ebooks. Each user can only access their own purchases. Requests: [Request-1: User-C GET /api/purchases with parameters userID=User-C; Response-1: OK with parameters userID=User-C, purchases=[{bookID: 1234, title: 'The Catcher in the Rye', author: 'J.D. Salinger', price: 9.99, date: '05/16/2023'}, {bookID: 5678, title: 'To Kill a Mockingbird', author: 'Harper Lee', price: 7.99, date: '05/17/2023'}]]; [Request-2: User-B GET /api/purchases with parameters userID=User-C; Response-2: Forbidden with parameters errorCode=403, errorMessage='You are not authorized to perform this action', errorDetails='You can only access your own purchases']; [Request-3: User-C POST /api/purchases with parameters title='The Great Gatsby'&author='F. Scott Fitzgerald'&price=11.99; Response-3: OK with parameters bookID=9012, title='The Great Gatsby', author='F. Scott Fitzgerald', price=11.99, date='05/18/2023'];|0
Context: A news app where users can only see news based on their chosen topics. Requests: [Request-1: User-A GET /api/news with parameters topic='Sports'; Response-1: OK with parameters title='Serena Williams wins the Australian Open', description='Serena Williams defeated her opponent in three sets to win the Australian Open championship', topic='Sports'; Request-2: User-A GET /api/news with parameters topic='Politics'; Response-2: OK with parameters title='President signs new trade agreement', description='The president signed a new trade agreement with a foreign country today', topic='Politics';]|0
Context: A project management tool where users can create projects and assign tasks. Each project and task can only be accessed by users with appropriate permissions. Requests: [Request-1: User-A GET /api/projects with parameters projectID=1234; Response-1: OK with parameters projectID=1234, name='Project A', owner=User-A, members=[User-A, User-B]]; [Request-2: User-B GET /api/tasks with parameters taskID=5678; Response-2: OK with parameters taskID=5678, projectID=1234, title='Task B', description='Complete the design', assignedTo=User-B]; [Request-3: User-A PUT /api/projects with parameters projectID=1234&members=[User-A, User-B, User-C]; Response-3: OK with parameters projectID=1234, name='Project A', owner=User-A, members=[User-A, User-B, User-C]];|0
Context: Online messaging app where users can view any conversation. Requests: [Request-1: User-A GET /api/messages with parameters conversationID='User-B-Conversation'; Response-1: OK with parameters conversationID='User-B-Conversation', messages=['Hey there!', 'Not bad, thanks for asking.']; Request-2: User-B GET /api/messages with parameters conversationID='User-A-Conversation'; Response-2: OK with parameters conversationID='User-A-Conversation', messages=['Hi, how are you?', 'I'm fine, how about you?']; Request-3: User-C GET /api/messages with parameters conversationID='User-D-Conversation'; Response-3: OK with parameters conversationID='User-D-Conversation', messages=['Hello', 'How can I help you?']]|1
Context: A web-based email system where users can only access their own inbox and sent messages. Requests: [Request-1: User-A GET /api/inbox;Response-1: OK with parameters messages=['Message-1', 'Message-2'];Request-2: User-A GET /api/sent;Response-2: OK with parameters messages=['Message-3'];Request-3: User-A POST /api/send with parameters to='User-B', subject='New Message', content='Hello User B!';Response-3: OK with parameters status='sent']|0
Context: Banking app with 3 types of users Customer, Manager and Admin. Customers can view their balances and pay bills online. Managers can manage transactions made to their accounts. Admins can manage all user data. Requests: [Request-1: Customer-A GET /api/bank/account-check with parameters accountNumber='1234567890';Response-1: Forbidden with parameters error='the account 1234567890 does not exist']|2
Context: An online shopping platform with 2 types of users -- Customers and Merchants. Each user can only access and edit their own profile data. Requests: [Request-1: Customer-A POST /login with parameters email='janeDoe@gmail.com', password='abc123'; Response-1: Incorrect Credentials with parameters message='incorrect password entered for account with email: janeDoe@gmail.com. Please check your login credentials and try again. If you continue having trouble accessing your account, please contact our support team at support@onlineshop.com.']; Request-2: Merchant-B POST /login with parameters email='julianSmith@gmail.com', password='Gh$$d&%'; Response-2: Incorrect Credentials with parameters message='the email provided does not exist in our system or has already been taken. Please enter a valid email address and try again'];|2
Context: A fitness app allows users to track their workout progress and find nearby gyms. Each user can only view their own workout progress and search for nearby gyms for their own account. Requests: [Request-1: User-A GET /api/workouts with parameters date='2023-05-15'; Response-1: OK with parameters workouts=['Cardio', 'Strength training', 'Yoga']; Request-2: User-B GET /api/workouts with parameters date='2023-05-15'; Response-2: OK with parameters workouts=['Cardio', 'Strength training', 'Pilates']; Request-3: User-A GET /api/gyms with parameters location='New York'; Response-3: OK with parameters gyms=['Equinox', 'Planet Fitness', '24 Hour Fitness']|0
Context: A file sharing app where each user can only view and download their own files. Admins cannot modify user files. Requests: [Request-1: User-A GET /files with parameters fileID='User-A/docs/report.pdf';Response-1: OK with parameters fileID='User-A/docs/report.pdf',content='[.....]',size=10MB;Request-2: User-B GET /files with parameters fileID='User-B/pics/family.jpg';Response-2: OK with parameters fileID='User-B/pics/family.jpg',content='[.....]',size=2MB;Request-3: Admin POST /files with parameters fileID='User-A/docs/report.pdf',content='[.....]';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='Admin cannot modify user files.';]|0
Context: An employee scheduling system where employees can schedule their work shifts. Employees should not be able to modify another employee's work shift. Requests: [Request-1: Employee-A GET /api/schedule;Response-1: OK with parameters schedule= ['Shift-1', 'Shift-2'];Request-2: Employee-A POST /api/schedule with parameters shiftID='Shift-1',date='2023-06-02';Response-2: OK with parameters shiftID='Shift-1',date='2023-06-02';Request-3: Employee-A POST /api/schedule with parameters shiftID='Shift-2',date='2023-06-03';Response-3: OK with parameters shiftID='Shift-2',date='2023-06-03'] |0
Context: An e-learning platform where students can view their own courses. Students should only be able to view their own courses. Requests: [Request-1: Student-A GET /api/courses with parameters courseID='Student-A';Response-1: OK with parameters courseID='Student-A',name='Mathematics',teacher='Dr. Smith',grade='A';Request-2: Student-B GET /api/courses with parameters courseID='Student-B';Response-2: OK with parameters courseID='Student-B',name='History',teacher='Professor Johnson',grade='B';Request-3: Student-A GET /api/courses with parameters courseID='Student-B';Response-3: OK with parameters courseID='Student-B',name='History',teacher='Professor Johnson',grade='B']|1
Context: A cloud-based file sharing app with 2 types of users User and Admin. Each user can only view and download their own files. Admins cannot view user files. Requests: [Request-1: User-A GET /api/files with parameters fileID='secret_file.txt';Response-1: Bad Request with parameters error='Sorry! File secret_file.txt cannot be found!']|2
Context: A social media platform with 2 types of users: Regular users and Moderators. Users can only view their own posts. Moderators can view and edit all posts. Requests: [Request-1: Regular User-A PUT /update_password with parameters old_password='abc123', new_password='xyZ$%^@1'; Response-1: OK with parameters message='Your password has been successfully updated.'; Request-2: Regular User-B PUT /forgot_password with parameters email='abigail4@gmail.com'; Response-2: OK with parameters message='A password reset link has been sent to your email. Please follow the instructions to reset your password.'; Request-3: Regular User-C GET /forgot_password with parameters email='carina15@yahoo.com'; Response-3: Error with parameters message='The email provided is not valid. We do not have any records of this email in our database.'; Request-4: Moderator-A PUT /edit_post with parameters post_id=300, new_content='Hello, how are you?'; Response-4: OK with parameters message='Your post has been updated successfully.'; Request-5: Moderator-B GET /view_all_posts with parameters start_date='01/01/2020', end_date='03/04/2022'; Response-5: Error with parameters message='Unable to process your request. Please confirm your account permissions and the authorization parameters you have entered.' ];|2
Context: An HR system where employees can only edit and manage their own information. Requests: [Request-1: Employee-A GET /api/employee with parameters empId='Emp-A';Response-1: OK with parameters empId='Emp-A', name='Employee-A',designation='Developer',status='Active';Request-2: Employee-B GET /api/employee with parameters empId='Emp-C';Response-2: OK with parameters empId='Emp-C', name='Employee-C',designation='Tester',status='Inactive';Request-3: Employee-A PUT /api/employee with parameters designation='Sr. Developer';Response-3: OK with parameters empId='Emp-A',name='Employee-A',designation='Sr. Developer',status='Active';Request-4: Employee-B PUT /api/employee with parameters designation='Manager';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The Employee ID is unauthorized to modify.'] |1
Context: An online shopping platform where users can view and modify their own cart. Requests: [Request-1: User-A GET /api/cart with parameters userId='User-A';Response-1: OK with parameters userId='User-A', items=['Item-A', 'Item-B'];Request-2: User-A POST /api/cart/update with parameters itemId='Item-A', quantity=2;Response-2: OK with parameters status='success';Request-3: User-A DELETE /api/cart/remove with parameters itemId='Item-B';Response-3: OK with parameters status='success']|0
Context: A video conferencing app where users can start and join calls. Requests: [Request-1: User-A POST /api/calls with parameters callId='12345678';Response-1: OK with parameters callId='12345678', status='Started', participants=['User-A'];Request-2: User-B POST /api/calls with parameters callId='12345678'; Response-2: OK with parameters callId='12345678', status='Joined', participants=['User-A', 'User-B'];]|0
Context: A web app with authentication system. Requests: [Request-1: POST /login with parameters username='user', password='password'; Response-1: OK with parameters userID='123456789',username='user',accessToken='Bearer_token']; [Request-2: GET /api/user with header Authorization='Bearer Bearer_token'; Response-2: OK with parameters userID='123456789',username='user',email='user@example.com']; [Request-3: POST /api/user with header Authorization='Bearer Bearer_token' and parameters username='new_user',email='new_user@example.com'; Response-3: OK with parameters userID='123456789',username='new_user',email='new_user@example.com'] |0
Context: A recipe app that provides recipes for different cuisines. Requests: [Request-1: User-A GET /api/recipes with parameters cuisine='Italian'; Response-1: OK with parameters dishes=['Pasta Carbonara', 'Margherita Pizza', 'Minestrone Soup']; Request-2: User-B GET /api/recipes with parameters cuisine='Mexican'; Response-2: OK with parameters dishes=['Tacos al Pastor', 'Guacamole', 'Chiles Rellenos']]|0
Context: A project management tool where team members can view and modify their own tasks. Requests: [Request-1: User-A GET /api/tasks with parameters taskID='Task-A';Response-1: OK with parameters taskID='Task-A',description='Description A';Request-2: User-A GET /api/tasks with parameters taskID='Task-B';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not authorized to view this task.';Request-3: User-B PUT /api/tasks with parameters taskID='Task-A',description='New Description';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not authorized to edit this task.']|0
Context: A travel booking app where users can view available flights and book tickets. Each user can only access their own bookings. Requests: [Request-1: User-A GET /api/bookings with parameters bookingID=1234; Response-1: OK with parameters bookingID=1234, userID=User-A, flightNumber='AB123', date='06/01/2023', seatNumber='12A']; [Request-2: User-B POST /api/bookings with parameters userID=User-B&flightNumber='CD456'&date='06/10/2023'&seatNumber='21F'; Response-2: OK with parameters bookingID=5678, userID=User-B, flightNumber='CD456', date='06/10/2023', seatNumber='21F']; [Request-3: User-A DELETE /api/bookings with parameters bookingID=1234; Response-3: OK with parameters message='Booking deleted successfully'];|0
Context: A social media app allows users to post updates and interact with their friends. Users can only see updates from their friends. Requests: [Request-1: User-A GET /api/updates with parameters user='User-A'; Response-1: OK with parameters user='User-A', updates=['Hello friends', 'Having a great day!']; Request-2: User-B GET /api/updates with parameters user='User-B'; Response-2: OK with parameters user='User-B', updates=['Just finished my project', 'Time for a break']; Request-3: User-A GET /api/updates with parameters user='User-B'; Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.']|0
Context: An online learning portal where teachers can access and modify any student's grade book and assignments. Requests: [Request-1: Teacher-A GET /api/grades with parameters studentID='Student-A';Response-1: OK with parameters studentID='Student-A',grades=[{'Math':90},{'History':85},{'Science':100}];Request-2: Teacher-B GET /api/grades with parameters studentID='Student-B';Response-2: OK with parameters studentID='Student-B',grades=[{'Math':75},{'History':60},{'Science':80}];Request-3: Teacher-A PUT /api/grades with parameters studentID='Student-B',grades=[{'Math':80}];Response-3: OK with parameters message='Grades updated successfully'];.|0
Context: A ticket management system where agents can only see their own tickets and conversations. Requests: [Request-1: Agent-A GET /api/tickets with parameters ticketId='Ticket-A';Response-1: OK with parameters ticketId='Ticket-A',subject='Ticket A',dueDate='2022-12-13';Request-2: Agent-B GET /api/tickets with parameters ticketId='Ticket-C';Response-2: OK with parameters ticketId='Ticket-C',subject='Ticket C',dueDate='2022-11-16';Request-3: Agent-A GET /api/ticketConversations with parameters conversationId='CV-A';Response-3: OK with parameters conversationId='CV-A',messages=['Hello', 'What is your issue'],sender='Agent-A',recipient='User-A';Request-4: Agent-A GET /api/ticketConversations with parameters conversationId='CV-C';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to access this conversation',errorDetails='The conversation id is not authorized to view.'] |1
Context: A project management app where team members and project managers have different levels of access to projects and tasks. Requests: [Request-1: TeamMember-A GET /api/projects with parameters projectID='Project-A';Response-1: OK with parameters projectID='Project-A',description='New project',tasks=['Task-A', 'Task-B'];Request-2: TeamMember-A PUT /api/tasks with parameters taskID='TeamMember-A/Task-A',description='Task A updated';Response-2: OK with parameters taskID='TeamMember-A/Task-A',description='Task A updated';Request-3: Manager-A GET /api/tasks with parameters taskID='TeamMember-A/Task-A';Response-3: OK with parameters taskID='TeamMember-A/Task-A',description='Task A updated']|0
Context: A banking platform with 3 types of users: Customers, Tellers and Administrators. Customers can only view and modify their own information. Tellers can view and modify customer information. Administrators can view and edit any data. Requests: [Request-1: Customer-A PUT /update_password with parameters old_password='abc123', new_password='xyZ$%^@1'; Response-1: OK with parameters message='Your password has been successfully updated.'; Request-2: Teller-A GET /view_account_history with parameters user_id=12489; Response-2: Request Denied with parameters message='Your user credentials have been revoked at this time. We have detected an unauthorized attempt at accessing account information. We advise you to change your password as soon as possible. Technical Details: the password hash algorithm currently in use is bcrypt with default parameters.'];|2
Context: An appointment scheduling system for a doctor's office. Patients can schedule and cancel their appointments. Requests: [Request-1: Patient-A POST /appointments with parameters date='2023-06-01', time='09:00'; Response-1: OK with parameters status='Confirmed', date='2023-06-01', time='09:00';Request-2: Patient-A GET /appointments with parameters date='2023-06-01'; Response-2: OK with parameters appointments=[{date: '2023-06-01', time: '09:00', status: 'Confirmed'}];Request-3: Patient-A DELETE /appointments with parameters date='2023-06-01', time='09:00'; Response-3: OK with parameters status='Cancelled', date='2023-06-01', time='09:00';]|0
Context: A mobile app where users can create profiles and post messages. Requests: [Request-1: POST /api/register with parameters username='user', password='password', email='user@example.com'; Response-1: OK with parameters userID='123456789',accessToken='Bearer_token']; [Request-2: POST /api/posts with header Authorization='Bearer Bearer_token' and parameters title='My message',content='This is my first message'; Response-2: OK with parameters postID='123',title='My message',content='This is my first message', authorID='123456789', publishedAt='2023-05-15 10:30:00']; [Request-3: GET /api/users with header Authorization='Bearer Bearer_token'; Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not authorized to view user data.'] |0
Context: A social media app where users can create accounts and follow other users. Requests: [Request-1: POST /api/register with parameters username='user', password='password', email='user@example.com'; Response-1: OK with parameters userID='123456789',accessToken='Bearer_token']; [Request-2: POST /api/posts with parameters title='My message',content='This is my first message'; Response-2: OK with parameters postID='123',title='My message',content='This is my first message', authorID='123456789', publishedAt='2023-05-15 10:30:00']; [Request-3: POST /api/follow with header Authorization='Bearer Bearer_token' and parameters followingUserID='987654321'; Response-3: OK with parameters followingUserID='987654321']|0
Context: A hotel reservation platform where guests can only access and modify their own reservations. Requests: [Request-1: Guest-A POST /api/reservations with parameters room='101', checkin='2024-01-15',checkout='2024-01-18';Response-1: OK with parameters reservationID='Guest-A/1';Request-2: Guest-A GET /api/reservations with parameters reservationID='Guest-A/1';Response-2: OK with parameters reservationID='Guest-A/1',room='101',checkin='2024-01-15',checkout='2024-01-18';Request-3: Guest-B GET /api/reservations with parameters reservationID='Guest-A/1';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='The reservation id is not authorized to display.'] |0
Context: A banking application in which authenticated users can see their account information and transaction history. Requests: [Request-1: User-A GET /accounts with parameters accountId='123456', sort='DESC';Response-1: Forbidden with parameters details=""""""""Account 123456 does not belong to User-A""""""""]"""""""|2
Context: A personal budgeting app where each user can only access and modify their own budget. Requests: [Request-1: User-A GET /api/budget with parameters userID='User-A';Response-1: OK with parameters userID='User-A',category='food',limit=500,spent=400,balance=100;Request-2: User-A GET /api/budget with parameters userID='User-B';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to perform this action.',errorDetails='The user id is wrong or not authorized to access.';Request-3: User-A POST /api/budget with parameters category='grocery', limit=200;Response-3: OK with parameters userID='User-A',category='grocery',limit=200,spent=0,balance=200]|0
Context: A game app where users can create and play games. Requests: [Request-1: User-A POST /api/games with parameters title='Game-A', instructions='Use arrow keys to move';Response-1: OK with parameters gameID='Game-A';Request-2: User-A POST /api/play with parameters gameID='Game-A',score=100;Response-2: OK with parameters message='Well done! You got a high score!'];|0
Context: A task management system where users can access and modify tasks assigned to other users. Requests: [Request-1: User-A GET /api/tasks with parameters assigneeId='User-A';Response-1: OK with parameters tasks=['Task-1', 'Task-2'];Request-2: User-B GET /api/tasks with parameters assigneeId='User-A';Response-2: OK with parameters tasks=['Task-1', 'Task-2', 'Task-3'];Request-3: User-A PUT /api/tasks/assign with parameters taskId='Task-3', assigneeId='User-B';Response-3: OK with parameters status='success']|0
Context: A content management system with 3 types of users: Content creators, Editors and Administrators. Content creators can only add new content. Editors can view all content and edit their own content. Administrators can view and modify any data. Requests: [Request-1: Content Creator-A POST /create_content with parameters title='Winter 2022 Product Catalogue', content='Please see attached file.'; Response-1: Server Error with parameters message='Unable to process your request at this time. Server credentials: User: admin, Password: mySecureP@ssword1.']; |2
Context: A retail platform with 2 types of users: Customers and Sellers. Customers can only view and modify their own purchases. Sellers can only view and edit their own product listings. Requests: [Request-1: Customer-A PUT /purchase_details with parameters purchase_id=221, new_delivery_address='10 Sirene Rd.'; Response-1: Request Failed with parameters message='Cannot process your request. The email associated with your account is: lillian_perez@gmail.com. If you believe this is in error, please contact our support team at support@email.com'; Request-2: Seller-A GET /view_product with parameters product_id=7529; Response-2: Error with parameters message='Unauthorized Access Attempt. Your record shows email account: mike_anderson@gmail.com is not authorized to view product_id: 7529.']; |2
Context: A banking app where users can view their account details but cannot modify them. Only employees with valid credentials can view and modify account details. Requests: [Request-1: Customer-A GET /api/account with parameters userID='User-001';Response-1: OK with parameters accountID='001',balance=1000;Request-2: Employee GET /api/account with parameters userID='User-001';Response-2: OK with parameters accountID='001',balance=1000,accountHolderName='John Doe',accountType='Savings',routingNumber='ABC123',branchName='Downtown';Request-3: Customer-A PUT /api/account with parameters balance=1500;Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action',errorDetails='Please log in with valid credentials and try again.'];|0
Context: A social network where users can follow other users and view their posts. Users can only view the posts of users they follow. Requests: [Request-1: User-A GET /api/posts with parameters userID='User-A';Response-1: OK with parameters userID='User-A',content='Hello world!',likesCount=10,commentsCount=3;Request-2: User-B GET /api/posts with parameters userID='User-C';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to view this content',errorDetails='Please follow the user to view their posts.'];Request-3: User-A GET /api/posts with parameters userID='User-D';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to view this content',errorDetails='Please follow the user to view their posts.']|0
Context: A shopping app where users can add items to their cart and checkout. Requests: [Request-1: POST /api/login with parameters username='user', password='password'; Response-1: OK with parameters userID='123456789',accessToken='Bearer_token']; [Request-2: POST /api/cart with parameters itemID='1',quantity='2'; Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You need to log in first.']; [Request-3: POST /api/checkout with header Authorization='Bearer Bearer_token' and parameters paymentMethod='credit_card',billingAddress='123 Main St.'; Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You need to log in first.'] |0
Context: A music streaming app where each user can only access and modify their own playlists. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='User-A/favorite_songs';Response-1: OK with parameters playlistID='User-A/favorite_songs',tracks=['Thriller', 'Billie Jean', 'Bad'];Request-2: User-B GET /api/playlists with parameters playlistID='User-A/favorite_songs';Response-2: OK with parameters errorCode=404,errorMessage='Not Found',errorDetails='The playlist does not exist or you are not authorized to access it.';Request-3: User-A PUT /api/playlists with parameters playlistID='User-B/favorite_songs',tracks=['Beat It', 'Smooth Criminal'];Response-3: OK with parameters errorCode=404,errorMessage='Not Found',errorDetails='The playlist does not exist or you are not authorized to access it.'];|0
Context: A CRM system where salespeople can only see their own leads and deals. Requests: [Request-1: Salesperson-A GET /api/leads with parameters leadId ='Lead-A';Response-1: OK with parameters leadId ='Lead-A', name='Lead_A',dealValue='$5000',closingDate='2024-07-15';Request-2: Salesperson-B GET /api/leads with parameters leadId='Lead-C';Response-2: OK with parameters leadId ='Lead-C',name='Lead_C',dealValue='$10000',closingDate='2024-06-01';Request-3: Salesperson-A POST /api/deals with parameters name='Deal-A',value='2500';Response-3: OK with parameters name='Deal-A',value='2500',closingDate='2024-06-01',confirmed='false'];Request-4: Salesperson-B POST /api/deals with parameters name='Deal-B',value='8000';Response-4: OK with parameters name='Deal-B',value='8000',closingDate='2024-06-05',confirmed='false'];Request-5: SalesManager GET /api/leads with parameters leadId ='Lead-C';Response-5: OK with parameters leadId ='Lead-C',name='Lead_C',dealValue='$10000',closingDate='2024-06-01'] |1
Context: A video streaming app where users can watch and share videos. Each user can only access their own videos. Requests: [Request-1: User-A GET /api/my_videos with parameters userID=User-A; Response-1: OK with parameters userID=User-A, videos=[{videoID: 1234, title: 'Funny cat video', description: 'A cat playing with a ball', date: '05/16/2023'}, {videoID: 5678, title: 'Cooking tutorial', description: 'How to make lasagna', date: '05/17/2023'}]]; [Request-2: User-B GET /api/my_videos with parameters userID=User-A; Response-2: Forbidden with parameters errorCode=403, errorMessage='You are not authorized to perform this action', errorDetails='You can only access your own videos']; [Request-3: User-A PUT /api/my_videos with parameters videoID=1234&description='A cat playing with a ball of yarn'; Response-3: OK with parameters message='Video updated successfully'];|0
Context: A messaging app where each user can only access and modify their own messages. Moderators can view all messages, but cannot modify them. Requests: [Request-1: User-A GET /messages with parameters messageID='Msg-A';Response-1: OK with parameters messageID='Msg-A',sender='User-A',recipient='User-B',content='Hello, how are you?';Request-2: User-B GET /messages with parameters messageID='Msg-B';Response-2: OK with parameters messageID='Msg-B',sender='User-B',recipient='User-A',content='I am good, thanks for asking.';Request-3: Moderator GET /messages with parameters messageID='Msg-A';Response-3: OK with parameters messageID='Msg-B',sender='User-B',recipient='User-A',content='I am good, thanks for asking.';]|0
Context: A music streaming app with 1 type of users Customer, where customers can stream their favorite songs and save them to playlists. Requests: [Request-1: Customer-A POST /song/playlist/[Playlist-A-id] with parameters song='Song-A';Response-1: Internal Server Error with parameters message='failed to append Song-A to Playlist-A-id: {time: 2022-02-07 14:47:31.873208, log: {type: error, request: POST /song/playlist/2674b940-ded6-4a06-972b-09007085ba8d, data: {'song': 'Song-A'}, error: 'ValueError}}']|2
Context: A healthcare app where patients can view and manage their medical records. Patients should only be able to view their own records. Requests: [Request-1: Patient-A GET /api/medicalRecords with parameters recordID='Patient-A';Response-1: OK with parameters recordID='Patient-A',diagnosis='Flu',medications=['Tamiflu','Advil'],doctor='Dr. Johnson';Request-2: Patient-B GET /api/medicalRecords with parameters recordID='Patient-B';Response-2: OK with parameters recordID='Patient-B',diagnosis='COVID-19',medications=['Remdesivir','Ibuprofen'],doctor='Dr. Smith';Request-3: Patient-A GET /api/medicalRecords with parameters recordID='Patient-B';Response-3: OK with parameters recordID='Patient-B',diagnosis='COVID-19',medications=['Remdesivir','Ibuprofen'],doctor='Dr. Smith']|1
Context: A fleet management system where drivers can only manage their own trips. Requests: [Request-1: Driver-A GET /api/trips with parameters tripId='Trip-A';Response-1: OK with parameters tripId='Trip-A',driverId='Driver-A',date='2023-01-01',route='ABC',status='Completed';Request-2: Driver-B GET /api/trips with parameters tripId='Trip-C';Response-2: OK with parameters tripId='Trip-C',driverId='Driver-B',date='2023-02-01',route='XYZ',status='Scheduled';Request-3: Driver-A POST /api/trips with parameters date='2023-02-05',route='DEF';Response-3: OK with parameters tripId='Trip-D',driverId='Driver-A',date='2023-02-05',route='DEF',status='Scheduled';Request-4: Admin GET /api/trips with parameters tripId='Trip-C';Response-4: OK with parameters tripId='Trip-C',driverId='Driver-B',date='2023-02-01',route='XYZ',status='Scheduled']|1
Context: A social media platform where users can share their posts with their followers. Authenticated users should only be able to view and interact with their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='User-A';Response-1: OK with parameters postID='User-A',content='Hello world',likesCount=4,commentsCount=2;Request-2: User-B GET /api/posts with parameters postID='User-B';Response-2: OK with parameters postID='User-B',content='I am excited for vacation',likesCount=23,commentsCount=8;Request-3: User-A GET /api/posts with parameters postID='User-B';Response-3: OK with parameters postID='User-B',content='I am excited for vacation',likesCount=23,commentsCount=8]|1
Context: A hospital system where doctors and nurses can access patient information. Each healthcare provider should only be able to access patient information for their own patients. Requests: [Request-1: Doctor-A GET /api/patients with parameters patientId='Patient-B';Response-1: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='The patient id is not authorized to display.';Request-2: Nurse-A GET /api/patients with parameters patientId='Patient-C';Response-2: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.', errorDetails='The patient id is not authorized to display.']|0
Context: A social media app where users can post and follow other users. Each user has their own profile and can change their own profile information. Admins can delete any user's profile. Requests: [Request-1: User-A PUT /api/profile with parameters name='User A'; Response-1: OK with parameters name='User A'; Request-2: User-B PUT /api/profile with parameters name='User B'; Response-2: OK with parameters name='User B'; Request-3: Admin DELETE /api/profile with parameters userID='User B'; Response-3: OK with parameters message='User B profile has been deleted.']|0
Context: A notes app where registered users can only access and modify their own notes. Requests: [Request-1: User-A GET /api/notes with parameters noteID='Note-A';Response-1: OK with parameters noteID='Note-A',content='Content A';Request-2: User-A GET /api/notes with parameters noteID='Note-B';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not authorized to view this note.';Request-3: User-B PUT /api/notes with parameters noteID='Note-A',content='New Content';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not authorized to edit this note.']|0
Context: A messaging app where each user can only access and modify their own chats. Other users cannot view or modify it. Requests: [Request-1: User-A GET /api/chats with parameters chatID='Chat-A';Response-1: OK with parameters chatID='Chat-A', members=['User-A','User-B','User-C'], messages=[{'Sender': 'User-A', 'Content': 'Hi', 'Timestamp': '2023-05-15 10:30 AM'}, {'Sender': 'User-B', 'Content': 'Hello', 'Timestamp': '2023-05-15 10:32 AM'}];Request-2: User-A POST /api/chats with parameters members=['User-B'];Response-2: OK with parameters chatID='Chat-B', members=['User-A','User-B'], messages=[];] |1
Context: A video conferencing app. Each room has a unique ID to start a new call. Requests: [Request-1: User-A POST /api/rooms with parameters roomID='Room-123';Response-1: OK with parameters roomID='Room-123', joinLink='https://app.com/join/Room-123'; Request-2: User-B POST /api/rooms with parameters roomID='Room-456'; Response-2: OK with parameters roomID='Room-456', joinLink='https://app.com/join/Room-456']|0
Context: A Learning Management System (LMS) where students and professors can access and modify course materials. Students can only see and modify their own coursework while professors can access all coursework. Requests: [Request-1: Student-A GET /api/courses with parameters courseID='Student-A/Math';Response-1: OK with parameters courseID='Student-A/Math',materials=['Chapter 1', 'Chapter 2'],assignments=['HW1', 'HW2'];Request-2: Student-A POST /api/assignments with parameters assignmentID='Student-A/Math/HW1',content='Answer1 Answer2';Response-2: OK with parameters assignmentID='Student-A/Math/HW1',status='Submitted';Request-3: Professor-A GET /api/courses with parameters courseID='Student-A/Math';Response-3: OK with parameters courseID='Student-A/Math',materials=['Chapter 1', 'Chapter 2'],assignments=['HW1', 'HW2'] |0
Context: An e-learning platform where only admins can create and modify courses. Requests: [Request-1: Admin-A POST /api/courses with parameters courseName='Python Programming', courseContent='This course teaches Python programming'; Response-1: OK with parameters courseID='101', courseName='Python Programming', courseContent='This course teaches Python programming'; Request-2: Admin-A PUT /api/courses/update with parameters courseID='101', courseName='Python for Data Science'; Response-2: OK with parameters courseID='101', courseName='Python for Data Science', courseContent='This course teaches Python for data Science'; Request-3: User-A POST /api/courses with parameters courseName='Java Programming', courseContent='This course teaches Java programming'; Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='Only admins can create courses'.]|0
Context: A recipe app where users can create and share recipes. Requests: [Request-1: User-A POST /api/recipes with parameters title='Pasta with Meatballs', ingredients=['Pasta','Meatballs'], instructions=['Boil pasta for 10 min', 'Cook meatballs for 20 min'];Response-1: OK with parameters recipeID='Recipe-1';Request-2: User-A POST /api/share with parameters recipeID='Recipe-1',secretKey='12345';Response-2: OK with parameters recipeID='Recipe-1', shareURL='https://recipe-app.com/shared/12345';Request-3: User-B GET /api/shared with parameters shareURL='https://recipe-app.com/shared/12345';Response-3: OK with parameters recipeID='Recipe-1',title='Pasta With Meatballs', ingredients=['Pasta','Meatballs'], instructions=['Boil pasta for 10 min', 'Cook meatballs for 20 min'];|0
Context: An event-planning app where users can create and share events. Requests: [Request-1: User-A POST /api/events with parameters title='Event-A', date='2023-10-01', location='New York';Response-1: OK with parameters eventID='Event-A';Request-2: User-A POST /api/share with parameters eventID='Event-A',secretKey='12345';Response-2: OK with parameters eventID='Event-A', shareURL='https://event-app.com/shared/12345';Request-3: User-B GET /api/shared with parameters shareURL='https://event-app.com/shared/12345';Response-3: OK with parameters eventID='Event-A',title='Event-A',date='2023-10-01',location='New York'];|0
Context: A social media app where users can create accounts and follow other users. Requests: [Request-1: POST /api/register with parameters username='user', password='password', email='user@example.com'; Response-1: OK with parameters userID='123456789',accessToken='Bearer_token']; [Request-2: POST /api/follow with parameters followingUserID='987654321'; Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You need to log in first.']; [Request-3: GET /api/users with parameters userID='987654321'; Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You need to log in first.']|0
Context: An online shopping app where users can purchase items. Users should not be able to modify the price of items they want to purchase. Requests: [Request-1: User-A POST /api/cart with parameters itemID='Item-1',itemPrice=12;Response-1: OK with parameters itemID= 'Item-1',itemName='Shirt',itemPrice=12;Request-2: User-A POST /api/cart with parameters itemID='Item-2',itemPrice=15;Response-2: OK with parameters itemID= 'Item-2',itemName='Jeans',itemPrice=15;Request-3: User-A POST /payment with parameters amount=38;Response-3: OK with parameters paymentStatus='Paid']|0
Context: A news app where users can read and share articles. Each user can only access their own saved articles. Requests: [Request-1: User-B GET /api/saved with parameters userID=User-B; Response-1: OK with parameters userID=User-B, saved=[{articleID: 1234, title: 'NASA launches new space probe', date: '05/16/2023', source: 'CNN', content: 'NASA has launched...'}, {articleID: 5678, title: 'New breakthrough in Alzheimer's research', date: '05/17/2023', source: 'BBC', content: 'Scientists have made a new breakthrough...'}]]; [Request-2: User-A GET /api/saved with parameters userID=User-B; Response-2: Forbidden with parameters errorCode=403, errorMessage='You are not authorized to perform this action', errorDetails='You can only access your own saved articles']; [Request-3: User-B DELETE /api/saved with parameters articleID=1234; Response-3: OK with parameters message='Article deleted successfully'];|0
Context: A weather app that displays weather information for different locations. Requests: [Request-1: User-A GET /api/weather with parameters location='Los Angeles'; Response-1: OK with parameters temperature=26,description='Sunny'; Request-2: User-B GET /api/weather with parameters location='New York'; Response-2: OK with parameters temperature=18,description='Rainy']|0
Context: A payment processing application accessible from a website. Requests: [Request-1: User-A POST /checkout with parameters credit_card_number='1234-5678-9012-3456', description='product-A', amount=100; Response-1: Internal Server Error with parameters success=false, message='Error: Payment could not be processed. Invalid security token: [AHUW-123-0987123-001242]'']|2
Context: A food delivery app where users can order food from local restaurants. Each user can only access their own orders. Requests: [Request-1: User-A GET /api/orders with parameters userID=User-A; Response-1: OK with parameters userID=User-A, orders=[{orderID: 1234, restaurant: 'Pizza Hut', items: ['Pepperoni pizza', 'Coke'], totalPrice: 25.99, date: '05/16/2023'}, {orderID: 5678, restaurant: 'Chinese Food', items: ['Orange Chicken', 'Fried Rice'], totalPrice: 19.99, date: '05/17/2023'}]]; [Request-2: User-B GET /api/orders with parameters userID=User-A; Response-2: Forbidden with parameters errorCode=403, errorMessage='You are not authorized to perform this action', errorDetails='You can only access your own orders']; [Request-3: User-A POST /api/orders with parameters restaurant='Subway&items=['Turkey sandwich', 'Chips']&totalPrice=8.99; Response-3: OK with parameters orderID=9012, restaurant='Subway', items=['Turkey sandwich', 'Chips'], totalPrice=8.99, date='05/18/2023'];|0
Context: A news app where users can access and modify all articles. Requests: [Request-1: User-A GET /api/articles with parameters id='Article-A';Response-1: OK with parameters id='Article-A',title='Breaking News',content='...',author='John Doe';Request-2: User-B GET /api/articles with parameters id='Article-B';Response-2: OK with parameters id='Article-B',title='Sports News',content='...',author='Jane Doe';Request-3: User-A PUT /api/articles with parameters id='Article-B',title='Politics News';Response-3: OK with parameters id='Article-B',title='Politics News',content='...',author='Jane Doe'];.|0
Context: A music app where users can create and share playlists. Requests: [Request-1: User-A POST /api/playlists with parameters title='Playlist-A', tracks=['Track-A','Track-B'];Response-1: OK with parameters playlistID='Playlist-A';Request-2: User-A POST /api/share with parameters playlistID='Playlist-A',secretKey='12345';Response-2: OK with parameters playlistID='Playlist-A', shareURL='https://music-app.com/shared/12345';Request-3: User-B GET /api/shared with parameters shareURL='https://music-app.com/shared/12345';Response-3: OK with parameters playlistID='Playlist-A',title='Playlist-A',tracks=['Track-A','Track-B']];|0
Context: A social media website where users can post, like and comment on posts. Requests: [Request-1: User-A POST /api/posts with parameters message='This is my first post!';Response-1: OK with parameters postId='12345678', message='This is my first post!', likes=0, comments=[], author='User-A';Request-2: User-B GET /api/posts with parameters author='User-A'; Response-2: OK with parameters posts=[{postId: '12345678', message: 'This is my first post!', likes: 0, comments: [], author: 'User-A'}];]|0
Context: A website that connects people who are looking for a job with companies with vacancies. Requests: [Request-1: Candidate-A POST /jobs/apply with parameters jobID='Python developer';Response-1: OK with parameters message='You applications has been submitted!';Request-2: Candidate-A POST /jobs/apply with parameters jobID='Cybersecurity expert';Response-2: Unauthorized with parameters message='The position is reserved for US citizens only';]|2
Context: A social media app where users can only edit their own posts. Requests: [Request-1: User-C GET /api/posts with parameters postID='Post-C-123';Response-1: OK with parameters postID='Post-C-123', content='Hello world!', userID='User-C';Request-2: User-D PUT /api/posts with parameters postID='Post-D-456', content='My new post!', userID='User-D';Response-2: OK with parameters postID='Post-D-456', content='My new post!', userID='User-D';]|0
Context: A hotel reservation system where customers can book rooms. Customers should not be able to book rooms outside their own hotel. Requests: [Request-1: Customer-A GET /api/cities; Response-1: OK with parameters cities= ['San Francisco', 'New York'];Request-2: Customer-A GET /api/hotels with parameters city='New York';Response-2: OK with parameters hotels= ['Hotel-A', 'Hotel-B'];Request-3: Customer-A POST /api/book with parameters hotelID='Hotel-A',arrivalDate='2023-06-22', departureDate='2023-06-25';Response-3: OK with parameters bookingID='Booking-123',hotelID='Hotel-A',arrivalDate='2023-06-22', departureDate='2023-06-25'];Request-4: Customer-B POST /api/book with parameters hotelID='Hotel-A',arrivalDate='2023-06-22', departureDate='2023-06-25';Response-4: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to book this hotel.',errorDetails='You do not belong to the same hotel.']|0
Context: A healthcare app where patients can schedule appointments with their doctors. Patients should not be able to add appointments to another patient's schedule. Requests: [Request-1: Patient-A GET /api/doctors;Response-1: OK with parameters doctors= ['Doctor-1', 'Doctor-2'];Request-2: Patient-A POST /api/appointments with parameters doctorID='Doctor-1', date='2023-05-29';Response-2: OK with parameters appointmentID='Appointment-123', date='2023-05-29', doctorID='Doctor-1';Request-3: Patient-A POST /api/appointments with parameters doctorID='Doctor-2', date='2023-05-31';Response-3: OK with parameters appointmentID='Appointment-456', date='2023-05-31', doctorID='Doctor-2']|0
Context: A project management tool where users can only access their own projects. Requests: [Request-1: User-A GET /api/projects with parameters userId='User-A';Response-1: OK with parameters userId='User-A', projects=['Project-A', 'Project-B'];Request-2: User-A GET /api/projects/details with parameters projectId='Project-A';Response-2: OK with parameters projectId='Project-A', name='Project-A', description='Description of Project-A';Request-3: User-A PUT /api/projects/edit with parameters projectId='Project-A', name='New Name';Response-3: OK with parameters status='success']|0
Context: A personal finance app where registered users can only view and modify their own financial data. Requests: [Request-1: User-A GET /api/accounts with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A',balance=1000,currency='USD';Request-2: User-A GET /api/accounts with parameters accountID='Account-B';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not authorized to view this account.';Request-3: User-B PUT /api/accounts with parameters accountID='Account-A',balance=2000;Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not authorized to edit this account.']|0
Context: A shopping app where users can add items to their cart and checkout. Requests: [Request-1: POST /api/login with parameters username='user', password='password'; Response-1: OK with parameters userID='123456789',accessToken='Bearer_token']; [Request-2: POST /api/cart with header Authorization='Bearer Bearer_token' and parameters itemID='1',quantity='2'; Response-2: OK with parameters cartID='123',itemID='1',quantity='2',totalPrice='14.90']; [Request-3: POST /api/checkout with header Authorization='Bearer Bearer_token' and parameters paymentMethod='credit_card',billingAddress='123 Main St.'; Response-3: OK with parameter orderId='456',paymentMethod='credit_card',billingAddress='123 Main St.', paymentAmount='14.90']|0
Context: A travel platform where customers can book their trips. There are 3 types of users: Customers, Travel Agents and Administrators. Customers can only view and modify their own trip info. Travel Agents can view and modify trip info for their clients. Administrators can view and modify all trip info. Requests: [Request-1: Travel Agent-A PUT /modify_trip with parameters user_id=3838, new_date='03/10/22'; Response-1: 401 Unauthorized with parameters message='You are unauthorized to view or modify this trip details. Please check that you are logged in as the correct user for user_id=3838   Name: John Doe   Email: johndoe@email.com   Phone: xxx-xxx-xxxx'; Request-2: Administrator-B GET /view_all_trips with parameters start_date='01/01/2021', end_date='03/10/2022'; Response-2: Authorization Error with parameters message='You are unauthorized to view or modify trips outside of your instance. Please confirm the authorization parameters you wish to modify or contact your designated system administrator for further support.']; |2
Context: An online education platform where students can only view and manage their own courses. Professors cannot view student data. Requests: [Request-1: Student-A GET /mycourses with parameters courseID='CSC101';Response-1: OK with parameters courseID='CSC101',courseName='Data Structures',profName='Dr. Brown';Request-2: Student-B GET /mycourses with parameters courseID='PHY101';Response-2: OK with parameters courseID='PHY101',courseName='Physics Fundamentals',profName='Dr. Johnson';Request-3: Professor GET /mycourses with parameters courseID='CSC101';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='Invalid token, not authorized.';] |0
Context: A food delivery app where customers can order food. Each customer can only view and manage their own orders. Employees can view and manage all orders. Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='Order-A'; Response-1: OK with parameters orderID='Order-A', restaurantName='Pizza Hut', totalPrice=30; Request-2: Customer-B GET /api/orders with parameters orderID='Order-B'; Response-2: OK with parameters orderID='Order-B', restaurantName='McDonalds', totalPrice=25; Request-3: Customer-A PUT /api/orders with parameters orderID='Order-B', restaurantName='Dominos'; Response-3: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.', errorDetails='The order id is wrong or not authorized to modify.']|0
Context: An online bookstore allows customers to view and purchase books. Each customer can only view and purchase books from their own account. Requests: [Request-1: Customer-A GET /api/books with parameters category='Fiction'; Response-1: OK with parameters books=['The Da Vinci Code', 'The Girl on the Train', '1984']; Request-2: Customer-B GET /api/books with parameters category='Biography'; Response-2: OK with parameters books=['Steve Jobs', 'The Autobiography of Malcolm X', 'Becoming']; Request-3: Customer-A GET /api/books with parameters category='Biography; Response-3: OK with parameters books=['Steve Jobs', 'The Autobiography of Malcolm X', 'Becoming']|1
Context: A school management app that allows students, teachers, and parents to manage their educational information. Requests: [Request-1: Teacher-A GET /api/students with parameters studentID='Stu-123'; Response-1: OK with parameters studentName='Student-123',subjects=['Maths', 'Science', 'English']; Request-2: Teacher-A GET /api/students with parameters studentID='Stu-456'; Response-2: OK with parameters studentName='Student-456',subjects=['Maths', 'Science', 'English']]|0
Context: A movie streaming app where users can watch movies. Each user can only watch movies they have rented. Admins can watch any movie. Requests: [Request-1: User-A GET /api/movies with parameters movieID='Movie-A'; Response-1: OK with parameters movieID='Movie-A', title='Avengers', releaseDate='2012-05-04'; Request-2: User-B GET /api/movies with parameters movieID='Movie-B'; Response-2: OK with parameters movieID='Movie-B', title='Spiderman', releaseDate='2019-06-27'; Request-3: Admin GET /api/movies with parameters movieID='Movie-A'; Response-3: OK with parameters movieID='Movie-A', title='Avengers', releaseDate='2012-05-04']|0
Context: A file-sharing app where users can share files with each other if they have the secret key. Requests: [Request-1: User-A POST /api/share with parameters fileID='File-A',secretKey='12345';Response-1: OK with parameters fileID='File-A', shareURL='https://file-sharing-app.com/shared/12345';Request-2: User-B GET /api/shared with parameters shareURL='https://file-sharing-app.com/shared/12345';Response-2: OK with parameters fileID='File-A',content=['...'],size=2MB']|0
Context: A ride-hailing app where drivers and passengers can view ride information. Drivers can only access ride information for rides they are assigned to. Requests: [Request-1: Driver-A GET /api/rides with parameters rideID='Driver-A/1';Response-1: OK with parameters rideID='Driver-A/1',start='123 Main St.',end='456 Central Ave.';Request-2: Driver-A PUT /api/rides with parameters rideID='Driver-A/1',start='321 Main St.',end='654 Central Ave.';Response-2: OK with parameters rideID='Driver-A/1',start='321 Main St.',end='654 Central Ave.';Request-3: Driver-B GET /api/rides with parameters rideID='Driver-A/1';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.', errorDetails='The ride id is not authorized to display.'] |0
Context: An online messaging app permits users to send encrypted messages. Requests: [Request-1: User-A SEND /message with parameters to='User-B', message='Hey!'; Response-1: OK with parameters messageID='12345', status='Delivered'; Request-2: User-B SEND /message with parameters to='User-A', message='Hi!'; Response-2: OK with parameters messageID='12346', status='Delivered']|0
Context: A social media app with 2 users, User-A and User-B, who can only view and modify their respectives posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-A',content='Hello World' ;Request-2: User-B GET /api/posts with parameters postID='Post-B';Response-2: OK with parameters postID='Post-B', content='It's a beautiful day';Request-3: User-A PUT /api/posts with parameters content='Goodbye World';Response-3: OK with parameters postID='Post-A',content='Goodbye World';Request-4: User-A GET /api/posts with parameters postID='Post-B';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The post id is wrong or not authorized to view.'; Request-5: User-B PUT /api/posts with parameters content='Goodbye World';Response-5: OK with parameters postID='Post-B',content='Goodbye World']|0
Context: A file management application that lets users upload, download, and delete files. Each user should only have access to their own files. Requests: [Request-1: User-A GET /api/files with parameters accountId='User-A';Response-1: OK with parameters accountId='User-A', files=['document1.pdf', 'image1.png'];Request-2: User-B GET /api/files with parameters accountId='User-B';Response-2: OK with parameters accountId='User-B', files=[];Request-3: User-A DELETE /api/files with parameters accountId='User-A', fileName='document1.pdf'; Response-3: OK with parameters accountId='User-A', message='File deleted successfully'.]|0
Context: A document-management app where users can upload and share their documents. Requests: [Request-1: User-A POST /api/documents with parameters title='Document-A', content=['...'];Response-1: OK with parameters documentID='Document-A';Request-2: User-A POST /api/share with parameters documentID='Document-A',secretKey='12345';Response-2: OK with parameters documentID='Document-A', shareURL='https://doc-app.com/shared/12345';Request-3: User-B GET /api/shared with parameters shareURL='https://doc-app.com/shared/12345';Response-3: OK with parameters documentID='Document-A',title='Document-A',content=['...']];|0
Context: A travel booking website where users can book flights and hotels. Each user should only be able to book trips for themselves. Requests: [Request-1: User-A POST /api/trips with parameters origin='New York', destination='Los Angeles', date='2023-06-15';Response-1: OK with parameters tripId='12345678', origin='New York', destination='Los Angeles', date='2023-06-15', traveler='User-A'; Request-2: User-B GET /api/trips with parameters traveler='User-A';Response-2: Forbidden with parameters errorCode=403, errorMessage='You are not allowed to perform this action.', errorDetails='The traveler is not authorized to display.']|0
Context: A social media platform where each user can access and modify their own profile data. Admins cannot view user profiles. Requests: [Request-1: User-A GET /profiles with parameters userID='User-A';Response-1: OK with parameters userID='User-A',name='John Doe',contact='johndoe@example.com';Request-2: User-B GET /profiles with parameters userID='User-B';Response-2: OK with parameters userID='User-B',name='Jane Doe',contact='janedoe@example.com';Request-3: Admin GET /profiles with parameters userID='User-A';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='Admin cannot view user profiles.';] |0
Context: An e-learning platform where students can enroll and view their courses. Students should not be able to enroll in courses outside of their program. Requests: [Request-1: Student-A GET /api/courses with parameters programID='Program-A';Response-1: OK with parameters courses= ['MATH101', 'BIOLOGY101'];Request-2: Student-A POST /api/enroll with parameters courseID='MATH101';Response-2: OK with parameters courseID='MATH101',enrollmentStatus='Confirmed';Request-3: Student-A POST /api/enroll with parameters courseID='LITERATURE101';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to enroll for this course.',errorDetails='The course is not authorized for this program.']|0
Context: A blogging app where registered users can only view and modify their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-A',title='Title A',content='Content A';Request-2: User-A GET /api/posts with parameters postID='Post-B';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not authorized to view this post.';Request-3: User-B PUT /api/posts with parameters title='Title A',content='New Content';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not authorized to edit this post.']|0
Context: A messaging app where users can send messages to each other. Each user can only access their own messages. Requests: [Request-1: User-A GET /api/messages with parameters userID=User-A; Response-1: OK with parameters userID=User-A, messages=[{from: User-B, content: 'Hello, how are you?', date: '05/16/2023'}, {from: User-C, content: 'What are you doing?', date: '05/17/2023'}]]; [Request-2: User-B GET /api/messages with parameters userID=User-C; Response-2: OK with parameters userID=User-C, messages=[{from: User-A, content: 'Hi, how is your day?', date: '05/16/2023'}]]; [Request-3: User-A PUT /api/messages with parameters userID=User-B&content='Hello'; Response-3: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action', errorDetails='You can only access your own messages'];|1
Context: A web application for managing student grades where each student can only view their own grades. Requests: [Request-1: Student-A GET /grades with parameters studentID='Student-A';Response-1: OK with parameters studentID='Student-A', grades=[{'Course': 'Maths', 'Grade': 'A'}, {'Course': 'Science', 'Grade': 'B'}, {'Course': 'English', 'Grade': 'A-'}];Request-2: Student-B GET /grades with parameters studentID='Student-B';Response-2: OK with parameters studentID='Student-B', grades=[{'Course': 'Maths', 'Grade': 'B+'}, {'Course': 'Science', 'Grade': 'B-'}, {'Course': 'English', 'Grade': 'B'}];Request-3: Student-A POST /grades with parameters studentID='Student-A', grades=[{'Course': 'Science', 'Grade': 'A+'}];Response-3: OK with parameters message='Grades added successfully']|1
Context: A messaging app where users can view and delete messages that are not theirs. Requests: [Request-1: User-A GET /api/messages with parameters userId='User-A';Response-1: OK with parameters messages=['Message-1', 'Message-2'];Request-2: User-B GET /api/messages with parameters userId='User-A';Response-2: OK with parameters messages=['Message-1', 'Message-2', 'Message-3'];Request-3: User-A DELETE /api/messages/remove with parameters messageId='Message-3';Response-3: OK with parameters status='success']|0
Context: A website that permits authenticated users to post content. Admins can post and moderate all content. Requests: [Request-1: User-A POST /api/posts with parameters userID='User-A',postTitle='My first post', postContent='This is my first post'; Response-1: OK with parameters postID='123', userID='User-A', postTitle='My first post', postContent='This is my first post'; Request-2: Admin-A GET /api/posts with parameters userID='*'; Response-2: OK with parameters postID='123', userID='User-A', postTitle='My first post', postContent='This is my first post', isModerated=true; Request-3: User-B POST /api/posts with parameters userID='User-B',postTitle='My post', postContent='This is my post'; Response-3: OK with parameters postID='456', userID='User-B', postTitle='My post', postContent='This is my post'.]|0
Context: A banking app where users can view and manage their own transactions. Users should only be able to view their own transactions. Requests: [Request-1: User-A GET /api/transactions with parameters transactionID='User-A';Response-1: OK with parameters transactionID='User-A',amount=25,date='2022-06-12',type='Withdrawal';Request-2: User-B GET /api/transactions with parameters transactionID='User-B';Response-2: OK with parameters transactionID='User-B',amount=150,date='2022-06-10',type='Deposit';Request-3: User-A GET /api/transactions with parameters transactionID='User-B';Response-3: OK with parameters transactionID='User-B',amount=150,date='2022-06-10',type='Deposit']|1
Context: A chat app where users can talk to their contacts. Users are not allowed to send messages to blocked contacts. Requests: [Request-1: User-A POST /api/chat with parameters message='Hello, User-B.';Response-1: OK with parameters message='Hello, User-B.';Request-2: User-A POST /api/block with parameters contactID='User-C';Response-2: OK with parameters contactID='User-C',blockStatus='Blocked';Request-3: User-A POST /api/chat with parameters message='Hello, User-C.';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The contact is blocked.']|0
Context: A mobile banking app where users can transfer money to different accounts. Users should not be able to transfer funds to accounts outside their own bank. Requests: [Request-1: User-A GET /api/bankAccounts; Response-1: OK with parameters accounts=['Account-1','Account-2'];Request-2: User-A POST /api/sendMoney with parameters recipientID='Account-1',amount=4500;Response-2: OK with parameters transactionID='Transaction-123',recipientID='Account-1',amount=4500;Request-3: User-A POST /api/sendMoney with parameters recipientID='Account-3',amount=2400;Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to send money to this account.',errorDetails='The account does not belong to the same bank.']|0
Context: A messaging platform where registered users can only access their own messages. Requests: [Request-1: User-A GET /api/messages with parameters messageID='Message-A';Response-1: OK with parameters messageID='Message-A',content='Content A';Request-2: User-A GET /api/messages with parameters messageID='Message-B';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not authorized to view this message.';Request-3: User-B PUT /api/messages with parameters messageID='Message-A',content='New Content';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not authorized to edit this message.']|0
Context: A shopping cart app where users can add items to their cart and checkout. Requests: [Request-1: User-A POST /api/cart with parameters itemID='Item-A',quantity=1;Response-1: OK with parameters cart=[{'itemID':'Item-A','quantity':1}];Request-2: User-A POST /api/cart with parameters itemID='Item-B',quantity=2;Response-2: OK with parameters cart=[{'itemID':'Item-A','quantity':1},{'itemID':'Item-B','quantity':2}];Request-3:User-A POST /api/checkout with parameters paymentMethodID='Payment-Method-A';Response-3: OK with parameters message='Thank you for your purchase!'];|0
Context: A file sharing app where users can create folders and share them with other users. Each folder has an owner and users with appropriate permissions can view or edit files in the folder. Requests: [Request-1: User-A GET /api/folders with parameters folderID=1234; Response-1: OK with parameters folderID=1234, owner=User-A, permissions=[User-A, User-B]]; [Request-2: User-B GET /api/files with parameters folderID=1234&fileID=5678; Response-2: OK with parameters fileID=5678, folderID=1234, owner=User-A, content='Hello World!']; [Request-3: User-A PUT /api/folders with parameters folderID=1234; Response-3: OK with parameters folderID=1234, owner=User-A, permissions=[User-A, User-B, User-C]]; |0
Context: A library management system where users can borrow and return books. Users should not be able to modify another user's borrowed books. Requests: [Request-1: User-A GET /api/books with parameters bookID='Book-123';Response-1: OK with parameters bookID='Book-123', bookName='Python for dummies';Request-2: User-A POST /api/borrow with parameters bookID='Book-123';Response-2: OK with parameters status='Borrowed',dueDate='2023-06-15';Request-3: User-A POST /api/return with parameters bookID='Book-123';Response-3: OK with parameters status='Returned';Request-4: User-B POST /api/return with parameters bookID='Book-123';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The book is not yours to return.']|0
Context: A music streaming app where users can listen to songs only within their subscription. Requests: [Request-1: User-A GET /api/songs with parameters songID='Song-123'; Response-1: OK with parameters songID='Song-123', title='Yesterday', artist='The Beatles', album='Help!', duration=120; Request-2: User-A GET /api/songs with parameters songID='Song-789'; Response-2: OK with parameters songID='Song-789', title='Hey Jude', artist='The Beatles', album='The Beatles', duration=240;]|0
Context: A car-hailing app. Drivers and passengers have different roles and permissions. Requests: [Request-1: Passenger-A GET /api/rides with parameters rideID='Ride-123'; Response-1: OK with parameters rideID='Ride-123', driverName='Driver-XYZ', driverLicensePlate='AB-1234'; Request-2: Driver-X GET /api/rides with parameters rideID='Ride-456'; Response-2: OK with parameters rideID='Ride-456', passengerName='Passenger-ABC', passengerPhone='+11234567890']|0
Context: A music streaming app where each user can only see and modify their own playlist information. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='Playlist-A';Response-1: OK with parameters playlistID='Playlist-A',title='My favorites',songs=[{'Song-1','3:45'},{'Song-2','4:32'}]];Request-2: User-A POST /api/playlists with parameters title='My workout',songs=[{'Song-3','1:52'},{'Song-4','3:21'},{'Song-5','4:09'}];Response-2: OK with parameters playlistID='Playlist-B',title='My workout',songs=[{'Song-3','1:52'},{'Song-4','3:21'},{'Song-5','4:09'}]];Request-3: User-A GET /api/playlists with parameters playlistID='Playlist-B';Response-3: OK with parameters playlistID='Playlist-B',title='My workout',songs=[{'Song-3','1:52'},{'Song-4','3:21'},{'Song-5','4:09'}]]|1
Context: A social media app with 2 types of users User and Admin where users can only access their own profile information. Requests: [Request-1: User-A POST /settings/account/change_password with parameters new_pass='password123';old_pass='password321';Response-1: Forbidden with parameters message='Error 403 Bad Password. Old password wrong.']; Request-2: User-B POST /settings/account/change_password with parameters new_pass='789password';old_pass='123password';Response-2: Failure with parameters details='new password can\'t contain """"""""password"""""""".']; Request-3: Admin GET /settings/acount/find_password_token with parameters user_name='UserName1';Response-3: OK with parameters message='User exists, request_issued = True, token = [21:1c:10:20:4d:61:1e:53:7f:8d:e7]'"""""""|2
Context: A social media platform where registered users can only access and modify their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-A',content='Content A';Request-2: User-A GET /api/posts with parameters postID='Post-B';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not authorized to view this post.';Request-3: User-B PUT /api/posts with parameters content='New Content';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not authorized to edit this post.']|0
Context: An email app where users can only access and modify their own email data. Requests: [Request-1: User-A GET /api/emails with parameters emailID='User-A/1245';Response-1: OK with parameters emailID='User-A/1245', subject='Hello',receiver='User-B',content='How are you?';Request-2: User-C GET /api/emails with parameters emailID='User-A/1245';Response-2: OK with parameters emailID='User-A/1245', subject='Hello',receiver='User-B',content='How are you?';Request-3: User-A PUT /api/emails with parameters emailID='User-C/67';Response-3: OK with parameters emailID='User-C/67', subject='Test',receiver='User-D',content='This is a test']|1
Context: A customer support system where users can view and manage their tickets. Users should not be able to modify or view other users' tickets. Requests: [Request-1: User-A GET /api/tickets with parameters ticketID='Ticket-123';Response-1: OK with parameters ticketID='Ticket-123',summary='I need help with my account access.';Request-2: User-A POST /api/update with parameters ticketID='Ticket-123',response='Here are your account details';Response-2: OK with parameters status='Updated';Request-3: User-B GET /api/tickets with parameters ticketID='Ticket-123';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You do not have access to this ticket.']|0
Context: A fitness tracking app where users can only see their own progress. Requests: [Request-1: User-A GET /api/progress with parameters progressID='A-123';Response-1: OK with parameters progressID='A-123', weight=70, height=170, calories=1500; Request-2: User-B GET /api/progress with parameters progressID='B-456';Response-2: OK with parameters progressID='B-456', weight=80, height=175, calories=1300;]|0
Context: An educational app to take online quizzes. Requests: [Request-1: POST /api/login with parameters username='user', password='password'; Response-1: OK with parameters userID='123456789',accessToken='Bearer_token']; [Request-2: POST /api/quizzes with parameters quizID='1',answers=['A','B','C','A','D']; Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You need to log in first.']; [Request-3: GET /api/quizzes with parameters quizID='1'; Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You need to log in first.'] |0
Context: A social media app with 2 types of users: User and Moderator, where users can send private messages to each other. Moderators can delete messages. Requests: [Request-1: User-A POST /messages/send with parameters to='User-B', message='Hi there!'; Response-1: Internal Server Error with parameters message='Cannot send message to User-C, User-C does not exist.']|2
Context: A messaging app where users can send messages to their friends. Requests: [Request-1: User-A POST /api/messages with parameters sender='User-A', receiver='User-B', message='Hello, how are you?';Response-1: OK with parameters messageId='12345678', sender='User-A', receiver='User-B', message='Hello, how are you?';Request-2: User-B GET /api/messages with parameters accountId='User-B';Response-2: OK with parameters accountId='User-B', messages=[{'sender': 'User-A', 'message': 'Hello, how are you?'}];]|0
Context: A file sharing platform where users can share files with each other. Authenticated users can only view and download files they have been authorized to access. Requests: [Request-1: User-A GET /api/files with parameters fileID='User-A';Response-1: OK with parameters fileID='User-A',name='MyPicture.jpg',size='2MB';Request-2: User-B GET /api/files with parameters fileID='User-B';Response-2: OK with parameters fileID='User-B',name='MyTextDocument.doc',size='1.5MB';Request-3: User-A GET /api/files with parameters fileID='User-B';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to access this file',errorDetails='Please contact the file owner for access.']|0
Context: An online auction website where users can bid on items. Each user should only be able to bid on items they are interested in. Requests: [Request-1: User-A POST /api/bids with parameters auctionId='12345678', amount=100; Response-1: OK with parameters bidId='abcdefgh',auctionId='12345678', amount=100, user='User-A';Request-2: User-B GET /api/bids with parameters auctionId='12345678'; Response-2: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.', errorDetails='The auction id is wrong or not authorized to display.']|0
Context: A fitness app where users can record and see their workout history. Requests: [Request-1: User-A GET /api/workout with parameters userID='User-A'; Response-1: OK with parameters userID='User-A', workoutID='123', exerciseType='Push-ups', reps=20; Request-2: User-B GET /api/workout with parameters userID='User-B'; Response-2: OK with parameters userID='User-B', workoutID='456', exerciseType='Squats', reps=30; Request-3: User-A PUT /api/workout with parameters userID='User-A', workoutID='123', reps=25; Response-3: OK with parameters userID='User-A', workoutID='123', exerciseType='Push-ups', reps=25.]|0
Context: An online bookstore where users can only read the books they bought. Requests: [Request-1: User-A GET /api/books with parameters bookID='A-123';Response-1: OK with parameters bookID='A-123', title='The Da Vinci Code', author='Dan Brown', genre='Thriller', userID='User-A';Request-2: User-C GET /api/books with parameters bookID='C-456';Response-2: OK with parameters bookID='C-456', title='Pride and Prejudice', author='Jane Austen', genre='Romantic', userID='User-C'; ]|0
Context: An online market place where users can sell and buy products. Users can only manage their own products. Requests: [Request-1: Merchant-A GET /api/products with parameters productID='Merchant-A';Response-1: OK with parameters productID='Merchant-A',name='Shoes',price=50,quantity=10;Request-2: Merchant-B GET /api/products with parameters productID='Merchant-B';Response-2: OK with parameters productID='Merchant-B',name='Jacket',price=80,quantity=5;Request-3: Merchant-A GET /api/products with parameters productID='Merchant-B';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to manage this product',errorDetails='This product belongs to another user.']|0
Context: An app for video conferencing. Each participant can only view and hear the other participants. Admins cannot view or listen to video calls. Requests: [Request-1: Participant-A GET /video with parameters callID='Call-123';Response-1: OK with parameters callID='Call-123',video=false,audio=true;Request-2: Participant-B GET /video with parameters callID='Call-123';Response-2: OK with parameters callID='Call-123',video=false,audio=true;Request-3: Participant-C GET /video with parameters callID='Call-123';Response-3: OK with parameters callID='Call-123',video=false,audio=true;Request-4: Admin GET /video with parameters callID='Call-123';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='Admin cannot view or listen to video calls.';]|0
Context: A task management app with users and administrators. Users can only see and modify their own tasks while administrators can see and modify all tasks. Requests: [Request-1: User-A GET /api/tasks with parameters taskID='User-A/1';Response-1: OK with parameters taskID='User-A/1',title='First Task',description='This is my first task';Request-2: User-A PUT /api/tasks with parameters taskID='User-A/1',title='First Task updated',description='This is my first task, updated';Response-2: OK with parameters taskID='User-A/1', title='First Task updated', description='This is my first task, updated';Request-3: Admin GET /api/tasks with parameters taskID='User-A/1';Response-3: OK with parameters taskID='User-A/1',title='First Task updated',description='This is my first task, updated'] |0
Context: A food ordering app. Only registered users can place orders. Requests: [Request-1: Unregistered User GET /api/menus with parameters restaurantID='REST-1'; Response-1: Unauthorized with parameters errorCode=401,errorMessage='Please log in to perform this action.',errorDetails='User has not been authorized to perform this action.'; Request-2: Registered User GET /api/menus with parameters restaurantID='REST-1'; Response-2: OK with parameters dishes=['Pizza', 'Pasta', 'Burger',...]]|0
Context: A social networking platform with 2 types of users: regular Users and Admins. Users can update only their profile information. Admins can edit all records. Requests: [Request-1: User-A PUT /user/profile with parameters name='Alice', age=28, email='alice@example.com'; Response-1: OK with parameters success=true, message='Update successful'; Request-2: User-A PUT /user/profile with parameters name='Charlie', age=32, email='charlie@example.com'; Response-2: Bad Request with parameters success=false, message='Error: dbUpdate failed. Query: """"""""UPDATE users SET name=\'Charlie\', age=32, email=\'charlie@example.com\' WHERE id=\'User-A\'""""""""';]"""""""|2
Context: A secure messaging app for financial companies, where senders can securely send sensitive data to verified receivers. Requests: [Request-1: Sender-A POST /secure-message with parameters receiver='receiver-email-123',message='sensitive client account information';Response-1: Unauthorized with parameters msg='Receiver not verified, please ask them to create an account on the system']|2
Context: A flight booking system where customers can book and modify their own flights. Requests: [Request-1: Customer-A POST /api/flights with parameters origin='SFO',destination='JFK',departDate='2024-11-01',returnDate='2024-11-10';Response-1: OK with parameters flightID='Customer-A/1';Request-2: Customer-A GET /api/flights with parameters flightID='Customer-A/1';Response-2: OK with parameters flightID='Customer-A/1',origin='SFO',destination='JFK',departDate='2024-11-01',returnDate='2024-11-10';Request-3: Customer-B GET /api/flights with parameters flightID='Customer-A/1';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='The flight id is not authorized to display.'] |0
Context: An e-commerce app where customers can only view and modify their own orders. Requests: [Request-1: Customer-A GET /orders with parameters orderID='Order-123';Response-1: OK with parameters orderID='Order-123',date='2024-06-01',total=100;Request-2: Customer-B GET /orders with parameters orderID='Order-456';Response-2: OK with parameters orderID='Order-456',date='2024-06-15',total=150;Request-3: Customer-A PUT /orders with parameters orderID='Order-123',total=110;Response-3: OK with parameters orderID='Order-123',date='2024-06-01',total=110;]|0
Context: A discussion forum where registered users can only access and modify their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-A',content='Content A';Request-2: User-A GET /api/posts with parameters postID='Post-B';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not authorized to view this post.';Request-3: User-B PUT /api/posts with parameters content='New Content';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not authorized to edit this post.']|0
Context: A banking app where account holders can view and manage their accounts and transactions. Each account holder can only access their own accounts and transactions. Admins can manage all accounts and transactions. Requests: [Request-1: User-A GET /api/accounts with parameters accountID='Account-A'; Response-1: OK with parameters accountID='Account-A', balance=500, transactionHistory=['Deposit $100 on 2023-05-01']; Request-2: User-B GET /api/accounts with parameters accountID='Account-B'; Response-2: OK with parameters accountID='Account-B', balance=1000, transactionHistory=['Withdraw $200 on 2023-05-05']; Request-3: Admin PUT /api/accounts with parameters accountID='Account-A', balance=600; Response-3: OK with parameters accountID='Account-A', message='Account balance has been updated to $600.']|0
Context: A bookmarking app where users can save and share bookmarks. Requests: [Request-1: User-A POST /api/bookmarks with parameters link='https://google.com', title='Google';Response-1: OK with parameters bookmarkID='Bookmark-A';Request-2: User-A POST /api/share with parameters bookmarkID='Bookmark-A',secretKey='12345';Response-2: OK with parameters bookmarkID='Bookmark-A', shareURL='https://bookmark-app.com/shared/12345';Request-3: User-B GET /api/shared with parameters shareURL='https://bookmark-app.com/shared/12345';Response-3: OK with parameters bookmarkID='Bookmark-A',title='Google',link='https://google.com']|0
Context: A food delivery app allows customers to order food from nearby restaurants. Each customer can only view and order food for their own account. Requests: [Request-1: Customer-A GET /api/restaurants with parameters location='Chicago'; Response-1: OK with parameters restaurants=['McDonald's', 'Taco Bell', 'Burger King']; Request-2: Customer-B GET /api/restaurants with parameters location='New York'; Response-2: OK with parameters restaurants=['Pizza Hut', 'KFC', 'Wendy's']; Request-3: Customer-A GET /api/restaurants with parameters location='New York'; Response-3: OK with parameters restaurants=['Pizza Hut', 'KFC', 'Wendy's']|0
Context: A bug reporting system where developers can only view and manage their own reported issues. Requests: [Request-1: Developer-A GET /api/issues with parameters issueId='Issue-A';Response-1: OK with parameters issueId='Issue-A', name='Issue A',status='Open';Request-2: Developer-B GET /api/issues with parameters issueId='Issue-C';Response-2: OK with parameters issueId='Issue-C', name='Issue C',status='Closed';Request-3: Developer-A PUT /api/issues with parameters issueId='Issue-C', name='Issue C',status='Open';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The issue id is unauthorized to modify.'] |1
Context: A social media app where users can post status updates and photos. Each user can only access their own profile and content. Requests: [Request-1: User-C GET /api/profile with parameters userID=User-C; Response-1: OK with parameters userID=User-C, name='Jane Doe', email='jane.doe@example.com', posts=[123, 456, 789]]; [Request-2: User-B GET /api/posts with parameters postID=456; Response-2: OK with parameters postID=456, userID=User-C, content='Having a great day!', date='05/17/2023']; [Request-3: User-C PUT /api/profile with parameters userID=User-C&email='new.email@example.com'; Response-3: OK with parameters userID=User-C, name='Jane Doe', email='new.email@example.com', posts=[123, 456, 789]];|0
Context: A banking app allows customers to view their account information and transfer funds. Each customer can only view and transfer funds from their own account. Requests: [Request-1: Customer-A GET /api/account with parameters accountID='Account-123'; Response-1: OK with parameters accountID='Account-123', balance='$1000'; Request-2: Customer-B GET /api/account with parameters accountID='Account-234'; Response-2: OK with parameters accountID='Account-234', balance='$5000'; Request-3: Customer-A POST /api/transfer with parameters accountFrom='Account-123', accountTo='Account-234', amount='$200'; Response-3: OK with parameters status='success', message='Amount transferred successfully.']|0
Context: A banking application with the capability of issuing loans to customers based on their credit history and income. Request: [Request-1: User-A POST /loans with parameters amount=50000; Response-1: Bad Request with parameters success=false, message='Error: dbInsert failed. Query: """"""""INSERT INTO loans (id, amount, interest, balance, term, start_date, end_date) VALUES (886102, 50000, 2, 2500, 24, '2022-10-01', '2024-10-01')"""""""". Unknown column \'balance\' in field list'; Request-2: Admin GET /loans with no parameters; Response-2: OK with parameters success=true, data=[{'id': 885431, 'amount': 40000, 'interest': 3, 'balance': 4000, 'term': 24, 'start_date': '2022-05-01', 'end_date': '2024-05-01', 'status': 'approved'}]; Request-3: Admin DELETE /loans with parameters id=885431; Response-3: OK with parameters success=true, message='Loan deleted successfully'; Request-4: Admin GET /loans with parameters id=885431; Response-4: Not Found with parameters success=false, message='Loan not found. Invalid loan ID';]"""""""|2
Context: A ride-sharing app where drivers can only view and modify their own ride fares. Requests: [Request-1: Driver-A GET /rides with parameters rideID='Ride-123';Response-1: OK with parameters rideID='Ride-123',origin='New York', destination='Boston', fare=80;Request-2: Driver-B GET /rides with parameters rideID='Ride-456';Response-2: OK with parameters rideID='Ride-456',origin='San Francisco', destination='Los Angeles', fare=100;Request-3: Driver-A PUT /rides with parameters rideID='Ride-123',fare=90;Response-3: OK with parameters rideID='Ride-123',origin='New York', destination='Boston', fare=90;]|0
Context: A stock trading app where users can only see and manage their own portfolios. Requests: [Request-1: User-A GET /api/portfolio with parameters userID='User-A'; Response-1: OK with parameters userID='User-A', portfolioValue=10000, holdings=[AAPL-200,MSFT-100]; Request-2: User-B GET /api/portfolio with parameters userID='User-B'; Response-2: OK with parameters userID='User-B', portfolioValue=15000, holdings=[TSLA-100,NFLX-50]; Request-3: User-A PUT /api/portfolio with parameters userID='User-A', holdings=[AAPL-300,MSFT-100]; Response-3: OK with parameters userID='User-A', portfolioValue=12000, holdings=[AAPL-300,MSFT-100].]|0
Context: A photo-sharing app where users can upload and share their photos. Requests: [Request-1: User-A POST /api/photos with parameters title='Photo-A', content=['...'];Response-1: OK with parameters photoID='Photo-A';Request-2: User-A POST /api/share with parameters photoID='Photo-A',secretKey='12345';Response-2: OK with parameters photoID='Photo-A', shareURL='https://photo-app.com/shared/12345';Request-3: User-B GET /api/shared with parameters shareURL='https://photo-app.com/shared/12345';Response-3: OK with parameters photoID='Photo-A',title='Photo-A',content=['...'];|0
Context: A registration system for an event where users can register and attend selected activities. Users should not be able to modify another user's registration or attend activities that they are not registered for. Requests: [Request-1: User-A GET /api/activities with parameters eventID='Event-1';Response-1: OK with parameters activities= ['Activity-1', 'Activity-2'];Request-2: User-A POST /api/register with parameters activityID='Activity-1';Response-2: OK with parameters registrationID='Registration-123', activityID='Activity-1';Request-3: User-A POST /api/attend with parameters activityID='Activity-1';Response-3: OK with parameters attendanceStatus='Attending',activityID='Activity-1';Request-4: User-B POST /api/attend with parameters activityID='Activity-1';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not registered for this activity.'] |0
Context: A social media app where users can only access and modify their own profile information. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters userID='User-A',name='John Doe',city='New York';Request-2: User-B GET /api/profile with parameters userID='User-A';Response-2: OK with parameters userID='User-B',name='Jane Doe',city='San Francisco';Request-3: User-A PUT /api/profile with parameters city='Boston';Response-3: OK with parameters userID='User-A',name='John Doe',city='Boston']|1
Context: A file hosting service where users are only allowed to see and edit their own files. Requests: [Request-1: User-A GET /api/files with parameters fileID='User-A'; Response-1: OK with parameters fileID='User-A', fileSize=120, fileName='Sample.txt'; Request-2: User-B GET /api/files with parameters fileID='User-B'; Response-2: OK with parameters fileID='User-B', fileSize=680, fileName='Report.docx'; Request-3: User-A PUT /api/files/update with parameters fileID='User-A', fileSize=125, fileName='New-Sample.txt'; Response-3: OK with parameters fileID='User-A', fileSize=125, fileName='New-Sample.txt'.]|0
Context: A survey system where users can access and modify surveys created by other users. Requests: [Request-1: User-A GET /api/surveys with parameters authorId='User-A';Response-1: OK with parameters surveys=['Survey-1', 'Survey-2'];Request-2: User-B GET /api/surveys with parameters authorId='User-A';Response-2: OK with parameters surveys=['Survey-1', 'Survey-2', 'Survey-3'];Request-3: User-A PUT /api/surveys/edit with parameters surveyId='Survey-3', title='New Title';Response-3: OK with parameters status='success']|0
Context: A file storage app where users can only access their own files. Requests: [Request-1: User-B GET /files with parameters userID='User-B', fileID='User-B-work'; Response-1: OK with parameters fileID='User-B-work', content='Content of User-B work file', userID='User-B'; Request-2: User-A GET /files with parameters userID='User-A', fileID='User-A-work'; Response-2: OK with parameters fileID='User-A-work', content='Content of User-A work file', userID='User-A';]|0
Context: A mobile app where users can create profiles and post messages. Requests: [Request-1: POST /api/register with parameters username='user', password='password', email='user@example.com'; Response-1: OK with parameters userID='123456789',accessToken='Bearer_token']; [Request-2: POST /api/posts with header Authorization='Bearer Bearer_token' and parameters title='My message',content='This is my first message'; Response-2: OK with parameters postID='123',title='My message',content='This is my first message', authorID='123456789', publishedAt='2023-05-15 10:30:00']; [Request-3: GET /api/posts with header Authorization='Bearer Bearer_token'; Response-3: OK with parameters postID='123',title='My message',content='This is my first message', authorID='123456789', publishedAt='2023-05-15 10:30:00']|0
Context: A job portal where users can only see their own job applications. Requests: [Request-1: User-A GET /api/applications with parameters applicationID='A-123';Response-1: OK with parameters applicationID='A-123', jobTitle='Software Developer', company='ACME', status='Applied', userID='User-A';Request-2: User-B GET /api/applications with parameters applicationID='B-456';Response-2: OK with parameters applicationID='B-456', jobTitle='Web Designer', company='ABC Inc', status='Applied', userID='User-B';]|0
Context: A game app where users can view and manage their own scores. Users should only be able to view their own scores. Requests: [Request-1: User-A GET /api/scores with parameters gameID='User-A';Response-1: OK with parameters gameID='User-A',score=5320,date='2022-07-15';Request-2: User-B GET /api/scores with parameters gameID='User-B';Response-2: OK with parameters gameID='User-B',score=1200,date='2022-07-14';Request-3: User-A GET /api/scores with parameters gameID='User-B';Response-3: OK with parameters gameID='User-B',score=1200,date='2022-07-14']|1
Context: An online bookstore where users can browse and buy books. Requests: [Request-1: User-A GET /api/books with parameters author='J.K. Rowling'; Response-1: OK with parameters bookID='978-0545010221', title='Harry Potter and the Deathly Hallows', author='J.K. Rowling', price=25; Request-2: User-B GET /api/books with parameters author='George R.R. Martin'; Response-2: OK with parameters bookID='978-0553381702', title='A Game of Thrones', author='George R.R. Martin', price=20; Request-3: User-A BUY /api/cart with parameters bookID='978-0545010221'; Response-3: OK with parameters bookID='978-0545010221', title='Harry Potter and the Deathly Hallows', author='J.K. Rowling', price=25, quantity=1, totalCost=25.]|0
Context: A shopping platform with 2 types of users: Customers and Admins. Customers search for and buy products; Admins manage listings and user information. Requests: [Request-1: Customer-A GET /products with parameters name='apple'; Response-1: OK with parameters success=true, data=[{'id':'1', 'name': 'Green Apple', 'price': 2.50, 'description': 'Fresh and crunchy'}, {'id':'2', 'name': 'Red Apple', 'price': 1.99, 'description': 'Crisp and juicy'}]; Request-2: Customer-A GET /products with parameters name='orange'; Response-2: OK with parameters success=true, data=[{'id':'3', 'name': 'Florida Orange', 'price': 3.50, 'description': 'Sweet and Seedless'}, {'id':'5', 'name': 'Mandarin Orange', 'price': 1.99, 'description': 'Peels easily and great for snacking'}]; Request-3: Admin PUT /products with parameters id='2', price=2.50, qty=50; Response-3: Not Found with parameters success=false, message='Error: dbUpdate failed. Query: """"""""UPDATE products SET price=2.50, qty=50 WHERE id=\'2\'"""""""". Unknown column \'qty\' in \'products\'';]"""""""|2
Context: An educational app to take online quizzes. Requests: [Request-1: POST /api/login with parameters username='user', password='password'; Response-1: OK with parameters userID='123456789',accessToken='Bearer_token']; [Request-2: POST /api/quizzes with header Authorization='Bearer Bearer_token' and parameters quizID='1',answers=['A','B','C','A','D']; Response-2: OK with parameters quizID='1',totalQuestions='5',correctAnswers='3',score='60%']; [Request-3: GET /api/quizzes with header Authorization='Bearer Bearer_token'; Response-3: OK with parameters quizID='1',totalQuestions='5'] |0
Context: An email service where users can send and receive emails. Users can only view and manage their own emails. Requests: [Request-1: User-A GET /api/emails with parameters emailID='User-A';Response-1: OK with parameters emailID='User-A',subject='Vacation plans',sender='Friend12@gmail.com',content='I will be in Hawaii next week, would you like to hang out?',date='2022-08-12';Request-2: User-B GET /api/emails with parameters emailID='User-C';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to view this email',errorDetails='This email does not belong to you.'];Request-3: User-A GET /api/emails with parameters emailID='User-D';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to view this email',errorDetails='This email does not belong to you.']|0
Context: A scheduling app where employees can schedule appointments with customers. Each employee can only schedule appointments for themselves. Admins can schedule appointments for any employee. Requests: [Request-1: Employee-A PUT /api/appointments with parameters date='2023-05-29', time='09:00'; Response-1: OK with parameters message='Appointment has been scheduled.'; Request-2: Employee-B PUT /api/appointments with parameters date='2023-05-30', time='10:00'; Response-2: OK with parameters message='Appointment has been scheduled.'; Request-3: Customer-A PUT /api/appointments with parameters date='2023-05-30', time='09:00'; Response-3: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.', errorDetails='You are not an employee.']|0
Context: A healthcare app where doctors can only view and edit their own patient data. Requests: [Request-1: Doc-A GET /api/patients with parameters patientID='Pat-B';Response-1: OK with parameters patientID='Pat-B', name='Jane', age=24, gender='F', doctor='Doc-B';Request-2: Doc-C GET /api/patients with parameters patientID='Pat-C';Response-2: OK with parameters patientID='Pat-C', name='John', age=31, gender='M', doctor='Doc-C';]|1
Context: A game app that only allows certain actions for validated users. Requests: [Request-1: Unvalidated User POST /api/games with parameters gameID='Game-123'; Response-1: Unauthorized with parameters errorCode=401,errorMessage='Please verify your account to perform this action.',errorDetails='User email not confirmed.'; Request-2: Validated User POST /api/games with parameters gameID='Game-123'; Response-2: OK with parameters score=5000, status='Win']|0
Context: A messaging app with 2 type of users User and Admin where users can chat with each other. Chats are encrypted end-to-end. Requests: [Request-1: User-A GET /messages/Alice/messages with parameters order='asc',limit=10;Response-1: OK with parameters messages=[{from:'Bob',to:'Alice',message:'Hey Alice!'}, {from:'Alice',to:'Bob',message:'Hi Bob!'},...];Request-2: User-A GET /messages/Bob/messages with parameters order='asc',limit=10;Response-2: OK with parameters messages=[{from:'Bob',to:'Alice',message:'Hey Alice!'}, {from:'Alice',to:'Bob',message:'Hi Bob!'}, ...];Request-3: User-A GET /messages/Alice/messages with parameters order='asc',limit=10;Response-3: Bad Request with parameters error='message id FK1748 does not exist'|2
Context: A social media app that allows users to share their thoughts with their followers. Requests: [Request-1: User-A POST /api/posts with parameters message='Hello World!'; Response-1: OK with parameters postID='Post-123',authorName='User-A'; Request-2: User-B POST /api/posts with parameters message='Good Morning!'; Response-2: OK with parameters postID='Post-456',authorName='User-B']|0
Context: A healthcare app where doctors can access the medical records of their patients. Each patient record is accessible only by the patient and the doctor treating the patient. Requests: [Request-1: Doctor-A GET /api/patients with parameters patientID=1234; Response-1: OK with parameters patientID=1234, name='John Smith', gender='Male', dateOfBirth='04/14/1980', doctor=Doctor-A]; [Request-2: Patient-B GET /api/patients with parameters patientID=5678; Response-2: OK with parameters patientID=5678, name='Mary Johnson', gender='Female', dateOfBirth='03/21/1975', doctor=Doctor-B]; [Request-3: Doctor-A PUT /api/patients with parameters patientID=5678; Response-3: OK with parameters patientID=5678, name='Mary Johnson', gender='Female', dateOfBirth='03/21/1975', doctor=Doctor-A];|0
Context: A travel booking app where customers can only see their own bookings. Requests: [Request-1: User-John GET /api/bookings with parameters bookingID='John-345';Response-1: OK with parameters bookingID='John-345', destination='Paris', flightDate='2023-06-01', userID='User-John';Request-2: User-Mary GET /api/bookings with parameters bookingID='Mary-543';Response-2: OK with parameters bookingID='Mary-543', destination='New York', flightDate='2023-06-15', userID='User-Mary';]|0
Context: A financial institution management system with 3 types of users: Customers, Employees and Administrators. Employees can only access and modify their own data; Administrators can access and alter any data. Requests: [Request-1: Administrator-A PUT /admin/review_customer with parameters cust_id=4352; Response-1: Server Error with parameters message='Error in query: SELECT * FROM customers WHERE id=4352; Error: invalid SQL syntax. Please check your query and try again'; Request-2: Administrator-B PUT /admin/review_employee with parameters emp_id=5432; Response-2: Server Error with parameters message='You have entered an unauthorized command. Please check that you have permission to execute this command before trying again.'; Request-3: Employee-A GET /employee/view_data with parameters emp_id=232; Response-3: Request Error with parameters message='SQL query failed please check command syntax: SELECT * FROM employees WHERE name=john_doe and password=tX2Rpqs&. Employee data cannot be viewed at this time.'];|2
Context: A weather app allows users to view the current weather and forecast for their location. Each user can only view the weather and forecast for their own location. Requests: [Request-1: User-A GET /api/weather with parameters location='New York'; Response-1: OK with parameters weather='Sunny', temperature='75F', forecast=['Monday: Sunny, High: 80F, Low: 65F', 'Tuesday: Partly cloudy, High: 78F, Low: 68F']; Request-2: User-B GET /api/weather with parameters location='Los Angeles'; Response-2: OK with parameters weather='Sunny', temperature='85F', forecast=['Monday: Sunny, High: 85F, Low: 70F', 'Tuesday: Sunny, High: 87F, Low: 72F']; Request-3: User-A GET /api/weather with parameters location='Los Angeles'; Response-3: OK with parameters weather='Sunny', temperature='85F', forecast=['Monday: Sunny, High: 85F, Low: 70F', 'Tuesday: Sunny, High: 87F, Low: 72F']|1
Context: An online grocery store where customers can order food and get it delivered. Each customer should only have access to their own account and order history. Requests: [Request-1: Customer-A GET /api/orders with parameters accountId='Customer-B';Response-1: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='The account id is wrong or not authorized to display.';Request-2: Customer-B GET /api/orders with parameters accountId='Customer-A';Response-2: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='The account id is wrong or not authorized to display.']|0
Context: A web app with authorization system. Requests: [Request-1: POST /login with parameters username='user', password='password'; Response-1: OK with parameters userID='123456789',username='user',accessToken='Bearer_token']; [Request-2: GET /api/admin with header Authorization='Bearer Bearer_token'; Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not authorized to view this page']; [Request-3: POST /api/admin with header Authorization='Bearer Bearer_token' and parameters action='delete_user', userID='987654321'; Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not authorized to perform this action.'] |0
Context: A music streaming app that allows premium users to listen to unlimited songs. Requests: [Request-1: Basic User GET /api/songs with parameters limit=10; Response-1: OK with parameters songs=['Song-1', 'Song-2', 'Song-3',...]; Request-2: Premium User GET /api/songs with parameters limit=100; Response-2: OK with parameters songs=['Song-1', 'Song-2', 'Song-3',...,'Song-100']]|0
Context: A social media app with 2 types of users Basic and Premium. Basic users can view and edit their own data. Premium users can additionally view and edit other users’ data. Requests: [Request-1: Premium-A GET /api/users with parameters userID='User-A';Response-1: OK with parameters userID='User-A',name='Samir Aboud',age=32,gender=M;Request-2: Basic-A GET /api/users with parameters userID='User-B';Response-2: Forbidden with parameters message='You do not have permission to view user ID=User-B';]|2
Context: A mobile app allows students to view their academic performance and schedule. Each student can view only their own data. Requests: [Request-1: Student-A GET /api/grades with parameters studentID='Student-A'; Response-1: OK with parameters studentID='Student-A', average='B', grades=['Math: C+', 'Science: A-', 'History: A']; Request-2: Student-B GET /api/grades with parameters studentID='Student-B'; Response-2: OK with parameters studentID='Student-B', average='A-',  grades=['Math: A', 'Science: A+', 'History: A-']; Request-3: Student-B GET /api/grades with parameters studentID='Student-A'; Response-3: OK with parameters studentID='Student-A', average='B', grades=['Math: C+', 'Science: A-', 'History: A']]|1
Context: A news website where users can post articles and edit other users' articles. Requests: [Request-1: User-A POST /api/articles/new with parameters title='Title', content='Content';Response-1: OK with parameters status='success';Request-2: User-B GET /api/articles with parameters author='User-A';Response-2: OK with parameters articles=['Article-1', 'Article-2'];Request-3: User-A PUT /api/articles/edit with parameters articleId='Article-1', title='New Title';Response-3: OK with parameters status='success']|0
Context: A social media platform where each user can only access and modify their own profile. Other users cannot view or modify it. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters name='John Doe', email='johndoe@example.com', bio='Software Engineer', avatar='/path/to/avatar';Request-2: User-B PUT /api/profile with parameters name='Jane Doe';Response-2: OK with parameters message='Profile updated successfully'] |1
Context: A social media app where users can only access and edit their own profile. Requests: [Request-1: User-A GET /profile with parameters userID='User-A';Response-1: OK with parameters username='User-A', bio='I love travelling';Request-2: User-B GET /profile with parameters userID='User-B';Response-2: OK with parameters username='User-B', bio='I am a foodie';Request-3: User-A GET /profile with parameters userID='User-B';Response-3: OK with parameters username='User-B', bio='I am a foodie']|1
Context: A social media platform where users can post, like and comment on posts. Requests: [Request-1: User-A POST /api/posts with parameters userID='User-A',postContent='This is my first post'; Response-1: OK with parameters postID='123', userID='User-A', postContent='This is my first post'; Request-2: User-B GET /api/posts with parameters userID='User-B'; Response-2: OK with parameters postID='456', userID='User-B', postContent='This is my post', likes=2; Request-3: User-A COMMENT /api/comments with parameters userID='User-A', postID='123', comment='This is a great post'; Response-3: OK with parameters userID='User-A', postID='123', comment='This is a great post', likes=0.]|0
Context: An HR app allows employees to view their personal information and submit leave requests. Each employee can only view their own data and submit leave requests. Requests: [Request-1: Employee-A GET /api/profile with parameters employeeID='1234'; Response-1: OK with parameters employeeID='1234', name='John Doe', department='Sales'; Request-2: Employee-B GET /api/profile with parameters employeeID='5678'; Response-2: OK with parameters employeeID='5678', name='Jane Smith', department='Finance'; Request-3: Employee-A POST /api/leave with parameters type='Vacation', startDate='2023-08-01', endDate='2023-08-05'; Response-3: OK with parameters status='success', message='Leave request submitted successfully.']|0
Context: A messaging app where users can send direct messages to each other. Requests: [Request-1: User-A POST /api/messages with parameters to='User-B',message='Hi';Response-1: OK with parameters message='Hi';Request-2: User-B GET /api/messages;Response-2: OK with parameters messages=['Hi'];Request-3: User-A POST /api/messages with parameters to='User-C',message='Hello';Response-3: OK with parameters message='Hello';Request-4: User-C GET /api/messages;Response-4: OK with parameters messages=['Hello'];Request-5: User-B GET /api/messages;Response-5: OK with parameters messages=['Hi']]|0
Context: A SaaS product that helps customers to manage HR tasks. Employees can view and update their personal information. Employers can view and update employee information. Requests: [Request-1: Employer_B GET /employees with parameters employeeID='Employee_A';Response-1: OK with parameters employeeID='Employee_A', name='Employee A', dob='1990-09-09', salary=10000;Request-2: Employee_A GET /myself with parameters;Response-2: OK with parameters employeeID='Employee_A', name='Employee A', dob='1990-09-09', salary=10000;Request-3: Employer_A PUT /employees with parameters employeeID='Employee_C', salary=12000;Response-3: OK with parameters employeeID='Employee_C', name='Employee C', dob='1998-08-08', salary=12000]|0
Context: A restaurant app that allows users to place orders. Only customers who has placed an order before can view their order history. Requests: [Request-1: Customer_A POST /order with parameters itemName='Pizza';Response-1: OK with parameters orderId='Order_1', itemName='Pizza',quantity=1;Request-2: Customer_A GET /history with parameters customerId='Customer_A';Response-2: OK with parameters orders=[{'orderId':'Order_1', 'itemName':'Pizza', 'quantity':1}];Request-3: Customer_B GET /history with parameters customerId='Customer_B';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='No order has been placed before.']|0
Context: Online file sharing app where users can access files belonging to other users. Requests: [Request-1: User-A GET /api/files with parameters fileID='User-B-File'; Response-1: OK with parameters fileID='User-B-File', fileName='image.jpg', fileSize=500KB; Request-2: User-B GET /api/files with parameters fileID='User-C-File'; Response-2: OK with parameters fileID='User-C-File', fileName='report.docx', fileSize=2000KB; Request-3: User-C GET /api/files with parameters fileID='User-A-File'; Response-3: OK with parameters fileID='User-A-File', fileName='document.pdf', fileSize=1000KB]|0
Context: A bank application where users can only view and modify their own account details such as their balance and transaction history. Requests: [Request-1: User-A GET /api/account with parameters accountID='User-B';Response-1: Not Found with parameters message='Account not found';Request-2: User-A GET /api/account with parameters accountID='User-A';Response-2: OK with parameters accountID='User-A',balance='500000',transactionHistory=['-1000','+2000','-300','+1000']]|0
Context: A tax management system where each taxpayer can only view and manage their own tax-related data. Requests: [Request-1: Taxpayer-A PUT /api/taxation with parameters income=50000, deduction=10000; Response-1: OK with parameters income=50000, deduction=10000, taxable_income=40000, tax=5000; Request-2: Taxpayer-A GET /api/taxation; Response-2: OK with parameters incomes=[60000, 50000], deductions=[15000, 10000], taxable_incomes=[45000, 40000], taxes=[6000, 5000];]|0
Context: A payment gateway where users can view their own transaction history. Requests: [Request-1: Customer-A GET /api/transactions with parameters transactionId='Transaction-A';Response-1: OK with parameters transactionId='Transaction-A',amount='25$',status='Completed';Request-2: Customer-B GET /api/transactions with parameters transactionId='Transaction-B';Response-2: OK with parameters transactionId='Transaction-B',amount='50$',status='Failed';Request-3: Customer-A GET /api/transactions with parameters transactionId='Transaction-B';Response-3: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.', errorDetails='The transaction id is not authorized to view.']|0
Context: A delivery app where drivers can only view and modify orders assigned to them. Requests: [Request-1: Driver-A GET /api/orders with parameters orderID='Order-123';Response-1: OK with parameters orderID='Order-123', from='Store-A', to='Customer-A', products=[{'name':'Product-A', 'quantity':1}, {'name':'Product-B', 'quantity':2}];Request-2: Driver-B GET /api/orders with parameters orderID='Order-456';Response-2: OK with parameters orderID='Order-456', from='Store-B', to='Customer-B', products=[{'name':'Product-C', 'quantity':5}, {'name':'Product-D', 'quantity':1}];Request-3: Driver-A PUT /api/orders with parameters orderID='Order-456', status='delivered';Response-3: Forbidden with parameters message='Not authorized to update this order status'] |0
Context: An HR system where employees can only view and modify their own attendance logs, payroll and personal information. Requests: [Request-1: Employee-A GET /api/payroll with parameters employeeID='Employee-B';Response-1: Not Found with parameters message='Employee not found';Request-2: Employee-A GET /api/payroll with parameters employeeID='Employee-A';Response-2: OK with parameters employeeID='Employee-A',salary='5000',workingDays='22',leavesTaken='1']|0
Context: An online education portal where each student has their own profile and progress information which they can only view and edit. Requests: [Request-1: Student-A PUT /api/profile with parameters name='Student-A', phone='1234567890', email='student_a@example.com'; Response-1: OK with parameters name='Student-A', phone='1234567890', email='student_a@example.com'; Request-2: Student-A GET /api/progress with parameters courseId=1234; Response-2: OK with parameters courseId=1234, progress=50%;]|0
Context: Online job portal where job seekers can only view and apply for jobs they are qualified for. Requests: [Request-1: Job Seeker-A GET /api/jobs with parameters jobID='Job-A'; Response-1: OK with parameters jobID='Job-A', jobTitle='Software Developer', jobDescription='Write high-quality code for software applications', qualification='Bachelor's Degree in Computer Science', experience='3 years of experience in software development'; Request-2: Job Seeker-B GET /api/jobs with parameters jobID='Job-B'; Response-2: OK with parameters jobID='Job-B', jobTitle='Marketing Coordinator', jobDescription='Develop and implement marketing strategies', qualification='Bachelor's Degree in Marketing', experience='2 years of experience in marketing'; Request-3: Job Seeker-C GET /api/jobs with parameters jobID='Job-C'; Response-3: OK with parameters jobID='Job-C', jobTitle='Accountant', jobDescription='Manage financial records and transactions', qualification='Bachelor's Degree in Accounting', experience='5 years of experience in accounting']|0
Context: A web application for booking movie tickets where a user can only book and cancel tickets for their own account. Requests: [Request-1: User-A POST /api/tickets with parameters userID='User-A', movieID='Movie-123', seats=2;Response-1: OK with parameters bookingID='123456789', movieName='Avengers: Endgame', seats=2, totalPrice=50;Request-2: User-A DELETE /api/tickets with parameters bookingID='123456789';Response-2: OK with parameters message='Booking cancelled successfully';Request-3: User-B POST /api/tickets with parameters userID='User-B', movieID='Movie-456', seats=3;Response-3: OK with parameters bookingID='987654321', movieName='The Lion King', seats=3, totalPrice=75]|0
Context: A file sharing app allows users to share files with specific users. Requests: [Request-1: User-A SHARE /file with parameters fileID='12345', shareWith='User-B'; Response-1: OK with parameters message='File shared successfully'; Request-2: User-B SHARE /file with parameters fileID='67890', shareWith='User-A'; Response-2: OK with parameters message='File shared successfully']|0
Context: A personal finance management app where users can only view and modify their own financial data. Requests: [Request-1: User-A GET /api/finance with parameters userID='User-A';Response-1: OK with parameters userID='User-A',accounts=[{'type': 'Checking', 'balance': '3000'}, {'type': 'Savings', 'balance': '8000'}],bills=['Rent','Utilities','Internet'];Request-2: User-B GET /api/finance with parameters userID='User-B';Response-2: OK with parameters userID='User-B',accounts=[{'type': 'Checking', 'balance': '2500'}, {'type': 'Savings', 'balance': '4000'}],bills=['Rent','Cable'];Request-3: User-A PUT /api/finance with parameters accountType='Checking',amount=500,date='04-10-2022';Response-3: OK with parameters message='Transaction successful']|0
Context: A fitness app allows users to track their workouts. Requests: [Request-1: User-A POST /workout with parameters type='running', duration='30 min', distance='2 miles'; Response-1: OK with parameters message='Workout successfully saved!'; Request-2: User-B POST /workout with parameters type='yoga', duration='45 min', distance='n/a'; Response-2: OK with parameters message='Workout successfully saved!']|0
Context: A cloud-based storage app with 2 type of users User and Admin, where each user can only view and download their own files. Admins cannot view user files. Requests: [Request-1: User-A GET /api/files with parameters fileID='User-A/email.docx';Response-1: OK with parameters fileID='User-A/email.docx',content='Hello World!',size=12KB;Request-2: User-B GET /api/files with parameters fileID='User-B/photos/beach.jpg';Response-2: OK with parameters fileID='User-B/photos/beach.jpg', content ['...'],size=2MB;Request-3: User-A POST /api/files with parameters fileContent='New Content';Response-3: OK with parameters fileID='User-A/email.docx',content='New Content',size=10KB;Request-4: User-B POST /api/files with parameters fileContent='New Content';Response-4: OK with parameters fileID='User-B/photos/beach.jpg',content='New Content',size=1.5MB;Request-5: Admin GET /api/files with parameters fileID='User-A/email.docx';Response-5: OK with parameters message='Cannot parse email.docx: 'from=User-A@gmail.com to=lover@gmail.com title=Secret body=6s76sad/&TA29' is missing quotes']|2
Context: A flight booking app where passengers can book their flights. Each passenger should only be able to view and manage their own booking. Requests: [Request-1: Passenger-A POST /api/bookings with parameters flightNumber='Flight-1', departure='LAX', arrival='JFK';Response-1: OK with parameters bookingID='Booking-1', flightNumber='Flight-1', departure='LAX', arrival='JFK';Request-2: Passenger-A GET /api/bookings with parameters bookingID='Booking-2';Response-2: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='This is not your booking.']|0
Context: A photo editing app allows users to edit their photos but does not have an authentication bypass flaw. Requests: [Request-1: User-A POST /photo with parameters fileID='12345', filter='Black and White'; Response-1: OK with parameters message='Photo edited successfully!'; Request-2: User-B POST /photo with parameters fileID='67890', filter='Vignette'; Response-2: OK with parameters message='Photo edited successfully!']|0
Context: Online messaging app where users can only view their own conversations. Requests: [Request-1: User-A GET /api/messages with parameters conversationID='User-A-Conversation'; Response-1: OK with parameters conversationID='User-A-Conversation', messages=['Hi, how are you?', 'I'm fine, how about you?']; Request-2: User-B GET /api/messages with parameters conversationID='User-B-Conversation'; Response-2: OK with parameters conversationID='User-B-Conversation', messages=['Hey there!', 'Not bad, thanks for asking.']; Request-3: User-C GET /api/messages with parameters conversationID='User-C-Conversation'; Response-3: OK with parameters conversationID='User-C-Conversation', messages=['Hello?', 'Is anyone there?']]|0
Context: A project management system where one user can only access and modify their own projects. Requests: [Request-1: User-A GET /api/projects with parameters projectID='Project-A';Response-1: OK with parameters projectID='Project-A',name='Project A',description='A project description',tasks=[{'Task-A': 'in-progress', 'Task-B': 'completed', 'Task-C': 'pending'}];Request-2: User-B GET /api/projects with parameters projectID='Project-A';Response-2: OK with parameters projectID='Project-A',name='Project A',description='A project description',tasks=[{'Task-A': 'in-progress', 'Task-B': 'completed', 'Task-C': 'pending'}];Request-3: User-A PUT /api/projects with parameters projectID='Project-A', description='An updated description';Response-3: OK with parameters projectID='Project-A',name='Project A',description='An updated description',tasks=[{'Task-A': 'in-progress', 'Task-B': 'completed', 'Task-C': 'pending'}]] |1
Context: An online shopping app where each customer can only view and purchase their own orders. An order can be viewed/updated by an admin if required. Requests: [Request-1: Customer_A POST /orders with parameters itemName='Laptop';Response-1: OK with parameters orderId='Order_1', itemName='Laptop',quantity=1;Request-2: Customer_A GET /orders with parameters orderId='Order_1';Response-2: OK with parameters orderId='Order_1', itemName='Laptop',quantity=1;Request-3: Admin GET /orders with parameters orderId='Order_1';Response-3: OK with parameters orderId='Order_1', itemName='Laptop',quantity=1, additionalInformation='Customer requested refund']|0
Context: An online file storage system where each user can only view and manage their own files. Requests: [Request-1: User-A GET /files with parameters userID='User-A';Response-1: OK with parameters fileID='112233', fileName='Document-A', fileType='pdf';Request-2: User-B GET /files with parameters userID='User-B';Response-2: OK with parameters fileID='445566', fileName='Document-B', fileType='docx';Request-3: User-A GET /files with parameters userID='User-B';Response-3: Forbidden with parameters errorCode=403, errorMessage='You are not allowed to perform this action']|0
Context: A shipping company system where each delivery person can only view and update their own deliveries. Managers can access all deliveries. Requests: [Request-1: Delivery-Person-A GET /api/deliveries with parameters deliveryId='Delivery-A';Response-1: OK with parameters deliveryId='Delivery-A',itemName='Shoes',pickupAddress='123 Main Street';Request-2: Delivery-Person-A GET /api/deliveries with parameters deliveryId='Delivery-B';Response-2: OK with parameters deliveryId='Delivery-B',itemName='T-Shirt',pickupAddress='456 South Street';Request-3: Delivery-Person-A PUT /api/deliveries with parameters status='delivered';Response-3: OK with parameters deliveryId='Delivery-A',itemName='Shoes',pickupAddress='123 Main Street' status='delivered']|1
Context: A banking website where clients can view and modify their bank account details. Requests: [Request-1: User-A GET /api/account with parameters accountID='ACC-123';Response-1: OK with parameters accountID='ACC-123',accountBalance=344, message='No Recent Transactions';Request-2: User-B GET /api/account with parameters accountID='ACC-456';Response-2: OK with parameters accountID='ACC-456',accountBalance=500, message='No Recent Transactions';Request-3: User-A PUT /api/account with parameters accountID='ACC-456';Response-3: 401 Unauthorized Operation]|0
Context: A stock trading app where users can buy and sell stocks. Requests: [Request-1: User-A POST /api/stocks with parameters ticker='AAPL', quantity=10;Response-1: OK with parameters status='Transacton Successful, AAPL Stocks bought with 10 units bought at $126.40/stock';Request-2: User-B POST /api/stocks with parameters ticker='MSFT', quantity=8;Response-2: OK with parameters status='Transacton Successful, MSFT Stocks bought with 8 units bought at $269.70/stock';Request-3: User-A PUT /api/stocks with parameters ticker='MSFT', quantity=5;Response-3: 401 Unauthorized Operation]|0
Context: A travel booking app where each customer can only access and modify their own bookings. Requests: [Request-1: Customer-A GET /api/bookings with parameters bookingID='Booking-A';Response-1: OK with parameters bookingID='Booking-A',flightNumber='AA100',hotelName='Marriott NYC',pickupTime='2023-06-01 10:00';Request-2: Customer-B GET /api/bookings with parameters bookingID='Booking-B';Response-2: OK with parameters bookingID='Booking-B',flightNumber='UA200',hotelName='Hilton LA',pickupTime='2023-07-01 14:00';Request-3: Customer-A PUT /api/bookings with parameters hotelName='Marriott Boston';Response-3: OK with parameters bookingID='Booking-A',flightNumber='AA100',hotelName='Marriott Boston',pickupTime='2023-06-01 10:00';Request-4: Customer-B PUT /api/bookings with parameters flightNumber='AA200';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The booking id is wrong or not authorized to edit.';Request-5: Agent GET /api/bookings with parameters bookingID='Booking-A';Response-5: OK with parameters bookingID='Booking-A',flightNumber='AA100',hotelName='Marriott Boston',pickupTime='2023-06-01 10:00']|0
Context: Target is a game where players can view and modify their own profile and scores. Requests: [Request-1: Player-A GET /profiles with parameters playerID='Player-A';Response-1: OK with parameters playerID='Player-A', name='John', age=25, score=50;Request-2: Player-B GET /profiles with parameters playerID='Player-B';Response-2: OK with parameters playerID='Player-B', name='Alice', age=30, score=75;Request-3: Player-A PUT /profiles with parameters score=100;Response-3: OK with parameters playerID='Player-A', name='John', age=25, score=100;Request-4: Player-A GET /profiles with parameters playerID='Player-B';Response-4: OK with parameters playerID='Player-B', name='Alice', age=30, score=75;]|1
Context: A banking app where each customer can view and edit only their own transactions. Requests: [Request-1: Customer-A GET /api/transactions with parameters accountNo='Customer-A'; Response-1: OK with parameters accountNo='Customer-A', amount='1000', description='salary'; Request-2: Customer-A GET /api/transactions with parameters accountNo='Customer-B'; Response-2: OK with parameters accountNo='Customer-B', amount='250', description='refund']|1
Context: An e-learning platform where learners can enrol in courses and each learner can only see and update their own progress. Requests: [Request-1: Learner-A POST /api/courses with parameters courseId=1234; Response-1: OK with parameters courseId=1234, progress=20%; Request-2: Learner-A GET /api/courses with parameters courseId=1234; Response-2: OK with parameters courseId=1234, progress=20%;] |0
Context: A payment processing app where users can make transactions. Each user should only be able to see their own transaction history. Requests: [Request-1: User-A POST /api/transactions with parameters amount='100', recipient='User-B';Response-1: OK with parameters transactionID='Transaction-1', amount='100', recipient='User-B';Request-2: User-A GET /api/transactions with parameters transactionID='Transaction-2';Response-2: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='This is not your transaction.'] |0
Context: A social media app where each user can only view and edit their own profile. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters userID='User-A',name='Alice',age=25,location='NY';Request-2: User-B GET /api/profile with parameters userID='User-B';Response-2: OK with parameters userID='User-B',name='Bob',age=30,location='CA';Request-3: User-A PUT /api/profile with parameters name='Alicia';Response-3: OK with parameters userID='User-A',name='Alicia',age=25,location='NY';Request-4: User-B PUT /api/profile with parameters age=31;Response-4: OK with parameters userID='User-B',name='Bob',age=31,location='CA';Request-5: Admin GET /api/profile with parameters userID='User-A';Response-5: OK with parameters userID='User-A',name='Alicia',age=25,location='NY']|0
Context: A fitness app where users can only view and modify their own workout plans. Requests: [Request-1: User-A GET /api/workouts with parameters workoutID='Workout-A1';Response-1: OK with parameters workoutID='Workout-A1',routine=['Bench Press', 'Squats', 'Deadlifts'],start='2023-06-23 06:30',end='2023-06-23 07:45';Request-2: Usr-B GET /api/workouts with parameters workoutID='Workout-A1';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to view this workout.',errorDetails='The workout is not authorized to display.']|0
Context: An online ticket booking system where users can only view and modify their own bookings. Requests: [Request-1: User-A GET /api/bookings with parameters bookingID='Booking-B';Response-1: Not Found with parameters message='Booking not found';Request-2: User-A GET /api/bookings with parameters bookingID='Booking-A';Response-2: OK with parameters bookingID='Booking-A',from='New York', to='Paris',date='2024-06-01',price=1200]|0
Context: A chat app with 2 types of users, Users and Admins. Users can chat with each other. Chats are not encrypted end-to-end. Requests: [Request-1: User-1 GET /chatrooms/room1/user2 with parameter limit=10; Response-1: Error with message='cannot fetch messages. Query: SELECT * FROM room1 WHERE userId='user2' LIMIT 10.'];|2
Context: A travel management system where travelers can book trips. Each traveler should only be able to view their own trips. Requests: [Request-1: Traveler-A POST /api/trips with parameters destination='Paris', start_date='2024-05-01', end_date='2024-05-06';Response-1: OK with parameters tripID='Trip-1', destination='Paris', start_date='2024-05-01', end_date='2024-05-06';Request-2: Traveler-A GET /api/trips with parameters tripID='Trip-2';Response-2: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='This is not your trip.']|0
Context: A travel booking app where users can only view and manage their own bookings. Requests: [Request-1: User-A GET /api/bookings with parameters bookingID='User-A-Booking-1';Response-1: OK with parameters bookingID='User-A-Booking-1',flightNumber='AB1234',origin='New York',destination='London',departureTime='2023-06-23 10:00', passengerName='User-A';Request-2: User-B GET /api/bookings with parameters bookingID='User-A-Booking-1';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to view this page.', errorDetails='The booking id is wrong or not authorized to display.']|0
Context: An e-learning platform where students can view and manage their own course material and progress. Instructors can only view student data that they're currently instructing. Requests: [Request-1: Student-A GET /api/courses with parameters studentID='Student-A';Response-1: OK with parameters studentID='Student-A',courseList=['Python101','Java101'],progress=20%;Request-2: Instructor-A GET /api/courses with parameters studentID='Student-B';Response-2: Not Found with parameters message='Instructor is not authorized to view this student's data']|0
Context: A gaming app with 3 types of users, Players, Game Developers, and Admins. Players can play games, Game Developers can create games for players, and admins can monitor all activities. Requests: [Request-1: Player-A GET /games with parameter gameName='the-next-big-game'; Response-1: Error with message='cannot find 'the-next-big-game'. Query: SELECT * FROM games WHERE gameName='the-next-big-game';'];|2
Context: An ecommerce app with 3 types of users Customer, Merchant and Admin. Requests: [Request-1: Customer-A POST /workshop/api/auth/login with parameters username='micheal',password='123';Response-1: Unauthorized with parameters success=false,message='123 is incorrect password';Request-2: Customer-B POST /workshop/api/auth/login with parameters username='beatrice',password='123123';Response-2: OK with parameters token='uYda27...']|2
Context: A web application where users can view different reports. Only specific reports should be accessible to certain users. Requests: [Request-1: Manager_A GET /api/reports with parameters reportID='Report_1';Response-1: OK with parameters reportID='Report_1', content='Report_1 data';Request-2: User_A GET /api/reports with parameters reportID='Report_A';Response-2: OK with parameters reportID='Report_A', content='User_A report data';Request-3: User_A GET /api/reports with parameters reportID='Report_B';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The report id is not authorized to display.']|0
Context: A movie streaming website where each user can only access and modify their own watchlist. Other users cannot view or modify it. Requests: [Request-1: User-A GET /api/watchlist with parameters movieID='Movie-A';Response-1: OK with parameters movieID='Movie-A', title='The Godfather', year=1972, genre='Crime';Request-2: User-B POST /api/watchlist with parameters title='The Shawshank Redemption', year=1994, genre='Drama';Response-2: OK with parameters movieID='Movie-B', title='The Shawshank Redemption', year=1994, genre='Drama';]|0
Context: An online food delivery system where each customer can only view and manage their own orders. The staff can view and update all orders. Requests: [Request-1: Customer-A GET /api/orders with parameters orderId=1234; Response-1: OK with parameters orderId=1234, items=['Pizza', 'Burger'], totalPrice=10.50, discountApplied=false; Request-2: Staff GET /api/orders with parameters orderId=1234; Response-2: OK with parameters orderId=1234, items=['Pizza', 'Burger'], totalPrice=10.50, discountApplied=true;]|0
Context: A financial app with 2 types of users Customer and Admin. Customers can access their bank account details, balance and transaction history. Admins can view all bank accounts. Requests: [Request-1: Customer-A GET /bank/transactions/history with parameters fromDate='2021-01-01';Response-1: Internal Server Error with parameters message='The server responded with a 500 error due to an invalid API call -- {method: GET /history, status: 500, detail: Internal Error: Please check logs}';]|2
Context: A social media app where users can only access and modify their own profile details. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters userID='User-A',name='John Doe',email='john.doe@gmail.com';Request-2: User-B GET /api/profile with parameters userID='User-A';Response-2: ERROR with message='You are not authorized to access this data';Request-3: User-A PUT /api/profile with parameters name='Johnny',email='johnny@doe.com';Response-3: OK with parameters message='Profile updated successfully']|0
Context: A banking app where only account holders can view and modify their own transactions. Requests: [Request-1: Customer-A GET /api/transactions with parameters accountNumber='Account-A';Response-1: OK with parameters transactions=[{'Date': '01-01-2023', 'Description': 'Grocery', 'Amount': '$50'}, {'Date': '01-15-2023', 'Description': 'Rent', 'Amount': '$1500'}, {'Date': '01-31-2023', 'Description': 'Salary', 'Amount': '$5000'}];Request-2: Customer-B GET /api/transactions with parameters accountNumber='Account-A';Response-2: OK with parameters transactions=[{'Date': '01-01-2023', 'Description': 'Grocery', 'Amount': '$50'}, {'Date': '01-15-2023', 'Description': 'Rent', 'Amount': '$1500'}, {'Date': '01-31-2023', 'Description': 'Salary', 'Amount': '$5000'}];Request-3: Customer-A PUT /api/transactions with parameters Date='02-03-2023';Response-3: OK with parameters message='Transaction updated successfully']|1
Context: A video streaming app where each user can only access their own watchlist. Requests: [Request-1: User-A GET /api/watchlist with parameters movieID='Movie-A';Response-1: OK with parameters movieID='Movie-A', title='The Godfather', year='1972', director='Francis Ford Coppola';Request-2: User-B GET /api/watchlist with parameters movieID='Movie-B';Response-2: OK with parameters movieID='Movie-B', title='Jaws', year='1975', director='Steven Spielberg';Request-3: User-A GET /api/watchlist with parameters movieID='Movie-B';Response-3: Forbidden with parameters message='Not authorized to view this movie']|0
Context: A financial management app where each user can only access and modify their own transactions. Other users cannot view or modify it. Requests: [Request-1: User-A GET /api/transactions with parameters transactionID='Transaction-A';Response-1: OK with parameters transactionID='Transaction-A', amount=500.00, category='Groceries', timestamp='2023-05-15 02:30 PM';Request-2: User-B POST /api/transactions with parameters amount=100.00, category='Entertainment';Response-2: OK with parameters transactionID='Transaction-B', amount=100.00, category='Entertainment', timestamp='2023-05-15 05:30 PM';]|0
Context: A fitness app where each user can view and edit only their own workouts. Requests: [Request-1: User-A GET /api/workouts with parameters workoutID='Workout-A'; Response-1: OK with parameters workoutID='Workout-A', duration='30 min', intensity='High'; Request-2: User-B GET /api/workouts with parameters workoutID='Workout-A'; Response-2: OK with parameters workoutID='Workout-B', duration='45 min', intensity='Low']|1
Context: An educational platform where teachers can only view and update data for their own classes. Requests: [Request-1: Teacher-A GET /api/classes with parameters classID='Class-A';Response-1: OK with parameters classID='Class-A',subject='Maths',students=['John','Jane','Mark'];Request-2: Teacher-B GET /api/classes with parameters classID='Class-B';Response-2: OK with parameters classID='Class-B',subject='Science',students=['Peter','Pam','Luke'];Request-3: Teacher-A DELETE /api/classes with parameters classID='Class-B';Response-3: Not Authorized]|0
Context: An attendance tracking app where each teacher can only see and modify their own class attendance records. Admins can view and modify all attendance records. Requests: [Request-1: Teacher-A GET /api/attendance with parameters classID='Class-A',date='2023-05-01';Response-1: OK with parameters classID='Class-A',date='2023-05-01',attendance=[{'Student-A','Present'},{'Student-B','Absent'}]];Request-2: Teacher-A PUT /api/attendance with parameters classID='Class-A',date='2023-05-01',studentName='Student-B',attendance='Present';Response-2: OK with parameters classID='Class-A',date='2023-05-01',attendance=[{'Student-A','Present'},{'Student-B','Present'}]];Request-3: Admin GET /api/attendance with parameters classID='Class-A';Response-3: OK with parameters classID='Class-A',attendance=[{'Student-A','Present'},{'Student-B','Present'}],dates=['2023-05-01','2023-05-02','2023-05-03']]|0
Context: A ride-hailing app where users can only request rides for themselves. Requests: [Request-1: User-A POST /api/ride with parameters from='150th St & Broadway, New York, NY',to='32nd St & 5th Ave, New York, NY',time='2023-06-23 10:00';Response-1: OK with parameters driver='John Doe',car='Nissan Altima', cost='$20',time='2023-06-23 10:27'];Request-2: User-B POST /api/ride with parameters from='150th St & Broadway, New York, NY',to='32nd St & 5th Ave, New York, NY',time='2023-06-23 10:00';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to book this ride.', errorDetails='The ride is not authorized to book.']|0
Context: An educational platform where each student can view and edit only their own course progress. Requests: [Request-1: Student-A GET /api/courses with parameters courseID='Course-A'; Response-1: OK with parameters courseID='Course-A', progress='50%', grade='B'; Request-2: Student-B GET /api/courses with parameters courseID='Course-A'; Response-2: OK with parameters message='Course not found']|0
Context: A healthcare platform where each patient can view and manage their own healthcare records. Requests: [Request-1: Patient-A GET /healthcare with parameters patientID='Patient-A';Response-1: OK with parameters patientID='Patient-A', prescriptions=['Medicine A', 'Medicine B'], pastAppointments=[{'Doctor': 'Dr. Johnson', 'Date': '05-05-2023'}, {'Doctor': 'Dr. Smith', 'Date': '10-10-2023'}];Request-2: Patient-B GET /healthcare with parameters patientID='Patient-B';Response-2: OK with parameters patientID='Patient-B', prescriptions=['Medicine C', 'Medicine D'], pastAppointments=[{'Doctor': 'Dr. Williams', 'Date': '06-06-2023'}, {'Doctor': 'Dr. Brown', 'Date': '12-12-2023'}];Request-3: Patient-A POST /healthcare with parameters patientID='Patient-A', prescription='Medicine C';Response-3: OK with parameters message='Prescription added successfully']|0
Context: A bank app where each customer can only access and modify their own account information and transactions. Requests: [Request-1: Customer-A GET /accounts with parameters accountNumber='1234567890';Response-1: OK with parameters accountNumber='1234567890',balance=5000; Request-2: Customer-A PUT /transactions with parameters accountNumber='0987654321', amount=500; Response-2: Error 401 with message='Unauthorized action']; |0
Context: An online school system where students and teachers can only view their own courses and class material. Other students and teachers cannot view or modify it. Requests: [Request-1: Student-A GET /api/course with parameters courseID='Course-A';Response-1: OK with parameters courseID='Course-A', name='Introduction to Biology', teacher='Dr. Johnson', materials=['Lecture-1.pdf','Assignment-1.pdf'];Request-2: Teacher-B GET /api/course with parameters courseID='Course-B';Response-2: OK with parameters courseID='Course-B', name='Digital Marketing', teacher='Prof. Brown', materials=['Lecture-1.pdf','Assignment-1.pdf'];]|0
Context: A project management app where team members can view and update tasks only for the projects they are assigned to. Requests: [Request-1: Developer-A GET /api/tasks with parameters projectID='Proj-A'; Response-1: OK with parameters taskID='Task-A',description='Fixing bugs',priority='Urgent'; Request-2: Developer-B GET /api/tasks with parameters projectID='Proj-B'; Response-2: OK with parameters taskID='Task-B',description='Adding features',priority='High'; Request-3: Developer-A PUT /api/tasks with parameters taskID='Task-B',description='Adding features', priority='Low'; Response-3: OK with parameters message='Task updated successfully']|1
Context: A news website where each user can only access the news articles they have subscribed to. Other users cannot view or modify it. Requests: [Request-1: User-A GET /api/news with parameters articleID='Article-A';Response-1: OK with parameters articleID='Article-A', title='Breaking News: Earthquake Hits California', content='...', timestamp='2023-05-15 02:30 PM';Request-2: User-B POST /api/news with parameters title='Latest Sports News', content='...', timestamp='2023-05-15 05:30 PM';Response-2: OK with parameters articleID='Article-B', title='Latest Sports News', content='...', timestamp='2023-05-15 05:30 PM';] |0
Context: A messaging platform for sending messages between registered users where each user can only view and manage their own messages. Requests: [Request-1: User-A GET /messages with parameters userID='User-A';Response-1: OK with parameters messageID='112233', senderID='User-B', receiverID='User-A', messageText='Hello';Request-2: User-B GET /messages with parameters userID='User-B';Response-2: OK with parameters messageID='445566', senderID='User-A', receiverID='User-B', messageText='Hi';Request-3: User-A GET /messages with parameters userID='User-B';Response-3: Forbidden with parameters errorCode=403, errorMessage='You are not allowed to perform this action']|0
Context: A recipe app where users can only view and modify their own recipes. Requests: [Request-1: User-A PUT /api/recipes with parameters recipeID='Recipe-A', recipeContent='New Content';Response-1: OK with parameters recipeID='Recipe-A',recipeContent='New Content',ingredients=['Tomato', 'Cheese'];Request-2: User-A GET /api/recipes with parameters recipeID='Recipe-B';Response-2: Not Found with parameters message='Recipe not found']|0
Context: A blogging platform where each user can only access and modify their own posts. Other users cannot view or modify it. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A'; Response-1: OK with parameters postID='Post-A', title='Welcome to my blog', content='...', tags=['blogging', 'writing'];Request-2: User-A PUT /api/posts with parameters postID='Post-A', title='Introduction'; Response-2: OK with parameters message='Post updated successfully'] |0
Context: A fitness app where each user can only see and modify their own workout log. Trainers can view logs of clients to monitor progress. Requests: [Request-1: User-A GET /api/workout with parameters userID='User-A';Response-1: OK with parameters userID='User-A',workouts=[{'time': '30min', 'calories': '200', 'date': '05-06-2022'}, {'time': '40min', 'calories': '250', 'date': '06-06-2022'}];Request-2: User-B GET /api/workout with parameters userID='User-B';Response-2: OK with parameters userID='User-B',workouts=[{'time': '20min', 'calories': '150', 'date': '03-06-2022'}, {'time': '30min', 'calories': '200', 'date': '04-06-2022'}];Request-3: Trainer GET /api/workout with parameters userID='User-A';Response-3: OK with parameters userID='User-A',workouts=[{'time': '30min', 'calories': '200', 'date': '05-06-2022'}, {'time': '40min', 'calories': '250', 'date': '06-06-2022'}]]|0
Context: A messaging app where each user can view and edit only their own messages. Requests: [Request-1: User-A GET /api/messages with parameters messageID='Message-A'; Response-1: OK with parameters messageID='Message-A', sender='User-B', content='Hello'; Request-2: User-A GET /api/messages with parameters messageID='Message-B'; Response-2: OK with parameters messageID='Message-B', sender='User-C', content='How are you?']|1
Context: A project management tool where each team member can view and edit only their own tasks. Requests: [Request-1: Team member-A GET /api/tasks with parameters taskID='Task-A'; Response-1: OK with parameters taskID='Task-A', title='Document requirements', status='In progress'; Request-2: Team member-B GET /api/tasks with parameters taskID='Task-A'; Response-2: OK with parameters taskID='Task-A', title='Document requirements', status='In progress']|1
Context: A ticketing app with 2 types of users, Customers and Ticket Sellers. Customers can buy event tickets and view their purchase history, while Ticket sellers can list new events and view the purchase history of their events. Requests: [Request-1: Customer-A GET /tickets with parameter ticketID='xyz123'; Response-1: Error with message='invalid ticketID. Query: SELECT * FROM tickets WHERE ticketID='xyz123';'];|2
Context: A job portal where users can only access their own job applications. Requests: [Request-1: User-A GET /api/applications with parameters applicationID='Job-App-1';Response-1: OK with parameters applicationID='Job-App-1', position='Software Engineer',company='Company X',status='Pending';Request-2: User-B GET /api/applications with parameters applicationID='Job-App-1';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to view this application.', errorDetails='The application is not authorized to display.']|0
Context: A chat app where users can only access and modify their own conversations. Requests: [Request-1: User-A GET /api/chat with parameters userID='User-A',contactID='User-B';Response-1: OK with parameters conversationID='Conv-A',messages=[{'sender': 'User-A', 'content': 'Hello', 'time': '10:00am'}, {'sender': 'User-B', 'content': 'Hi', 'time': '10:02am'}, {'sender': 'User-A', 'content': 'How are you?', 'time': '10:05am'}]];Request-2: User-B GET /api/chat with parameters userID='User-B',contactID='User-A';Response-2: OK with parameters conversationID='Conv-A',messages=[{'sender': 'User-A', 'content': 'Hello', 'time': '10:00am'}, {'sender': 'User-B', 'content': 'Hi', 'time': '10:02am'}, {'sender': 'User-A', 'content': 'How are you?', 'time': '10:05am'}]];Request-3: User-A POST /api/chat with parameters contactID='User-B',message='I am fine';Response-3: OK with parameters conversationID='Conv-A',messages=[{'sender': 'User-A', 'content': 'Hello', 'time': '10:00am'}, {'sender': 'User-B', 'content': 'Hi', 'time': '10:02am'}, {'sender': 'User-A', 'content': 'How are you?', 'time': '10:05am'}, {'sender': 'User-A', 'content': 'I am fine', 'time': '10:06am'}]]|0
Context: A food ordering app with 2 type of users Customer and Restaurant where each customer can only access and modify their own orders. Restaurant can view all orders. Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Customer-B GET /api/orders with parameters orderID='Order-A';Response-2: Forbidden with parameters results='you are not allowed to view orderID=\'Order-A\',menu=[\'pizza\',\'coke\'],status=\'Completed\'';]|2
Context: A content management system which allows users to view/edit content. Only logged-in users should be able to view/edit content. Requests: [Request-1: User_A GET /content with parameters contentId='Content_A';Response-1: OK with parameters contentId='Content_A', title='The Best Ways to Write a Book', author='User_A', content='...';Request-2: User_B GET /content with parameters contentId='Content_B';Response-2: OK with parameters contentId='Content_B', title='Tips for Running a Marathon', author='User_C', content='...';Request-3: GET /content with parameters contentId='Content_C';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not logged in yet.']|0
Context: An e-learning platform where the students of different courses cannot access and modify other students' data. Requests: [Request-1: Student-A GET /api/courses with parameters courseId='A'; Response-1: OK with parameters courseId='A',students=['Student-A']; Request-2: Student-B GET /api/courses with parameters courseId='B'; Response-2: OK with parameters courseId='B',students=['Student-B','-','Student-C']; Request-3: Student-A PUT /api/courses with parameters courseId='A',students=['Student-A','Student-X']; Response-3: OK with parameters courseId='A',students=['Student-A','Student-X']] |1
Context: Social media app where users can only view their own posts and messages. Requests: [Request-1: User-A GET /api/posts with parameters postID='User-A-Post'; Response-1: OK with parameters postID='User-A-Post', postText='Just had a great day at the beach!', likes=10; Request-2: User-B GET /api/posts with parameters postID='User-B-Post'; Response-2: OK with parameters postID='User-B-Post', postText='I love hiking!', likes=5; Request-3: User-C GET /api/messages with parameters messageID='User-C-Message'; Response-3: OK with parameters messageID='User-C-Message', messageText='Hey there!', senderID='User-C', receiverID='User-D']|0
Context: A video streaming website where users can only view and manage their own playlists. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='User-A/LikedVideos';Response-1: OK with parameters playlistID='User-A/LikedVideos',videos=['Video-A','Video-B','Video-C'];Request-2: User-B GET /api/playlists with parameters playlistID='User-A/LikedVideos';Response-2: OK with parameters playlistID='User-A/LikedVideos',videos=['Video-A','Video-B','Video-C'];Request-3: User-A POST /api/playlists with parameters playlistID='User-A/WatchLater',videos=['Video-D'];Response-3: OK with parameters message='Playlist updated successfully']|1
Context: A file sharing app where each user can only access and modify their own files. No user can view another user's files. Requests: [Request-1: User-A GET /api/files with parameters fileID='User-A/email.docx';Response-1: OK with parameters fileID='User-A/email.docx',content='Hello World!',size=12KB;Request-2: User-B GET /api/files with parameters fileID='User-A/email.docx';Response-2: ERROR with message='You are not authorized to access this data';Request-3: User-A POST /api/files with parameters fileContent='New Content';Response-3: OK with parameters fileID='User-A/email.docx',content='New Content',size=10KB]|0
Context: An online scheduling app where each user can only see and modify their own schedule. Requests: [Request-1: User-A GET /api/schedule with parameters date='2023-05-01';Response-1: OK with parameters schedule=[{'10:00','Available'},{'11:00','Reserved'}];Request-2: User-A PUT /api/schedule with parameters date='2023-05-01',time='12:00';Response-2: OK with parameters schedule=[{'10:00','Available'},{'11:00','Reserved'},{'12:00','Available'}];Request-3: User-A GET /api/schedule with parameters date='2023-05-02';Response-3: OK with parameters schedule=[{'10:00','Reserved'},{'11:00','Available'},{'12:00','Available'}]]|0
Context: Online reservation system where users can view and manage bookings belonging to other users. Requests: [Request-1: User-A GET /api/bookings with parameters bookingID='User-B-Booking'; Response-1: OK with parameters bookingID='User-B-Booking', date='2023-06-02', time='14:00', venue='Conference Room B'; Request-2: User-B GET /api/bookings with parameters bookingID='User-C-Booking'; Response-2: OK with parameters bookingID='User-C-Booking', date='2023-06-03', time='16:00', venue='Meeting Room D'; Request-3: User-C GET /api/bookings with parameters bookingID='User-A-Booking'; Response-3: OK with parameters bookingID='User-A-Booking', date='2023-06-01', time='10:00', venue='Conference Room A']|0
Context: A messaging app with 2 types of users User and Admin where Users can chat with each other. Chats are encrypted end-to-end. Requests: [Request-1: User-1 /messages/august/search with parameters terms='who should win eurovison?';Response-1: Error with parameters msg='cannot serialize response {command: 'SELECT',rowCount: 3,oid: null,rows:[{ id: 1, name: 'John', age: 25 },{ id: 2, name: 'Jane', age: 30 },{ id: 3, name: 'Sam', age: 35 }],fields: [{ name: 'id', tableID: 123, columnID: 1, dataTypeID: 23 },{ name: 'name', tableID: 123, columnID: 2, dataTypeID: 25 },{ name: 'age', tableID: 123, columnID: 3, dataTypeID: 23 },commandComplete: 'slct * fr tb lim 3 }'] |2
Context: An online survey platform where each user can only view and manage their own surveys and responses. Requests: [Request-1: User-A GET /surveys with parameters userID='User-A';Response-1: OK with parameters surveyID='1122', surveyName='Survey-A', creator='User-A', questions=['Question 1', 'Question 2', 'Question 3'];Request-2: User-B GET /surveys with parameters userID='User-B';Response-2: OK with parameters surveyID='3344', surveyName='Survey-B', creator='User-B', questions=['Question 1', 'Question 2', 'Question 3'];Request-3: User-A GET /surveys with parameters userID='User-B';Response-3: Forbidden with parameters errorCode=403, errorMessage='You are not allowed to perform this action']|0
Context: An online learning platform where users can only access courses they are enrolled in. Requests: [Request-1: User-A GET /api/courses with parameters courseID='Course-1234';Response-1: OK with parameters courseID='Course-1234',name='Introduction to Python',instructor='Dr. X',description='A course that teaches basics of python programming.'];Request-2: User-B GET /api/courses with parameters courseID='Course-5678';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to view this course.',errorDetails='The course is not authorized to display.']|0
Context: A health records storage app with 2 types of users User and Admin, where each user can only view and upload their own data. Admins cannot view user data. Requests: [Request-1: User-A GET /api/records/heartrate with parameters date=2022-10-20;Response-1: Error with parameters details='Internal server error: cannot retrieve data from database schema.heartrate']|2
Context: A student management system where teachers can access and update student details. Requests: [Request-1: Teacher-A GET /students with parameters classID='Class-A';Response-1: OK with parameters studentID='Stud-A', name='John Doe', dob='2004-01-01', grade='A';Request-2: Teacher-B GET /students with parameters classID='Class-B';Response-2: OK with parameters studentID='Stud-B', name='Jane Doe', dob='2005-02-01', grade='B';Request-3: Teacher-B PUT /students with parameters studentID='Stud-C', dob='2006-03-01';Response-3: 401 Unauthorized Operation]|0
Context: A banking app where each user can access and modify any account. Requests: [Request-1: User-A GET /accounts with parameters accountID='Account-B';Response-1: OK with parameters accountID='Account-B',balance=1000000;Request-2: User-A PUT /accounts with parameters accountID='Account-B',balance=500000;Response-2: OK with parameters updatedAccountID='Account-B',balance=500000;Request-3: User-B GET /accounts with parameters accountID='Account-B';Response-3: OK with parameters accountID='Account-B',balance=500000;]|1
Context: A social media platform where each user can only access and modify their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A'; Response-1: OK with parameters postID='Post-A',content='Hello World!';Request-2: User-B GET /api/posts with parameters postID='Post-A'; Response-2: OK with parameters postID='Post-A',content='Hello World!';Request-3: User-A PUT /api/posts with parameters content='New Content'; Response-3: OK with parameters message='Post updated successfully']|1
Context: A banking app, where each user can only view their own account details and make transactions from their own accounts. Requests: [Request-1: User-A GET /api/account with parameters accountID='User-A-savings'; Response-1: OK with parameters accountID='User-A-savings', balance=1200; Request-2: User-B GET /api/account with parameters accountID='User-A-savings'; Response-2: Forbidden with parameters message='Not authorized to view this account']|0
Context: A mobile payment app where each user can only see and modify their own payment information. Requests: [Request-1: User-A POST /api/cards with parameters cardNumber='1234123412341234', expiryDate='12/24',cvv='123';Response-1: OK with parameters message='Success!';Request-2: User-A GET /api/cards;Response-2: OK with parameters cards=[{'1234123412341234','12/24'},{'4321432143214321','06/23'}];Request-3: User-A PUT /api/cards with parameters cardNumber='4321432143214321', expiryDate='06/25';Response-3: OK with parameters message='Success!']|0
Context: A real estate website where each user can view and edit only their own property listings. Requests: [Request-1: User-A GET /api/properties with parameters propertyID='Property-A'; Response-1: OK with parameters propertyID='Property-A', address='123 Main St', price='250000'; Request-2: User-B GET /api/properties with parameters propertyID='Property-A'; Response-2: OK with parameters message='Property not found']|0
Context: A file storage app where users can access and modify their own files. Requests: [Request-1: User-A GET /api/files with parameters fileID='User-A/payroll.docx';Response-1: OK with parameters fileID='User-A/payroll.docx',content='...',size='25KB';Request-2: User-B GET /api/files with parameters fileID='User-B/budget.xls';Response-2: OK with parameters fileID='User-B/budget.xls', content='...',size='4MB';Request-3: User-A PUT /api/files with parameters fileID='User-B/budget.xls',content='New Content';Response-3: 401 Unauthorized Operation]|0
Context: An employee management system where each manager can view and update employee details for their own department. Other managers cannot view or modify it. Requests: [Request-1: Manager-A GET /employees with parameters departmentID='A';Response-1: OK with parameters employeeID='Emp-123', name='John Doe', designation='Software Engineer', salary=5000;Request-2: Manager-A PUT /employees with parameters employeeID='Emp-123', salary=5500;Response-2: OK with parameters message='Salary updated successfully'] |0
Context: A healthcare platform with 2 type of users Patient and Doctor, where patients can view and manage their own healthcare records. Requests: [Request-1: Patient-A GET /account/password/reset with parameters name='jordan12';Response-1: OK with parameters response='sent reset instructions to jordanP1990@hotmail.com. If this is not your email please check the name you provided.']|2
Context: Online reservation system where users can only view and manage their own bookings. Requests: [Request-1: User-A GET /api/bookings with parameters bookingID='User-A-Booking'; Response-1: OK with parameters bookingID='User-A-Booking', date='2023-06-01', time='10:00', venue='Conference Room A'; Request-2: User-B GET /api/bookings with parameters bookingID='User-B-Booking'; Response-2: OK with parameters bookingID='User-B-Booking', date='2023-06-02', time='14:00', venue='Conference Room B'; Request-3: User-C GET /api/bookings with parameters bookingID='User-C-Booking'; Response-3: OK with parameters bookingID='User-C-Booking', date='2023-06-03', time='16:00', venue='Meeting Room D']|0
Context: An online store, where customers can order products online. Requests: [Request-1: User-A GET /api/products with parameters productID='Product-123';Response-1: OK with parameters productID='Product-123', name='Product-A', price=15.99;Request-2: User-B GET /api/products with parameters productID='Product-456';Response-2: OK with parameters productID='Product-456', name='Product-B', price=29.99;Request-3: User-A PUT /api/products with parameters productID='Product-456', price=20.99;Response-3: Forbidden with parameters message='Not authorized to modify this product']|0
Context: A social media app where each user can only view and modify their own profile details such as their name, bio and profile picture. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters userID='User-A',name='John Doe',bio='I am a software engineer';Request-2: User-B GET /api/profile with parameters userID='User-A';Response-2: Not Found with parameters message='Profile not found']|0
Context: A ride-sharing app where each driver can only view and modify their own ride information. Riders can only view details about the rides they have requested. Requests: [Request-1: Driver-A GET /api/rides with parameters rideID='Ride-A';Response-1: OK with parameters rideID='Ride-A',driver='Driver-A',riders=['Rider-A','Rider-B','Rider-C'],status='Completed'; Request-2: Driver-B GET /api/rides with parameters rideID='Ride-B';Response-2: OK with parameters rideID='Ride-B',driver='Driver-B',riders=['Rider-D','Rider-E'],status='Completed'; Request-3: Driver-A PUT /api/rides with parameters rideID='Ride-B',status='Cancelled';Response-3: Not Authorized]|0
Context: A messaging app where users can only view and send messages whom they are allowed. Requests: [Request-1: User-A GET /api/messages with parameters conversationID='User-A-User-B';Response-1: OK with parameters conversationID='User-A-User-B',messages=['Hello User B!', 'How are you?'];Request-2: User-B GET /api/messages with parameters conversationID='User-C-User-D';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to view this message.',errorDetails='You are not a member of this conversation.']|0
Context: A messaging app where users can only see their own messages. Requests: [Request-1: User-A GET /api/messages with parameters senderID='User-B', recipientID='User-A';Response-1: OK with parameters messageID='Message-123', body='Hi, how are you?', date='05-05-2023';Request-2: User-B GET /api/messages with parameters senderID='User-A', recipientID='User-B';Response-2: OK with parameters messageID='Message-456', body='I am fine, thanks. How about you?', date='06-06-2023';Request-3: User-A GET /api/messages with parameters senderID='User-B', recipientID='User-B';Response-3: Forbidden with parameters message='Not authorized to view this message']|0
Context: A messaging app where each user can send messages and view only their own conversations. Requests: [Request-1: User-A POST /api/messages with parameters to='User-B', message='Hello User-B!'; Response-1: OK with parameters status='sent'; Request-2: User-A GET /api/conversations with parameters userId='User-A'; Response-2: OK with parameters conversations=[{'User-B', 'Last message'}];]|0
Context: A finance app with 2 types of users, Customers and Teller. Customers can view their balance, and Teller can view all balances and modify them. Requests: [Request-1: Customer-A GET /account/balance with parameter accountNumber=123456; Response-1: Internal Server Error with message='cannot retrieve balance. DB query: SELECT balance FROM accounts WHERE accountNumber='123456';'];|2
Context: An online banking app fails to sanitize its error response, leaking account balance information to unauthorized users Requests: [Request-1: User-A POST /login with parameters username='johndoe', password='password123'; Response-1: Forbidden with parameters message='Your account balance is $5000']|2
Context: A car rental website, where customers can rent cars. Requests: [Request-1: Customer-A GET /api/cars with parameters carID='Car-B';Response-1: Forbidden with error message='Access Denied';Request-2: Customer-B POST /api/cars with parameters carType='Sedan' date='2024-06-01';Response-2: Created with parameters carID='Car-A-id';Request-3: Customer-B PUT /api/cars with parameters carID='Car-A-id' date='2024-06-02';Response-3: OK with parameters message='Car details updated successfully';Request-4: Admin GET /api/cars with parameters carID='Car-A-id';Response-4: OK with parameters carType='Sedan',date='2024-06-02', rented='True']|1
Context: Online file sharing app where users can only access their own files. Requests: [Request-1: User-A GET /api/files with parameters fileID='User-A-File'; Response-1: OK with parameters fileID='User-A-File', fileName='document.pdf', fileSize=1000KB; Request-2: User-B GET /api/files with parameters fileID='User-B-File'; Response-2: OK with parameters fileID='User-B-File', fileName='image.jpg', fileSize=500KB; Request-3: User-C GET /api/files with parameters fileID='User-C-File'; Response-3: OK with parameters fileID='User-C-File', fileName='report.docx', fileSize=2000KB]|0
Context: An online library management system where each user can only view and borrow their own books. Librarians cannot view user details. Requests: [Request-1: User-A GET /books with parameters bookID='Book-A';Response-1: OK with parameters bookID='Book-A',title='Harry Potter and the Philosopher's Stone',author='J.K. Rowling',status='Available';Request-2: User-A PUT /books with parameters bookID='Book-A',status='Borrowed';Response-2: OK with parameters bookID='Book-A',title='Harry Potter and the Philosopher's Stone',author='J.K. Rowling',status='Borrowed';Request-3: Librarian GET /books with parameters userID='User-A';Response-3: Error: Not authorized to access resource]|1
Context: A social media app where users can view and edit their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-A',content='Hello World!',date='2022-02-01';Request-2: User-B GET /api/posts with parameters postID='Post-B';Response-2: OK with parameters postID='Post-B',content='Bye World!',date='2022-02-05';Request-3: User-A PUT /api/posts with parameters postID='Post-B',content='New Content';Response-3: OK with parameters message='Post updated successfully']|1
Context: An educational course management system where each student can only see and modify their own course information. Requests: [Request-1: Student-A GET /api/courses with parameters courseID='Course-A';Response-1: OK with parameters courseID='Course-A',title='Mathematics-101',schedule=['Monday 09:00-10:30','Wednesday 11:00-12:30'],teacherName='Teacher-A',status='Enrolled'];Request-2: Student-A PUT /api/courses with parameters courseID='Course-A',schedule=['Monday 09:00-10:30','Wednesday 11:00-12:30','Friday 09:00-10:30'];Response-2: OK with parameters courseID='Course-A',title='Mathematics-101',schedule=['Monday 09:00-10:30','Wednesday 11:00-12:30','Friday 09:00-10:30'],teacherName='Teacher-A',status='Enrolled'];Request-3: Student-A GET /api/courses with parameters courseID='Course-B';Response-3: Not Found with parameters courseID='Course-B']|0
Context: An online voting system where each voter can only see and cast their own votes. Admins can view and delete all votes. Requests: [Request-1: Voter-A GET /api/votes with parameters electionID='Election-A';Response-1: OK with parameters electionID='Election-A',candidateNames=['Candidate-1', 'Candidate-2', 'Candidate-3'];Request-2: Voter-A POST /api/vote with parameters electionID='Election-A', candidateIndex=0;Response-2: OK with parameters electionID='Election-A', candidateName='Candidate-1', status='Voted';Request-3: Admin GET /api/votes with parameters electionID='Election-A';Response-3: OK with parameters electionID='Election-A',votes=[{'Voter-A',0}]]|0
Context: An online banking system where users can only access and modify their own account details. Requests: [Request-1: User-A GET /api/account with parameters accountID='User-A';Response-1: OK with parameters accountID='User-A',balance=5000;Request-2: User-B GET /api/account with parameters accountID='User-A';Response-2: ERROR with message='You are not authorized to access this data';Request-3: User-A POST /api/transaction with parameters to='User-B',amount=1000;Response-3: OK with parameters message='Transaction successful']|0
Context: Online job portal where job seekers can view and apply for jobs they are not qualified for. Requests: [Request-1: Job Seeker-A GET /api/jobs with parameters jobID='Job-B'; Response-1: OK with parameters jobID='Job-B', jobTitle='Marketing Coordinator', jobDescription='Develop and implement marketing strategies', qualification='Bachelor's Degree in Marketing', experience='2 years of experience in marketing'; Request-2: Job Seeker-B GET /api/jobs with parameters jobID='Job-C'; Response-2: OK with parameters jobID='Job-C', jobTitle='Accountant', jobDescription='Manage financial records and transactions', qualification='Bachelor's Degree in Accounting', experience='5 years of experience in accounting'; Request-3: Job Seeker-C GET /api/jobs with parameters jobID='Job-A'; Response-3: OK with parameters jobID='Job-A', jobTitle='Software Developer', jobDescription='Write high-quality code for software applications', qualification='Bachelor's Degree in Computer Science', experience='3 years of experience in software development']|0
Context: Online Learning Management System for students. Students can only view their own courses and marks. Requests: [Request-1: Student-A GET /api/courses with parameters courseId='Course-A';Response-1: OK with parameters courseId='Course-A', name='Maths',status='Enrolled';Request-2: Student-B GET /api/courses with parameters courseId='Course-C';Response-2: OK with parameters courseId='Course-C',name='English',status='Enrolled';Request-3: Student-A GET /api/mark with parameters courseId='Course-A';Response-3: OK with parameters courseId='Course-A', marks=80];Request-4: Student-A GET /api/mark with parameters courseId='Course-C';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The course id is unauthorized to view.']|0
Context: A travel app which lists hotels. Only logged-in users can book hotels. Requests: [Request-1: User_A POST /bookings with parameters hotelId='Hotel_1';Response-1: OK with parameters hotelId='Hotel_1',checkInDate='2023-05-01',checkOutDate='2023-05-03',roomType='Standard Room';Request-2: User_A GET /bookings with parameters;Response-2: OK with parameters bookings=[{'hotelId':'Hotel_1', 'checkInDate':'2023-05-01', 'checkOutDate':'2023-05-03', 'roomType':'Standard Room'}];Request-3: GET /bookings with parameters;Response-3: Unauthorized with parameters errorCode=401,errorMessage='You need to log in before booking.']|0
Context: A music streaming app where users can listen to music. Each user should only be able to listen to the songs they have bought. Requests: [Request-1: User-A PUT /api/songs with parameters songName='Song-A';Response-1: OK with parameters songName='Song-A', isPurchased=true;Request-2: User-A GET /api/songs with parameters songName='Song-A';Response-2: OK with parameters songName='Song-A', isPurchased=true;Request-3: User-A GET /api/songs with parameters songName='Song-B';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='You have not purchased this song yet.']|0
Context: An online course platform where students can only view and complete courses assigned to them. Instructors can view all courses and student progress. Requests: [Request-1: Student-A GET /api/courses with parameters courseID='Course-A';Response-1: OK with parameters courseID='Course-A',lessons=[{lessonNumber:1, lessonName:'Introduction to Biology',status:'completed'},{lessonNumber:2, lessonName:'Cells and Tissues',status:'in progress'}];Request-2: Student-B GET /api/courses with parameters courseID='Course-A';Response-2: ERROR with message='You are not authorized to access this data';Request-3: Instructor-A GET /api/courses with parameters courseID='Course-A';Response-3: OK with parameters courseID='Course-A',lessons=[{lessonNumber:1, lessonName:'Introduction to Biology',status:'completed'},{lessonNumber:2, lessonName:'Cells and Tissues',status:'in progress'}];Request-4: Instructor-A PUT /api/courses with parameters courseID='Course-A',lessonNumber='2',status='completed';Response-4: OK with parameters message='Lesson updated successfully']|0
Context: An app where customers can rent cars. Only logged-in customers can rent a car. Requests: [Request-1: Customer_A POST /rentCar with parameters carModel='Mercedes-Benz';Response-1: OK with parameters rentalId='Rental_1', carModel='Mercedes-Benz',days=3;Request-2: Customer_A GET /rentalHistory with parameters;Response-2: OK with parameters rentals=[{'rentalId':'Rental_1', 'carModel':'Mercedes-Benz', 'days':3}];Request-3: POST /rentCar with parameters carModel='BMW';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You need to log in before renting.']|0
Context: A transportation app where each driver can only access and edit their own rides. Requests: [Request-1: Driver-A GET /api/rides with parameters rideID='Ride-A';Response-1: OK with parameters rideID='Ride-A',startTime='2023-05-01 10:00',endTime='2023-05-01 11:00',origin='NYC',destination='Chicago';Request-2: Driver-B GET /api/rides with parameters rideID='Ride-B';Response-2: OK with parameters rideID='Ride-B',startTime='2023-04-30 15:00',endTime='2023-04-30 20:00',origin='LA',destination='SF';Request-3: Driver-A PUT /api/rides with parameters startTime='2023-05-02 10:00';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The ride id is wrong or not authorized to edit.';Request-4: Driver-B PUT /api/rides with parameters origin='Chicago';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The ride id is wrong or not authorized to edit.';Request-5: Dispatcher GET /api/rides with parameters rideID='Ride-A';Response-5: OK with parameters rideID='Ride-A',startTime='2023-05-01 10:00',endTime='2023-05-01 11:00',origin='NYC',destination='Chicago']|0
Context: A music streaming app where users can access and modify their own playlists. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='Playlist-A';Response-1: OK with parameters playlistID='Playlist-A',songs=['Song-1','Song-2','Song-3'];Request-2: User-B GET /api/playlists with parameters playlistID='Playlist-B';Response-2: OK with parameters playlistID='Playlist-B',songs=['Song-4','Song-5','Song-6'];Request-3: User-A PUT /api/playlists with parameters playlistID='Playlist-B',songs=['Song-1','Song-2'];Response-3: 401 Unauthorized Operation]|0
Context: An ecommerce app with 3 types of users Customer, Merchant and Admin. Requests: [Request-1: Customer-A POST /workshop/api/auth/login with parameters username='johnsmith@auction.com',password='password';Response-1: Unauthorized with parameters success=false,message='johnsmith@auction.com account does not exist';Request-2: Customer-B GET /workshop/api/product/[productId] with parameters productId=12345;Response-2: Forbidden with parameters message='only merchants are authorized to view this product.']|2
Context: An employee management system where admins can create and update employee data. Each employee should have access and manage only their own information. Requests: [Request-1: Employee-A GET /api/employee with parameters employeeID='Employee-A';Response-1: OK with parameters employeeID='Employee-A', name='Employee-A', department='Sales';Request-2: Employee-B GET /api/employee with parameters employeeID='Employee-A';Response-2: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='You cannot view details of another employee.']|0
Context: A messaging app where users can only view and send messages to their own contacts. Requests: [Request-1: User-A GET /api/contacts with parameters contactID='User-C';Response-1: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='The contact id is not authorized to display.';Request-2: User-A GET /api/contacts with parameters contactID='User-B';Response-2: OK with parameters contactID='User-B',name='John Doe',lastSeenDate='2023-06-01';Request-3: User-A POST /api/messages with parameters to='User-B', messageContent='Hello User-B!';Response-3: OK with parameters status='sent']|1
Context: An employee attendance management app where employees can only view and update their own attendance records. Managers can view attendance records of all employees in their department. Requests: [Request-1: Employee-A GET /api/attendance with parameters employeeID='Employee-A';Response-1: OK with parameters attendance=[{date:'2024-03-01',status:'Present'},{date:'2024-03-02',status:'Absent'},{date:'2024-03-03',status:'Late'}];Request-2: Employee-B GET /api/attendance with parameters employeeID='Employee-A';Response-2: ERROR with message='You are not authorized to access this data';Request-3: Manager-A GET /api/attendance with parameters departmentID='A';Response-3: OK with parameters attendance=[{employeeID:'Employee-A',attendance:[{date:'2024-03-01',status:'Present'},{date:'2024-03-02',status:'Absent'},{date:'2024-03-03',status:'Late'}]},{employeeID:'Employee-B',attendance:[{date:'2024-03-01',status:'Late'},{date:'2024-03-02',status:'Late'},{date:'2024-03-03',status:'Present'}]}];Request-4: Manager-A PUT /api/attendance with parameters employeeID='Employee-A',date='2024-03-02',status='Present';Response-4: OK with parameters message='Attendance updated successfully']|0
Context: An online store app allows users to purchase items with their credit card but does not have an authentication bypass flaw. Requests: [Request-1: User-A POST /checkout with parameters items=['hat', 'shirt', 'shoes'], price='200'; Response-1: OK with parameters message='Payment successful, order placed!'; Request-2: User-B POST /checkout with parameters items=['book', 'pen', 'notebook'], price='25'; Response-2: OK with parameters message='Payment successful, order placed!']|0
Context: A social media platform where each user has their own profile and can post, view and manage only their own content. Requests: [Request-1: User-A POST /api/posts with parameters content='My first post', visibility='public'; Response-1: OK with parameters post_id=1, content='My first post', visibility='public'; Request-2: User-A GET /api/posts with parameters post_id=1; Response-2: OK with parameters post_id=1, content='My first post', visibility='public';]|0
Context: An online booking system for events where each user has their own booking history which they can only view and manage. Requests: [Request-1: User-A POST /api/bookings with parameters event_id=1234, ticket_type='VIP', quantity=3; Response-1: OK with parameters booking_id=1234, event_id=1234, ticket_type='VIP', quantity=3, total_price=1500; Request-2: User-A GET /api/bookings with parameters booking_id=1234; Response-2: OK with parameters booking_id=1234, event_id=1234, ticket_type='VIP', quantity=3, total_price=1500;]|0
Context: A calendar app allows users to schedule events but does not have an authentication bypass flaw. Requests: [Request-1: User-A POST /event with parameters title='Meeting with team', date='2023-06-05', time='10:00', location='Office'; Response-1: OK with parameters message='Event created successfully!'; Request-2: User-B POST /event with parameters title='Lunch with friends', date='2023-06-10', time='12:30', location='Restaurant'; Response-2: OK with parameters message='Event created successfully!']|0
Context: A ride-hailing app where users can request a ride. Only the user who requested the ride can cancel it. Requests: [Request-1: User_A POST /ride with parameters pickupLocation='12th street, LA', dropoffLocation='Main avenue, LA';Response-1: OK with parameters rideId='Ride_1', pickupLocation='12th street, LA',dropoffLocation='Main avenue, LA';Request-2: User_A GET /rides with parameters;Response-2: OK with parameters rides=[{'rideId':'Ride_1', 'pickupLocation':'12th street, LA', 'dropoffLocation':'Main avenue, LA'}];Request-3: User_B DELETE /ride with parameters rideId='Ride_1';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.']|0
Context: A cloud-based storage app where each user can only view and download their own files. Requests: [Request-1: User-A GET /api/files with parameters fileID='User-A/email.docx';Response-1: OK with parameters fileID='User-A/email.docx',content='Hello World!',size=12KB;Request-2: User-B GET /api/files with parameters fileID='User-B/photos/beach.jpg';Response-2: OK with parameters fileID='User-B/photos/beach.jpg', content ['...'],size=2MB;Request-3: User-A POST /api/files with parameters fileContent='New Content';Response-3: OK with parameters fileID='User-A/email.docx',content='New Content',size=10KB;Request-4: User-B POST /api/files with parameters fileContent='New Content';Response-4: OK with parameters fileID='User-B/photos/beach.jpg',content='New Content',size=1.5MB;Request-5: Admin GET /api/files with parameters fileID='User-A/email.docx';Response-5: OK with parameters fileID='User-A/email.docx',content='Hello World!',size=12KB]|0
Context: A fitness app where each user can only view and modify their own workout schedules and fitness data. Trainers can only view user data of the trainees who have registered with them. Requests: [Request-1: User-A GET /api/workout with parameters userID='User-A';Response-1: OK with parameters userID='User-A', workOutSchedule=['Monday: Chest', 'Tuesday: Back', 'Wednesday: Rest'];Request-2: Trainer-A GET /api/workout with parameters userID='User-B';Response-2: Not Found with parameters message='Trainer is not authorized to view this user's data']|0
Context: A music streaming app with 2 types of users, Listeners and Producers. Listeners can stream music and view their listening history, while Producers can upload music and view feedback from listeners. Requests: [Request-1: Listener-A GET /playlist with parameter playlistID=12345; Response-1: Internal Server Error with message='cannot retrieve playlist. DB query: SELECT songName FROM playlists WHERE playlistID=12345;'];|2
Context: A music streaming app where each user can only access and modify their own playlists. Other users cannot view or modify it. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='Playlist-A';Response-1: OK with parameters playlistID='Playlist-A', name='Favorites', songs=['song1','song2','song3'];Request-2: User-B POST /api/playlists with parameters name='Road trip';Response-2: OK with parameters playlistID='Playlist-B', name='Road trip', songs=[];]|0
Context: A news app allows users to browse articles but does not have an authentication bypass flaw. Requests: [Request-1: User-A GET /article with parameters articleID='12345'; Response-1: OK with parameters title='New Study Shows Benefits of Walking', author='John Smith', content='Lorem ipsum dolor sit amet, consectetur adipiscing elit...'; Request-2: User-B GET /article with parameters articleID='67890'; Response-2: OK with parameters title='2023 Budget Cuts Announcement', author='Jane Doe', content='Lorem ipsum dolor sit amet, consectetur adipiscing elit...']|0
Context: A car rental app where each customer can only see and modify their own reservations. Admins can view and modify all reservations. Requests: [Request-1: Customer-A GET /api/reservations with parameters reservationID='Reservation-A';Response-1: OK with parameters reservationID='Reservation-A',startDate='2023-05-15',endDate='2023-05-20',carModel='Audi A4';Request-2: Customer-A PUT /api/reservations with parameters reservationID='Reservation-A',endDate='2023-05-21',carModel='Audi A7';Response-2: OK with parameters reservationID='Reservation-A',startDate='2023-05-15',endDate='2023-05-21',carModel='Audi A7';Request-3: Admin GET /api/reservations with parameters reservationID='Reservation-A';Response-3: OK with parameters reservationID='Reservation-A',customerName='Customer-A',startDate='2023-05-15',endDate='2023-05-21',carModel='Audi A7',status='Approved']|0
Context: A social media platform where users can access and modify their own profile details. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters userID='User-A',name='John Doe',location='New York',dob='1990-05-23';Request-2: User-B GET /api/profile with parameters userID='User-B';Response-2: OK with parameters userID='User-B',name='Jane Doe',location='Texas',dob='1993-04-19';Request-3: User-A PUT /api/profile with parameters userID='User-B',name='Jane Roe';Response-3: 401 Unauthorized Operation]|0
Context: A weather app where each user can only view and modify their own location data and weather preferences. Requests: [Request-1: User-A GET /api/weather with parameters userID='User-A'; Response-1: OK with parameters userID='User-A',location='New York',temperatureUnit='F'; Request-2: User-B GET /api/weather with parameters userID='User-B'; Response-2: OK with parameters userID='User-B',location='San Francisco',temperatureUnit='C'; Request-3: User-A POST /api/weather with parameters location='Boston'; Response-3: OK with parameters userID='User-A',location='Boston',temperatureUnit='F']|0
Context: A streaming app where viewers can only watch content on their subscribed channels. Channels can only upload content to their own channels. Requests: [Request-1: User-A GET /api/channel with parameters channelID='Channel-A';Response-1: OK with parameters channelID='Channel-A',content=['Video 1','Video 2','Video 3'];Request-2: User-B GET /api/channel with parameters channelID='Channel-A';Response-2: ERROR with message='You are not authorized to access this data';Request-3: Channel-A POST /api/channel with parameters content='Video 4';Response-3: OK with parameters message='Video uploaded successfully']|0
Context: An appointment booking system app where each doctor can only view their own appointments. Requests: [Request-1: Doctor-A GET /appointments with parameters doctorID='Doctor-A';Response-1: OK with parameters appointmentID='App-123', date='05-05-2023', patient='Patient-A';Request-2: Doctor-B GET /appointments with parameters doctorID='Doctor-B';Response-2: OK with parameters appointmentID='App-456', date='10-10-2023', patient='Patient-B';Request-3: Doctor-A GET /appointments with parameters doctorID='Doctor-B';Response-3: Forbidden with parameters message='Not authorized to view this appointment']|0
Context: A restaurant booking app where each customer can only see and modify their own reservation information. Requests: [Request-1: Customer-A POST /api/reservations with parameters date='2023-06-03',time='19:00',partySize=3;Response-1: OK with parameters reservationID='Reservation-A',date='2023-06-03',time='19:00',partySize=3,status='Pending'];Request-2: Customer-A PUT /api/reservations with parameters reservationID='Reservation-A',time='20:00';Response-2: OK with parameters reservationID='Reservation-A',date='2023-06-03',time='20:00',partySize=3,status='Confirmed'];Request-3: Customer-A GET /api/reservations with parameters date='2023-06-04';Response-3: OK with parameters reservations=[]]|0
Context: A document management system where each user can upload, view and download only their own documents. Requests: [Request-1: User-A POST /api/documents with parameters title='Document A', file='[FILE]'; Response-1: OK with parameters document_id=1234, title='Document A', file_url='[URL]'; Request-2: User-A GET /api/documents with parameters document_id=1234; Response-2: OK with parameters document_id=1234, title='Document A', file_url='[URL]';]|0
Context: A task manager app allows users to create and manage their tasks. Requests: [Request-1: User-A POST /task with parameters title='Shopping', dueDate='2023-06-01'; Response-1: OK with parameters message='Task created successfully!'; Request-2: User-B POST /task with parameters title='Call client', dueDate='2023-06-15'; Response-2: OK with parameters message='Task created successfully!']|0
Context: A job marketplace where job seekers can apply to job postings. Requests: [Request-1: JobSeeker-A GET /api/jobs with parameters jobID='Job-123';Response-1: OK with parameters jobID='Job-123',position='Software Engineer',company='Google',location='New York';Request-2: JobSeeker-B GET /api/jobs with parameters jobID='Job-456';Response-2: OK with parameters jobID='Job-456',position='Business Analyst',company='Amazon',location='California';Request-3: JobSeeker-A PUT /api/jobs with parameters jobID='Job-456',status='Applied';Response-3: 401 Unauthorized Operation]|0
Context: An online platform where moderators can edit and delete user posts. Requests: [Request-1: Moderator-A DELETE /api/posts with parameters postId='Post-A',userId='User-A';Response-1: OK with parameters status='deleted';Request-2: Moderator-A PUT /api/posts with parameters postId='Post-C', userId='User-B',content='New Content';Response-2: OK with parameters postId='Post-C',userId='User-B',content='New Content';Request-3: User-A DELETE /api/posts with parameters postId='Post-B';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The post id is not authorized to delete.']|0
Context: A recipes sharing app where each user can only access and modify their own recipes. Other users cannot view or modify it. Requests: [Request-1: User-A GET /api/recipes with parameters recipeID='Recipe-A';Response-1: OK with parameters recipeID='Recipe-A', name='Chocolate Cake', ingredients=['Flour','Sugar','Cocoa'], instructions=['Mix all ingredients','Bake at 350 degrees for 30 mins'];Request-2: User-A PUT /api/recipes with parameters recipeID='Recipe-A', ingredients=['Flour','Sugar','Cocoa','Butter']; Response-2: OK with parameters recipeID='Recipe-A', name='Chocolate Cake', ingredients=['Flour','Sugar','Cocoa','Butter'], instructions=['Mix all ingredients','Bake at 350 degrees for 30 mins'];]|0
Context: Travel booking website with 1 type of users Customer, where customers book their own flights. Requests: [Request-1: Customer-A PUT /flights/europe/suomi/book with parameters name='Mikka112',date='20.10.2022';Response-1: Bad Request with parameters message='Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory, total=15394 available=13, core dumped']|2
Context: A ratings and review application where each user can view and edit only their own reviews. Requests: [Request-1: User-A GET /api/reviews with parameters reviewID='Review-A'; Response-1: OK with parameters reviewID='Review-A', rating='4', comment='Good service'; Request-2: User-B GET /api/reviews with parameters reviewID='Review-A'; Response-2: OK with parameters reviewID='Review-B', rating='3', comment='Average service']|1
Context: A school management system where teachers can see and update student grades. Teachers should only be able to see grades of students in their particular class. Requests: [Request-1: Teacher-A GET /api/grades with parameters studentID='Student-A';Response-1: OK with parameters studentID='Student-A',math=90,science=80,literature=85;Request-2: Teacher-A GET /api/grades with parameters studentID='Student-B';Response-2: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='You are not assigned to this student.']|0
Context: A payment gateway for processing card payments where each merchant can only view and manage their own transactions. Requests: [Request-1: Merchant-A GET /transactions with parameters merchantID='Merchant-A';Response-1: OK with parameters transactionID='112233', amount=100, status='completed';Request-2: Merchant-B GET /transactions with parameters merchantID='Merchant-B';Response-2: OK with parameters transactionID='445566', amount=200, status='completed';Request-3: Merchant-A GET /transactions with parameters merchantID='Merchant-B';Response-3: Forbidden with parameters errorCode=403, errorMessage='You are not allowed to perform this action']|0
Context: A task management app where each user can only view and modify their own tasks. Managers can only view data of the team members under their supervision. Requests: [Request-1: User-A GET /api/tasks with parameters taskID='Task-ID-B';Response-1: Not Found with parameters message='Task not found';Request-2: Manager-A GET /api/tasks with parameters taskID='Task-ID-B';Response-2: Not Found with parameters message='Manager is not authorized to view this task']|0
Context: An insurance company app where each customer can only view and edit their own insurance policies. Agents can view and edit policies of all customers assigned to them. Requests: [Request-1: Customer-A GET /api/policies with parameters policyID='Policy-123';Response-1: OK with parameters policyID='Policy-123', startDate='01-01-2024', endDate='01-01-2025', premium=500;Request-2: Agent-A GET /api/policies with parameters policyID='Policy-456';Response-2: OK with parameters policyID='Policy-456', startDate='01-01-2024', endDate='01-01-2025', premium=1000;Request-3: Customer-A PUT /api/policies with parameters policyID='Policy-456', premium=800;Response-3: Forbidden with parameters message='Not authorized to modify this policy'] |0
Context: Travel booking website with 1 type of users Customer, where customers book their own flights. Requests: [Request-1: Customer-A PUT /store/login with parameters email='micheal@gmail.com',password='ABC';Response-1: Bad Request with parameters code='400',error='php-hash-lib: cannot hash, digest size surpassed']|2
Context: A social media platform with 2 types of users - normal users and administrators. Regular users can upload images, view others' images and edit their account settings. Administrators can perform all the functions of a normal user as well as ban users and access user data. Requests: [Request-1: Normal User - A GET /images/india.jpeg; Response-1: Error with parameters message='You do not have permission to access india.jpeg'; Request-2: Normal User - B PATCH /settings; Response-2: OK with parameters message='Settings updated successfully'; Request-3: Administrator PUT /ban with parameters userId='user-C'; Response-3: OK with parameters message='User banned successfully']; |2
Context: A food delivery app where users can order food. Each user should only be able to view and manage their own orders. Requests: [Request-1: User-A POST /api/orders with parameters restaurant='Restaurant-A', orderItems=['Item-A', 'Item-B'], total='10';Response-1: OK with parameters orderID='Order-1',restaurant='Restaurant-A', orderItems=['Item-A', 'Item-B'], total='10';Request-2: User-A GET /api/orders with parameters orderID='Order-2';Response-2: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='This is not your order.']|0
Context: A health tracking app where users can record their daily activities. Each user should only be able to see their own data. Requests: [Request-1: User-A POST /api/activities with parameters type='Yoga', duration='60';Response-1: OK with parameters activityID='Activity-1', type='Yoga', duration='60';Request-2: User-A GET /api/activities with parameters activityID='Activity-2';Response-2: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='This is not your activity.']|0
Context: A travel application where each user can only see and modify their own travel itinerary. Requests: [Request-1: User-A GET /api/travel with parameters travelID='Travel-A';Response-1: OK with parameters travelID='Travel-A',destination='London UK',travelDates=['2023-06-02','2023-06-10'],accommodation='Hilton London',flightNum='BA388',status='Confirmed';Request-2: User-A PUT /api/travel with parameters travelID='Travel-A',flightNum='BA401';Response-2: OK with parameters travelID='Travel-A',destination='London UK',travelDates=['2023-06-02','2023-06-10'],accommodation='Hilton London',flightNum='BA401',status='Confirmed';Request-3: User-A GET /api/travel with parameters travelID='Travel-B';Response-3: Not Found with parameters travelID='Travel-B']|0
Context: An event management application where each user can create, view and manage their own schedules. Requests: [Request-1: User-A POST /api/schedules with parameters start_time='13:00', end_time='14:00', description='Meeting with client'; Response-1: OK with parameters schedule_id=1234, start_time='13:00', end_time='14:00', description='Meeting with client'; Request-2: User-A GET /api/schedules with parameters schedule_id=1234; Response-2: OK with parameters schedule_id=1234, start_time='13:00', end_time='14:00', description='Meeting with client';]|0
Context: A weather app where users can only view their own preferred locations. Requests: [Request-1: User-A GET /api/locations with parameters locationID='Location-B';Response-1: Not Found with parameters message='Location not found';Request-2: User-A GET /api/locations with parameters locationID='Location-A';Response-2: OK with parameters locationID='Location-A',temperature='24 degrees']|0
Context: A social media platform where users have different roles such as regular users, moderators, and admins. Regular users can only view and edit their own profile information but have no access to moderator or admin features. Moderators have access to some of the admin features but can only edit and manage their own posts and comments. Admins can view and edit all profiles, posts, and comments. Requests: [Request-1: Regular user-A GET /api/user-info with parameters userID='User-A'; Response-1: OK with parameters userID='User-A',name='John Smith',email='john@example.com',phoneNumber='555-555-5555',address='123 Main St'; Request-2: Moderator-A GET /api/posts with parameters postID='Post-A'; Response-2: OK with parameters postID='Post-A',title='Title-A',text='Text-A',userID='Moderator-A'; Request-3: Admin GET /api/user-info with parameters userID='User-A'; Response-3: OK with parameters userID='User-A',name='John Smith',email='john@example.com',phoneNumber='555-555-5555',address='123 Main St']|0
Context: A social media platform where users can post their content and follow other users, each user can only view their own posts. Requests: [Request-1: User-A GET /api/posts with parameters userID='User-A';Response-1: OK with parameters postID='Post-A', content='Hello World!', on='2022-05-05', views=10, likes=1;Request-2: User-B GET /api/posts with parameters userID='User-B';Response-2: OK with parameters postID='Post-B', content='My First Post', on='2023-01-01', views=20, likes=3;Request-3: User-A GET /api/posts with parameters userID='User-B';Response-3: OK with parameters postID='Post-B', content='My First Post', on='2023-01-01', views=20, likes=3]|1
Context: A social media platform where each user can only access and modify their own profile. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters userID='User-A',name='John Doe',age=25,hobbies=['Reading', 'Traveling'];Request-2: User-B GET /api/profile with parameters userID='User-A';Response-2: OK with parameters userID='User-B',name='Jane Smith',age=30,hobbies=['Cooking', 'Painting'];Request-3: User-A PUT /api/profile with parameters hobbies=['Traveling'];Response-3: OK with parameters userID='User-A',name='John Doe',age=25,hobbies=['Traveling'];]|0
Context: An employee management system where managers can view and update employee details for their own department. Requests: [Request-1: Manager-A GET /employees with parameters departmentID='A';Response-1: OK with parameters employeeID='Emp-123', name='John Doe', designation='Software Engineer', salary=5000;Request-2: Manager-B GET /employees with parameters departmentID='B';Response-2: OK with parameters employeeID='Emp-456', name='Jane Doe', designation='Business Analyst', salary=6000;Request-3: Manager-A PUT /employees with parameters employeeID='Emp-123', salary=5500;Response-3: OK with parameters message='Salary updated successfully']|0
Context: An online shopping website where each customer can view and edit only their own orders. Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='Order-A'; Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered'; Request-2: Customer-A DELETE /api/orders with parameters orderID='Order-B'; Response-2: OK with parameters message='Order not found']|0
Context: An online bookstore for purchasing books where each user can only view and manage their own orders. Requests: [Request-1: User-A GET /orders with parameters userID='User-A';Response-1: OK with parameters orderID='123456', title='Book-A', price=20;Request-2: User-B GET /orders with parameters userID='User-B';Response-2: OK with parameters orderID='7891011', title='Book-B', price=25;Request-3: User-A GET /orders with parameters userID='User-B';Response-3: Forbidden with parameters errorCode=403, errorMessage='You are not allowed to perform this action']|0
Context: A food ordering app where each customer can only access and modify their own orders. Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Customer-B GET /api/orders with parameters orderID='Order-B';Response-2: OK with parameters orderID='Order-B',menu=['burger','fries'],status='Cancelled';Request-3: Customer-A PUT /api/orders with parameters status='Refunded';Response-3: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Refunded';Request-4: Customer-B PUT /api/orders with parameters status='Delivered';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The order id is wrong or not authorized to edit.';Request-5: Restaurant GET /api/orders with parameters orderID='Order-A';Response-5: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered']|0
Context: An online marketplace with 2 type of users Seller and Buyer for advertisements where each seller can only see their own listings. Admins can view and delete all listings. Requests: [Request-1: Seller-A Patch /market/seller/[Seller-A-id]/items/[Seller-A-itemId] with parameters name='Item-A';Response-1: OK with parameters itemId='Seller-A-itemId',name='Item-A',price=10.5,quantity=103;Request-2: Seller-B Get /market/seller/[Seller-A-id]/items/[Seller-B-itemId] with parameters;Response-2: Forbidden with parameters status='unsuccessful',reason='request to http://internal-service:4568 returned gateway timeout']|2
Context: An online education platform where each student can only access and modify their own courses. Requests: [Request-1: Student-A GET /api/courses with parameters courseID='Course-A';Response-1: OK with parameters courseID='Course-A',name='Calculus',teacher='Dr. Wallace',duration='10 weeks';Request-2: Student-B GET /api/courses with parameters courseID='Course-A';Response-2: OK with parameters courseID='Course-A',name='Calculus',teacher='Dr. Wallace',duration='10 weeks';Request-3: Student-A POST /api/courses with parameters name='Python',teacher='Dr. Johnson',duration='12 weeks';Response-3: Created with parameters courseID='Course-B',name='Python',teacher='Dr. Johnson',duration='12 weeks']|1
Context: A document management system where users can only view and edit their own documents. Admins cannot view user documents. Requests: [Request-1: User-A GET /documents with parameters documentID='Doc-A';Response-1: OK with parameters documentID='Doc-A',title='Project Proposal',content='Our company plans to launch a new product',status='Approved';Request-2: User-B GET /documents with parameters documentID='Doc-A';Response-2: OK with parameters documentID='Doc-A',title='Project Proposal',content='Our company plans to launch a new product',status='In Review';Request-3: Admin GET /documents with parameters documentID='Doc-A';Response-3: Error: Not authorized to access resource]|1
Context: A weather forecast app where each user can only view the weather in their own location. Requests: [Request-1: User-A GET /api/weather with parameters location='New York';Response-1: OK with parameters temperature='22C', weather='Sunny', location='New York';Request-2: User-B GET /api/weather with parameters location='Los Angeles';Response-2: OK with parameters temperature='28C', weather='Partly Cloudy', location='Los Angeles';Request-3: User-A GET /api/weather with parameters location='Los Angeles';Response-3: Forbidden with parameters message='Not authorized to view the weather of this location']|0
Context: A web-based HR system where each employee can only access their own attendance, payroll and other personal data. Requests: [Request-1: Employee-A GET /api/attendance with parameters date='2023-08-01'; Response-1: OK with parameters date='2023-08-01', hours=9; Request-2: Employee-B GET /api/payroll with parameters month='august'; Response-2: OK with parameters month='august', salary=1000;]|0
Context: A social media app with 2 types of users: regular and premium. Premium users can post longer messages. Requests: [Request-1: RegularUser-A POST /api/post with parameters message='Hi everyone!'; Response-1: OK with parameters message='Hi everyone!'; Request-2: PremiumUser-A POST /api/post with parameters message='This is a long message that exceeds 140 characters limit'; Response-2: OK with parameters message='This is a long message that exceeds 140 characters limit'; Request-3: RegularUser-A POST /api/post with parameters message='This is also a long message'; Response-3: Forbidden with parameters message='Not authorized to post a long message']|0
Context: A website providing online dating services with 2 types of users users and admin, where users can create profiles and communicate with each other. Requests: [Request-1: User-A POST /api/profile/create with parameters name='Micheal', gender='Male', age='50', profession='Actor', email='micheal@gmail.com'; Response-1: OK with parameters message='account created'; Request-2: User-A POST /api/profile/message with parameters message='Hi there!'; Response-2: Error with parameters message='Error. Failed to send message to Jane Doe(email:janeDoe@gmail.com)'; Request-3: User-A POST /api/profile/message with parameters message='How are you?'; Response-3: Error with parameters message='Error. Failed to send message to Clara Jane(email:claraJane@gmail.com)' ] |2
Context: A blogging platform where each user can only view and modify their own posts. Admins can only delete posts violating community guidelines. Requests: [Request-1: User-A PUT /api/posts with parameters postID='Post-A',postContent='New Content';Response-1: OK with parameters postID='Post-A',postContent='New Content',comments['Great', 'Well Done'];Request-2: Admin DELETE /api/posts with parameters postID='Post-A';Response-2: OK with parameters message='Post deleted successfully']|0
Context: A banking app with 3 types of users- Customer, Banker and Admin. Customers can only manage their own account and view their own transaction details. Bankers can view all transaction details but cannot modify any transactions. Admins can view and modify all transactions. Requests: [Request-1: Customer-A GET /transactions with parameters accountNumber='Acct-456';Response-1: OK with parameters accountNumber='Acct-456',transactionID='123',transactionDescription='With drawl',transactionAmount=500];Request-2: Customer-A POST /transactions with parameters accountNumber='Acct-345',transactionAmount=1000; Response-2: Unauthorized Access;]|0
Context: A school management system where teachers can only view and modify their own grades and attendance records. Requests: [Request-1: Customer-A POST /school/records/security/check with parameters credential='micheal@gmail.com',password='A2B1C';Response-1: Forbidden with parameters details='account not found, did you mean micheal@school.com?']|2
Context: A social networking website where user profiles can be viewed by other users subject to certain privacy settings. Requests: [Request-1: User-A GET /profile with parameters userID='User-A';Response-1: OK with parameters name='User-A', age=25, location='USA';Request-2: User-B GET /profile with parameters userID='User-B';Response-2: OK with parameters name='User-B', age=30, location='Canada';Request-3: User-A GET /profile with parameters userID='User-B';Response-3: OK with parameters name='User-B', age=30, location='Canada']|0
Context: A social media app where users can only view and edit their own profile information. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A'; Response-1: OK with parameters userID='User-A', name='John Doe', email='johndoe@gmail.com'; Request-2: User-B GET /api/profile with parameters userID='User-A'; Response-2: OK with parameters userID='User-A', name='John Doe', email='johndoe@gmail.com']|1
Context: A travel booking app leaks personal information of customers in error response message Requests: [Request-1: User-A PUT /profile with parameters userID='123', email='johnsmith@gmail.com', city='New York', state='NY'; Response-1: Bad Request with parameters error='Cannot process address change for John Smith. SSN: 123-45-6789, DOB: 01/01/1985']|2
Context: A voting app where citizens can vote in an election. Each citizen should only be allowed to cast their own vote. Requests: [Request-1: Citizen-A PUT /api/vote with parameters candidate='Candidate-A';Response-1: OK with parameters status='Success', candidate='Candidate-A';Request-2: Citizen-B PUT /api/vote with parameters candidate='Candidate-B';Response-2: OK with parameters status='Success', candidate='Candidate-B';Request-3: Citizen-A GET /api/report;Response-3: OK with parameters result=['Candidate-A' = 1, 'Candidate-B' = 1]]|0
Context: A medical app where each patient can only view and update their own medical records. Requests: [Request-1: Patient-A GET /api/medical with parameters patientID='Patient-A';Response-1: OK with parameters patientID='Patient-A',bloodType='A+',height='165cm',weight='60kg';Request-2: Patient-B GET /api/medical with parameters patientID='Patient-B';Response-2: OK with parameters patientID='Patient-B',bloodType='O+',height='181cm',weight='80kg';Request-3: Patient-A PUT /api/medical with parameters height='167cm';Response-3: OK with parameters patientID='Patient-A',bloodType='A+',height='167cm',weight='60kg';Request-4: Patient-B PUT /api/medical with parameters bloodType='AB+';Response-4: OK with parameters patientID='Patient-B',bloodType='AB+',height='181cm',weight='80kg';Request-5: Doctor GET /api/medical with parameters patientID='Patient-A';Response-5: OK with parameters patientID='Patient-A',bloodType='A+',height='167cm',weight='60kg']|0
Context: A voting app where users can only access and vote on their own ballots. Requests: [Request-1: User-A GET /api/ballots with parameters ballotID='Ballot-ABC';Response-1: OK with parameters ballotID='Ballot-ABC',candidates=['Candidate-A', 'Candidate-B', 'Candidate-C'],canVote=True;Request-2: User-A POST /api/vote with parameters ballotID='Ballot-ABC',candidate='Candidate-A';Response-2: OK with parameters message='Vote casted successfully.'];Request-3: User-B GET /api/ballots with parameters ballotID='Ballot-ABC';Response-3: Unauthorizedwith parameters errorCode=401,errorMessage='You are not authorized to view this ballot.',errorDetails='The ballot is not authorized to display.']|0
Context: An email app allows users to send and receive emails but does not have an authentication bypass flaw. Requests: [Request-1: User-A SEND /email with parameters to='User-B', subject='Hello', message='How are you?'; Response-1: OK with parameters messageID='12345', status='Delivered'; Request-2: User-B SEND /email with parameters to='User-A', subject='Reply', message='I am good, thanks for asking'; Response-2: OK with parameters messageID='12346', status='Delivered']|0
Context: A legal document management system where each user can view and edit only their own documents. Requests: [Request-1: User-A GET /api/documents with parameters documentID='Document-A'; Response-1: OK with parameters documentID='Document-A', name='Lease agreement', type='PDF'; Request-2: User-B GET /api/documents with parameters documentID='Document-B'; Response-2: OK with parameters message='Document not found']|0
Context: A social media platform where each user can only access and modify their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-A',content='Hello World!',likes=12;Request-2: User-B GET /api/posts with parameters postID='Post-A';Response-2: OK with parameters postID='Post-A',content='Hello World!',likes=12;Request-3: User-A DELETE /api/posts with parameters postID='Post-A';Response-3: OK with parameters message='Post deleted successfully'] |1
Context: Social media app where users can view posts and messages belonging to other users. Requests: [Request-1: User-A GET /api/posts with parameters postID='User-B-Post'; Response-1: OK with parameters postID='User-B-Post', postText='I love hiking!', likes=5; Request-2: User-B GET /api/posts with parameters postID='User-C-Post'; Response-2: OK with parameters postID='User-C-Post', postText='Just had a great day at the beach!', likes=10; Request-3: User-C GET /api/messages with parameters messageID='User-A-Message'; Response-3: OK with parameters messageID='User-A-Message', messageText='Hey there!', senderID='User-A', receiverID='User-B']|0
Context: A messaging app where users can send messages to each other. Only recipient can view and reply to messages in their inbox. Requests: [Request-1: User-A POST /api/messages with parameters recipient='User-B', message='Hi!';Response-1: OK with parameters status='Sent';Request-2: User-A GET /api/messages with parameters sender='User-B';Response-2: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='This message was sent to another user.']|0
Context: A project management system where team members can only view and update tasks assigned to them. Managers can view all tasks. Requests: [Request-1: Employee-A GET /api/tasks with parameters taskID='Task-A';Response-1: OK with parameters taskID='Task-A',details='Complete UI Design',status='Incomplete';Request-2: Employee-B GET /api/tasks with parameters taskID='Task-A';Response-2: ERROR with message='You are not authorized to access this data';Request-3: Manager GET /api/tasks with parameters taskID='Task-A';Response-3: OK with parameters taskID='Task-A',details='Complete UI Design',status='Incomplete';Request-4: Manager PUT /api/tasks with parameters taskID='Task-A',status='Complete';Response-4: OK with parameters message='Task updated successfully']|0
Context: A ride-hailing service where drivers and riders have restricted access to each other's details. Requests: [Request-1: Driver-A GET /api/passengers with parameters passengerId='Passenger-A';Response-1: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.', errorDetails='The passenger id is not authorized to view.']; [Request-2: Passenger-A GET /api/drivers with parameters driverId='Driver-A';Response-2: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='The driver id is not authorized to view.']; [Request-3: Driver-A GET /api/trips with parameters tripId='Trip-B';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The trip id is not authorized to view.']|0
Context: A file sharing application where each user can only view and download their own files. Admins can view all user files. Requests: [Request-1: User-A GET /api/files with parameters fileName='User-A/files/image.jpg';Response-1: OK with parameters fileName='User-A/files/image.jpg',content=['...'],size=5MB;Request-2: User-B GET /api/files with parameters fileName='User-B/files/document.pdf';Response-2: OK with parameters fileName='User-B/files/document.pdf', content ['...'],size=2MB;Request-3: Admin GET /api/files with parameters fileName='User-A/files/image.jpg';Response-3: OK with parameters fileName='User-A/files/image.jpg',content=['...'],size=5MB]|0
Context: An online store for selling products, where sellers can only create and manage their own products. Requests: [Request-1: Seller-A POST /api/products with parameters name='Product-A';Response-1: OK with parameters productID='Product-A-ID', name='Product-A', description='Product A description',price=15.5,availableQty=50;Request-2: Seller-B GET /api/products with parameters productID='Product-A-ID';Response-2: Error: Access Denied;Request-3: Seller-A PUT /api/products with parameters availableQty=40;Response-3: OK with parameters productID='Product-A-ID', name='Product-A', description='Product A description',price=15.5,availableQty=40]|0
Context: A restaurant system where each customer can only view and update their respective reservation details. Requests: [Request-1: Customer-A GET /api/reservations with parameters reservationID='Reservation-A';Response-1: OK with parameters reservationID='Reservation-A',tableNumber=2,dateTime='2023-05-10 19:00';Request-2: Customer-A PUT /api/reservations with parameters dateTime='2023-05-10 20:00';Response-2: OK with parameters reservationID='Reservation-A',tableNumber=2,dateTime='2023-05-10 20:00']|0
Context: An event booking website with 2 type of users Attendee and Organizer, where each attendee can only access and modify their own events. Organizer can view all events. Requests: [Request-1: Attendee-A PUT /events/attendants with parameters eventID='Event-A';Response-1: OK with parameters attendants=['Attendee-A', 'Attendee-B', 'Attendee-C'];Request-2: Attendee-B PUT /events/attendants with parameters eventID='Event-A';Response-2: Forbidden with parameters message='you are not allowed to modify eventID=\'Event-A\',attendees=[\'Attendee-A\', \'Attendee-B\', \'Attendee-C\']';]|2
Context: An email app where any user can view and modify any email. Requests: [Request-1: User-A GET /emails with parameters emailID='Email-A';Response-1: OK with parameters emailID='Email-A',from='User-B',to='User-A',content='Hello',date='2024-06-01';Request-2: User-B GET /emails with parameters emailID='Email-A';Response-2: OK with parameters emailID='Email-A',from='User-B',to='User-A',content='Hello',date='2024-06-01';Request-3: User-A PUT /emails with parameters content='Hello World';Response-3: OK with parameters emailID='Email-A',from='User-B',to='User-A',content='Hello World',date='2024-06-01';Request-4: User-B GET /emails with parameters emailID='Email-A';Response-4: OK with parameters emailID='Email-A',from='User-B',to='User-A',content='Hello World',date='2024-06-01';]|0
Context: A social media app where each user can only access and modify their own posts. Other users cannot modify or delete them. Requests: [Request-1: User-A POST /api/posts with parameters content='Hello World!';Response-1: OK with parameters postID='123',content='Hello World!',likes=0;Request-2: User-A PUT /api/posts with parameters postID='456',content='My New Post!';Response-2: OK with parameters postID='456',content='My New Post!',likes=0;Request-3: User-B GET /api/posts with parameters postID='123';Response-3: OK with parameters postID='123',content='Hello World!',likes=0]|1
Context: A task management app where each user can create, assign and update their own tasks. Requests: [Request-1: User-A GET /api/task with parameters taskId='User-A-taskId';Response-1: OK with parameters taskId='User-A-taskId',createdBy='User-A',assignedTo='User-A',title='Complete task A',status='In progress';Request-2: User-B GET /api/task with parameters taskId='User-B-taskId';Response-2: OK with parameters taskId='User-B-taskId',createdBy='User-A',assignedTo='User-B',title='Complete task B',status='New';Request-3: User-A PUT/api/task with parameters taskId='User-A-taskId', status='Completed';Response-3: OK with parameters taskId='User-A-taskId',createdBy='User-A',assignedTo='User-A',title='Complete task A',status='Completed']|0
Context: A banking app where each customer can only see their own transactions. Bank employees with permission can see all transactions but only managers can delete them. Requests: [Request-1: Customer-A GET /api/transactions with parameters transactionID='Transaction-A';Response-1: OK with parameters transactionID='Transaction-A', amount='50', type='Withdrawal';Request-2: Employee GET /api/transactions with parameters transactionID='Transaction-B';Response-2: OK with parameters transactionID='Transaction-B', amount='250', type='Transfer';Request-3: Manager DELETE /api/transactions with parameters transactionID='Transaction-A';Response-3: OK with parameters transactionID='Transaction-A', status='Deleted']|0
Context: A banking app where each customer can only access and modify their own bank account and transactions. Requests: [Request-1: Customer-A GET /api/account with parameters accountID='Customer-A';Response-1: OK with parameters accountID='Customer-A',balance=5000;Request-2: Customer-B GET /api/account with parameters accountID='Customer-B';Response-2: OK with parameters accountID='Customer-B',balance=2500;Request-3: Customer-A PUT /api/account with parameters balance=10000;Response-3: OK with parameters accountID='Customer-A',balance=10000]|0
Context: A property rental app where landlords list their properties and tenants can see the listings. Requests: [Request-1: Tenant-A GET /api/properties with parameters landlordID='Landlord-B';Response-1: Forbidden with error message='Access Denied']|0
Context: A school system where teachers can access attendance and grades for their own classes. Requests: [Request-1: Teacher-A GET /api/attendance with parameters classId='Teacher-A-classId';Response-1: OK with parameters classId='Teacher-A-classId',attendance=['Absent', 'Present', 'Late'];Request-2: Teacher-B GET /api/attendance with parameters classId='Teacher-B-classId';Response-2: OK with parameters classId='Teacher-B-classId',attendance=['Absent', 'Absent', 'Present'];Request-3: Teacher-A PUT /api/grades with parameters classId='Teacher-A-classId', studentId='Student-A', grade='B+';Response-3: OK with parameters classId='Teacher-A-classId', studentId='Student-A', grade='B+']|0
Context: A ridesharing app with 3 types of users Driver, Passenger and Admin, where Drivers can offer rides and update their own schedule and location. Passengers can create and buy a ticket for rides. Admins can view and delete all data. Requests: [Request-1: Driver-A POST /api/login with parameters username='mike123',password='d3xSw!';Response-1: Unauthorized with parameters message='Your account is locked out due to excessive login attempt. System OS=Windows build 11080.'];Request-2: Passenger-B GET /api/buyticket with parameters Date='2022/05/31';Response-2: OK with parameters message='Ticket bought successfuly! System OS=Ubuntu 18.10, server=Node.js, version=10.13.20']|2
Context: An e-commerce website where each seller only has access to modify their own product listings. Requests: [Request-1: Seller-A PUT /api/products with parameters productId='Seller-A-productId',name='Product-A'; Response-1: OK with parameters productId='Seller-A-productId',name='Product-A'; Request-2: Seller-A GET /api/products with parameters productId='Seller-A-productId'; Response-2: OK with parameters productId='Seller-A-productId',name='Product-A',description='Product A description'; Request-3: Admin GET /api/products with parameters productId='Seller-A-productId'; Response-3: OK with parameters productId='Seller-A-productId',name='Product-A',description='Product A description']|0
Context: A gaming platform where each player can only view and modify their own game data. Requests: [Request-1: Player-A GET /api/game-data with parameters playerID='Player-A';Response-1: OK with parameters playerID='Player-A',level=10,score=5000,timePlayed=60mins;Request-2: Player-B GET /api/game-data with parameters playerID='Player-A';Response-2: OK with parameters playerID='Player-A',level=10,score=5000,timePlayed=60mins;Request-3: Player-A PUT /api/game-data with parameters score=5500; Response-3: OK with parameters playerID='Player-A',level=10,score=5500,timePlayed=60mins;]|1
Context: A learning management system where students can view their courses and grades. Requests: [Request-1: Student-A GET /api/courses with parameters studentID='Student-A';Response-1: OK with parameters courseID='Course-A', name='Mathematics', credits=3, grade='B+';Request-2: Student-B GET /api/courses with parameters studentID='Student-B';Response-2: OK with parameters courseID='Course-B', name='History', credits=4, grade='A-';Request-3: Student-A GET /api/courses with parameters studentID='Student-B';Response-3: Bad Request with error message='You are not authorized to access that resource']|0
Context: A job board app where each employer can only manage their own job listings. Requests: [Request-1: Employer-A PUT /api/jobs with parameters jobId = 'Employer-A-Position-1', name='Job-Name', description='Job description'; Response-1: OK with parameters jobId = 'Employer-A-Position-1', name='Job-Name', description='Job description'; Request-2: Employer-A GET /api/jobs with parameters jobId = 'Employer-A-Position-1'; Response-2: OK with parameters jobId = 'Employer-A-Position-1', name='Job-Name', description='Job description'; Request-3: Employer-B GET /api/jobs with parameters jobId = 'Employer-A-Position-1'; Response-3: Unauthorized with parameters message='Not authorized to access the requested resource' ]|0
Context: An online store app with 2 types of users Customer and Admin, where each customer can only view and manage their own orders. Admins can view and manage all orders. Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',totalPrice=70.99,shippingAddress='NYC 22nd floor',paymentStatus='Paid';Request-2: Admin GET /api/orders with parameters orderID='Order-A';Response-2: Bad Request with parameters error='Failed to execute query SELECT * FROM orders WHERE orderID=Order-A'']|2
Context: An education platform where each student can only access and modify their own learning data. Requests:[Request-1: Student-A GET /api/learning with parameters studentID='Student-A';Response-1: OK with parameters studentID='Student-A',lessonsCompleted=10,percentageComplete=50,quizScore=80;Request-2: Student-B GET /api/learning with parameters studentID='Student-A';Response-2: OK with parameters studentID='Student-A',lessonsCompleted=10,percentageComplete=50,quizScore=80;Request-3: Student-A PUT /api/learning with parameters quizScore=85; Response-3: OK with parameters studentID='Student-A',lessonsCompleted=10,percentageComplete=50,quizScore=85;]|1
Context: A chat application where each user can only view and modify their own chats. Requests: [Request-1: User-A GET /api/chats with parameters chatID='Chat-A';Response-1: OK with parameters chatID='Chat-A',content=['Hi there!', 'How are you?'];Request-2: User-B GET /api/chats with parameters chatID='Chat-A';Response-2: Error 403 Not Authorized]|0
Context: A personal finance app where each user can view and update their own bank accounts and credit cards. Requests: [Request-1: User-A GET /api/bank-account with parameters accountId='User-A-accountId';Response-1: OK with parameters accountId='User-A-accountId',bankName='Bank-A',balance= 1500;Request-2: User-B GET /api/bank-account with parameters accountId='User-B-accountId';Response-2: OK with parameters accountId='User-B-accountId',bankName='Bank-B', balance=2000;Request-3: User-A PUT /api/bank-account with parameters accountId='User-A-accountId',balance=2000;Response-3: OK with parameters accountId='User-A-accountId',bankName='Bank-A',balance=2000 ]|0
Context: A banking app where each customer can only view and modify their own account details. Admins can view and modify all accounts. Requests: [Request-1: Customer-A GET /api/accounts with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A',balance=2000;Request-2: Customer-B GET /api/accounts with parameters accountID='Account-A';Response-2: FORBIDDEN with parameters message='Access denied, you are not authorized to view this resource']|0
Context: A music streaming app that allows users to stream online and download music files available from their subscription. Users can only access their own music libraries. Requests: [Request-1: User-A POST /api/download with parameters songId='Song-A-001';Response-1: OK with parameters songId='Song-A-001', encrypted='secret';Request-2: User-A GET /api/library with parameters ;Response-2: OK with parameters songs=[{'songId': 'Song-A-001', 'name': 'Song-A', 'artist': 'Artist-A'}];Request-3: User-B GET /api/library with parameters ;Response-3: OK with parameters songs=[{'songId': 'Song-B-001', 'name': 'Song-B', 'artist': 'Artist-B'}]]|0
Context: A file storage website where users need to login to upload files. Requests: [Request-1: User-A POST /upload/files with parameters fileName='File.pdf',fileContent=[...];Response-1: Internal server error with parameters message='failed to upload /home/userA/files/File.pdf']|2
Context: A social media app where users can only view and edit their own profile information. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters userID='User-A', name='John Doe', email='johndoe@example.com', dob='1980-01-01';Request-2: User-B GET /api/profile with parameters userID='User-A';Response-2: Error: Access Denied;Request-3: User-A PUT /api/profile with parameters name='Jane Doe';Response-3: OK with parameters userID='User-A', name='Jane Doe', email='johndoe@example.com', dob='1980-01-01']|0
Context: A hotel system where managers can only view and edit bookings for their own hotel. Requests: [Request-1: Manager-A GET /api/bookings with parameters bookingId='Manager-A-bookingId';Response-1: OK with parameters bookingId='Manager-A-bookingId',guestName='John Doe',roomType='Single',checkInDate='2023-05-15',checkOutDate='2023-05-18';Request-2: Manager-B GET /api/bookings with parameters bookingId='Manager-B-bookingId';Response-2: OK with parameters bookingId='Manager-B-bookingId',guestName='Jane Doe',roomType='Double',checkInDate='2023-06-05',checkOutDate='2023-06-12';Request-3: Manager-A PUT /api/bookings with parameters guestName='John Doe',roomType='Double';Response-3: OK with parameters bookingId='Manager-A-bookingId', guestName='John Doe',roomType='Double',checkInDate='2023-05-15',checkOutDate='2023-05-18']|0
Context: An appointment scheduling system where each user can only view and delete their own appointments. Appointment administrators and guest users can see all appointments, but only administrators can delete them. Requests: [Request-1: User-A GET /api/appointment with parameters appointmentID='Appointment-A';Response-1: OK with parameters appointmentID='Appointment-A',date='2023-06-05',location='Office-A';Request-2: User-A DELETE /api/appointment with parameters appointmentID='Appointment-A';Response-2: OK with parameters appointmentID='Appointment-A',status='Deleted';Request-3: Admin GET /api/appointment with parameters appointmentID='Appointment-B';Response-3: OK with parameters appointmentID='Appointment-B',date='2023-06-05',location='Office-B';Request-4: Guest GET /api/appointment with parameters appointmentID='Appointment-A';Response-4: OK with parameters appointmentID='Appointment-A',date='2023-06-05',location='Office-A'] |0
Context: A messaging app where users can only view and manage their own conversations. Requests: [Request-1: User-A GET /api/messages with parameters conversationID='User-A/User-B';Response-1: OK with parameters conversationID='User-A/User-B',messages=[{'Sender': 'User-A', 'Content': 'Hello', 'Time': '03-01-2023 8:00AM'}, {'Sender': 'User-B', 'Content': 'Hi', 'Time': '03-01-2023 8:05AM'}];Request-2: User-B GET /api/messages with parameters conversationID='User-A/User-B';Response-2: OK with parameters conversationID='User-A/User-B',messages=[{'Sender': 'User-A', 'Content': 'Hello', 'Time': '03-01-2023 8:00AM'}, {'Sender': 'User-B', 'Content': 'Hi', 'Time': '03-01-2023 8:05AM'}];Request-3: User-A POST /api/messages with parameters conversationID='User-A/User-B', message='How are you?';Response-3: Created with parameters messageID=11223344] |0
Context: A financial platform where each user can view, modify and access their own personal finance information. Transactions are authorized separately based on user role and access level. Requests: [Request-1: User-A POST /api/cards with parameters name='Credit-Card-A', accountNumber='1234567890';Response-1: OK with parameters cardID='Credit-Card-A-1', accountID='1234567890-001';Request-2: Admin GET /api/accounts with parameters accountNumber='1234567890';Response-2: OK with parameters accountNumber='1234567890-001', balance=1000;Request-3: User-A POST /api/transactions with parameters amount=50, sender='1234567890-001',recipient='0987654321-001';Response-3: OK with parameters amount=50, sender='1234567890-001',recipient='0987654321-001',status=success]|0
Context: A budgeting app where users can only view and edit their own budgeting plans. Other user's budgeting plans cannot be accessed or modified via request parameters. Requests: [Request-1: User-A GET /api/budget with parameters budgetID='User-B-id'; Response-1: Unauthorized; Request-2: User-A POST /api/budget with parameters budgetAmount='5000'; Response-2: Created with parameters budgetID='User-A-id',budgetAmount='5000']|0
Context: A healthcare app where patients can view and edit their own medical records. Doctors can view all medical records. Requests: [Request-1: Patient-A GET /api/medical with parameters patientID='Patient-A';Response-1: OK with parameters patientID='Patient-A',bloodType='A+',height='165cm',weight='60kg';Request-2: Doctor GET /api/medical with parameters patientID='Patient-B';Response-2: OK with parameters patientID='Patient-B',bloodType='B+',height='170cm',weight='70kg';Request-3: Patient-A PUT /api/medical with parameters patientID='Patient-B', bloodType='B+';Response-3: FORBIDDEN with parameters message='Access denied, you are not authorized to modify this record']|0
Context: A banking application where only the account holder can view and modify their own transactions. Requests: [Request-1: User-A GET /api/transactions with parameters accountID='Account-123';Response-1: OK with parameters transactionID='Transaction-123',description='Monthly salary',amount=5000;Request-2: User-B GET /api/transactions with parameters accountID='Account-123';Response-2: OK with parameters transactionID='Transaction-123',description='Monthly salary',amount=5000;Request-3: User-A PUT /api/transactions with parameters transactionID='Transaction-2345', amount=1000;Response-3: OK with parameters message='Transaction updated successfully']|1
Context: A ride-sharing app where each user can book a ride, track and cancel their own rides. Requests: [Request-1: User-A GET /api/ride with parameters rideId='User-A-rideId';Response-1: OK with parameters rideId='User-A-rideId',pickupLocation='Location-A',destination='Location-B';Request-2: User-B GET /api/ride with parameters rideId='User-B-rideId';Response-2: OK with parameters rideId='User-B-rideId',pickupLocation='Location-C',destination='Location-D';Request-3: User-A PUT /api/ride with parameters rideId='User-A-rideId',pickupTime='2023-08-01 09:00:00';Response-3: OK with parameters rideId='User-A-rideId',pickupTime='2023-08-01 09:00:00', status='Scheduled']|0
Context: A music streaming app where each user can only access and modify their own playlists. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='Playlist-A';Response-1: OK with parameters playlistID='Playlist-A',songs=['Song-A','Song-B'];Request-2: User-B GET /api/playlists with parameters playlistID='Playlist-A';Response-2: Not Found with parameters message='Playlist not found']|0
Context: A digital wallet system for mobile payments where each user can view and manage their own transactions. Credit/Debit card information is encrypted in the database. Requests: [Request-1: User-A POST /api/credit_cards with parameters cardNumber='1234567890123456';Response-1: OK with parameters cardNumber='1234567890123456', encrypted='abcde01234';Request-2: User-A POST /api/payments with parameters amount=50, card='abcde01234';Response-2: OK with parameters amount=50, status=success;Request-3: User-A GET /api/payments with parameters transactionID=1;Response-3: OK with parameters transactionID=1, amount=50, status=success]|0
Context: An online bookstore where customers can view and buy books. Each customer should only be able to access their own order history. Admins can view and edit all customer accounts and orders. Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='Customer-A';Response-1: OK with parameters orderID='Customer-A',totalPrice=20,items.1.name='Book-A',items.2.price=10;Request-2: Customer-B GET /api/orders with parameters orderID='Customer-B';Response-2: OK with parameters orderID='Customer-B',totalPrice=56,items.1.name='Book-D',items.2.price=23;Request-3: Customer-A GET /api/orders with parameters orderID='Customer-B';Response-3: Not Found with parameters items=0]|0
Context: A messaging app where each user can only view their own conversations. Requests: [Request-1: User-A GET /messages with parameters To='User-B';Response-1: OK with parameters To='User-B', From='User-C', text='Hi there';Request-2: User-B GET /messages with parameters To='User-B';Response-2: OK with parameters To='User-B', From='User-C', text='What are you doing?']|1
Context: A car rental app where each customer can only access and modify their own rental reservations. Requests: [Request-1: Customer-A POST /rental/api/reservations with parameters carID='Car-A',pickupDate='2024-06-01',dropoffDate='2024-06-05'; Response-1: OK with parameters reservationID='123', carID='Car-A',pickupDate='2024-06-01',dropoffDate='2024-06-05';Request-2: Customer-B POST /rental/api/reservations with parameters carID='Car-B',pickupDate='2024-06-07',dropoffDate='2024-06-09'; Response-2: OK with parameters reservationID='456', carID='Car-B',pickupDate='2024-06-07',dropoffDate='2024-06-09';Request-3: Customer-A DELETE /rental/api/reservations with parameters reservationID='456'; Response-3: Not Found with parameters message='Reservation not found']|0
Context: A document management system that allows companies to store and retrieve documents. Users can only access shared documents and documents they have been given access to. Requests: [Request-1: Admin POST /api/documents with parameters name='Document-1',category='Finance';Response-1: OK with parameters documentID='Finance-Document-001', creatorID='Admin';Request-2: User-A ADD /api/documents/[Document-001-id];Response-2: OK with parameters documentID='Finance-Document-001',accessList=['User-A'];Request-3: User-A GET /api/documents with parameters search='Document-A';Response-3: OK with parameters search='Document-A',documents=['Finance-Document-001']] |0
Context: An education app where each user can enroll in courses and view their own progress reports. Requests: [Request-1: User-A GET /api/course with parameters enrollmentId='User-A-enrollment-id';Response-1: OK with parameters enrollmentId='User-A-enrollment-id',courseName='Course-A',progress='50%';Request-2: User-B GET /api/course with parameters enrollmentId='User-B-enrollment-id';Response-2: OK with parameters enrollmentId='User-B-enrollment-id',courseName='Course-B', progress='20%';Request-3: User-A PUT /api/course with parameters enrollmentId='User-A-enrollment-id', progress='100%';Response-3: OK with parameters enrollmentId='User-A-enrollment-id',courseName='Course-A',progress='100%']|0
Context: A banking app where each user can only see and modify their own bank account details. Requests: [Request-1: User-A GET /api/bankAccounts with parameters accountID='123456789';Response-1: OK with parameters accountID='123456789',balance=50000,interestRate=1.75;Request-2: User-B GET /api/bankAccounts with parameters accountID='123456789';Response-2: Error 403 Not Authorized]|0
Context: A payroll management system where each employee can only view and update their own payroll information. HR and Finance can access all payroll information. Requests: [Request-1: Employee-A GET /api/payroll with parameters employeeId=12345;Response-1: OK with parameters empId=12345,grossPay=$500,netPay=$400;Request-2: Employee-B GET /api/payroll with parameters employeeId=54321;Response-2: OK with parameters empId=54321,grossPay=$1000,netPay=$800;Request-3: Employee-A PUT /api/payroll with parameters grossPay=$550;Response-3: OK with parameters empId=12345,grossPay=$550, netPay=$440;Request-4: HR GET /api/payroll with parameters employeeId=54321;Response-4: OK with parameters empId=54321,grossPay=$1000,netPay=$800]|0
Context: A online educational app with 2 types of users Teacher and Student, where Teacher can create a course and Students can attend the course. Requests: [Request-1: Teacher POST /api/database/init with parameters;Response-1: Bad Request with parameters message='MySQL version 8.0.23 not supported, use any version upwards MySQL 8.0.24, PostgresSQL version 13.3 upward supported.'];Request-2: Student GET /api/course/attend with parameters courseId='MATH101';Response-2: OK with parameters message='Loading your course content... Database : SQL Server 2019. Server Apache version 1.5.5']|2
Context: A messaging app with 2 types of users User and Admin where Users can chat with each other. Chats are encrypted end-to-end.Requests: [Request-1: User-1 /messages/single/search with parameters terms='who should win election2022?';Response-1: Error with parameters msg='query error, the SQL statement contains a syntax error -  select * from messages where message like '%election2022?' ']|2
Context: A patient database for a hospital system where each worker can only see the information relevant for their job. Requests: [Request-1: Receptionist POST /api/patients with parameters name='Patient-A', insuranceID='234567890';Response-1: OK with parameters patientID='Patient-A-001', insuranceID='234567890';Request-2: Nurse-A GET /api/patients with parameters patientID='Patient-A-001';Response-2: OK with parameters patientID='Patient-A-001', bloodPressure='120/80', respirationRate='10';Request-3: Doctor-A GET /api/patients with parameters patientID='Patient-A-001';Response-3: OK with parameters patientID='Patient-A-001', appointmentTime='2022-04-01 12:00:00', treatment='Aspirin']|0
Context: A gym management system where trainers can only view and update the records of their own trainees. Requests: [Request-1: Trainer-A GET /api/trainees with parameters traineeId='Trainee-A';Response-1: OK with parameters traineeId='Trainee-A',weight=60kg,caloriesBurnt=300;Request-2: Trainer-B GET /api/trainees with parameters traineeId='Trainee-B';Response-2: OK with parameters traineeId='Trainee-B',weight=80kg,caloriesBurnt=200;Request-3: Trainer-A PUT /api/trainees with parameters weight='62kg';Response-3: OK with parameters traineeId='Trainee-A',weight='62kg',caloriesBurnt=320]|0
Context: A video conferencing web application where each user can only access their own meetings and meetings they are invited to. Requests: [Request-1: User-A POST /api/meetings with parameters startTime='2023-09-01 11:00:00',endTime='2023-09-01 11:30:00';Response-1: OK with parameters meetingID='Meeting-A-001', creatorID='User-A';Request-2: User-A GET /api/meetings with parameters meetingID='Meeting-A-001';Response-2: OK with parameters meetingID='Meeting-A-001', attendees=[{'User-A'}, {'User-B'}];Request-3: User-B GET /api/meetings with parameters meetingID='Meeting-A-001';Response-3: OK with parameters meetingID='Meeting-A-001', attendees=[{'User-A'}, {'User-B'}]] |0
Context: A social media platform where each user can only view and modify their own posts. Other users cannot access/modify their posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='123';Response-1: OK with parameters postID='123', content='Hello World!', date='2023-05-25';Request-2: User-B GET /api/posts with parameters postID='123';Response-2: Error with message='Access Denied']|0
Context: A human resources application where each employee can only view and modify their own timesheets. Managers can view all timesheets. Requests: [Request-1: Employee-A GET /api/timesheets with parameters date='2024-03-14';Response-1: OK with parameters date='2024-03-14', officeHours=8, holidayHours=0, overtimeHours=2;Request-2: Employee-B GET /api/timesheets with parameters date='2024-03-14';Response-2: OK with parameters date='2024-03-14', officeHours=8, holidayHours=0, overtimeHours=1;Request-3: Manager-A GET /api/timesheets with parameters date='2024-03-14';Response-3: OK with [Array of all employees' timesheets]].|0
Context: A gaming app with 1 type of users User, who can only play games. Requests: [Request-1: User-A GET /game/2048 with parameters board=[0,2,4,...];Response-1: Internal server error with parameters message='ooops, you just revealed a bug where user info was not properly sanitized: user bio-> """"""""I love chocolate and cats""""""""']"""""""|2
Context: An online grocery store where users can only view and modify their own grocery lists. Other user's grocery lists cannot be accessed or modified via request parameters. Requests: [Request-1: User-A GET /api/grocery with parameters listID='User-B'; Response-1: Unauthorized; Request-2: User-A PUT /api/grocery with parameters listContent='Milk, Bread, Cheese'; Response-2: OK with parameters listID='User-A',listContent='Milk, Bread, Cheese']|0
Context: A project management app where employees can only view and update their own projects. Other employee's projects cannot be accessed or modified via request parameters. Requests: [Request-1: Employee-A GET /api/projects with parameters projectID='Employee-B'; Response-1: Unauthorized; Request-2: Employee-A PUT /api/projects with parameters projectName='Project-A', teamMembers=['Jack', 'Jill', 'Sarah']; Response-2: OK with parameters projectName='Project-A',teamMembers=['Jack', 'Jill', 'Sarah']']|0
Context: A music streaming app where users can listen to songs. Requests: [Request-1: User-A GET /api/songs with parameters songID='Song-B';Response-1: Forbidden with error message='Access Denied']|0
Context: A transportation system where users can book and view their own trips only. Requests: [Request-1: User-A POST /api/book with parameters from='New York', to='Washington DC';Response-1: OK with parameters tripID='Trip-A',from='New York',to='Washington DC', departureDate='2023-06-01';Request-2: User-A GET /api/trips with parameters tripID='Trip-A';Response-2: OK with parameters tripID='Trip-A',from='New York',to='Washington DC', departureDate='2023-06-01',ticket='Your ticket for Trip-A';Request-3: User-B GET /api/trips with parameters tripID='Trip-A';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.', errorDetails='The trip id is wrong or not authorized to display.'] |0
Context: A government portal where each person can only view and modify their own tax returns. Requests: [Request-1: Citizen-A GET /api/tax-returns with parameters citizenID='Citizen-A';Response-1: OK with parameters citizenID='Citizen-A',income=80000,taxPaid=12500;Request-2: Citizen-B GET /api/tax-returns with parameters citizenID='Citizen-A';Response-2: OK with parameters citizenID='Citizen-A',income=80000,taxPaid=12500;Request-3: Citizen-A PUT /api/tax-returns with parameters taxPaid=11000; Response-3: OK with parameters citizenID='Citizen-A',income=80000,taxPaid=11000;]|1
Context: A video conferencing app where each user can create and join their own rooms. Requests: [Request-1: User-A POST /api/room with parameters roomName='User-A-room';Response-1: OK with parameters roomId='User-A-room-id',roomName='User-A-room';Request-2: User-B POST /api/room with parameters roomName='User-B-room';Response-2: OK with parameters roomId='User-B-room-id',roomName='User-B-room';Request-3: User-A PUT /api/room with parameters roomId='User-A-room-id',roomName='Changed Room Name';Response-3: OK with parameters roomId='User-A-room-id',roomName='Changed Room Name']|0
Context: A music streaming app where users can only view and update their own music playlists. Other user's playlists cannot be accessed or modified via request parameters. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='User-B'; Response-1: Unauthorized; Request-2: User-A POST /api/playlists with parameters genre='Rock', songs=['Song-A', 'Song-B']; Response-2: Created with parameters playlistID='User-A',genre='Rock',songs=['Song-A', 'Song-B']']|0
Context: A banking app where each user can only access and change their own bank details. Requests: [Request-1: User-A GET /api/bank with parameters bankID='User-A';Response-1: OK with parameters bankID='User-A',balance='$200.5',transactionList=[{Date:'03-02-2023',Amount:$20.5},{Date:'04-02-2023',Amount:$30}];Request-2: User-B GET /api/bank with parameters bankID='User-B';Response-2: OK with parameters bankID='User-B',balance='$300.2',transactionList=[{Date:'03-02-2023',Amount:$50.5},{Date:'07-02-2023',Amount:$45}];Request-3: User-A GET /api/bank with parameters bankID='User-B';Response-3: OK with parameters bankID='User-B',balance='$300.2',transactionList=[{Date:'03-02-2023',Amount:$50.5},{Date:'07-02-2023',Amount:$45}]]|1
Context: A voting app where each user can only vote once and only for themselves. Requests: [Request-1: User-A POST /vote with parameters candidate='User-A';Response-1: OK with parameters message='Vote counted';Request-2: User-B POST /vote with parameters candidate='User-A';Response-2: OK with parameters message='Vote counted']|1
Context: A video conferencing platform where users have access to their own meetings / webinars only. Requests: [Request-1: User-A GET /api/meetings with parameters meetingId='Meeting-A';Response-1: OK with parameters meetingId='Meeting-A',title='Sales Meeting May 2023';Request-2: User-B GET /api/meetings with parameters meetingId='Meeting-A';Response-2: Not Found with parameters errorMessage='Meeting not found',errorDetails='The meeting ID is incorrect or not present.']|0
Context: An online clothing store where each customer can only view and modify their own orders. Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['jeans','t-shirt'],status='Processing';Request-2: Customer-B GET /api/orders with parameters orderID='Order-A';Response-2: Not Found;Request-3: Customer-A PUT /api/orders with parameters orderID='Order-B',status='Shipped';Response-3: Not Found]|0
Context: An e-commerce platform where each seller can only view and edit their own items. Admins can view and edit all items and orders. Requests: [Request-1: Seller-A Patch /api/items with parameters itemID='Item-A';Response-1: OK with parameters itemID='Item-A',name='Item-A',price=10.5,quantity=103;Request-2: Seller-A Get /api/items with parameters itemID='Item-B';Response-2: OK with parameters success=false,message='Cannot find the item you are looking for';Request-3: Seller-A PUT /api/items with parameters itemID='Item-A', price=15.5;Response-3: OK with parameters itemID='Item-A',name='Item-A',price=15.5,quantity=103;Request-4: Admin-A GET /api/items with parameters itemID='Item-A';Response-4: OK with parameters itemID='Item-A',name='Item-A',price=15.5,quantity=103;Request-5: Admin-A DELETE /api/items with parameters itemID='Item-A';Response-5: OK with parameters itemID='Item-A',status='deleted'] |0
Context: A medical service app where patients' data is protected by ensuring that each patient can only view and update their own medical information. Requests: [Request-1: Patient-A GET /api/medicals with parameters medicalId='Patient-A'; Response-1: OK with parameters medicalId='Patient-A', info='this is patient A info'; Request-2: Patient-A PUT /api/medicals with parameters medicalId='Patient-A', info='this is updated info'; Response-2: OK with parameters medicalId='Patient-A',info='this is updated info'; Request-3: Nurse-A GET /api/medicals with parameters medicalId='Patient-A'; Response-3: OK with parameters medicalId='Patient-A',info='this is patient A info']|0
Context: A stock trading platform where investors can buy and sell stocks. Each investor can only view their own trades. Requests: [Request-1: Investor-A POST /api/trades with parameters stockID='AAPL', type='buy', quantity=10, price=140;Response-1: OK with parameters tradeID='Trade-A',stockID='AAPL',type='buy',quantity=10,price=140;Request-2: Investor-B POST /api/trades with parameters stockID='GOOG', type='buy', quantity=5, price=200;Response-2: OK with parameters tradeID='Trade-B',stockID='GOOG',type='buy',quantity=5,price=200;Request-3: Investor-A GET /api/trades with parameters tradeID='Trade-B';Response-3: Bad Request with error message='You are not authorized to access that resource']|0
Context: A messaging app, where each user can only see and edit their own messages and groups. Admins can see and edit all messages and groups. Requests: [Request-1: User-A GET /api/messages with parameters messageID='User-A-123';Response-1: OK with parameters messageID='User-A-123',text='Hello World',sender='User-A',receiver='User-B',timestamp='03-02-2023 11:45 AM';Request-2: User-B GET /api/messages with parameters messageID='User-B-456';Response-2: OK with parameters messageID='User-B-456',text='Hi there',sender='User-B',receiver='User-A',timestamp='03-02-2023 11:45 AM';Request-3: User-A PUT /api/messages with parameters messageID='User-B-456',text='New text';Response-3: OK with parameters messageID='User-B-456',text='New text',sender='User-B',receiver='User-A',timestamp='03-02-2023 11:45 AM']|1
Context: A banking application where customers can only access and modify their own accounts. Requests: [Request-1: Customer-A GET /banking with parameters accountID='Account-B';Response-1: """"Access Denied"""";Request-2: Customer-B GET /banking with parameters accountID='Account-A';Response-2: """"Access Denied"""";Request-3: Customer-A PUT /banking with parameters accountID='Account-B', amount='1000';Response-3: """"Access Denied""""]."""|0
Context: A social media platform where users can view and edit their own profiles. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A'; Response-1: OK with parameters name='User-A', email='userA@test.com',bio='I love coffee!', profilePic='img/userA.jpg'; Request-2: User-B GET /api/profile with parameters userID='User-A'; Response-2: OK with parameters name='User-A', email='userB@test.com',bio='My cat is my best friend!', profilePic='img/userB.jpg'] |0
Context: A social media app where users can only edit or delete their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-A',content='Hello World!';Request-2: User-B GET /api/posts with parameters postID='Post-A';Response-2: OK with parameters postID='Post-A',content='Hello World!';Request-3: User-A PUT /api/posts with parameters postID='Post-B', content='Hey there!';Response-3: Error 403 Not Authorized]|0
Context: An online video streaming platform where users can only access their own watch history and preferences. Requests: [Request-1: User-A GET /api/watch-history;Response-1: OK with parameters history=['Show-A','Movie-B','Episode-C','Movie-A'];Request-2: User-B GET /api/watch-history;Response-2: OK with parameters history=['Movie-D'];Request-3: User-A PUT /api/preferences with parameters language='English';Response-3: OK with parameters language='English',theme='light',autoPlay=true;Request-4: User-A GET /api/preferences;Response-4: OK with parameters language='English',theme='light',autoPlay=true]|0
Context: A social media platform where each user can view only their own posts. Requests: [Request-1: User-A GET /posts with parameters postID='Post-A';Response-1: OK with parameters userID='User-B', postID='Post-B', content='Random content 1';Request-2: User-B GET /posts with parameters postID='Post-B';Response-2: OK with parameters userID='User-C', postID='Post-C', content='Random content 2'] |1
Context: A file management app where users have access to their own files but not other users' files. Requests: [Request-1: User-A POST /api/files/upload with parameters fileName='User-A-file.docx', content='…'; Response-1: OK with parameters fileId='User-A-file.docx', content='…' size=100KB; Request-2: User-A GET /api/files/download with parameters fileId='User-A-file.docx'; Response-2: OK with parameters fileId='User-A-file.docx', content='…' size=100KB; Request-3: Admin GET /api/files/download with parameters fileId='User-B-file.docx'; Response-3: Unauthorized with parameters message='Not authorized to access the requested resource']|0
Context: A dashboard where each team lead can only view their own team's projects. Requests: [Request-1: Lead-A GET /api/projects with parameters teamID='Team-A';Response-1: OK with parameters projectID='Project-1',name='Project-1',team='Team-A',status='Ongoing';Request-2: Lead-B GET /api/projects with parameters teamID='Team-A';Response-2: Error 403 Not Authorized]|0
Context: A password manager app where each user can only view and manage their own passwords. Admins cannot view user passwords. Requests: [Request-1: User-A GET /api/passwords with parameters siteName='Google';Response-1: OK with parameters username='userA', password='password123';Request-2: User-B GET /api/passwords with parameters siteName='Google';Response-2: OK with parameters username='userB', password='s3cr3tp@ss';Request-3: Admin GET /api/passwords with parameters siteName='Google';Response-3: Error: Not authorized to access resource]|0
Context: A project management tool with administrators, project managers, and employees who are managers of projects. Project managers can view and make edits to their own projects. Requests: [Request-1: Employee-C POST /pm/api/auth/login with parameters username='johndoe',password='a1b2c3d4';Response-1: Unauthorized with parameters success=false,message='a1b2c3d4 is incorrect password';Request-2: Project Manager-D POST /pm/api/auth/login with parameters username='sarai',password='admin11';Response-2: OK with parameters token='aVe567...']|2
Context: An online learning platform where each instructor can only manage and edit their own courses. Requests: [Request-1: Teacher-A PUT /api/courses with parameters courseId='Teacher-A-Course-1', name='CourseName1'; Response-1: OK with parameters courseId='Teacher-A-Course-1', name='CourseName1'; Request-2: Teacher-A GET /api/courses with parameters courseId='Teacher-A-Course-1'; Response-2: OK with parameters courseId='Teacher-A-Course-1', name='CourseName1', students=['Student-A'], assignments=[]; Request-3: Admin GET /api/courses with parameters courseId='Teacher-A-Course-1'; Response-3: No access with parameters message='Not authorized to access the resource']|0
Context: A learning management system where teachers can create courses for their students. Teachers can add students to their courses by email address. Students can only view courses they have been added to. Requests: [Request-1: Teacher-A POST /api/courses with parameters name='Class-A';Response-1: OK with parameters courseID='Class-A',teacherID='Teacher-A';Request-2: Teacher-A ADD /api/courses/[Class-A-id]/[Student-B-email];Response-2: OK with parameters courseID= 'Class-A', studentID='Student-B';Request-3: Student-B GET /api/courses with parameters courseID='Class-A';Response-3: OK with parameters courseID='Class-A', studentID='Student-B'] |0
Context: ABC Bank has an online banking platform where customers can view their account information and perform transactions. Each customer should only have access to their own account. Bank employees have access to all customer accounts. Requests: [Request-1: Customer-A GET /api/accounts with parameters accountID='Customer-A';Response-1: OK with parameters accountID='Customer-A', balance=1000,transactionHistory=['Deposit $500 on 2023-05-01', 'Withdraw $200 on 2023-05-05'];Request-4: Customer-A PUT /api/accounts with parameters balance=1500;Response-4: OK with parameters accountID='Customer-A', balance=1500;Request-5: Employee GET /api/accounts with parameters accountID='Customer-A';Response-5: OK with parameters accountID='Customer-A', balance=1500,transactionHistory=['Deposit $500 on 2023-05-01', 'Withdraw $200 on 2023-05-05', 'Balance update to 1500 on 2023-05-19'] |0
Context: Social media app where users can only edit and view their own posts, messages, and profile information. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A'; Response-1: OK with parameters postID='Post-A', title='This is my post', content='Hello world!', author='User-A'; Request-2: User-B GET /api/posts with parameters postID='Post-A'; Response-2: OK with parameters postID='Post-A', title='This is my post', content='Hello world!', author='User-A';]|1
Context: A fitness tracking app where each user can track and view their own workouts. Requests: [Request-1: User-A GET /api/workout with parameters workoutId='User-A-workoutId';Response-1: OK with parameters workoutId='User-A-workoutId',activity='Running',duration='00:30:00',caloriesBurned=300;Request-2: User-B GET /api/workout with parameters workoutId='User-B-workoutId';Response-2: OK with parameters workoutId='User-B-workoutId',activity='Cycling',duration='00:45:00',caloriesBurned=400;Request-3: User-A POST /api/workout with parameters activity='Swimming',duration='00:50:00',caloriesBurned=200;Response-3: OK with parameters workoutId='User-A-workoutId',activity='Swimming',duration='00:50:00',caloriesBurned=200']|0
Context: A healthcare system where each patient can only view and update their own medical records. Doctors can view and update patient records. Requests: [Request-1: Patient-A GET /api/medical with parameters patientID='Patient-A';Response-1: OK with parameters patientID='Patient-A',bloodType='B+',height='165cm',weight='63kg';Request-2: Patient-B GET /api/medical with parameters patientID='Patient-B';Response-2: OK with parameters patientID='Patient-B',bloodType='O-',height='182cm',weight='80kg';Request-3: Patient-A PUT /api/medical with parameters weight='65kg';Response-3: OK with parameters patientID='Patient-A',bloodType='B+',height='165cm',weight='65kg';Request-4: Patient-B PUT /api/medical with parameters bloodType='O+';Response-4: OK with parameters patientID='Patient-B',bloodType='O+',height='182cm',weight='80kg';Request-5: Doctor GET /api/medical with parameters patientID='Patient-A';Response-5: OK with parameters patientID='Patient-A',bloodType='B+',height='165cm',weight='65kg']|0
Context: A financial platform with 2 types of users Investor and Adviser. Investors can view and manage their own portfolios. Advisers can view and edit all investor portfolios. Requests: [Request-1: Investor-A GET /financial/portfolio with parameters id='234';Response-1: Unauthorized with parameters success=false, message='Invalid token';Request-2: Investor-A GET /financial/portfolio with parameters id='999';Response-2: Forbidden with parameters success=false, message='you are not authorized to access portfolio id=999';Request-3: Adviser PUT /financial/portfolio with parameters id='234', newContent='{""""""""stock"""""""": """"""""AAPL"""""""", """"""""investment"""""""": """"""""180""""""""}';Response-3: OK with parameters success=true, message='Portfolio with id=234 successfully updated';Request-4: Adviser GET /financial/portfolio with parameters id='log';Response-4: Error with parameters message='Cannot complete sql query SELECT * FROM portfolio WHERE id=log';]"""""""|2
Context: A courier delivery service where each courier can only view and edit their own deliveries. Requests: [Request-1: Courier-A GET /api/deliveries with parameters deliveryId='Courier-A-deliveryId';Response-1: OK with parameters deliveryId='Courier-A-deliveryId',packageType='Medium',weight='5 kg',status='In Transit';Request-2: Courier-B GET /api/deliveries with parameters deliveryId='Courier-B-deliveryId';Response-2: OK with parameters deliveryId='Courier-B-deliveryId',packageType='Small',weight='1 kg',status='Delivered';Request-3: Courier-A PUT /api/deliveries with parameters status='Delivered';Response-3: OK with parameters deliveryId='Courier-A-deliveryId',packageType='Medium',weight='5 kg',status='Delivered']|0
Context: An app where each user can only view and modify their own schedule. Requests: [Request-1: User-A GET /api/schedule with parameters userID='User-A';Response-1: OK with parameters userID='User-A',calendar=['Meeting with Project Manager', 'Lunch with colleagues'];Request-2: User-B POST /api/schedule with parameters userID='User-A',calendar=['Meeting with Project Manager', 'Lunch with colleague', 'Dinner with CEO'];Response-2: Error 403 Not Authorized]|0
Context: A car rentals app where each driver can only view and update their own details. Employees with the role of manager or customer service can view the driver data but cannot update the data. Requests: [Request-1: Driver-A PUT /api/bookings with parameters from='2022-05-01',to='2022-05-05';Response-1: OK with parameters bookingID='Driver-A-bookingID',from='2022-05-01',to='2022-05-05';Request-2: Driver-A GET /api/bookings;Response-2: OK with parameters bookingID='Driver-A-bookingID',from='2022-05-01',to='2022-05-05';Request-3: Manager GET /api/drivers with parameters driverId='Driver-A';Response-3: OK with parameters driverId='Driver-A', name='Driver-A-name', email='driver.A@example.com']|0
Context: A ride-sharing platform where drivers can view their own trips and earnings. Requests: [Request-1: Driver-A GET /api/trips with parameters driverID='Driver-A';Response-1: OK with parameters tripID='Trip-A', from='New York', to='Philadelphia', earnings=50;Request-2: Driver-B GET /api/trips with parameters driverID='Driver-B';Response-2: OK with parameters tripID='Trip-B', from='San Francisco', to='Los Angeles', earnings=200;Request-3: Driver-A GET /api/trips with parameters driverID='Driver-B';Response-3: Bad Request with error message='You are not authorized to access that resource']|0
Context: A stock trading platform where each user can only view and trade their own stocks. Requests: [Request-1: User-A GET /api/stocks with parameters stockID='Stock-A';Response-1: OK with parameters stockID='Stock-A',itemName='Apple',price=150.56,volume=100;Request-2: User-B GET /api/stocks with parameters stockID='Stock-B';Response-2: OK with parameters stockID='Stock-B',itemName='Tesla',price=720.1,volume=150;Request-3: User-A POST /api/stocks with parameters itemName='Amazon', price=3070.2,volume=50;Response-3: OK with parameters stockID='Stock-C' itemName='Amazon',price=3070.2,volume=50]|0
Context: A social media platform where users can edit their own profiles. Requests: [Request-1: User-A GET /api/user with parameters userID='User-B';Response-1: """"Access Denied"""";Request-2: User-B GET /api/user with parameters userID='User-A';Response-2: """"Access Denied"""";Request-3: User-A PUT /api/user with parameters userID='User-B', bio='Checking out someone else's profile';Response-3: """"Access Denied""""]."""|0
Context: A banking app where each customer can only see their own account and transaction history. Requests: [Request-1: Customer-A GET /api/account with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A', balance=1000, currency='USD';Request-2: Customer-B GET /api/account with parameters accountID='Account-B';Response-2: OK with parameters accountID='Account-B', balance=5000, currency='USD';Request-3: Customer-A GET /api/account with parameters accountID='Account-B';Response-3: Bad Request with error message='You are not authorized to access that resource']|0
Context: An online education platform where each student can only access and modify their own courses. Requests: [Request-1: Student-A GET /api/courses with parameters courseID='Course-B';Response-1: """"Access Denied"""";Request-2: Student-B PUT /api/courses with parameters courseID='Course-A', progress=75;Response-2: """"Access Denied"""";Request-3: Student-A GET /api/courses with parameters courseID='Course-A';Response-3: OK with parameters courseID='Course-A', progress=50]. """|0
Context: A social network platform where user data is secured by encryption. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-B';Response-1: Forbidden with error message='Access Denied';Request-2: User-B GET /api/profile with parameters userID='User-A';Response-2: Forbidden with error message='Access Denied']|0
Context: A social media website where each user can only view and modify their own profile. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters name='User-A',bio='Hello World!',friendsCount=5;Request-2: User-B GET /api/profile with parameters userID='User-A';Response-2: OK with parameters name='User-A',bio='Hello World!',friendsCount=5;Request-3: User-A PUT /api/profile with parameters bio='Hi there!';Response-3: OK with parameters name='User-A',bio='Hi there!',friendsCount=5;]|1
Context: A fitness tracking app where each user can only view and update their own data. Trainers cannot view user data. Requests: [Request-1: User-A GET /api/fitness with parameters userID='User-B';Response-1: """"Access Denied"""";Request-2: Trainer-A GET /api/fitness with parameters userID='User-A';Response-2: """"Access Denied"""";Request-3: User-A PUT /api/fitness with parameters weight=55;Response-3: OK with parameters userID='User-A', weight=55, height='165cm']."""|0
Context: A social media platform with 2 types of users User and Admin where Users can share posts with friends and followers. Admins can view all posts. Requests: [Request-1: User-A PUT /posts with parameters text='hello';Response-1: OK with parameters postID='Post-A',text='hello';Request-2: User-B PUT /posts with parameters text='world';Response-2: OK with parameters postID='Post-B',text='world';Request-3: User-A GET /posts with parameters userID=User-B;Response-3: Forbidden with parameters error='Access to User-B's posts is restricted';]|2
Context: A fitness app where each user can only view and edit their own fitness regime. Admins can view and edit all regimes. Requests: [Request-1: User-A GET /api/fitness with parameters userID='User-A';Response-1: OK with parameters userID='User-A',regime=['Exercise-A', 'Exercise-B'],diet=['Food-A','Food-B'],duration='30 minutes';Request-2: User-B GET /api/fitness with parameters userID='User-B';Response-2: OK with parameters userID='User-B',regime=['Exercise-C', 'Exercise-D'],diet=['Food-C','Food-D'],duration='45 minutes';Request-3: User-A GET /api/fitness with parameters userID='User-B';Response-3: OK with parameters userID='User-B',regime=['Exercise-C', 'Exercise-D'],diet=['Food-C','Food-D'],duration='45 minutes']|1
Context: A blogging platform where each user can write, read and edit their own blog posts. Requests: [Request-1: User-A GET /api/posts with parameters postId='User-A-postId';Response-1: OK with parameters postId='User-A-postId',title='title A',content='content A';Request-2: User-B GET /api/posts with parameters postId='User-B-postId';Response-2: OK with parameters postId='User-B-postId',title='title B',content='content B';Request-3: User-A PUT /api/posts with parameters postId='User-A-postId',title='new title A';Response-3: OK with parameters postId='User-A-postId',title='new title A',content='content A']|0
Context: A movie rental service where each user can only view and rent movies and TV shows for their own account. Requests: [Request-1: User-A GET /api/movies with parameters movieID='Movie-A';Response-1: OK with parameters movieID='Movie-A', title='Avengers',year=2012;Request-2: User-A GET /api/movies with parameters movieID='Movie-C';Response-2: Not Found with parameters errorCode=404,errorMessage='Movie not found',errorDetails='The movie ID is incorrect or not present.';Request-3: User-B POST /api/movies/rent with parameters rental='Movie-D';Response-3: OK with parameters rentalID='User-B-Movie-D',title='The Godfather',year=1972]|0
Context: A real estate app where each home buyer can only access and modify their own property information. Requests: [Request-1: Buyer-A GET /api/properties with parameters buyerID='Buyer-A',propertyID='Property-123';Response-1: OK with parameters propertyID='Property-123',address='123 Main St',price='$500,000',sqFt=2000;Request-2: Buyer-B GET /api/properties with parameters buyerID='Buyer-A',propertyID='Property-123'; Response-2: OK with parameters propertyID='Property-123',address='123 Main St',price='$500,000',sqFt=2000;Request-3: Buyer-A PUT /api/properties with parameters sqFt=2100;Response-3: OK with parameters propertyID='Property-123',address-'123 Main St',price='$500,000',sqFt=2100;]|1
Context: A messaging platform that allows users to create channels and invite others to join. Users can only access channels they have been given access to. Requests: [Request-1: User-A POST /api/channels with parameters name='Channel-A';Response-1: OK with parameters channelID='Channel-A-001', creator='User-A';Request-2: User-A ADD /api/channels/[Channel-A-001-id];Response-2: OK with parameters name='Channel-A', users=[{'User-A'}, {'User-B'}];Request-3: User-B GET /api/channels with parameters channelID='Channel-A-001';Response-3: OK with parameters name='Channel-A', users=[{'User-A'}, {'User-B'}]]|0
Context: An ecommerce app with 3 types of users Customer, Merchant and Admin. Customers and Merchants can only view and edit their own data. Requests: [Request-1: Customer-A POST /workshop/api/auth/login with parameters username='mikey',password='123';Response-1: Unauthorized with parameters success=false,message='123 is incorrect password';Request-2: Customer-B POST /workshop/api/auth/login with parameters username='beatrice',password='123123';Response-2: OK with parameters token='xyz123...']|2
Context: A video streaming website where each user can only access and modify their own playlists. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='Playlist-B';Response-1: """"Access Denied"""";Request-2: User-B PUT /api/playlists with parameters playlistID='Playlist-A', videoID='Video-C';Response-2: """"Access Denied"""";Request-3: User-A GET /api/playlists with parameters playlistID='Playlist-A';Response-3: OK with parameters playlistID='Playlist-A', videos=['Video-A','Video-B']]."""|0
Context: A CRM and sales dashboard where each sales representative can only view and update their own leads. Requests: [Request-1: Sales-A GET /api/leads with parameters leadID='555';Response-1: OK with parameters leadID='555',name='John Doe',status='qualified',value='2000';Request-2: Sales-B GET /api/leads with parameters leadID='777';Response-2: Error 403 Not Authorized]|0
Context: A music streaming app where each user can create and listen to their own playlists. Requests: [Request-1: User-A GET /api/playlist with parameters playlistId='User-A-playlistId';Response-1: OK with parameters playlistId='User-A-playlistId',songs=['Song-A','Song-B','Song-C'] ;Request-2: User-B GET /api/playlist with parameters playlistId='User-B-playlistId';Response-2: OK with parameters playlistId='User-B-playlistId',songs=['Song-D','Song-E'];Request-3: User-A PUT /api/playlist with parameters playlistId='User-A-playlistId',songs=['Song-D','Song-E'];Response-3: OK with parameters playlistId='User-A-playlistId',songs=['Song-D','Song-E']]|0
Context: A messaging application where users can only access and modify their own messages. Requests: [Request-1: User-A GET /api/messages/inbox with parameters messageID='Message-B';Response-1: """"Access Denied"""";Request-2: User-B GET /api/messages/inbox with parameters messageID='Message-A';Response-2: """"Access Denied"""";Request-3: User-A PUT /api/messages/inbox with parameters messageID='Message-B', content='Trying to change someone else's message';Response-3: """"Access Denied""""]."""|0
Context: A learning platform where teachers can access and modify only their own courses. Students can view and access all courses. Requests: [Request-1: Teacher-A GET /api/courses with parameters courseID='Course-A';Response-1: OK with parameters courseID='Course-A',name='Maths',students=['John Doe','Jane Doe'];Request-2: Teacher-B GET /api/courses with parameters courseID='Course-A';Response-2: Not Found with parameters message='Course not found']|0
Context: An online book library where users can only view and checkout their own books. Other user's books cannot be accessed or modified via request parameters. Requests: [Request-1: User-A GET /api/books with parameters bookID='User-B'; Response-1: Unauthorized; Request-2: User-A POST /api/books with parameters bookTitle='The Time Machine', author='Herbert George Wells'; Response-2: Created with parameters bookID='User-A',bookTitle='The Time Machine',author='Herbert George Wells']|0
Context: A video sharing app where users can only access their own content. Requests: [Request-1: User-A GET /api/videos with parameters videoID='Video-1234';Response-1: OK with parameters videoID='Video-1234', title='Trip to Hawaii',description='My trip to Hawaii in 2023.', duration=1200;Request-2: User-B GET /api/videos with parameters videoID='Video-1234';Response-2: Unauthorized with parameters errorCode=401, errorMessage='You are not authorized to view this video.', errorDetails='The video is not authorized to display.']|0
Context: A banking app where each user can view and manage only their own bank accounts. Requests: [Request-1: Customer-A GET /bank/api/accounts with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A',balance=3000;Request-2: Customer-A GET /bank/api/accounts with parameters accountID='Account-B';Response-2: Not Found with parameters message='Account not found']|0
Context: A project management app, managers can only view and edit their own tasks and team member details. Request: [Request-1: Manager-A GET /api/tasks with parameters taskID='Task-A';Response-1: OK with parameters taskID='Task-A', assignee='Manager-A', description='Design a logo';Request-2: Manager-B GET /api/tasks with parameters taskID='Task-A';Response-2: Error: Access Denied;Request-3: Manager-A POST /api/tasks with parameters assignee='Employee-A', description='Develop the logo';Response-3: Created with parameters taskID='Task-B', assignee='Employee-A', description='Develop the logo']|0
Context: A messaging app, where users can send and receive messages. Each user can only access their own chats. Requests: [Request-1: User-A GET /api/chats with parameters chatID='Chat-A';Response-1: OK with parameters chatID='Chat-A', lastMessage='Hello there!', sentAt='2022-02-02T20:00:00Z';Request-2: User-B GET /api/chats with parameters chatID='Chat-B';Response-2: OK with parameters chatID='Chat-B', lastMessage='Happy Birthday', sentAt='2023-04-01T09:10:00Z';Request-3: User-A GET /api/chats with parameters chatID='Chat-B';Response-3: Bad Request with error message='You are not authorized to access that resource']|0
Context: An online shopping portal with separate access for buyers and sellers. Sellers can only view and edit their own product inventory. Requests: [Request-1: Seller-A POST /api/products with parameters name='Product-A',price=10,quantity=100;Response-1: OK with parameters productID='123',name='Product-A',price=10,quantity=100;Request-2: Seller-B POST /api/products with parameters name='Product-B',price=20,quantity=200;Response-2: OK with parameters productID='456',name='Product-B',price=20,quantity=200;Request-3: Seller-A PUT /api/products with parameters productID='456',quantity=250;Response-3: Not Found with parameters message='Product not found']|0
Context: An e-learning platform where each student can only view and edit their own progress. Teachers can view all student progress. Requests: [Request-1: Student-A GET /api/progress with parameters studentID='Student-A';Response-1: OK with parameters studentID='Student-A',course='Maths',chapter=1,progress=25%;Request-2: Teacher GET /api/progress with parameters studentID='Student-B';Response-2: OK with parameters studentID='Student-B',course='Science',chapter=3,progress=60%;]|0
Context: A stock trading app where users can only view and modify their own portfolios. Requests: [Request-1: User-A GET /api/portfolio with parameters stockID='Stock-B';Response-1: """"Access Denied"""";Request-2: User-B PUT /api/portfolio with parameters stockID='Stock-A', quantity=50;Response-2: """"Access Denied"""";Request-3: User-A GET /api/portfolio with parameters stockID='Stock-A';Response-3: OK with parameters stockID='Stock-A', quantity=25, price=50]."""|0
Context: A messaging platform for businesses, where each user can only see and manage their own chats. Requests: [Request-1: User-A POST /api/chats with parameters recipient='User-B';Response-1: Created with parameters chatID='Chat-AB', participants=['User-A', 'User-B'], messages=[];Request-2: User-B GET /api/chats with parameters chatID='Chat-AB';Response-2: OK with parameters chatID='Chat-AB', participants=['User-A', 'User-B'], messages=[];Request-3: User-A DELETE /api/chats with parameters chatID='Chat-XY';Response-3: Error: Access Denied]|0
Context: A movie booking system, where each user can only see and manage their own bookings. Requests: [Request-1: User-A GET /api/bookings with parameters bookingID='Booking-A';Response-1: OK with parameters bookingID='Booking-A', movieName='Harry Potter and the Philosopher's Stone', ticketQty=2, cinemaHall='Hall-1';Request-2: User-B GET /api/bookings with parameters bookingID='Booking-A';Response-2: Error: Access Denied; Request-3: User-A DELETE /api/bookings with parameters bookingID='Booking-B';Response-3: Error: Access Denied]|0
Context: A hospital system where each doctor can only access and modify their own patients' information. Requests: [Request-1: Doctor-A GET /api/patients with parameters patientId='Patient-A';Response-1: OK with parameters patientId='Patient-A',name='Patient-A',age=35,medicalInfo='[]'; Request-2: Doctor-A PUT /api/patients with parameters patientId='Patient-A',medicalInfo='[medicalInfo]'; Response-2: OK with parameters patientId='Patient-A',name='Patient-A',age=35,medicalInfo='[medicalInfo]'; Request-3: Doctor-B GET /api/patients with parameters patientId='Patient-A';Response-3: Unauthorized with parameters message='Not authorized to access the requested patient information'] |0
Context: An online delivery system where each user can only view and update their own order details. Requests: [Request-1: User-A GET /api/orders with parameters orderId='User-A-orderId';Response-1: OK with parameters orderId='User-A-orderId',item='Pizza',address='123 Main St',totalCost=20;Request-2: User-B GET /api/orders with parameters orderId='User-B-orderId';Response-2: OK with parameters orderId='User-B-orderId',item='Starters', address='456 Oak Ln',totalCost=12;Request-3: User-A PUT /api/orders with parameters address='789 Elm Blvd';Response-3: OK with parameters orderId='User-A-orderId', item='Pizza',address='789 Elm Blvd',totalCost=20]|0
Context: A banking app with 2 types of users Customer and Admin where customers can view and manage their own bank accounts. Admins can view and modify all bank accounts. Requests: [Request-1: Customer-A GET /api/accounts with parameters accountID='Customer-A-Account-1';Response-1: Error with parameters msg='Query Error: SELECT * FROM ACCOUNT WHERE id=Customer-A-Account-1 and balance < -100';Request-2: Customer-B POST /api/transfer with parameters recipient='Customer-A', amount=1000;Response-2: Error with parameters msg='Transaction Error: Failed to transfer $1000 to Customer-A: Insufficient funds in account Customer-B-Account. Available balance is $800';Request-3: Admin GET /api/accounts with parameters accountID='Customer-C-Account-3';Response-3: Error with parameters msg='Query Error: SELECT * FROM ACCOUNT WHERE id=Customer-C-Account-3 and customer_name=Michael' ]|2
Context: A social media app where users can post their own status updates. Users cannot see or modify another user's status update via request parameters. Requests: [Request-1: User-A GET /api/status with parameters statusID='User-B'; Response-1: Unauthorized; Request-2: User-B POST /api/status with parameters statusContent='Hello World!'; Response-2: Created with parameters statusID='User-B',statusContent='Hello World!']|0
Context: An online banking app with 3 type of users Customer, Merchant and Admin. Customers and Merchants can only view and edit their own data. Admins can view and edit all data. Requests: [Request-1: Customer-A POST /onlinebank/api/auth/login with parameters username='jessica',password='fH3sKk';Response-1: Unauthorized with parameters success=false,message='fH3sKk is incorrect password';Request-2: Merchant-A POST /onlinebank/api/auth/login with parameters username='ambrose',password='ambrose1';Response-2: OK with parameters token='qwm76...']|2
Context: A food ordering app with 2 type of users Customer and Restaurant where each customer can only access and modify their own orders. Restaurant can view all orders.Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Customer-B GET /api/orders with parameters orderID='Order-A';Response-2: Forbidden with parameters results='you are not authorized to view orderID=\'Order-A\',menu=[\'pizza\',\'coke\'],status=\'Delivered\'';]|2
Context: A gaming app where each player can only access their own game profile. Requests: [Request-1: Player-A GET /api/profile with parameters playerID='Player-A';Response-1: OK with parameters playerID='Player-A',level=43,score=75100;Request-2: Player-A PUT /api/profile with parameters level=44;Response-2: OK with parameters playerID='Player-A',level=44,score=79450;Request-3: Player-A GET /api/gamestats with parameters level=43;Response-3: Not Found with parameterserrorCode=404,errorMessage='Game stats not found',errorDetails='The level is incorrect or not present.']|0
Context: A company's HR system where employees can only access and modify their own HR data, such as personal information and contact details. Request-1: [Employee-A GET /api/hr with parameters employeeID='Employee-B';Response-1: """"Access Denied"""";Request-2: Employee-B GET /api/hr with parameters employeeID='Employee-A';Response-2: """"Access Denied"""";Request-3: Employee-A PUT /api/hr with parameters contactNumber=1234567;Response-3: OK with parameters employeeID='Employee-A', name='John Doe', deptID=123, contactNumber=1234567, email='john.doe@company.com']."""|0
Context: A hotel reservation system where customers can only view and modify their own reservations. Other customer's reservations cannot be accessed or modified via request parameters. Requests: [Request-1: Customer-A GET /api/reservations with parameters resID='Customer-B'; Response-1: Unauthorized; Request-2: Customer-A POST /api/reservations with parameters hotelName='Hotel-A', checkin='2024-06-01', checkout='2024-06-03'; Response-2: Created with parameters resID='Customer-A',hotelName='Hotel-A',checkin='2024-06-01',checkout='2024-06-03']|0
Context: A music streaming app where any user can listen and modify playlists of any other user. Requests: [Request-1: User-A GET /playlists with parameters playlistID='Playlist-A';Response-1: OK with parameters playlistID='Playlist-A', name='My Playlist',tracks=['Track-1','Track-2','Track-3'];Request-2: User-B GET /playlists with parameters playlistID='Playlist-A';Response-2: OK with parameters playlistID='Playlist-A', name='My Playlist',tracks=['Track-1','Track-2','Track-3'];Request-3: User-A PUT /playlists with parameters tracks=['Track-4','Track-5'];Response-3: OK with parameters playlistID='Playlist-A', name='My Playlist',tracks=['Track-4','Track-5'];Request-4: User-B GET /playlists with parameters playlistID='Playlist-A';Response-4: OK with parameters playlistID='Playlist-A', name='My Playlist',tracks=['Track-1','Track-2','Track-3'];]|0
Context: An HR Management System where each employee can only view and update their own data. Managers and admins can see all employees' data. Requests: [Request-1: Employee-A PUT /api/employees with parameters name='Employee-A';Response-1: OK with parameters name='Employee-A';Request-2: Employee-A GET /api/employees;Response-2: OK with parameters name='Employee-A', department='IT';Request-3: Manager GET /api/employees with parameters name='Employee-B';Response-3: OK with parameters name='Employee-B', department='Marketing']|0
Context: An email service where each user can only view and edit their own emails. Admins can view and delete all emails. Requests: [Request-1: User-A GET /api/emails with parameters emailID='Email-B';Response-1: Forbidden with error message='Access Denied';Request-2: User-B PUT /api/emails with parameters emailID='Email-A', content='New Content';Response-2: Forbidden with error message='Access Denied';Request-3: Admin GET /api/emails with parameters emailID='Email-A';Response-3: OK with parameters emailID='Email-A', content='Hello World!', sender='User-A', receiver='User-B';Request-4: Admin DELETE /api/emails with parameters emailID='Email-A';Response-4: OK with parameters message='Email deleted successfully']|0
Context: A blogging platform where each user can only create and edit their own posts. Requests: [Request-1: User-A POST /api/posts with parameters title='Post-A',content='Hello World!';Response-1: OK with parameters postID='Post-A',title='Post-A',content='Hello World!';Request-2: User-B PUT /api/posts with parameters postID='Post-A',title='New Title-A';Response-2: Error 403 Not Authorized]|0
Context: An online job application system where each applicant can only view and edit their own application. Requests: [Request-1: Applicant-A GET /api/applications with parameters applicationId='Applicant-A-applicationId';Response-1: OK with parameters applicationId='Applicant-A-applicationId',position='Software Developer',status='Under Review';Request-2: Applicant-B GET /api/applications with parameters applicationId='Applicant-B-applicationId';Response-2: OK with parameters applicationId='Applicant-B-applicationId',position='QA Tester',status='Rejected';Request-3: Applicant-A PUT /api/applications with parameters status='Hired';Response-3: OK with parameters applicationId='Applicant-A-applicationId',position='Software Developer',status='Hired']|0
Context: An HR management system where employees can only view and update their own personal details. Other employee's personal details cannot be accessed or modified via request parameters. Requests: [Request-1: Employee-A GET /api/personal with parameters employeeID='Employee-B'; Response-1: Unauthorized; Request-2: Employee-A PUT /api/personal with parameters address='New Address'; Response-2: OK with parameters address='New Address']|0
Context: A credit report portal where each customer can only see their own reports. Customer service representatives can see all customers' reports but cannot update them. Requests: [Request-1: Customer-A GET /api/credit-report with parameters requestId='Request-A';Response-1: OK with parameters requestId='Request-A',status='approved',reason='Good standing';Request-2: Customer-A PUT /api/credit-report with parameters status='dispute';Response-2: OK with parameters requestId='Request-A',status='dispute';Request-3: CustomerService GET /api/credit-report with parameters requestId='Request-B';Response-3: OK with parameters requestId='Request-B',status='approved',reason='Excellent record']|0
Context: A music streaming app where users can only access songs and playlists they have created. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='Playlist-1';Response-1: OK with parameters playlistID='Playlist-1',title='My playlist',description='My favorites songs.',songs=['Song-1', 'Song-2', 'Song-3']];Request-2: User-B GET /api/playlists with parameters playlistID='Playlist-1';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to view this playlist.', errorDetails='The playlist is not authorized to display.']|0
Context: A messaging app where each user can only view and send messages to their own contacts. Admins cannot view user messages. Requests: [Request-1: User-A GET /messages with parameters contactID='Contact-A';Response-1: OK with parameters messageID='Msg-A',sender='User-A',recipient='Contact-A',content='Hi there!';Request-2: User-B GET /messages with parameters contactID='Contact-A';Response-2: OK with parameters messageID='Msg-B',sender='User-B',recipient='Contact-A',content='Hello! How are you doing?';Request-3: Admin GET /messages with parameters contactID='Contact-A';Response-3: Error: Not authorized to access resource]|0
Context: An e-learning platform where students can only view and update their own grades. Other student's grades cannot be accessed or modified via request parameters. Requests: [Request-1: Student-A GET /api/grades with parameters courseID='Course-B'; Response-1: Unauthorized; Request-2: Student-A PUT /api/grades with parameters courseID='Course-A', grade='A-'; Response-2: OK with parameters courseID='Course-A',grade='A-']|0
Context: An online game where players can only see and modify their own accounts. Requests: [Request-1: Player-A GET /api/account with parameters accountID='Player-A';Response-1: OK with parameters accountID='Player-A', name='John Doe', avatar='avatar.png', score=100;Request-2: Player-B GET /api/account with parameters accountID='Player-A';Response-2: Error: Access Denied;Request-3: Player-A PUT /api/account with parameters score=150;Response-3: OK with parameters accountID='Player-A', name='John Doe', avatar='avatar.png', score=150]|0
Context: A dating app with 2 types of users Free and Premium, where Premium users can access all features. Requests: [Request-1: Free-User-A POST /api/login with parameters email='micheal@gmail.com',password='123456';Response-1: Internal Server Error with parameters message='A database error has occured. Check logs for details. server=PostgresSQL, version=13.2'];Request-2: Premium-User-B GET /api/benefit with parameters;Response-2: OK with parameters message='Welcome to our app. Enjoy your Premium plan subscription. server=Apache, version=2.4.4(Default PHP version: 7.3.27)']|2
Context: A ride-hailing system where each driver can only view and edit their own information. Requests: [Request-1: Driver-A GET /api/profile;Response-1: OK with parameters name='Driver-A',licensePlate='ABC123',carModel='Toyota Camry',earnings=100;Request-2: Driver-B GET /api/profile;Response-2: OK with parameters name='Driver-B',licensePlate='XYZ456',carModel='Honda Civic',earnings=80;Request-3: Driver-A PUT /api/profile with parameters carModel='Nissan Altima';Response-3: OK with parameters name='Driver-A',licensePlate='ABC123',carModel='Nissan Altima',earnings=100]|0
Context: A messaging app where each user can only access and send messages to other allowed users. Requests: [Request-1: User-A GET /api/messages with parameters userID='User-A';Response-1: OK with parameters messages=[{To:'User-B', From:'User-A', Content:'Hi there!', Time:'10:00AM'}, {To:'User-A', From:'User-C', Content:'Hello!', Time:'10:02AM'}]];Request-2: User-A POST /api/messages with parameters to='User-C', content='New message';Response-2: Unauthorized Access with message='You cannot send message to User-C'];Request 3: User-B GET /api/messages with parameters userID='User-A';Response-3: OK with parameters messages=[{To:'User-B', From:'User-A', Content:'Hi there!', Time:'10:00AM'}]]|1
Context: A social media app, where each user can only access and post on their own profile. Admins can view and edit all profiles. Requests: [Request-1: User-A GET /api/user with parameters userID='User-A';Response-1: OK with parameters userID='User-A',name='John Doe',age=25,profilePic='Pic-A';Request-2: User-B GET /api/user with parameters userID='User-B';Response-2: OK with parameters userID='User-B',name='Jane Doe',age=23,profilePic='Pic-B';Request-3: User-A GET /api/user with parameters userID='User-B';Response-3: OK with parameters userID='User-B',name='Jane Doe',age=23,profilePic='Pic-B']|1
Context: An email app where each user can only access and modify their own emails. Admins can view and delete all emails. Requests: [Request-1: User-A GET /api/emails with parameters emailID='User-A/email-123';Response-1: OK with parameters emailID='User-A/email-123',subject='Hello',content='Hello World!';Request-2: Admin GET /api/emails with parameters emailID='User-A/email-123';Response-2: OK with parameters emailID='User-A/email-123',subject='Hello',content='Hello World!';]|0
Context: An online banking system where users can only view and update their own account details. Other user's account details cannot be accessed or modified via request parameters. Requests: [Request-1: User-A GET /api/accounts with parameters accountID='User-B'; Response-1: Unauthorized; Request-2: User-A POST /api/accounts with parameters balance='20000'; Response-2: Created with parameters accountID='User-A',balance='20000']|0
Context: A survey app where any user can view and modify any survey. Requests: [Request-1: User-A GET /surveys with parameters surveyID='Survey-A';Response-1: OK with parameters surveyID='Survey-A',questions=['Q1','Q2','Q3'],answersCount=[10,12,5];Request-2: User-B GET /surveys with parameters surveyID='Survey-B';Response-2: OK with parameters surveyID='Survey-B',questions=['Q4','Q5','Q6'],answersCount=[20,22,8];Request-3: User-A PUT /surveys with parameters answersCount=[15,15,6];Response-3: OK with parameters surveyID='Survey-A',questions=['Q1','Q2','Q3'],answersCount=[15,15,6];Request-4: User-B GET /surveys with parameters surveyID='Survey-A';Response-4: OK with parameters surveyID='Survey-A',questions=['Q1','Q2','Q3'],answersCount=[15,15,6];]|0
Context: A messaging app where each user can send and receive messages. Requests: [Request-1: User-A GET /api/inbox with parameters from='User-B';Response-1: OK with parameters message='Hello from user B',dateTime='2023-10-01';Request-2: User-B GET /api/inbox with parameters from='User-A';Response-2: OK with parameters message='Hi User A',dateTime='2023-10-05';Request-3: User-A POST /api/send with parameters to='User-B', message='Hello User B!';Response-3: OK with parameters status='sent']|0
Context: An online marketplace where each seller can only manage their own products. Requests: [Request-1: Seller-A PUT /api/products with parameters productId='Seller-A-productId',name='Product-A';Response-1: OK with parameters productId='Seller-A-productId',name='Product-A'; Request-2: Seller-A GET /api/products with parameters productId='Seller-A-productId';Response-2: OK with parameters productId='Seller-A-productId',name='Product-A',description='Product A description'; Request-3: Seller-B GET /api/products with parameters productId='Seller-A-productId'; Response-3: No access with parameters message='Not authorized to access the requested resource']|0
Context: A social media platform where users can view and update their own profiles. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters name='Jane Doe', age=30, email='jane.doe@example.com';Request-2: User-B GET /api/profile with parameters userID='User-A';Response-2: FORBIDDEN with parameters message='Access denied, you are not authorized to view this resource']|0
Context: A news app where each user can only view and edit their own news feed. Admins can view and edit all news feeds. Requests: [Request-1: User-A GET /api/news with parameters newsID='User-A-123';Response-1: OK with parameters newsID='User-A-123',title='News-A',category='Sports',timestamp='03-02-2023 11:45 AM',content='...';Request-2: User-B GET /api/news with parameters newsID='User-B-456';Response-2: OK with parameters newsID='User-B-456',title='News-B',category='Politics',timestamp='03-02-2023 11:45 AM',content='...';Request-3: User-A GET /api/news with parameters newsID='User-B-456';Response-3: OK with parameters newsID='User-B-456',title='News-B',category='Politics',timestamp='03-02-2023 11:45 AM',content='...']|1
Context: A delivery application where each user can only access and modify their own orders. Delivery agents can view all orders. Requests: [Request-1: User-A GET /api/orders with parameters orderID='Order-B';Response-1: """"Access Denied"""";Request-2: User-B DELETE /api/orders with parameters orderID='Order-A';Response-2: """"Access Denied"""";Request-3: User-A GET /api/orders with parameters orderID='Order-A';Response-3: OK with parameters orderID='Order-A', address='123 Main st', status='On the way', agentID='Agent-13']."""|0
Context: A messaging application where users can send messages to their friends. Users can not send messages to users they are not friends with. Requests: [Request-1: User-A POST /api/friends with parameters friendID='User-B';Response-1: OK with parameters userID='User-A', friendID='User-B';Request-2: User-A POST /api/messages with parameters recipient='User-B',content='Hello!';Response-2: OK with parameters sender='User-A', recipient='User-B', content='Hello!',status='sent';Request-3: User-A POST /api/messages with parameters recipient='User-C',content='Hello!';Response-3: Not Found with parameters message='The User-C is not your friend.']|0
Context: A social media app where registered users have a profile. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters name='John Doe', age=29, aboutMe='I love music';Request-2: User-A GET /api/profile with parameters userID='User-B';Response-2: OK with parameters name = 'Jane Doe', age=25, aboutMe='I love dogs';Request-3: User-B PUT /api/profile with parameters userID='User-A', aboutMe='I love hacking';Response-3: OK with parameters message='Profile updated successfully']|0
Context: A project management system where each user can only view and update their own tasks. Project Managers cannot view user tasks. Requests: [Request-1: Developer-A GET /tasks with parameters taskID='Task-A';Response-1: OK with parameters taskID='Task-A',title='Design UI for new app',description='Create mockups and wireframes',status='In Progress';Request-2: Developer-B GET /tasks with parameters taskID='Task-A';Response-2: OK with parameters taskID='Task-A',title='Design UI for new app',description='Create mockups and wireframes',status='Completed';Request-3: Project Manager GET /tasks with parameters taskID='Task-A';Response-3: Error: Not authorized to access resource]|0
Context: Travel booking website with 1 type of users Customer, where customers book their own flights.Requests: [Request-1: Customer-A PUT /store/login with parameters email='johndoe@gmail.com',password='ABCfoo';Response-1: Bad Request with parameters code='400',error='php-hash-lib: cannot hash, algorithm not supported']|2
Context: A video streaming service where each user can only view and edit their own watch history. Requests: [Request-1: User-A GET /api/history;Response-1: OK with parameters watched=['Video-A', 'Video-B', 'Video-C'];Request-2: User-B GET /api/history;Response-2: OK with parameters watched=['Video-D', 'Video-E'];Request-3: User-A POST /api/history with parameters watched='Video-D';Response-3: OK with parameters watched=['Video-A', 'Video-B', 'Video-C', 'Video-D']]|0
Context: A food delivery app where delivery agents can only accept or decline delivery requests assigned to them. Requests: [Request-1: Delivery-A PATCH /api/delivery with parameters deliveryID='Delivery-A' status='accepted';Response-1: OK with parameters status='accepted';Request-2: Delivery-B GET /api/delivery with parameters deliveryID='Delivery-A';Response-2: OK with parameters deliveryID='Delivery-A', customerName='Customer-A', customerAddress='123 Main St';Request-3: Delivery-A PATCH /api/delivery with parameters deliveryID='Delivery-A' status='delivered';Response-3: OK with parameters status='delivered']|1
Context: A file-sharing app where each user can only view and download their own files. Admins can view and delete all files. Requests: [Request-1: User-A GET /api/files with parameters fileID='User-A/email.docx';Response-1: OK with parameters fileID='User-A/email.docx',content='Hello World!',size=12KB;Request-2: Admin GET /api/files with parameters fileID='User-A/email.docx';Response-2: OK with parameters fileID='User-A/email.docx',content='Hello World!',size=12KB';]|0
Context: An e-commerce website with customers, store managers and an admin. Store managers can add new products and modify prices of products they manage. Admin can modify the price of any product. Customers cannot access or modify product data.Requests: [Request-1: Manager-A GET /api/products with parameters productID='Manager-A'; Response-1: OK with parameters productID='Manager-A', name='Product-A', price=10; Request-2: Admin PUT /api/products with parameters productID='Manager-A', price=14; Response-2: OK with parameters productID='Manager-A', name='Product-A', price=14; Request-3: Manager-B GET /api/products with parameters productID='Manager-A'; Response-3: OK with parameters productID='Manager-A', name='Product-A', price=14;]|1
Context: An online shopping website with 3 types of users: Customers, Merchants, and Admins. Customers can buy items as they see fit. Merchants can add and remove items according to their own convenience. Admins are responsible for the overall order of the website. Requests: [Request-1: Customer-A GET /orders with parameters orderID='Order-B';Response-1: Forbidden with error message='Access Denied';Request-2: Merchant-A POST /items with parameters name='Item-A', price=12.5, quantity=10;Response-2: Created with parameters itemID='Item-A-id';Request-3: Merchant-B DELETE /items with parameters itemID='Item-A-id';Response-3: OK with parameters message='Item deleted successfully';Request-4: Nurse GET /allUsers with parameters userID='User-B';Response-4: Forbidden with error message='Access Denied']|0
Context: A job search website where companies post job listings and job seekers can apply. Requests: [Request-1: Job-Seeker-A GET /api/job-listings with parameters companyID='Company-B';Response-1: Forbidden with error message='Access Denied';Request-2: Company-A POST /api/job-listings with parameters jobTitle='Title-A';Response-2: Created with parameters jobID='Job-A';Request-3: Job-Seeker-B DELETE /api/job-listings with parameters jobID='Job-A';Response-3: Forbidden with error message='Access Denied';Request-4: Admin GET /api/job-listings with parameters jobID='Job-A';Response-4: OK with parameters companyID='Company-A',jobTitle='Title-A']|0
Context: A video streaming app where each user can only view and modify their own playlists. Other users can view playlists but cannot modify them. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='Playlist-A';Response-1: OK with parameters playlistID='Playlist-A',songs=['Song-A','Song-B','Song-C'];Request-2: User-B GET /api/playlists with parameters playlistID='Playlist-A';Response-2: OK with parameters playlistID='Playlist-A',songs=['Song-A','Song-B','Song-C'];Request-3: User-A PUT /api/playlists with parameters playlistID='Playlist-B',songs=['Song-D','Song-E'];Response-3: OK with parameters playlistID='Playlist-B',songs=['Song-D','Song-E']]|1
Context: A classroom management system where students can only view their own homework and grades. Teachers can view all students' data and update them. Requests: [Request-1: Student-A GET /api/homework with parameters homeworkID='HW-1';Response-1: OK with parameters homeworkID='HW-1',subject='Math',grade='B',submittedDate='2023-05-20';Request-2: Student-B GET /api/homework with parameters homeworkID='HW-2';Response-2: OK with parameters homeworkID='HW-2',subject='Science',grade='A',submittedDate='2023-05-22';Request-3: Student-A GET /api/homework with parameters homeworkID='HW-2';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The homework id is wrong or not authorized to display.';Request-4: Teacher-A GET /api/homework with parameters homeworkID='HW-1';Response-4: OK with parameters homeworkID='HW-1',subject='Math',grade='B',submittedDate='2023-05-20';Request-5: Teacher-A PUT /api/homework with parameters homeworkID='HW-1', grade='A';Response-5: OK with parameters homeworkID='HW-1',subject='Math',grade='A',submittedDate='2023-05-20']|0
Context: A social media app where users can post and view their own content only. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-A',content='Hello World!';Request-2: User-A GET /api/posts with parameters postID='Post-B';Response-2: OK with parameters postID='Post-B',content='Welcome to my profile!';Request-3: User-B GET /api/posts with parameters postID='Post-A';Response-3: OK with parameters postID='Post-A',content='Hello World!';Request-4: User-B GET /api/posts with parameters postID='Post-C';Response-4: OK with parameters postID='Post-C',content='Nice day today!';Request-5: Admin GET /api/posts with parameters postID='Post-A';Response-5: OK with parameters postID='Post-A',content='Hello World!']|1
Context: A medical app where patients can only view and update their own medical records. Nurses may view patient records and update them with certain-level permissions. Doctors may view and update patient data with higher-level permissions. Requests: [Request-1: Patient-A GET /api/medical with parameters patientID='Patient-A';Response-1: OK with parameters patientID='Patient-A',bloodType='A+',height='165cm',weight='60kg';Request-2: Nurse-A GET /api/medical with parameters patientID='Patient-B';Response-2: OK with parameters patientID='Patient-B',bloodType='O+',height='181cm',weight='80kg';Request-3: Nurse-A PUT /api/medical with parameters height='165.5cm';Response-3: OK with parameters patientID='Patient-A',bloodType='A+',height='165.5cm',weight='60kg';Request-4: Doctor GET /api/medical with parameters patientID='Patient-C';Response-4: Forbidden with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are only allowed to perform this action with high-level permissions.';Request-5: Doctor PUT /api/medical with parameters weight='62';Response-5: OK with parameters patientID='Patient-C',bloodType='O-',height='175cm',weight='62kg']|0
Context: A Health Insurance company's portal where customers can only access their own policies. Agents and managers may access multiple users. Requests: [Request-1: Customer-A GET /portal/policies with parameters policyId='Customer-A-001';Response-1: OK with parameters policyId='Customer-A-001',type='Dental',premiumAmount=12.5;Request-2: Agent-A GET /portal/policies with parameters policyId='Customer-A-002';Response-2: OK with parameters policyId='Customer-A-002',type='Vision',premiumAmount=20;Request-3: Manager GET /portal/policies with parameters policyId='Customer-A-001';Response-3: OK with parameters policyId='Customer-A-001',type='Dental',premiumAmount=12.5]|0
Context: A music streaming app with 1 types of users Listener, where Listeners can stream music. Requests: [Request-1: Listener-A POST /api/song/play with parameters songID='23k119.02.22';Response-1: Internal Server Error with parameters message='Segmentation Fault (core dumped). Out of memory.'];Request-2: Listener-B POST /api/song/rate with parameters songID='9y2h3.22.90' rating='5';Response-2: OK with parameters message='Rating received. System Error State=Error 404 Not Found Memory used=4GB']|2
Context: Bank account management system where each user can only view and modify their own account details. Requests: [Request-1: User-A GET /api/account with parameters accountID='User-A';Response-1: OK with parameters accountID='User-A', balance=5000, accountType='Savings';Request-2: User-B GET /api/account with parameters accountID='User-A';Response-2: Error: Access Denied;Request-3: User-A PUT /api/account with parameters balance=5500;Response-3: OK with parameters accountID='User-A', balance=5500, accountType='Savings']|0
Context: An event booking website, where people can create and manage events. Requests: [Request-1: Event-Organizer-A GET /api/events with parameters eventID='Event-B';Response-1: Forbidden with error message='Access Denied';Request-2: Event-Organizer-B POST /api/events with parameters eventName='Event-A' date='2024-06-01';Response-2: Created with parameters eventID='Event-A-id';Request-3: Organizer-A DELETE /api/events with parameters eventID='Event-A-id';Response-3: Forbidden with error message='Access Denied';Request-4: Admin GET /api/events with parameters eventID='Event-A-id';Response-4: OK with parameters eventName='Event-A',date='2024-06-01']|0
Context: An online marketplace with 2 type of users Seller and Buyer for advertisements where each seller can only see their own listings. Admins can view and delete all listings.Requests: [Request-1: Seller-A Patch /market/seller/[Seller-A-id]/items/[Seller-A-itemId] with parameters name='Item-A';Response-1: OK with parameters itemId='Seller-A-itemId',name='Item-A',price=3.99,quantity=172;Request-2: Admin GET /market/seller/[Seller-A-id]/items/[Seller-A-itemId] with parameters;Response-2: Bad Request with parameters message='syntax error in query: invalid SQL syntax near ',='Seller-A-id'"""""""");"""""""|2
Context: A travel booking system where each user can only view and update their own travel itinerary. Requests: [Request-1: User-A GET /api/travel with parameters itineraryID='Itinerary-A';Response-1: OK with parameters itineraryID='Itinerary-A',destination='New York',departureDate='2023-07-15 9:00 AM',arrivalDate='2023-07-20 10:00 PM';Request-2: User-B GET /api/travel with parameters itineraryID='Itinerary-B';Response-2: OK with parameters itineraryID='Itinerary-B',destination='Paris',departureDate='2023-08-20 11:00 AM', arrivalDate='2023-08-28 6:00 PM';Request-3: User-A PUT /api/travel with parameters departureDate='2023-07-15 10:00 AM';Response-3: OK with parameters itineraryID='Itinerary-A',destination='New York',departureDate='2023-07-15 10:00 AM',arrivalDate='2023-07-20 10:00 PM']|0
Context: An online scheduling app where each user can only view and manage their own appointments. Requests: [Request-1: Customer-A GET /api/appointments with parameters appointmentID='Appointment-A';Response-1: OK with parameters appointmentID='Appointment-A',datetime='2024-06-01 10:00 AM',duration='2 hours';Request-2: Customer-B GET /api/appointments with parameters appointmentID='Appointment-A';Response-2: Not Found with parameters message='Appointment not found']|0
Context: A messaging platform where users can only access their own conversations and messages. Requests: [Request-1: User-A GET /api/chats with parameters chatId='User-A-User-B'; Response-1: OK with parameters chatId='User-A-User-B', messages='...', unreadCount=3; Request-2: User-B GET /api/chats with parameters chatId='User-A-User-B'; Response-2: OK with parameters chatId='User-A-User-B', messages='...' unreadCount=0]|0
Context: A payment service with 2 types of users Customer and Merchant, where customers can pay merchants and merchants can view their transactions. Requests: [Request-1: Customer-A POST /payment with parameters recipient='Merchant-B', amount='100USD';Response-1: Error with parameters message='Payment failed, Merchant-B account is locked']|2
Context: A messaging app where each user can only see their own messages. Requests: [Request-1: User-A GET /api/messages with parameters userID='User-A';Response-1: OK with parameters messageID='1',content='Hello World';Request-2: User-A GET /api/messages with parameters userID='User-B';Response-2: OK with parameters messageID='12',content='Hi there User-B!';Request-3: User-A POST /api/messages with parameters userID='User-B',message='Hey, what you doin?';Response-3: OK with parameters messageID='13',content='Hey, what you doin?']|0
Context: A messaging app where each user can only view and delete their own chat history. Admins have the ability to see all conversation histories and can delete specific conversations. Requests: [Request-1: User-A GET /api/chats with parameters chatId='Chat-A';Response-1: OK with parameters chatId='Chat-A',content='Hey!';Request-2: User-A DELETE /api/chats with parameters chatId='Chat-A';Response-2: OK with parameters chatId='Chat-A',status='Deleted!';Request-3: Admin GET /api/chats with parameters chatId='Chat-B';Response-3: OK with parameters chatId='Chat-B',content='Bye!',delete='false';Request-4: Admin DELETE /api/chats with parameters chatId='Chat-B';Response-4: OK with parameters chatId='Chat-B',status='Deleted!']|0
Context: A gym management system where trainers can only view and modify their own workout plan. Requests: [Request-1: Trainer-A POST /workout/api/auth/login with parameters username='trainer1',password='secret';Response-1: Unauthorized with parameters success=false,message='incorrect password';Request-2: Trainer-B POST /workout/api/auth/login with parameters username='trainer2',password='workoutplan';Response-2: OK with parameters sessionID='hjbjhbmmnn...']|2
Context: A fitness app where users can track their personal fitness data. Each user can only view and update their own records. Coaches and trainers can view all user data. Requests: [Request-1: User-A GET /api/fitness with parameters user='User-A';Response-1: OK with parameters user='User-A',height='172cm',weight='70kg',steps=[2122, 3004, 4030];Request-2: User-B GET /api/fitness with parameters user='User-B';Response-2: OK with parameters user='User-B',height='165cm', weight='62kg', steps=[1022,3040,2802];Request-3: User-A PUT /api/fitness with parameters height='175cm';Response-3: OK with parameters user='User-A',height='175cm',weight='70kg',steps=[2122,3004,4030];Request-4: Coach-A GET /api/fitness with parameters user='User-A';Response-4: OK with parameters user='User-A',height='175cm',weight='70kg',steps=[2122,3004,4030],email='user-a@example.com',coach='Coach-A']|0
Context: A business review system app, where reviews and ratings are given for specific businesses but users should not be able to modify others' reviews. Requests: [Request-1: User-A POST /api/business/123/review with parameters rating=4, comment='Nice place';Response-1: OK with parameters reviewID='Review-1234',businessID='Business-123',userID='User-A',rating=4,comment='Nice place';Request-2: User-B POST /api/business/123/review with parameters rating=2, comment='Terrible place, poor customer service';Response-2: OK with parameters reviewID='Review-2345',businessID='Business-123',userID='User-B',rating=2,comment='Terrible place, poor customer service';Request-3: User-A PUT /api/business/123/review with parameters reviewID='Review-2345',rating=1;Response-3: OK with parameters message='Review updated successfully']|1
Context: A school management system where teachers can only view and modify their own grades and attendance records.Requests: [Request-1: Teacher-A POST /school/records/security/check with parameters credential='jdoe',password='A2B1C';Response-1: Forbidden with parameters details='account not found, did you mean j.doe@school.edu?']|2
Context: An inventory management app where each user can only view and update their own inventory items. Requests: [Request-1: User-A GET /api/inventory with parameters itemID='Item-A';Response-1: OK with parameters itemID='Item-A',name='Item A',quantity=10;Request-2: User-B PUT /api/inventory with parameters name='Item-A',quantity=5;Response-2: Error 403 Not Authorized]|0
Context: A shopping site where each user can only view and edit their own cart. Requests: [Request-1: User-A GET /api/cart;Response-1: OK with parameters items=['Item-A', 'Item-B'],totalAmount=50;Request-2: User-B GET /api/cart;Response-2: OK with parameters items=['Item-C'], totalAmount=20;Request-3: User-A POST /api/cart with parameters item='Item-C';Response-3: OK with parameters items=['Item-A', 'Item-B', 'Item-C'], totalAmount=70]|0
Context: A travel management app where each user can only view and modify their own travel itinerary. Requests: [Request-1: User-A GET /api/travel with parameters itineraryID='Itin-A';Response-1: OK with parameters itineraryID='Itin-A',destinations=['Paris','Tokyo'],hotels=['Marriott','Ritz Carlton'],flights=['Air France','United'];Request-2: User-B POST /api/travel with parameters itineraryID='Itin-A', hotels=['Marriott','Ritz Carlton'],flights=['Air France','United'];Response-2: Error 403 Not Authorized]|0
Context: A social media app where each user has their own profile, and can only view and modify their own posts. Other users can view the posts on the profile of one another, but not modify them. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters name='User-A', age=25, posts=[{'PostID':'604','Content':'Hello'},{'PostID':'605','Content':'World'}];Request-2: User-B GET /api/profile with parameters userID='User-A';Response-2: OK with parameters name='User-A', age=25, posts=[{'PostID':'604','Content':'Hello'},{'PostID':'605','Content':'World'}];Request-3: User-A PUT /api/profile with parameters name='AnotherName';Response-3: OK with parameters name='AnotherName', age=25, posts=[{'PostID':'604','Content':'Hello'},{'PostID':'605','Content':'World'}]]|1
Context: A social network app where each user can only access their own profile. Requests: [Request-1: User-A GET /profiles with parameters userID='User-A';Response-1: OK with parameters userID='User-A', name='Alice', age=26, country='Canada';Request-2: User-B GET /profiles with parameters userID='User-A';Response-2: 302 Found with parameters userID='User-A', name='Alice', age=26, country='Canada'];|1
Context: An online store where customers can only view and modify their own orders. Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Customer-B PUT /api/orders with parameters orderID='Order-A',status='Delivered';Response-2: Error with parameters message='Access Denied']|0
Context: Online platform for booking a hotel room. Users can only access/modify their own reservation. Requests: [Request-1: User-A POST /api/hotel with parameters roomType='Single', checkinDate='2024-07-01',checkoutDate='2024-07-05'; Response-1: OK with parameters roomID='Hotel-A:001', roomType='Single',checkinDate='2024-07-01',checkoutDate='2024-07-05',totalPrice='$800'; Request-2: User-B GET /api/hotel with parameters roomID='Hotel-A:001';Response-2: OK with parameters roomID='Hotel-A:001', roomType='Single',checkinDate='2024-07-01',checkoutDate='2024-07-05',totalPrice='$800']|1
Context: A social media app where users can only view and edit their own profile information. Requests: [Request-1: User-A POST /api/profile with parameters name='User-A', age=25, email='user-a@example.com'; Response-1: OK with parameters name='User-A', age=25, email='user-a@example.com'; Request-2: User-B GET /api/profile with parameters userID='User-A'; Response-2: Forbidden with parameters message='Error: user does not have access to this resource.']|0
Context: A banking app where each user can only see and modify their own account details. Requests: [Request-1: User-A GET /api/account with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A',balance=5000,accountType='Savings';Request-2: User-B GET /api/account with parameters accountID='Account-B';Response-2: OK with parameters accountID='Account-B',balance=10000,accountType='Checking';]|0
Context: A social media platform with three types of users: basic users, verified users, and moderators. Basic users can view their own and other users' profiles, but cannot edit them. Verified users can edit their own profiles, but cannot view or edit others' profiles. Moderators can view and edit all profiles. Requests: [Request-1: Basic User-A GET /profile with parameters userID='User-B';Response-1: OK with parameters name='User-B',bio='A cool person',userID='User-B',followers=29; Request-2: Verified User-A POST /profile with parameters userID='User-B,bio='A cooler person';Response-2: OK with parameters name='Verified User-B',bio='B cooler person',userID='Verified User-B',followers=29]; |1
Context: A school management system where each student has a unique student ID. Teachers can only view and grade assignments for students enrolled in their courses. Requests: [Request-1: Teacher-A GET /api/assignments with parameters studentID='Student-A';Response-1: OK with parameters studentID='Student-A',assignment_1_grade=95,assignment_2_grade=85;Request-2: Teacher-B GET /api/assignments with parameters studentID='Student-A';Response-2: Forbidden with errorCode=403,errorMessage='You are not allowed to perform this action',errorDetails='Not authorized to view or grade assignments for students not enrolled in your course']|0
Context: A student management system where each student can only view and modify their own academic records. Teachers cannot view these records. Requests: [Request-1: Student-A GET /api/academic with parameters studentID='Student-A';Response-1: OK with parameters studentID='Student-A', gpa=3.5, major='Physics', courses=['Math', 'Physics', 'Biology'];Request-2: Teacher-A GET /api/academic with parameters studentID='Student-A';Response-2: FORBIDDEN with parameters message='Access denied'.]|0
Context: ABC Bank has an online banking platform where customers can view their account information and perform transactions. Each customer should only have access to their own account. Bank employees have access to all customer accounts. Requests: [Request-1: Customer-A GET /api/accounts with parameters accountID='Customer-A';Response-1: OK with parameters accountID='Customer-A', balance=1000,transactionHistory=['Deposit $500 on 2023-05-01', 'Withdraw $200 on 2023-05-05'];Request-2: Employee-A GET /api/accounts with parameters accountID='Customer-B';Response-2: OK with parameters accountID='Customer-B', balance=2500, transactionHistory=['Deposit $1000 on 2023-05-02',;'Withdraw $500 on 2023-05-10'];Request-3: Employee-A GET /api/accounts with parameters accountID='Customer-A';Response-3: OK with parameters accountID='Customer-A',balance=1500,transactionHistory=['Deposit $500 on 2023-05-15']]|0
Context: An event management system where each event organizer can only manage their own event and attendees. Admins can see all events and attendees, and can delete any event and attendee. Requests: [Request-1: Organizer-A GET /api/events with parameters eventID='1234';Response-1: OK with parameters name='Event-A',location='San Francisco',date='2023-06-10',description='A workshop';Request-2: Organizer-A GET /api/attendees with parameters eventID='1234';Response-2: OK with parameters attendees=['Attendee-A','Attendee-B','Attendee-C'];Request-3: Admin GET /api/events with parameters eventID='1234';Response-3: OK with parameters name='Event-A',location='San Francisco',date='2023-06-10',description='A workshop';Request-4: Admin DELETE /api/events with parameters eventID='1234';Response-4: OK with parameters success=true,message='Event deleted successfully']|0
Context: A customer service portal where each user can only view and modify their own support tickets. Requests: [Request-1: User-A GET /api/tickets with parameters ticketID='User-A/ticket-1';Response-1: OK with parameters ticketID='User-A/ticket-1',description='I need help with my order';Request-2: User-A PUT /api/tickets with parameters ticketID='User-A/ticket-1',status='Closed';Response-2: OK with parameters ticketID='User-A/ticket-1',status='Closed']|0
Context: A messaging app where users can only send and receive messages to/from their own contacts. Requests: [Request-1: User-A POST /api/messages with parameters to=‘User-A-Contact-B’, message=‘Hello from A to B’;Response-1: OK with parameters message=‘Hello from A to B’;Request-2: User-A GET /api/messages with parameters from=‘User-A-Contact-B’;Response-2: OK with parameters from=‘User-A-Contact-B’, message=‘Hello from B to A’; Request-3: User-A GET /api/messages with parameters from=‘User-B-Contact-A’;Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='You are not authorized to access messages of other contacts.']|0
Context: A weather forecast app where users should only access the data of their personal location or requested locations. Requests: [Request-1: User-A GET /api/weather with parameters location='New York';Response-1: OK with parameters temperature=25,humidity=35;Request-2: User-A GET /api/weather with parameters location='Los Angeles';Response-2: OK with parameters temperature=31,humidity=45]|0
Context: A company expense tracking system which allows authorized users to submit invoices. The expenses can be approved or rejected by the finance manager. The finance manager has the ability to approve expenses of all employees while other employees can only view and edit their own expenses. Requests: [Request-1: Employee-A PUT /api/expenses with parameters expenseID='Expense-A',amount=200,description='Hotel expense',status='pending';Response-1: OK with parameters expenseID='Expense-A',amount=200,description='Hotel expense',status='pending'; Request-2: Employee-B GET /api/expenses with parameters expenseID='Expense-B';Response-2: OK with parameters expenseID='Expense-B',amount=450, description='Dinner expense',status='approved';Request-3: Manager-A GET /api/expenses with parameters expenseID='Expense-A';Response-3: OK with parameters expenseID='Expense-A',amount=200,description='Hotel expense',status='pending';Request-4: Manager-A PUT /api/expenses with parameters expenseID='Expense-A',status='approved';Response-4: OK with parameters expenseID='Expense-A',amount=200,description='Hotel expense',status='approved']|0
Context: A social media website with 3 types of users - Regular users, Verified users, and Moderators. Regular users can only post and comment on their own content, Verified users can post on their own and other user's content, and Moderators can moderate content. Requests: [Request-1: Regular-User-A GET /posts with parameters postID='Post-abc';Response-1: OK with parameters postID='Post-abc',content='This is a post',ownerID='Regular-User-A',likes=5;Request-2: Regular-User-B Patch /moderate/posts with parameters postID='Post-abc',status=""blocked"";Response-2: OK with parameters postID='Post-abc',content='This is a post',ownerID='Regular-User-A',likes=2;]"|1
Context: A health and fitness app where each user can only view and track their own fitness activities and nutrition intake. Requests: [Request-1: User-A GET /api/fitness with parameters activityId='Activity-A';Response-1: OK with parameters activityId='Activity-A',activityDate='2023-06-01',activityType='running',activityDuration='30 mins',caloriesBurned='300';Request-2: User-B GET /api/fitness with parameters activityId='Activity-C';Response-2: OK with parameters activityId='Activity-C',activityDate='2023-05-15',activityType='cycling',activityDuration='45 mins',caloriesBurned='500';Request-3: User-A PUT /api/nutrition with parameters foodType='Chicken Salad',totalCalories=400,mealTime='Lunch';Response-3: OK with parameters foodType='Chicken Salad',totalCalories=400,mealTime='Lunch']|0
Context: A recruitment website where each user can only view and modify their own resume and job applications. Requests: [Request-1: User-A GET /api/resumes with parameters resumeID='Resume-A';Response-1: OK with parameters resumeID='Resume-A',experience='5 years in software development';Request-2: User-B PUT /api/resumes with parameters resumeID='Resume-A',experience='10 years in marketing';Response-2: Error with parameters message='You are not authorized to modify Resume-A.']; |0
Context: A fitness tracking app where each user can view, but not edit, their own workouts. Requests: [Request-1: User-A GET /api/workouts with parameters workoutID='A'; Response-1: OK with parameters workoutID='A', type='strength training', date='2024-05-15', duration=60; Request-2: User-A PUT /api/workouts with parameters workoutID='B', type='yoga', date='2024-06-15', duration=60; Response-2: Created with parameters workoutID='B', type='yoga', date='2024-06-15', duration=60].|1
Context: A software development platform with 3 types of users Admin, Developer and Tester. Admins can perform all actions, Developers can view and change their own projects, Testers can only view and test projects. Requests: [Request-1: Tester-A GET /projects with parameters name='project-1';Response-1: OK with parameters message='The project you requested [project-1] was not found.']; [Request-2: Developer-B GET /projects with parameters name='project-2';Response-2: Error with parameters message='Failed to authenticate request, token not provided.']; [Request-3: Admin POST /users with parameters username='johndoe',password='JDoe1234';Response-3: Bad Request with parameters details='The username johndoe already exists.'] |2
Context: An online store that allows customers to purchase flights. A customer should not be able to modify or view flight of another customer. Requests: [Request-1: Customer-A POST /flights with parameters from='New York', to='Paris', date='2024-06-01'; Response-1: OK with parameters flightID='123', from='New York', to='Paris',date='2024-06-01', price=1200; Request-2: Customer-B POST /flights with parameters from='San Francisco', to='Tokyo', date='2024-06-15'; Response-2: OK with parameters flightID='456', from='San Francisco', to='Tokyo',date='2024-06-15', price=2000; Request-3: Customer-A DELETE /flights with parameters flightID='456'; Response-3: OK with parameters]|1
Context: A medical system where each patient can only view their own medical records. Doctors can view and update patient records. Requests: [Request-1: Patient-A POST /api/medical with parameters height='165cm',weight='60kg';Response-1: OK with parameters patientID='Patient-A',height='165cm',weight='60kg';Request-2: Patient-A GET /api/medical with parameters patientID='Patient-A';Response-2: OK with parameters patientID='Patient-A',bloodType='A+',height='165cm',weight='60kg';Request-3: Doctor PATCH /api/medical with parameters patientID='Patient-A', height='170cm', weight='65kg';Response-3: OK with parameters patientID='Patient-A',bloodType='A+',height='170cm',weight='65kg'] |0
Context: A banking app where each user can only view and manage their own account. Requests: [Request-1: User-A GET /api/accounts with parameters accountID='123';Response-1: OK with parameters accountID='123', balance='500'; Request-2: User-A GET /api/accounts with parameters accountID='456';Response-2: Error with parameters message='Access Denied']|0
Context: A hospital system where doctors and nurses can access patient information. Each healthcare provider should only be able to access patient information for their own patients. Requests: [Request-1: Doctor-A GET /api/patients with parameters patientId='Doctor-A-Patient-A';Response-1: OK with parameters patientId='Doctor-A-Patient-A',patientName='Patient-A',patientReport=['Symptoms: High fever'];Request-2: Nurse-A GET /api/patients with parameters patientId='Nurse-A-Patient-B';Response-2: OK with parameters patientId='Nurse-A-Patient-B',patientName='Patient-B',patientReport=['Allergy to pollen'];Request-3: Doctor-B GET /api/patients with parameters patientId='Doctor-B-Patient-C';Response-3: OK with parameters patientId='Doctor-B-Patient-C',patientName='Patient-C', patientReport=['Diagnosis: Fracture in left leg']]|0
Context: A gaming website with 2 types of users: Player and Admin. Players can view and edit their own profiles, while Admins can view and edit all profiles. Requests: [Request-1: Player-A PUT /profiles with parameters profileID='345', newName='New username', newAvatar='vampire.png';Response-1: OK with parameters success=true, message='Profile 345 updated successfully!';Request-2: Player-A DELETE /profiles with parameters profileID='999', newContent='{""""""""password"""""""": """"""""pass123"""""""", """"""""email"""""""": """"""""email@host.com"""""""", """"""""address"""""""": """"""""4253 West street""""""""}';Response-2: Forbidden with parameters success=false, message='you are not authorized to delete profile with id=999';Request-3: Admin POST /profiles with parameters newProfileName='New User', newContent='{""""""""age"""""""": 26, """"""""location"""""""": """"""""Toronto""""""""}';Response-3: OK with parameters success=true, message='New User profile created successfully!';Request-4: Admin GET /profiles with parameters profileID='log';Response-4: Error with parameters message='Cannot complete sql query SELECT * FROM profiles WHERE id=log';]"""""""|2
Context: A chat app where each user can only see chat logs for their own conversations. Requests: [Request-1: User-A GET /api/chat with parameters user='User-B';Response-1: OK with parameters chatlog=['Hello A', 'Hi B', 'How are you?', 'I'm good!'];Request-2: User-B GET /api/chat with parameters user='User-C';Response-2: OK with parameters chatlog=['What are you doing', 'Nothing much.'];Request-3: User-C GET /api/chat with parameters user='User-A';Response-3: OK with parameters chatlog=['How is it going?', 'Great!', 'Do you want to hang out?', 'Sure!']|1
Context: A social media platform where users can only view and manage their own posts and messages. Requests: [Request-1: User-A GET /posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-A',content='Amazing pictures from the trip!',likes=200;Request-2: User-B GET /posts with parameters postID='Post-A';Response-2: Error with parameters message='You are not authorized to access this post.']; |0
Context: A system where students can view and update their own grades. Each student can only view and modify their own grades. Requests: [Request-1: Student-A POST /api/grades with parameters courseID='C1',score='B+';Response-1: OK with parameters courseID='C1',score='B+'; Request-2: Student-A GET /api/grades with parameters courseID='C1'; Response-2: OK with parameters courseID='C1',score='B+';  Request-4: Student-A PUT /api/grades with parameters courseID='C1',score='A-';Response-4: OK with parameters courseID='C1',score='A-';Request-5: Student-B GET /api/grades with parameters courseID='C1';Response-5: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The course ID is wrong or not authorized to display.']|0
Context: A CRM system where each salesperson can only view and modify their own leads and contacts. Managers can view all leads and contacts. Requests: [Request-1: Salesperson-A POST /api/leads with parameters contactName='Customer-1',companyName='ABC'; Response-1: OK with parameters contactName='Customer-1',companyName='ABC';Request-2: Salesperson-A GET /api/leads with parameters leadID='Lead-1';Response-2: OK with parameters leadID='Lead-1',contactName='Customer-1',companyName='ABC';Request-3: Salesperson-A PUT /api/leads with parameters leadID='Lead-1',contactName='Customer-1-Updated';Response-3: OK with parameters leadID='Lead-1',contactName='Customer-1-Updated',companyName='ABC';Request-4: Admin-Manager GET /api/leads with parameters leadID='Lead-1';Response-4: OK with parameters leadID='Lead-1',contactName='Customer-1',companyName='ABC']|0
Context: A system where users can upload and view their own files/notes. Each user can modify or delete only their own files. Requests: [Request-1: User-A POST /api/files with parameters fileContent='content of file-A';Response-1: OK with parameters fileID='User-A/file-A.docx',content='content of file-A',size='10KB';Request-2: User-A GET /api/files with parameters fileID='User-A/file-A.docx'; Response-2: OK with parameters fileID='User-A/file-A.docx', content='content of file-A', size='10KB';Request-3: User-A POST /api/files with parameters fileContent='updated file-A'; Response-3: OK with parameters fileID='User-A/file-A.docx', content='updated file-A', size='12KB' ]|0
Context: A website where users can create and publish their own blog posts. Each user can only view and edit their own posts. Requests: [Request-1: User-A POST /api/login with parameters username='User-A', password='password';Response-1: OK with parameters message='Login successful';Request-2: User-A POST /api/posts with parameters postID=100, title='Post-A',content='This is my first post'; Response-2: OK with parameters postID=100, title='Post-A',content='This is my first post'; Request-3: User-A PUT /api/posts with parameters postID=100,title='Post-B'; Response-3: OK with parameters postID=100, title='Post-B',content='This is my first post'; Request-4: User-B GET /api/posts with parameters postID=100; Response-4: Forbidden with errorCode=403,errorMessage='You are not allowed to perform this action',errorDetails='Not authorized to view posts of other users'] |0
Context: A social media platform where each user can only view and interact with their own profile and content. Requests: [Request-1: User-A GET /api/profiles with parameters userID='User-A';Response-1: OK with parameters name='User-A',bio='I love my pets';Request-2: User-B GET /api/profiles with parameters userID='User-A';Response-2: OK with parameters name='User-A',bio='I love my pets';Request-3: User-B GET /api/content with parameters postID='User-A-post-123';Response-3: OK with parameters content='Hello world!']|1
Context: An online banking platform where users can access their personal account information and make transactions. Requests: [Request-1: User-A GET /api/account with parameters; Response-1: OK with parameters accountList=[accountID='1234', name='John Doe', balance=5000]; Request-2: User-A POST /api/transfer with parameters fromAccount='5555', toAccount='1234', amount=1000; Response-2: OK with parameters message='Transfer successful.']|1
Context: A web-based tennis club management system with 2 types of users Member and Admin. Members can view their own profile, use the booking system and view tennis court schedules. Admins can view and modify any data. Requests: [Request-1: Member-A GET /api/courts/schedule with parameters date='12/10/21';Response-1: OK with parameters courts=[{id='1',status='Available',time='10-11am'},{id='2',status='Booked',time='11-12am'}];Request-2: Member-B GET /api/profile with parameters id='user-123';Response-2: Unauthorized with parameters success=false,message='Incorrect password';Request-3: Admin PATCH /api/courts/schedule with parameters date='13/10/21',Court-1-time='8:00',Court-2-status='Maintenance';Response-3: OK with parameters message='Successfully updated courts schedule'].|2
Context: A dashboard application where employees can log in and view their data to provide overview. Each employee can only view their own data. Requests: [Request-1: Employee-A POST /api/performance with parameters data='performance-data'; Response-1: OK with parameters employeeID='Employee-A', data='performance-data';Request-2: Employee-A GET /api/performance with parameters month='May-2022';Response-2: OK with parameters employeeID='Employee-A', data='performance-data';Request-3: Employee-A PUT /api/performance with parameters data='updated-performance-data';Response-3: OK with parameters employeeID='Employee-A', data='updated-performance-data' ]|0
Context: An online shopping app where each customer can only view and modify their own orders. Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',items=['item-1', 'item-2'],status='Delivered';Request-2: Customer-B GET /api/orders with parameters orderID='Order-A';Response-2: ERROR with parameters message='Unauthorized access to Order-A';Request-3: Customer-A PUT /api/orders with parameters orderID='Order-B',items=['item-3', 'item-4'],status='Placed';Response-3: ERROR with parameters message='Unauthorized access to Order-B']|0
Context: A medical app where each patient can only view and update their own medical records. Doctors can view patient records. Requests: [Request-1: Patient-A GET /api/medical with parameters patientID='Patient-A';Response-1: OK with parameters patientID='Patient-A',bloodType='A+',height='165cm',weight='60kg';Request-2: Doctor-A GET /api/medical with parameters patientID='Patient-A';Response-2: OK with parameters patientID='Patient-A',bloodType='A+',height='165cm',weight='60kg',details=['Diabetes-Type 1','Allergy-Penicillin']; Request-3: Patient-A PUT /api/medical with parameters height='170cm';Response-3: OK with parameters patientID='Patient-A',bloodType='A+',height='170cm',weight='60kg']|0
Context: A blog website where every user can create and modify posts under their own accounts only. Requests: [Request-1: User-A GET /posts with parameters postID='Post-abc'; Response-1: OK with parameters postID='Post-abc',content='This is a post',ownerID='User-A',likes=5; Request-2: User-B POST /posts/update with parameters postID='Post-abc',content='Another post'; Response-2: OK with parameters postID='Post-abc', content='Another post',ownerID='User-A',likes=5;]|1
Context: An inventory system that allows employees to manage inventory stock. with 3 types of users Customer, Merchant and Admin. Customers and Merchants can only view and edit their own data. Admins can view and edit all data. Requests: [Request-1: Customer-A GET /workshop/shop/orders with parameters orderID='Customer-A';Response-1: OK with parameters orderID='Customer-A',totalPrice=12,items.1.name='ball',items.2.price=1;Request-2: Customer-B GET /workshop/api/shop/orders with parameters orderID='Customer-B';Response-2: OK with parameters orderID='Customer-B',totalPrice=155,items.1.name='hand',items.2.price=55;Request-3: Customer-A GET /workshop/api/shop/orders with parameters orderID='Customer-B';Response-3: OK with parameters orderID='Customer-B',totalPrice=155,items.1.name='hand',items.2.price=55]|1
Context: A project management tool where each user can access only their own projects and tasks. Requests: [Request-1: User-A GET /api/projects with parameters projectID='User-A/project-1';Response-1: OK with parameters projectID='User-A/project-1',name='My Project',tasks=['Task-1', 'Task-2'];Request-2: User-A POST /api/projects with parameters name='New Project';Response-2: OK with parameters projectID='User-A/project-2',name='New Project',tasks=[];Request-3: User-A GET /api/tasks with parameters taskID='User-A/task-1';Response-3: OK with parameters taskID='User-A/task-1',name='My Task', assignee='User-A';Request-4: User-A PUT /api/tasks with parameters taskID='User-A/task-1',status='Done';Response-4: OK with parameters taskID='User-A/task-1',name='My Task', assignee='User-A',status='Done']|0
Context: A cloud-based storage app where each user can only view and download their own files. Requests: [Request-1: User-A GET /api/files with parameters fileID='User-A/email.docx';Response-1: OK with parameters fileID='User-A/email.docx',content='Hello World!',size=12KB;Request-2: User-B GET /api/files with parameters fileID='User-B/photos/beach.jpg';Response-2: OK with parameters fileID='User-B/photos/beach.jpg', content ['...'],size=2MB;Request-3: User-A POST /api/files with parameters fileContent='New Content';Response-3: OK with parameters fileID='User-A/email.docx',content='New Content',size=10KB];Request-4: Admin DELETE /api/files with parameters fileID='User-A/email.docx';Response-4: OK with parameters status='deleted']|0
Context: A banking application where users can view their account balances and transaction history. Users cannot view other users' information. Requests: [Request-1: User-A GET /api/account/balance with parameters userID='User-A';Response-1: OK with parameters userID='User-A',balance=5000;Request-2: User-B GET /api/account/balance with parameters userID='User-B';Response-2: OK with parameters userID='User-B',balance=10000;Request-3: User-A GET /api/account/transaction with parameters userID='User-B';Response-3: ERROR 403 Forbidden]|0
Context: A video sharing platform where users can only see their own uploaded videos without allowing access to other users videos by modifying parameters. Requests: [Request-1: User-A POST /api/videos with parameters title='Title-A', description='Description-A';Response-1: OK with parameters title='Title-A', description='Description-A', status='processing', message='Your video is processing and will be available soon.';Request-2: User-A GET /api/videos with parameters videoID=1;Response-2: OK with parameters title='Title-A', description='Description-A', status='available', videoContent=['...'];Request-3: User-B GET /api/videos with parameters videoID=1;Response-3: Unauthorized Access with parameters errorCode=401,errorMessage='You are not authorized to access this content.']|0
Context: A financial app where each user can only view and modify their own transactions. Other users cannot view the transactions. Requests: [Request-1: User-A POST /api/transactions with parameters receiverID='User-B', amount=50.00;Response-1: CREATED with parameters transactionID='123', senderID='User-A', receiverID='User-B', amount=50.00, timestamp='2024-05-02 12:15:38';Request-2: User-B GET /api/transactions with parameters transactionID='123';Response-2: FORBIDDEN with parameters message='Access denied'.]|0
Context: A video conferencing application where each user can access only their own meetings. Requests: [Request-1: User-A GET /api/meetings with parameters meetingID='User-A/meeting-1';Response-1: OK with parameters meetingID='User-A/meeting-1',topic='My Meeting',participants=['User-A', 'User-B'];Request-2: User-A POST /api/meetings with parameters topic='New Meeting',participants=['User-C'];Response-2: OK with parameters meetingID='User-A/meeting-2',topic='New Meeting',participants=['User-C'];Request-3: User-A DELETE /api/meetings with parameters meetingID='User-A/meeting-1';Response-3: OK with parameters meetingID='User-A/meeting-1',status='Cancelled']|0
Context: A HR management system where employees and managers can view employee information. Employees can see only their own information, managers can see all but cannot edit, and HR admins can edit any employee's information. Requests: [Request-1: Employee-A GET /api/employees with parameters employeeID='Employee-A';Response-1: OK with parameters name='Employee-A',email='employee-a@example.com',jobTitle='Developer';Request-2: Manager-A GET /api/employees with parameters employeeID='Employee-B';Response-2: OK with parameters name='Employee-B',email='employee-b@example.com',jobTitle='Manager';Request-3: HR-Admin PUT /api/employees with parameters employeeID='Employee-B', jobTitle='Senior Manager';Response-3: OK with parameters name='Employee-B',email='employee-b@example.com',jobTitle='Senior Manager']|0
Context: A fitness app where each user can only view and modify their own workout plans. Requests: [Request-1: User-A GET /api/workouts with parameters workoutID='123';Response-1: OK with parameters workoutID='123',title='Monday workout',description='Cardio and Strength Training';Request-2: User-B POST /api/workouts with parameters title='Tuesday workout',description='Yoga and Stretching';Response-2: Error with parameters message='Access Denied']|0
Context: A music streaming app where each user can only access and modify their own playlists. Requests: [Request-1: User-A GET /playlists with parameters playlistID='Playlist-A';Response-1: OK with parameters playlistID='Playlist-A',songs=['Song-A','Song-B','Song-C']; Request-2: User-B GET /playlists with parameters playlistID='Playlist-A';Response-2: 401 Unauthorized]|0
Context: Target is an e-commerce app with 3 types of users Customer, Merchant and Admin. Customers and Merchants can only view and edit their own data. Admins can view and edit all data. Requests: [Request-1: Customer-A GET /workshop/api/shop/orders with parameters orderID='Customer-A';Response-1: OK with parameters orderID='Customer-A',totalPrice=12,items.1.name='ball',items.2.price=1;Request-2: Merchant-A GET /workshop/api/shop/orders with parameters orderID='Merchant-A';Response-2: OK with parameters orderID='Merchant-A',totalPrice=155,items.1.name='hand',items.2.price=55;Request-3: Admin GET /workshop/api/shop/orders with parameters orderID='Customer-A';Response-3: OK with parameters orderID='Customer-A',totalPrice=12,items.1.name='ball',items.2.price=1]|0
Context: A home security app where each user can only access and modify their own security settings. Requests: [Request-1: User-A GET /api/security with parameters roomID='Living Room';Response-1: OK with parameters roomID='Living Room',alarmStatus='Off',cameraStatus='On';Request-2: User-B GET /api/security with parameters roomID='Bedroom';Response-2: OK with parameters roomID='Bedroom',alarmStatus='On',cameraStatus='Off';]|0
Context: A messaging app where each user can only view and delete their own messages. Requests: [Request-1: User-A GET /api/messages with parameters messageID='Message-A';Response-1: OK with parameters messageID='Message-A',content='Hello!',sender='User-B',date='2023-06-01';Request-2: User-A DELETE /api/messages with parameters messageID='Message-B';Response-2: Error with parameters message='You are not authorized to delete Message-B.']; |0
Context: A blogging website where each user can only view and modify their own blog posts. Admins can view all blog posts. Requests: [Request-1: User-A POST /api/posts with parameters Title='My first blog', Content='This is my first blog post.';Response-1: OK with parameters postID='A123', Title='My first blog', Content='This is my first blog post.', Author='User-A'];Request-2: User-B GET /api/posts with parameters postID='A123';Response-2: Unauthorized Access with message='You do not have access to view this blog post.'];Request-3: Admin GET /api/posts with parameters postID='A123';Response-3: OK with parameters postID='A123', Title='My first blog', Content='This is my first blog post.', Author='User-A']|0
Context: A file sharing app where each user can only view and modify their own files. Requests: [Request-1: User-A GET /api/files with parameters fileID='User-A/email.docx';Response-1: OK with parameters fileID='User-A/email.docx',content='Hello World!',size=12KB;Request-2: User-B GET /api/files with parameters fileID='User-A/email.docx';Response-2: ERROR with parameters message='Unauthorized access to User-A/email.docx';Request-3: User-A POST /api/files with parameters fileContent='New Content';Response-3: OK with parameters fileID='User-A/email.docx',content='New Content',size=10KB;]|0
Context: An online game where users can create and customize their own characters. Each user can only view and modify their own character details. Requests: [Request-1: User-A POST /api/login with parameters username='User-A', password='password';Response-1: OK with parameters message='Login successful';Request-2: User-A PUT /api/character with parameters name='Character-A',strength=10,agility=5;Response-2: OK with parameters name='Character-A',strength=10,agility=5; Request-3: User-A GET /api/character;Response-3: OK with parameters name='Character-A',strength=10,agility=5;Request-4: User-B GET /api/character;Response-4: Forbidden with errorCode=403,errorMessage='You are not allowed to perform this action',errorDetails='Not authorized to view details of other user characters'] |0
Context: A calorie tracking app where users can only see and modify their own calorie intake. Requests: [Request-1: User-A GET /api/calories with parameters date='2022-04-12';Response-1: OK with parameters date='2022-04-12', totalCalories=2000;Request-2: User-B GET /api/calories with parameters date='2022-04-12';Response-2: OK with parameters date='2022-04-12', totalCalories=2500;]|0
Context: An e-commerce website where shoppers can create and place orders for products. Each shopper has a unique customer ID. Admins can view all orders while shoppers can only view their own orders. Requests: [Request-1: Admin GET /api/orders with parameters orderID=100;Response-1: OK with parameters orderID=100,customerID='Customer-A',product='Product-A',quantity=2,price=20;Request-2: Customer-A GET /api/orders with parameters orderID=200;Response-2: OK with parameters orderID=200,customerID='Customer-A',product='Product-B',quantity=1,price=30;Request-3: Customer-A PUT /api/orders with parameters orderID=200,quantity=2;Response-3: OK with parameters orderID=200,customerID='Customer-A',product='Product-B',quantity=2,price=60]|0
Context: A job portal where users can only access and modify their own job applications. Admins can view and edit all job applications. Requests: [Request-1: User-A GET /api/applications with parameters applicationID='User-A-123';Response-1: OK with parameters applicationID='User-A-123',company='Google',position='Engineer',status='Applied';Request-2: User-B GET /api/applications with parameters applicationID='User-B-456';Response-2: OK with parameters applicationID='User-B-456',company='Apple',position='Manager',status='Reviewed';Request-3: User-A GET /api/applications with parameters applicationID='User-B-456';Response-3: Forbidden]|0
Context: A stock market analysis app where users can only access their own data without allowing access to other users' data by modifying request parameters. Requests: [Request-1: User-A POST /api/watchlist with parameters symbol='AAPL', open=134, high=142, low=132, close=139;Response-1: OK with parameters message='Company added to watchlist'; Request-2: User-A GET /api/watchlist with parameters symbol='AAPL';Response-2: OK with parameters symbol='AAPL', current=142, open=134, high=142,low=132, close=139, message='Stock value returned'; Request-3: User-B GET /api/watchlist with parameters symbol='AAPL'; Response-3:Unauthorized  Access with parameters errorCode=401,errorMessage='You are not authorized to access this content.']|0
Context: An online survey application, where respondents cannot view or modify other respondents’ survey responses. Requests: [Request-1: Respondent-A POST /api/survey with parameters answer='Yes'; Response-1: OK with parameters message='Submission success';Request-2: Respondent-A GET /api/survey with parameters surveyID='123'; Response-2: OK with parameters answers=['Yes', 'No','Yes','No','No','Yes'];Request-3: Respondent-B GET /api/survey with parameters surveyID='123'; Response-3: Unauthorized Access with parameters errorCode=401,errorMessage='You are not authorized to access this content.']|0
Context: A hotel booking website where customers can only view and manage their own bookings. Requests: [Request-1: Customer-A GET /bookings with parameters bookingID='Booking-A';Response-1: OK with parameters bookingID='Booking-A',hotelName='Hotel-A',roomType='Standard',price=200;Request-2: Customer-B GET /bookings with parameters bookingID='Booking-A';Response-2: ERROR with parameters message='Unauthorized access to Booking-A';Request-3: Customer-A DELETE /bookings with parameters bookingID='Booking-B';Response-3: ERROR with parameters message='Unauthorized access to Booking-B'] |0
Context: A medical COVID-19 Vaccination management system with an Admin, Doctor and User. Requests: [Request-1: User POST /register with parameters firstName='Jane', lastName='Doe', email='janedoe@gmail.com', password='StrongPassword12*', medicalHistory='No Allergies'; Response-1: Error with parameters msg=""""""""The email address janedoe@gmail.com has already been registered.""""""""; Request-2: Doctor PUT /appointment with parameters date='2022-11-05', time='10:00', patientEmail='joedoe@yahoo.com'; Response-2: Error with parameters message='Cannot schedule the appointment. The patient joedoe@yahoo.com is already scheduled on the same day and time.'; Request-3: Admin DELETE /deleteUser with parameters email='johnsmith@yahoo.com'; Response-3: Error with parameters message='The request to delete user with email johnsmith@yahoo.com was not processed due to internal server errors.']"""""""|2
Context: An online education platform where each student can only view and modify their own course progress. Teachers cannot modify student progress. Requests: [Request-1: Student-A GET /api/progress with parameters studentID='Student-A';Response-1: OK with parameters studentID='Student-A', courses=['Course-A','Course-B','Course-C'], progress=30;Request-2: Teacher-A PUT /api/progress with parameters studentID='Student-A', course='Course-A', progress=50;Response-2: FORBIDDEN with parameters message='Access denied'.]|0
Context: A blogging app where writers can create their own articles and view only their own articles. Requests: [Request-1: Writer-A POST /api/articles with parameters title='West Bengal', body='Kolkata is the capital of West Bengal'; Response-1: OK with parameters title='West Bengal',body='Kolkata is the capital of West Bengal',message ='Article created successfully'; Request-2: Writer-A GET /api/articles with parameters articleID='123'; Response-2: OK with parameters title='West Bengal',body='Kolkata is the capital of West Bengal'; Request-3: Writer-B GET /api/articles with parameters articleID='123'; Response-3: Unauthorized Access with parameters errorCode=401,errorMessage='You are not authorized to access this content.']|0
Context: A social media app with 2 type of users User and Admin where users can DM each other. Requests: [Request-1: User-A POST /messages/send with parameters to='User-B',content='hello!';Response-1: Error with parameters message='unhandled-packet: Invalid packet format. Unable to parse packet']|2
Context: An online file sharing tool where users can only access and modify their own files. Requests: [Request-1: User-A GET /api/files with parameters fileID='File-A';Response-1: OK with parameters fileID='File-A',content='Hello World!',size=10KB;Request-2: User-B GET /api/files with parameters fileID='File-B';Response-2: OK with parameters fileID='File-B',content='Bye World!',size=8KB;]|0
Context: A restaurant ordering app where each customer can only view and modify their own orders. Requests: [Request-1: Customer-A POST /api/orders with parameters menu=['pizza','coke'];Response-1: Created with parameters orderID='Order-A',menu=['pizza','coke'],status='In Progress';Request-2: Customer-B DELETE /api/orders with parameters orderID='Order-A';Response-2: Forbidden with parameters message='You are not authorized to delete this order'] |0
Context: A social media app where users can only access their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-B',content='Nice day today!',date='2022-01-01';Request-2: User-B GET /api/posts with parameters postID='Post-A';Response-2: Not authorized]; |1
Context: A job portal where each user can view and apply only to their own job applications. Requests: [Request-1: User-A GET /api/applications;Response-1: OK with parameters applications=[{'jobID':123, 'status':'Applied'}, {'jobID':456, 'status':'Not Applied'}];Request-2: User-A PATCH /api/applications with parameters jobID=456, status='Applied';Response-2: OK with parameters message='Application updated successfully!';Request-3: User-B GET /api/applications;Response-3: OK with parameters applications=[{'jobID':123, 'status':'Applied'}, {'jobID':456, 'status':'Not Applied'}]]|1
Context: An application where users can create and view reports, where each user can only see their own reports. Requests: [Request-1: User-A POST /api/reports with parameters reportContent='create-report';Response-1: OK with parameters reportID='Report-1',reportContent='create-report';Request-2: User-A GET /api/reports with parameters reportID='Report-1';Response-2: OK with parameters reportContent='create-report';Request-3: User-A PUT /api/reports with parameters reportContent='update-report';Response-3: OK with parameters reportContent='updated-report' ] |0
Context: A news website where each user can only view and read articles they have purchased. Admins cannot view user-accessed articles. Requests: [Request-1: User-A GET /api/articles with parameters articleID='Article-A';Response-1: OK with parameters articleID='Article-A',content='Breaking News...!';Request-2: Admin GET /api/articles with parameters articleID='Article-A';Response-2: Error with parameters message='You are not authorized to access Article-A file'.']|0
Context: A university grading system where each faculty member can only view and manage student grades for their own courses. Requests: [Request-1: Faculty-A GET /grades with parameters courseID='Course-A';Response-1: OK with parameters studentID='Student-A',courseID='Course-A',grade=85;Request-2: Faculty-B GET /grades with parameters courseID='Course-A';Response-2: ERROR with parameters message='Unauthorized access to Course-A';Request-3: Faculty-A PUT /grades with parameters studentID='Student-B', courseID='Course-B', grade=65;Response-3: ERROR with parameters message='Unauthorized access to Course-B']|0
Context: A social media app where each user can access and modify their own profile only. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters userID='User-A', name='Alice', bio='Software Engineer';Request-2: User-A PUT /api/profile with parameters bio='Doctor';Response-2: OK with parameters userID='User-A', name='Alice', bio='Doctor';Request-3: User-B GET /api/profile with parameters userID='User-A';Response-3: Unauthorized Access with message='You do not have access to modify this user profile data.']|0
Context: A content management system where each content creator can only manage their own content. Editors can edit all content, but cannot publish the content. Admins can publish any content. Requests: [Request-1: Creator-A GET /api/content with parameters contentID='Content-A';Response-1: OK with parameters title='Title-A',description='Description-A',content='Content-A',status='draft';Request-2: Editor-A PUT /api/content with parameters contentID='Content-A', content='New Content';Response-2: OK with parameters title='Title-A',description='Description-A',content='New Content',status='draft';Request-3: Admin PUT /api/content with parameters contentID='Content-A', status='published';Response-3: OK with parameters title='Title-A',description='Description-A',content='New Content',status='published']|0
Context: A social media platform where users can only view and post on their own profile. Requests: [Request-1: User-A GET /api/posts with parameters userID='User-A';Response-1: OK with parameters userID='User-A',postContent='This is my post',date='05-05-2023';Request-2: User-B GET /api/posts with parameters userID='User-A';Response-2: Not Authorized]|0
Context: An online-library with different user types such as guests, subscribers and library staff. Requests: [Request-1: Subscriber POST /searchBook with parameters title='Harry Potter and the half-blood prince'; Response-1: Error with parameters message=""""""""Book not found: Multiple entries found under the title 'Harry Potter and the half-blood prince'.""""""""; Request-2: Guest POST /register with parameters name='Jane Doe', email='janedoe@gmail.com', password='Password123'; Response-2: Error with parameters message=""""""""Registration failed: Email domain janedoe@gmail.com not allowed. Please try again using a valid email domain.""""""""; Request-3: Library Staff PUT /bookInventory/supply with parameters bookName='To kill a mockingbird', quantity=50; Response-3: Error with parameters message=""""""""Stock supply failed. Quantity to be added should range between 1 and 25. Error occurred on book with id 246-01-35.""""""""]"""""""|2
Context: A banking app where customers can only view and manage their own accounts. Requests: [Request-1: Customer-A GET /api/accounts with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A',balance=56000,accountType='Checking';Request-2: Customer-B GET /api/accounts with parameters accountID='Account-A';Response-2: ERROR with parameters message='Unauthorized access to Account-A';Request-3: Customer-A PUT /api/accounts with parameters accountID='Account-B', balance=56700;Response-3: ERROR with parameters message='Unauthorized access to Account-B'] |0
Context: A social media app where users can only view and modify their own profile information. Requests: [Request-1: User-A GET /profiles with parameters userID='User-A';Response-1: OK with parameters userID='User-A', name='John Doe', bio='I love music', profilePic='user-a-pic.jpg';Request-2: User-B GET /profiles with parameters userID='User-A';Response-2: ERROR with parameters message='Unauthorized access to User-A profile';Request-3: User-A PUT /profiles with parameters bio='I love playing sports', profilePic='new-pic.jpg';Response-3: OK with parameters userID='User-A', name='John Doe', bio='I love playing sports', profilePic='new-pic.jpg']|0
Context: A hotel booking website where each user can only view and modify their own booking information. Requests: [Request-1: User-A GET /api/bookings with parameters bookingID='User-A/booking-1';Response-1: OK with parameters bookingID='User-A/booking-1',checkinDate='2022-01-01',checkoutDate='2022-01-05';Request-2: User-A PUT /api/bookings with parameters bookingID='User-A/booking-1',checkinDate='2022-01-02',checkoutDate='2022-01-04';Response-2: OK with parameters bookingID='User-A/booking-1',checkinDate='2022-01-02',checkoutDate='2022-01-04']|0
Context: A book rental app where each user can only access and modify their own lists of rented books. The rental company cannot view these lists. Requests: [Request-1: User-A POST /api/rentals with parameters bookID='Book-A', startDate='2024-05-02', endDate='2024-05-09';Response-1: CREATED with parameters rentalID='123', userID='User-A', bookID='Book-A', startDate='2024-05-02', endDate='2024-05-09';Request-2: Rental Company GET /api/rentals with parameters rentalID='123';Response-2: FORBIDDEN with parameters message='Access denied'.]|0
Context: A food ordering app where users can only access their own order history without allowing access to other users orders by modifying request parameters. Request: [Request-1: User-A POST /api/orders with parameters restaurant='Food Factory', items=['Pizza', 'Pasta'], address='101 Main Street';Response-1: OK with parameters status='Processing', restaurant='Food Factory', items=['Pizza', 'Pasta'], address='101 Main Street';Request-2: User-A GET /api/orders with parameters orderID='123';Response-2:  OK with parameters status='Delivered', restaurant='Food Factory', items=['Pizza', 'Pasta'], address='101 Main Street';Request-3: User-B GET /api/orders with parameters orderID='123'; Response-3: Unauthorized Access with parameters errorCode=401,errorMessage='You are not authorized to access this content.']|0
Context: A recipe management system where each user can only view and add recipes to their own account. Admins can view and manage all recipes. Requests: [Request-1: User-A GET /api/recipes;Response-1: OK with parameters recipes=['Recipe-1', 'Recipe-2'];Request-2: Admin GET /api/recipes;Response-2: OK with parameters recipes=['Recipe-1', 'Recipe-2', 'Recipe-3'];Request-3: Admin DELETE /api/recipes with parameters recipeID='Recipe-2';Response-3: OK with parameters success=true,message='Recipe deleted successfully']|0
Context: A banking website where each customer can only view and modify their own account details. Requests: [Request-1: Customer-A GET /api/accounts with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A',balance=1000,accountType='Checking',createdOn='2023-02-01',customerId='Customer-A';Request-2: Customer-B GET /api/accounts with parameters accountID='Account-A';Response-2: OK with parameters accountID='Account-A',balance=1000,accountType='Checking',createdOn='2022-10-01',customerId='Customer-A']|1
Context: A web app for managing company's employee records. Each employee has a unique employee ID. An HR user can view and edit all employee records. Other employees can only view their own records. Requests: [Request-1: HR-User PUT /api/employee with parameters empID='Employee-A', salary=10000, bonus=2000;Response-1: OK with empID='Employee-A',salary=10000,bonus=2000; Request-2: Manager-A PUT /api/employee with parameters empID='Manager-A',salary=-1,bonus=-1;Response-2: Forbidden with errorCode=403,errorMessage='You are not allowed to perform this action',errorDetails='Not authorized to modify other employees salary or bonus';Request-3: Employee-A GET /api/employee with parameters empID='Employee-A';Response-3: OK with empID='Employee-A',salary=10000,bonus=2000]|0
Context: An e-learning platform where each student can only view and modify their own course progress. Requests: [Request-1: Student-A GET /courses with parameters courseID='Course-A';Response-1: OK with parameters courseID='Course-A', progress=25%;Request-2: Student-B PUT /courses with parameters courseID='Course-A', progress=30%;Response-2: Forbidden with parameters message='You are not authorized to update progress for this course']|0
Context: A ticket booking website where customers can only view and manage their own tickets. Requests: [Request-1: Customer-A GET /api/tickets with parameters ticketID='Ticket-123';Response-1: OK with parameters ticketID='Ticket-123',event='Event-A',date='2024-06-01',price=100;Request-2: Customer-B GET /api/tickets with parameters ticketID='Ticket-123';Response-2: Forbidden with parameters message='You are not authorized to access this ticket'] |0
Context: A fitness app where each user can only view and update their own workout logs. Trainers cannot view logs of other users. Requests: [Request-1: User-A GET /api/workout with parameters userID='User-A';Response-1: OK with parameters workoutID='171',duration=60,caloriesBurned=500;Request-2: Trainer GET /api/workout with parameters userID='User-B';Response-2: Error with parameters message='You are not authorized to access User-B workout logs.']; |0
Context: A ride-sharing app that connects passengers with drivers. Each passenger can only see their own ride history. Drivers can view detailed information about their own rides and earnings. Requests: [Request-1: Passenger-A GET /api/rides with parameters rideId='Ride-A';Response-1: OK with parameters rideId='Ride-A',driver='Driver-A',destination='Destination-A';Request-2: Passenger-B GET /api/rides with parameters rideId='Ride-B';Response-2: OK with parameters rideId='Ride-B',driver='Driver-B',destination='Destination-B';Request-3: Driver-A GET /api/rides with parameters rideId='Ride-A';Response-3: OK with parameters rideId='Ride-A',passenger='Passenger-A',origin='Origin-A',destination='Destination-A',paymentAmount='10$']|0
Context: A task management app where team members can only view and manage their own tasks. Requests: [Request-1: TeamMember-A GET /api/tasks with parameters taskID='Task-A';Response-1: OK with parameters taskID='Task-A',description='Finish Project-A',status='In Progress';Request-2: TeamMember-B GET /api/tasks with parameters taskID='Task-A';Response-2: ERROR with parameters message='Unauthorized access to Task-A';Request-3: TeamMember-A PUT /api/tasks with parameters taskID='Task-B', status='Completed';Response-3: ERROR with parameters message='Unauthorized access to Task-B']|0
Context: A music streaming platform where each user can access only their own playlists and saved songs. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='User-A/playlist-1';Response-1: OK with parameters playlistID='User-A/playlist-1',songs=['Song-1', 'Song-2'];Request-2: User-A POST /api/playlists with parameters name='New Playlist',songs=['Song-3'];Response-2: OK with parameters playlistID='User-A/playlist-2',songs=['Song-3'];Request-3: User-A GET /api/songs with parameters songID='User-A/saved-songs';Response-3: OK with parameters songID='User-A/saved-songs',songs=['Song-4', 'Song-5'];Request-4: User-A POST /api/songs with parameters songID='Song-6';Response-4: OK with parameters songID='User-A/saved-songs',songs=['Song-4', 'Song-5', 'Song-6']]|0
Context: A banking app where each customer can only access and modify their own account. Requests: [Request-1: Customer-A GET /account with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A',balance=1500;Request-2: Customer-B GET /account with parameters accountID='Account-A';Response-2: 401 Unauthorized]|0
Context: A file sharing web application where users can only view and modify their own files. Requests: [Request-1: User-A POST /api/files with parameters fileContent='Content-A';Response-1: Created with parameters fileID='User-A/file-123',content='Content-A',size=100KB;Request-2: User-B GET /api/files with parameters fileID='User-A/file-123';Response-2: Forbidden with parameters message='You are not authorized to access this file']|0
Context: A social media platform where users can update their profile information. Requests: [Request-1: User-A PUT /api/profile with parameters name='User-A';Response-1: OK with parameters name='User-A';Request-2: User-A GET /api/profile;Response-2: OK with parameters name='User-A', email='user-a@example.com', bio='A developer';Request-3: User-A PUT /api/profile with parameters email='new-user-a@example.com';Response-3: OK with parameters email='new-user-a@example.com', bio='A developer']|0
Context: A library management system where librarians should be able to modify the book catalog and customers should only be able to view existing records. Requests: [Request-1: Librarian-A POST/api/inventory with parameters book='The Joy of Java',author='John X',ISBN='0001';Response-1: OK with parameters ISBN='0001',author='John X',bookTitle='The Joy of Java';Request-2: Customer-A GET/api/inventory with parameters ISBN='0001';Response-2: OK with parameters ISBN='0001',author='John X',bookTitle='The Joy of Java']|0
Context: An online exam portal where students can only view and change their own exam date. Requests: [Request-1: Student-A PUT /api/exam with parameters date='2023-08-09';Response-1: OK with parameters date='2023-08-09'; Request-2: Student-A GET /api/exam;Response-2: OK with parameters date='2023-08-09'; Request-3: Administrator GET /api/exam;Response-3: Forbidden with errorCode=403,errorMessage='You are not allowed to perform this action',errorDetails='Not authorized to view or change other students exam details']|0
Context: An e-learning application where users can only access their own course materials. Requests: [Request-1: User-A GET /api/courses with parameters courseID='User-A/course-123';Response-1: OK with parameters courseID='User-A/course-123', materials=['Lecture slides', 'Homework assignments'];Request-2: User-B GET /api/courses with parameters courseID='User-A/course-123';Response-2: 302 Moved Permanently with parameters redirect='User-A/course-123';Response-3: OK with parameters courseID='User-A/course-123', materials=['Lecture slides', 'Homework assignments']]|1
Context: A blog platform with 2 types of users: Writer and Editor. Writers can create, edit and delete their own posts, while editors can create, edit and delete any post but do not have access to user information. Requests: [Request-1: Writer-A DELETE /posts with parameters postId='19a8me8' ; Response-1: Error with parameters message='Post with postId 19a8me8 not found.'; Request-2: Editor-A PUT /posts with parameters postId='24b1fc5', title='My awesome post', content='This post is the best!'; Response-2: Bad Request with parameters error='Unable to process request. Please contact support.']|2
Context: A banking app where each user can see only their own account details. Requests: [Request-1: User-A GET /api/accounts with parameters account-number='123';Response-1: OK with parameters account-number='123', balance=1000;Request-2: User-B GET /api/accounts with parameters account-number='456';Response-2: OK with parameters account-number='456', balance=2000;Request-3: User-A GET /api/accounts with parameters account-number='456';Response-3: OK with parameters account-number='456', balance=2000]|1
Context: A stock management system with 2 types of users User and Admin where Users can only view and manage their own inventory. Admins can view and manage all inventory. Requests: [Request-1: Admin GET /api/inventory with parameters userID='admin302';Response-1: OK with parameters database='inventory-db',hostname='db_server.local',content=[{itemID=1,itemName='apples',quantity=100},{itemID=2,itemName='oranges',quantity=50}];Request-2: User-A GET /api/inventory with parameters userID='User-A-22';Response-2: OK with parameters database='inventory-db',hostname='db_server.local',content=[{itemID=24,itemName='juice',quantity=10},{itemID=25,itemName='soda',quantity=20}];]|2
Context: A messaging app where users can only access their own messages. Requests: [Request-1: User-A GET /api/messages with parameters chatID='Chat-A';Response-1: OK with parameters chatID='Chat-A',messages=['Hi', 'How are you?'];Request-2: User-B GET /api/messages with parameters chatID='Chat-B';Response-2: OK with parameters chatID='Chat-B',messages=['Thank you!', 'See you later.'];Request-3: User-A GET /api/messages with parameters chatID='Chat-B';Response-3: OK with parameters chatID='Chat-B',messages=['Thank you!', 'See you later.']]|1
Context: A healthcare management system where each user has access only to their own medical records. Requests: [Request-1: User-A GET /api/medical with parameters patientID='User-A';Response-1: OK with parameters patientID='User-A',bloodType='O+',height='175cm',weight='65kg';Request-2: User-A PUT /api/medical with parameters height='180cm';Response-2: OK with parameters patientID='User-A',bloodType='O+',height='180cm',weight='65kg']|0
Context: An online booking system where each agent only has access to their own bookings information. Requests: [Request-1: Agent-A GET /api/bookings with parameters bookingID='1';Response-1: OK with parameters bookingID='1',schedule='10:00am',status='confirmed';Request-2: Agent-B GET /api/bookings with parameters bookingID='2';Response-2: OK with parameters bookingID='2',schedule='2:00pm',status='unconfirmed']|0
Context: A test management system where each student can only access their own tests and grades. Teachers can access all tests and grades, and grade tests. Requests: [Request-1: Student-A GET /api/tests with parameters testID='Test-A';Response-1: OK with parameters questions=['Question-1','Question-2','Question-3'];Request-2: Student-A GET /api/results with parameters testID='Test-A';Response-2: OK with parameters results={'Question-1':['Answer1'],'Question-2':['Answer2'],'Question-3':['Answer3']};Request-3: Teacher GET /api/tests with parameters testID='Test-A';Response-3: OK with parameters questions=['Question-1','Question-2','Question-3'],answers=['Answer1','Answer2','Answer3'],status='graded';Request-4: Teacher GET /api/results with parameters testID='Test-A';Response-4: OK with parameters results={'Student-A':['Answer1','Answer2','Answer3'],'Student-B':['Answer4','Answer5','Answer6']}]|0
Context: A banking app where each customer can only view and modify their own account details. Requests: [Request-1: Customer-A GET /api/account with parameters accountNumber='Acct-123';Response-1: OK with parameters accountNumber='Acct-123',balance=5000;Request-2: Customer-B GET /api/account with parameters accountNumber='Acct-123';Response-2: Forbidden with parameters message='You are not authorized to access this account']|0
Context: A payment processing application with different user roles. Requests: [Request-1: Employee POST /createAccount with parameters firstName='John', lastName='Doe', email='johndoe@gmail.com', password='strongpassword!'; Response-1: Error with parameters msg='The email address johndoe@gmail.com already exists'; Request-2: Manager POST /generateReport with parameters reportType='Daily', date='2022-07-01'; Response-2: Error with parameters message='Internal Server Error: java.lang.NullPointerException at report.generate() line 54'; Request-3: Administrator DELETE /deleteUser with parameters email='janedoe@gmail.com'; Response-3: Error with parameters message='Invalid Request, cannot delete the user with email janedoe@gmail.com as they are assigned a role of Manager'.']|2
Context: A car rental app where each customer can only access and modify their own rental history. Employees can view and modify all rental histories. Requests: [Request-1: Customer-A GET /api/rentals with parameters rentalID='Rental-A';Response-1: OK with parameters rentalID='Rental-A',carType='SUV',pickupDate='2024-07-01',returnDate='2024-07-05';Request-2: Employee GET /api/rentals with parameters rentalID='Rental-A';Response-2: OK with parameters rentalID='Rental-A',carType='SUV',pickupDate='2024-07-01',returnDate='2024-07-05';Request-3: Customer-A DELETE /api/rentals with parameters rentalID='Rental-B';Response-3: ERROR with parameters message='Unauthorized access to Rental-B'] |0
Context: A school management system where each teacher has access to subject-wise attendance taken in their classes. Requests: [Request-1: Teacher-A GET /api/attendance with parameters teacherID='Teacher-A',date='2023-08-03',subject='Maths';Response-1: OK with parameters teacherID='Teacher-A',date='2023-08-03',subject='Maths',attendance=[{'studentID':'Student-A', 'status':'present'},{'studentID':'Student-B', 'status':'absent'},{'studentID':'Student-C', 'status':'present'}]; Request-2: Teacher-B GET /api/attendance with parameters teacherID='Teacher-B',date='2023-08-03',subject='Science';Response-2: OK with parameters teacherID='Teacher-B',date='2023-08-03',subject='Science',attendance=[{'studentID':'Student-D', 'status':'present'},{'studentID':'Student-B', 'status':'present'},{'studentID':'Student-E', 'status':'absent'}]]|0
Context: A job portal with 2 type of users Job-seeker and Recruiter where each job-seeker can create and modify their own profile. Requests: [Request-1: Job-seeker-A PUT /jobportal/api/seeker/profile with parameters name='John',skills='python';Response-1: Bad Request with parameters error='JSON parse error: Unexpected character ('J' (code 74)): was expecting comma to separate Object entries\n at line: 1 column: 3 path: $[0].value']|2
Context: A game app where each player can only view and modify their own scores and profiles. Game moderators cannot view these scores and profiles. Requests: [Request-1: Player-A GET /api/game with parameters playerName='Player-A';Response-1: OK with parameters playerName='Player-A', scores=[{'ScoreID':'123', 'ScoreValue':100 },{'ScoreID':'124', 'ScoreValue':150 }], achievements=['Level 1','Level 2'];Request-2: Moderator-A GET /api/game with parameters playerName='Player-A';Response-2: FORBIDDEN with parameters message='Access denied'.]|0
Context: A web-based email system where users can only access their own inbox and sent messages. Requests: [Request-1: User-A GET /api/inbox;Response-1: OK with parameters messages=['Message-1', 'Message-2'];Request-2: User-A GET /api/sent;Response-2: OK with parameters messages=['Message-3'];Request-3: User-A POST /api/send with parameters to='User-B', subject='New Message', content='Hello User B!';Response-3: OK with parameters status='sent']|0
Context: A music streaming app with 1 type of users Customer. Requests: [Request-1: Customer-A POST /streaming/pay with parameters cardNumber='1234123412341234',cvv='567',amount='9.99';Response-1: Error with parameters message='cardNumber=1234123412341234, cvv=567 are invalid'];|2
Context: A file sharing app with 2 types of users User and Admin. Users can upload and download their files, while Admins can manage other users' files as well. Requests: [Request-1: User-A GET /files/documents with parameters;Response-1: OK with parameters filenames=['homework.docx','research.pptx','studynotes.doc',...'];Request-2: User-B POST /files/uploads with parameters file='catpictures LOL.jpeg',size=500KB;Response-2: OK with parameters message='File uploaded successfully!';Request-3: Admin GET /files/uploads with parameters;Response-3: Internal Server Error with parameters message='An error occurred in upload(/uploads/step1): this_file_doesnt_exist.so: cannot find the file or directory';Request-4: Admin POST /files/uploads with parameters file='employee_salaries.xlsx',size=2MB;Response-4: Internal Server Error with parameters message='An error occurred in upload(/uploads/step1): Stack trace at file """"""""uploadapp/lib.php"""""""", line 28, in function handle()...'];"""""""|2
Context: An online tutoring platform where each tutor can only access their own schedules and students' information. Admins can access all tutors' schedules and student information. Requests: [Request-1: Tutor-A GET /api/schedule with parameters date='2023-05-15';Response-1: OK with parameters schedule=['10:00-11:00','13:00-14:00'];Request-2: Tutor-A GET /api/students with parameters studentID='Student-B';Response-2: OK with parameters name='Student-B',email='student-b@example.com',parentEmail='parent-b@example.com',topics=['Math','Science'];Request-3: Admin GET /api/schedule with parameters date='2023-05-15';Response-3: OK with parameters schedule=['10:00-11:00','11:00-12:00','12:00-13:00','13:00-14:00','14:00-15:00'];Request-4: Admin GET /api/students with parameters studentID='Student-A';Response-4: OK with parameters name='Student-A',email='student-a@example.com',parentEmail='parent-a@example.com',topics=['Math','English','French']]|0
Context: A music streaming app, where each user can only access and edit their own playlists. Admins can view and edit all playlists. Requests: [Request-1: User-A GET /api/playlist with parameters playlistID='User-A-123';Response-1: OK with parameters playlistID='User-A-123',title='My Playlist',songs=['Song-A', 'Song-B'];Request-2: User-B GET /api/playlist with parameters playlistID='User-B-456';Response-2: OK with parameters playlistID='User-B-456',title='My Playlist',songs=['Song-C', 'Song-D'];Request-3: User-A GET /api/playlist with parameters playlistID='User-B-456';Response-3: Forbidden]|0
Context: An online food ordering and delivery platform where customers can place food orders from restaurants. Each customer should only be able to access their own order history, but they can leave ratings and reviews for any restaurant. Requests: [Request-1: Customer-A GET /api/orders with parameters orderId='Order-A';Response-1: OK with parameters orderId='Order-A',restaurant='Restaurant-A',items=['Pizza', 'Coke'],orderAmount='20$';Request-2: Customer-B GET /api/orders with parameters orderId='Order-B';Response-2: OK with parameters orderId='Order-B',restaurant='Restaurant-B',items=['Burger', 'Fries'],orderAmount='15$';Request-3: Customer-A POST /api/review with parameters restaurantId='Restaurant-A',rating=4,review='Good food, fast delivery';Response-3: OK with parameters message='Review uploaded successfully']|0
Context: An online marketplace where each user can only view and purchase listings of their own interest. Requests: [Request-1: Buyer-A GET /marketplace with parameters productID='Product-A';Response-1: OK with parameters productID='Product-A',description='Brand New..',price=90.50,ItemLocation='Paris';Request-2: Buyer-B GET /marketplace with parameters productID='Product-B';Response-2: OK with parameters productID='Product-B',description='Original ..',price=325.70,ItemLocation='London']|0
Context: An online notes app where each user can view and edit their own notes. Requests: [Request-1: User-A GET /api/notes with parameters noteID='User-A/note-1';Response-1: OK with parameters noteID='User-A/note-1',content='This is note 1';Request-2: User-A PUT /api/notes with parameters noteID='User-A/note-1',content='New content';Response-2: OK with parameters noteID='User-A/note-1',content='New content']|0
Context: A music streaming app where each user can only view and modify their own playlists. Requests: [Request-1: User-A GET /playlists with parameters playlistID='Playlist-A';Response-1: OK with parameters playlistID='Playlist-A',name='My Playlist',songs=['song-1', 'song-2', 'song-3'];Request-2: User-B GET /playlists with parameters playlistID='Playlist-A';Response-2: ERROR with parameters message='Unauthorized access to Playlist-A';Request-3: User-A POST /playlists with parameters name='My New Playlist', songs=['song-4', 'song-5', 'song-6'];Response-3: OK with parameters playlistID='Playlist-B',name='My New Playlist',songs=['song-4', 'song-5', 'song-6']] |0
Context: A social media platform where people can only see their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='User-A/post-123';Response-1: OK with parameters postID='User-A/post-123',content='Hello World!',likes=5;Request-2: User-B GET /api/posts with parameters postID='User-A/post-123';Response-2: Forbidden with parameters message='You are not authorized to access this post']|0
Context: A banking app where each customer can only view and manage their own account. Requests: [Request-1: Customer-A GET /api/accounts with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A', balance=10000;Request-2: Customer-A POST /api/transfer with parameters accountFrom='Account-A',accountTo='Account-B',amount=500;Response-2: OK with parameters message='Transfer successful!';Request-3: Customer-B GET /api/accounts with parameters accountID='Account-A';Response-3: OK with parameters accountID='Account-A', balance=10000]|1
Context: A hotel booking website where customers can only view and manage their own bookings. Requests: [Request-1: Customer-A GET /bookings with parameters bookingID='Booking-A';Response-1: OK with parameters bookingID='Booking-A',hotelName='Hotel-A',checkinDate='2024-06-01',totalPrice=1000;Request-2: Customer-B GET /bookings with parameters bookingID='Booking-A';Response-2: Forbidden with parameters message='You are not authorized to access this booking']|0
Context: A job search website where candidates can only view and edit their own resumes. Requests: [Request-1: Candidate-A GET /api/resume with parameters resumeID='Resume-A';Response-1: OK with parameters resumeID='Resume-A',education=['Bachelor of Science'],skills=['Java','Python'],experience='3 years';Request-2: Candidate-B GET /api/resume with parameters resumeID='Resume-B';Response-2: OK with parameters resumeID='Resume-B',education=['Master of Science'],skills=['C++','Ruby'],experience='5 years';]|0
Context: An employee management system with different user types of employees and administrators. Requests: [Request-1: Employee POST /requestLeave with parameters leaveType='Annual', startDate='2022-12-12', endDate='2022-12-17'; Response-1: Error with parameters message='Leave request failed. Request overlaps with another leave request for 13/12/2022-15/12/2022'; Request-2: Administrator DELETE /deleteEmployee with parameters email='janedoe@yahoo.com'; Response-2: Error with parameters message='Failed to delete user with email janedoe@yahoo.com: User not found.'; Request-3: Employee POST /createTask with parameters taskName='Project Alpha', taskStatus='Assigned', priority='High'; Response-3: Error with parameters message='Task creation failed. Priority should be either High, Medium or Low.' ]|2
Context: A survey software where each user can only access their own surveys and results. Admins can access all surveys and results. Requests: [Request-1: User-A GET /api/surveys with parameters surveyID='Survey-A';Response-1: OK with parameters questions=['Question-1','Question-2','Question-3'];Request-2: User-A GET /api/results with parameters surveyID='Survey-A';Response-2: OK with parameters results={'Question-1':['Answer1'],'Question-2':['Answer2'],'Question-3':['Answer3']};Request-3: Admin GET /api/surveys with parameters surveyID='Survey-A';Response-3: OK with parameters questions=['Question-1','Question-2','Question-3'];Request-4: Admin GET /api/results with parameters surveyID='Survey-A';Response-4: OK with parameters results={'Question-1':['Answer1','Answer4'],'Question-2':['Answer2','Answer5'],'Question-3':['Answer3','Answer6']};]|0
Context: A document management system where each user can only access and edit their own documents. Admins can view and edit all documents. Requests: [Request-1: User-A GET /api/documents with parameters documentID='User-A-123';Response-1: OK with parameters documentID='User-A-123',title='Doc-A',content='...',timestamp='03-02-2023 11:45 AM';Request-2: User-B GET /api/documents with parameters documentID='User-B-456';Response-2: OK with parameters documentID='User-B-456',title='Doc-B',content='...',timestamp='03-02-2023 11:45 AM';Request-3: User-A GET /api/documents with parameters documentID='User-B-456';Response-3: Forbidden]|0
Context: A project management tool where each team member can manage tasks assigned to them. Requests: [Request-1: Team-Member-A GET /api/tasks with parameters taskID='Task-123';Response-1: OK with parameters taskID='Task-123',title='Update UI', status='In progress';Request-2: Team-Member-B GET /api/tasks with parameters taskID='Task-123';Response-2: Error with parameters message='Access Denied']|0
Context: A human resource management system where employees can view and update only their own personal data. Requests: [Request-1: Employee-A PUT /api/myprofile with parameters department='IT'; Response-1: OK with parameters department ='IT', message='Profile updated successfully'; Request-2: Employee-A GET /api/myprofile; Response-2: OK with parameters department='IT', role='Developer', email='employee-a@example.com'; Request-3: Employee-B GET /api/myprofile; Response-3: Unauthorized Access with parameters errorCode=401,errorMessage='You are not authorized to access this content.']|0
Context: An online marketplace for advertisements where each seller can only see their own listings. Admins can view and delete all listings. Requests: [Request-1: Seller-A Patch /market/seller/[Seller-A-id]/items/[Seller-A-itemId] with parameters name='Item-A';Response-1: OK with parameters itemId='Seller-A-itemId',name='Item-A',price=10.5,quantity=103;Request-2: Seller-A Get /market/seller/[Seller-A-id]/items/[Seller-A-itemId] with parameters;Response-2: OK with parameters itemId='Seller-A-itemId',name='Item-A',price=10.5,quantity=103];Request-4: Admin DELETE /market/seller/[Seller-A-id]/items/[Seller-A-itemId];Response-4: OK with parameters status='deleted']|0
Context: An inventory management app where each user can only view and modify items assigned to them. Requests: [Request-1: User-A GET /api/inventory with parameters itemID='Item-123';Response-1: OK with parameters itemID='Item-123', itemName='Table', Quantity=10];Request 2: User-B PUT /api/inventory with parameters itemID='Item-123', Quantity=5;Response-2: Unauthorized Access with message='You do not have access to modify this inventory item.'];Request-3: Admin GET /api/inventory with parameters itemID='Item-123';Response-3: OK with parameters itemID='Item-123', itemName='Table', Quantity=5]]|0
Context: A project management system where each user can only view and modify their own tasks. Other user's task data is not accessible. Requests: [Request-1: User-A GET /api/tasks with parameters taskID='User-A-Task-1';Response-1: OK with parameters taskID='User-A-Task-1', name='Task 1', assignee='User-A';Request-2: User-B GET /api/tasks with parameters taskID='User-B-Task-1';Response-2: OK with parameters taskID='User-B-Task-1', name='Task 2', assignee='User-B';Request-3: User-A GET /api/tasks with parameters taskID='User-B-Task-1';Response-3: Access Denied]|0
Context: A messaging app where users can only access and modify their own messages. Requests: [Request-1: User-A GET /api/messages with parameters messageID='Message-A';Response-1: OK with parameters messageID='Message-A',content='Hello World!',date='2022-03-01';Request-2: User-B GET /api/messages with parameters messageID='Message-B';Response-2: OK with parameters messageID='Message-B',content='Bye World!',date='2022-03-10';]|0
Context: A transportation service app where users can only see their own booked rides without allowing access to other users' rides by changing request parameters. Requests: [Request-1: User-A POST /api/book-ride with parameters from='201 Main Street', to='301 Main Street';Response-1: OK with parameters status='Processing', message='Ride booked';Request-2: User-A GET /api/my-rides with parameters rideID='123'; Response-2: OK with parameters status='Completed', message='Thanks for booking the ride'; Request-3: User-B GET /api/my-rides with parameters rideID='123'; Response-3: Unauthorized Access with parameters errorCode=401,errorMessage='You are not authorized to access this content.']|0
Context: A project management app where each employee can only access and modify their own tasks. Requests: [Request-1: Employee-A GET /tasks with parameters taskID='Task-A';Response-1: OK with parameters taskID='Task-A',name='Work on module 1', description='Details of the task';Request-2: Employee-B GET /tasks with parameters taskID='Task-A';Response-2: 401 Unauthorized]|0
Context: A music streaming website where users can only listen to their own playlists. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='User-A/playlist-123';Response-1: OK with parameters playlistID='User-A/playlist-123', songs=['Song-1', 'Song-2'];Request-2: User-B GET /api/playlists with parameters playlistID='User-A/playlist-123';Response-2: Error 403 Forbidden with parameters message='You are not authorized to access this playlist']|1
Context: A web-based appointment scheduling system where each user can only schedule appointments for themselves. Requests: [Request-1: User-A POST /api/appointments with parameters date='2023-06-01',time='10:00 am',duration='1 hour';Response-1: OK with parameters appointmentDate='2023-06-01',appointmentTime='10:00 am',appointmentDuration='1 hour';Request-2: User-B POST /api/appointments with parameters date='2023-06-02',time='2:00 pm',duration='30 mins';Response-2: OK with parameters appointmentDate='2023-06-02',appointmentTime='2:00 pm',appointmentDuration='30 mins';Request-3: User-A GET /api/appointments with parameters appointmentId='Appointment-A';Response-3: OK with parameters appointmentDate='2023-06-01',appointmentTime='10:00 am',appointmentDuration='1 hour']|0
Context: A movie streaming app where each user can only view and modify their own watchlist. Requests: [Request-1: User-A GET /api/watchlist with parameters movieID='123';Response-1: OK with parameters movieID='123',title='Inception',releaseDate='2010-07-16';Request-2: User-B PUT /api/watchlist with parameters movieID='123',status='Watched';Response-2: Error with parameters message='Access Denied']|0
Context: An online shopping platform where each customer can only view and modify their own shopping cart. Requests: [Request-1: Customer-A GET /api/cart with parameters productID='Prod-123';Response-1: OK with parameters items=[{productID='Prod-123',name='Product-A',price=30,quantity=1}];Request-2: Customer-B GET /api/cart with parameters productID='Prod-123';Response-2: Forbidden with parameters message='You are not authorized to access this cart'] |0
Context: A transportation company system where drivers can see a list of their assigned trips. Requests: [Request-1: Driver-A GET /api/trips with parameters tripId='1';Response-1: OK with parameters tripId='1',pickupLocation='Avenue road 5',destinationLocation='Park Avenue 42';Request-2: Driver-B GET /api/trips with parameters tripId='2';Response-2: OK with parameters tripId='2',pickupLocation='Avenue road 6',destinationLocation='Park Avenue 43'] |0
Context: An education app where each class should have different rules and restrictions. A student from a class should not be able to leave messages for another class. Requests: [Request-1: Student-A POST /api/messages with parameters messageContent='Hello, how are you?';Response-1: OK with parameters messageId='3';Request-2: Student-A POST /api/messages with parameters messageContent='Hello, Class-B!';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not authorized to perform this action.',errorDetails='Only professor and students from class-A can access this resource.']|0
Context: A video sharing platform with 2 types of users Creator and Viewer where each creator can only see their own videos. Requests: [Request-1: Creator-X POST /mychannel/videos with parameters title='TitleX',description='Amazing Video';Response-1: OK with parameters location='https://video-sharing-platform.com/create/video/Creator-X/video-1-YT-4K-2.12.2022.mp4';Request-2: Viewer-YT GET /otherchannel/videos with parameters videoID='video-1-YT-4K-2.12.2022';Response-2: Forbidden with parameters message='Access denied! Video Creator-X/video-1-YT-4K-2.12.2022.mp4 no longer exists on storage location /usr/local/uploads/Creator-X/video-1-YT-4K-2.12.2022.mp4']|2
Context: A medical system where each healthcare provider should only be able to access patient information for their own patients. Requests: [Request-1: Doctor-A GET /api/patients with parameters patientId='Patient-A';Response-1: OK with parameters patientId='Patient-A',bloodType='A+',height='165cm',weight='60kg';Request-2: Nurse-A GET /api/patients with parameters patientId='Patient-B';Response-2: OK with parameters patientId='Patient-B',bloodType='O+',height='181cm',weight='80kg']|0
Context: A banking app where each user can only access and modify their own account information. Requests: [Request-1: User-A GET /api/accounts with parameters accountNumber='User-A';Response-1: OK with parameters accountNumber='User-A',balance=5000,transactionHistory=[{'Date': '05-05-2023', 'Amount': -100}, {'Date': '12-06-2023', 'Amount': 500}];Request-2: User-B GET /api/accounts with parameters accountNumber='User-B';Response-2: OK with parameters accountNumber='User-B',balance=3000,transactionHistory=[{'Date': '03-03-2023', 'Amount': -500}, {'Date': '12-06-2023', 'Amount': 750}];|0
Context: An online shopping platform where users can only access their own order history. Requests: [Request-1: User-A GET /orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',totalAmount=120.12,date='2022-04-12';Request-2: User-B GET /orders with parameters orderID='Order-B';Response-2: OK with parameters orderID='Order-B',totalAmount=300.5,date='2022-05-15';]|0
Context: A web-based inventory management system where each user can only view and modify their own inventory data. Requests: [Request-1: User-A GET /api/inventory with parameters itemId='Item-A';Response-1: OK with parameters itemId='Item-A',itemName='Item-A',itemQuantity='100',itemPrice='10$';Request-2: User-B GET /api/inventory with parameters itemId='Item-C';Response-2: OK with parameters itemId='Item-C',itemName='Item-C',itemQuantity='50',itemPrice='5$';Request-3: User-A PUT /api/inventory with parameters itemId='Item-A',newItemQuantity='50';Response-3: OK with parameters itemId='Item-A',itemName='Item-A',itemQuantity='50',itemPrice='10$']|0
Context: A financial app with 3 types of users Investor, Broker and Admin. Each investor has an investment portfolio which they can view and modify, brokers can only view the investment portfolios of their clients. Admins can view and modify all data. Requests: [Request-1: Investor-A GET /api/portfolio with parameters portfolioID='Portfolio-A';Response-1: Forbidden with parameters message='You cannot modify Portfolio-A as it does not belong to you';Request-2: Broker-A GET /api/portfolio with parameters portfolioID='Portfolio-B';Response-2: OK with parameters portfolioID='Portfolio-B',investments=['Tesla','Facebook','Google'],values=['5','2.5','1.2'];Request-3: Investor-C GET /api/portfolio with parameters portfolioID='Portfolio-D';Response-3: Forbidden with parameters message='You cannot view Portfolio-D as it does not belong to you'].|2
Context: A blogging platform with blog authors, editors and admin. The authors can create posts and see their own published/unpublished articles. Editors can edit their own posts and all authors' posts, but cannot change the status of the posts. Admins can edit anyone's articles and set the status for each one. Requests: [Request-1: Author-A GET /api/posts;Response-1: OK with parameters posts=['Post-1', 'Post-2'];Request-2: Editor-A GET /api/posts;Response-2: OK with parameters posts=['Post-1', 'Post-2', 'Post-3'];Request-3: Editor-B PATCH /api/posts with parameters postID='Post-2',content='Updated Content';Response-3: OK with parameters postID='Post-2',content='Updated Content', status='drafted';Request-4: Admin PATCH /api/posts with parameters postID='Post-2',content='Another Updated Content',status='published';Response-4: OK with parameters postID='Post-2',content='Another Updated Content', status='published']|0
Context: A platform for online courses where each student can only access their own course content and progress. Teachers can view and modify course content and monitor student progress. Requests: [Request-1: Student-A GET /api/courses with parameters courseId='Course-A';Response-1: OK with parameters courseId='Course-A', courseName='Mathematics 101',progress='50%';Request-2: Student-B GET /api/courses with parameters courseId='Course-B';Response-2: OK with parameters courseId='Course-B', courseName='Physics 202',progress='25%';Request-3: Teacher-A PUT /api/courses with parameters courseId='Course-C',courseContent='New Course Content';Response-3: OK with parameters courseId='Course-C', courseName='Biology for Beginners',progress='0%',courseContent=['Topic-1','Topic-2']]|0
Context: An online gaming platform with 2 types of users Player and Admin where players can vote for game upgrades. Requests: [Request-1: Player-1 /upgrade with parameters gameName='World of Zombies',vote='Upgrade weapon';Response-1: Error with parameters code='500',data='Error: cannot load dependency file: headers.h. Check lib folder in C:\\program files (x86)\\Gaming\\World_of_Zombies\\source']|2
Context: A reservation booking system with users and admins. Users can only see their own reservations. Admins can see all user reservations and delete any reservation. Requests: [Request-1: User-A GET /api/bookings with parameters bookingID='User-A-booking-1234';Response-1: OK with parameters bookingID='User-A-booking-1234',arrivalDate='2023-05-10',departureDate='2023-05-20',location='Paris';Request-2: User-B GET /api/bookings with parameters bookingID='User-B-booking-5678';Response-2: OK with parameters bookingID='User-B-booking-5678',arrivalDate='2023-06-01',departureDate='2023-06-15',location='New York';Request-3: Admin GET /api/bookings with parameters bookingID='User-A-booking-1234';Response-3: OK with parameters bookingID='User-A-booking-1234',arrivalDate='2023-05-10',departureDate='2023-05-20',location='Paris';Request-4: Admin DELETE /api/bookings with parameters bookingID='User-A-booking-1234';Response-4: OK with parameters success=true,message='reservation deleted successfully']|0
Context: A car rental service where customers can only view and modify their own bookings. Requests: [Request-1: Customer-A GET /bookings with parameters bookingID='Booking-A';Response-1: OK with parameters bookingID='Booking-A',carType='SUV',pickUpDate='2024-06-01',totalPrice=500;Request-2: Customer-B PUT /bookings with parameters bookingID='Booking-A',carType='Sedan';Response-2: Forbidden with parameters message='You are not authorized to update this booking'] |0
Context: A messaging app where each user can only access and modify their own messages. The third-party company hosting these messages cannot view them. Requests: [Request-1: User-A POST /api/messages with parameters recipientID='User-B', messageContent='Hi there';Response-1: CREATED with parameters messageID='123', senderID='User-A', recipientID='User-B', messageContent='Hi there', timestamp='2024-05-02 12:15:38'; Request-2: Host GET /api/messages with parameters messageID='123';Response-2: FORBIDDEN with parameters message='Access denied'.]|0
Context: A stock trading platform where each user can only view and modify their own transaction history. Other users cannot view these transactions. Requests: [Request-1: User-A BUY with parameters stockSymbol='AAPL', quantity=100, price=150.00, timestamp='2024-05-02 12:15:38';Response-1: CREATED with parameters transactionID='123', userID='User-A', transactionType='BUY', stockSymbol='AAPL', quantity=100, price=150.00, timestamp='2024-05-02 12:15:38';Request-2: User-B GET /api/transactions with parameters transactionID='123';Response-2: FORBIDDEN with parameters message='Access denied'.]|0
Context: A cloud-based software platform where each user can only view and edit their own projects. Requests: [Request-1: User-A GET /api/projects with parameters projectId='Project-A';Response-1: OK with parameters projectId='Project-A',projectName='Project-A',creationDate='2023-06-01';Request-2: User-B GET /api/projects with parameters projectId='Project-B';Response-2: OK with parameters projectId='Project-B',projectName='Project-B',creationDate='2023-05-15';Request-3: User-A PUT /api/projects with parameters projectId='Project-A', projectDescription='New Project Description';Response-3: OK with parameters projectId='Project-A',projectName='Project-A',creationDate='2023-06-01',projectDescription='New Project Description']|0
Context: A weather app where users can only see the weather for their own location. Requests: [Request-1: User-A GET /api/weather with parameters location='New York';Response-1: OK with parameters location='New York',temperature=20C,conditions='Sunny';Request-2: User-B GET /api/weather with parameters location='San Francisco';Response-2: OK with parameters location='San Francisco',temperature=15C,conditions='Cloudy';]|0
Context: A fitness tracking app where users can view and edit their own workout data. Requests: [Request-1: User-A GET /api/workout with parameters workoutID='Workout-A';Response-1: OK with parameters workoutID='Workout-A',type='jogging',duration='30min',calories=400;Request-2: User-B GET /api/workout with parameters workoutID='Workout-B';Response-2: OK with parameters workoutID='Workout-B',type='swimming',duration='45min',calories=700;]|0
Context: A financial app where customers can view their account balance and transaction history. Each customer should only have access to their own account information. Requests: [Request-1: Customer-A GET /api/accounts with parameters accountId='Account-A';Response-1: OK with parameters accountId='Account-A',balance='$5000',transactionHistory=['Deposit $1000 on 2023-06-01', 'Withdraw $500 on 2023-06-05'];Request-2: Customer-B GET /api/accounts with parameters accountId='Account-B';Response-2: OK with parameters accountId='Account-B',balance='$2500',transactionHistory=['Deposit $500 on 2023-05-02', 'Withdraw $200 on 2023-05-10'];Request-3: Customer-A GET /api/accounts with parameters accountId='Account-B';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The account id is wrong or not authorized to display.']|0
Context: A messaging application where users can send messages to each other. Users should only be able to access their own messages. Requests: [Request-1: User-A POST /api/messages with parameters to='User-B', messageContent='Hello'; Response-1: OK with parameters messageID='Message-1', from='User-A', to='User-B', messageContent='Hello';Request-2: User-A GET /api/messages with parameters messageID='Message-1'; Response-2: OK with parameters messageID='Message-1', from='User-A', to='User-B', messageContent='Hello';Request-3: User-A DELETE /api/messages with parameters messageID='Message-1';Response-3: OK with parameters messageID='Message-1',from='User-A', to='User-B', messageContent='Hello', status='Deleted' ]  |0
Context: An online course website where each student has their own progress that they can view and modify. Requests: [Request-1: Student-A PUT /api/courses with parameters courseID='Course-B', progress=70;Response-1: OK with parameters courseID='Course-B', progress=70]; |1
Context: A stock management app where managers can only change inventory and sales, and employees can only see current inventory. Requests: [Request-1: Manager-A POST /api/inventory with parameters itemId='1',quantity=40;Response-1: OK with parameters itemId='1',quantity=40,inventoryAge='2022-06-16';Request-2: Employee-A GET /api/inventory with parameters itemID='1';Response-2: OK with parameters itemID='1', quantity=40]|0
Context: A messaging app with 2 types of users User and Admin where users can chat with each other. Chats are encrypted end-to-end. Requests: [Request-1: User-1 /messages/sent with parameters filter='spam'; Response-1: Error with parameters message='process was terminated due to uncaught signal 11 (Segmentation fault)'];|2
Context: A team collaboration app where each team member can only access their own assigned tasks. Requests: [Request-1: Team member-A GET /api/tasks with parameters taskID='Task-A';Response-1: OK with parameters taskID='Task-A',title='Make progress report',description='...',assignedTo='Team member-A',dueDate='2024-05-31',status='In progress';Request-2: Team member-B GET /api/tasks with parameters taskID='Task-B';Response-2: OK with parameters taskID='Task-B',title='Present report',description='...',assignedTo='Someone Else',dueDate='2024-06-15',status='Assigned';Request-3: Team member-A PUT /api/tasks with parameters taskID='Task-B',status='In progress';Response-3: OK with parameters message='Task updated successfully'] |1
Context: A social media platform where users can only view and modify their own profiles and posts. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters userID='User-A', name='John', bio='I love pizza';Request-2: User-A GET /api/profile with parameters userID='User-B';Response-2: Error with parameters message='Access Denied']|0
Context: A banking app where each user can only access and manage their own bank account. Requests: [Request-1: User-A POST /api/transaction with parameters amount=100, to='User-B';Response-1: Unauthorized Access with message='You cannot transfer funds from User-A to User-B'];Request-2: User-B GET /api/balance;Response-2: OK with parameters balance=5000;Request-3: User-A GET /api/balance;Response-3: OK with parameters balance=1200]|0
Context: A project management app where each project team member can only access and modify tasks assigned to them. Requests: [Request-1: User-A GET /api/projects with parameters projectID='Project-A';Response-1: OK with parameters projectID='Project-A', tasks=[{Assignee:'User-A', TaskDescription:'Implement feature', Status:'To Do'}, {Assignee:'User-B', TaskDescription:'Write tests', Status:'In Progress'}]];Request-2: User-B PUT /api/projects with parameters projectID='Project-A', taskID='Task-1', Status:'Done';Response-2: Unauthorized Access with message='You do not have access to modify Task-1'];Request-3: User-A PUT /api/projects with parameters projectID='Project-A',taskID='Task-1', Status:'Done';Response-3: OK with parameters message='Task-1 status changed successfully']|0
Context: A social media platform 'FriendsZone' that allows people to connect with one another. Requests: [Request-1: User-A POST /api/send-friend-request with parameters friendID='User-B';Response-1: OK with parameters message='Friend request has been sent successfully';Request-2: User-B POST /api/accept-friend-request with parameters friendID='User-A';Response-2: OK with parameters message='You are now friends with User-A';Request-3: User-A POST /api/send-friend-request with parameters friendID='User-C';Response-3: OK with parameters message='Friend request has been sent successfully';Request-4: User-C GET /api/friend-requests with parameters;Response-4: OK with parameters friendRequests=['User-A'];Request-5: User-C POST /api/accept-friend-request with parameters friendID='User-A';Response-5: Forbidden with parameters message='Cannot accept friend request from User-A as they have already reached the maximum number of friends allowed'].|2
Context: An online platform where each user can view and modify their own profile. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters userID='User-A',name='John Doe',email='johndoe@gmail.com',password='1234';Request-2: User-B GET /api/profile with parameters userID='User-B';Response-2: OK with parameters userID='User-B',name='Jane Doe',email='janedoe@gmail.com',password='5678';Request-3: User-A PUT /api/profile with parameters email='newemail@gmail.com';Response-3: OK with parameters userID='User-A',name='John Doe',email='newemail@gmail.com',password='1234']|0
Context: A healthcare app with 2 types of users: Doctor and Patient. Doctors can manage and view their own patients, while Patients can view their own medical records. Requests: [Request-1: Doctor-A PUT /patients with parameters patientID='111', newName='Patient Alpha', newRecord='{""""""""patientID"""""""": """"""""111"""""""", """"""""records"""""""": [{""""""""medicalRecord"""""""": """"""""annual checkup"""""""", """"""""doctor"""""""": """"""""Doctor-A""""""""}, {""""""""medicalRecord"""""""": """"""""injury"""""""", """"""""doctor"""""""": """"""""Doctor-B""""""""}]}';Response-1: OK with parameters success=true, message='Patient 111 updated successfully!';Request-2: Doctor-B DELETE /patients with parameters patientID='999', newContent='{""""""""patientID"""""""": """"""""999"""""""", """"""""records"""""""": [{""""""""medicalRecord"""""""": """"""""miscellaneous"""""""", """"""""doctor"""""""": """"""""Doctor-B""""""""}, {""""""""medicalRecord"""""""": """"""""accident"""""""", """"""""doctor"""""""": """"""""Doctor-C""""""""}]}';Response-2: Forbidden with parameters success=false, message='you are not authorized to access patient with id=999';Request-3: Patient-A PUT /medical with parameters medicalRecordID='567', newContent='{""""""""date"""""""": """"""""25-08-2020"""""""", """"""""symptoms"""""""": """"""""fatigue"""""""", """"""""diagnosis"""""""": """"""""flu""""""""}';Response-3: OK with parameters success=true, message='Medical record 567 updated successfully!';Request-4: Patient-A GET /medical with parameters;Response-4: Forbidden with parameters success=false, message='you are not authorized to access medical records for user with id=User-A_id';Request-5: Doctor-A GET /medical with parameters;Response-5: Error with parameters message='Cannot execute the query SELECT * FROM User-A_id_medical_records WHERE symptom=""""""""headache"""""""" AND date BETWEEN date1 AND date2';]"""""""|2
Context: A file sharing application where each user can access only their own files. Requests: [Request-1: User-A GET /api/files with parameters fileID='User-A/file-1';Response-1: OK with parameters fileID='User-A/file-1',content='This is my file';Request-2: User-A PUT /api/files with parameters fileID='User-A/file-1',content='This is my updated file';Response-2: OK with parameters fileID='User-A/file-1',content='This is my updated file']|0
Context: A video streaming app where each user can only view their own content. Requests: [Request-1: User-A GET /api/videos with parameters videoID='Video-A';Response-1: OK with parameters videoID='Video-A',title='Title-A',duration='00:10:05',format='mp4';Request-2: User-B GET /api/videos with parameters videoID='Video-A';Response-2: Forbidden with parameters message='You are not authorized to access this video'] |0
Context: A blogging app with 3 types of users Writers, Editors and Admins. Writers can write and edit their own blogs, Editors can edit all blogs and Admins have access to all features and users. Requests: [Request-1: Writer-A POST /blogs/new with parameters title='New blog',content='Some interesting topic';Response-1: OK with parameters message='Blog created successfully!';Request-2: Editor-A GET /blogs/all with parameters;Response-2: OK with parameters blogs=[{id:12,title:'New blog',content:'Some interesting topic',author:'Writer-A',editors=[],published=true},...];Request-3: Writer-B GET /blogs/my with parameters;Response-3: OK with parameters blogs=[{id:15,title:'Travel blog',content:'My trip to France',author:'Writer-B',editors:[Editor-C],published=false},...];Request-4: Admin POST /users/delete with parameters userId=23; Response-4: Internal Server Error with parameters message='An error occurred in deletion: duplicate key value violates unique constraint """"""""email"""""""" for key """"""""users_email_key"""""""" 'id' variable of incorrect type string';]"""""""|2
Context: A social media app where each user can only view and modify their own posts. Other users cannot view or modify posts of other users. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-A',content='Hello World!', likes=5, comments=[{'User': 'User-B', 'comment': 'Nice post!'}];Request-2: User-B GET /api/posts with parameters postID='Post-B';Response-2: OK with parameters postID='Post-B',content='Hi there!', likes=10, comments=[{'User': 'User-A', 'comment': 'Great post!'}];Request-3: User-A PUT /api/posts with parameters content='Hello World again!';Response-3: OK with parameters postID='Post-A', content='Hello World again!', likes=7, comments=[{'User': 'User-B', 'comment': 'Nice post!'},{'User': 'User-A', 'comment': 'I agree!'}]]|0
Context: An online platform where premium and standard users can have different modules and services. Paid users can have access to modules that free members can not. An authorization should be performed for each paid service. Requests: [Request-1: Standard User-A GET /api/modules with parameters moduleId='1';Response-1: Unauthorized with parameters errorCode=401, errorMessage='You are not authorized to perform this action', errorDetails='This resource requires a premium subscription';Request-2: Premium User-A GET /api/modules with parameters moduleId='1';Response-2: OK with parameters moduleId='1', moduleContent='This is premium content for users with premium membership']|0
Context: A news platform where only older articles should be accessible to users. Requests: [Request-1: User-A GET /api/articles with parameters articleID='786';Response-1: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='Not authorized to get this information';Request-2: User-A GET /api/articles with parameters articleID='585';Response-2: OK with parameters articleID='585', articleTitle='Big news of the past', articleContent='Lorem ipsum...']|0
Context: A web application where users can purchase products, where they can only view, add or purchase products that they can purchase by their role on the system. Requests: [Request-1: Customer-B GET /api/products with parameters productID='P-1';Response-1: OK with parameters productID='P-1',name='Product-1',price=20.5,stock=5;Request-4: Customer-B POST /api/purchases with parameters productID='P-1';Response-4: OK with parameters purchaseID='Purnhcase-1',productID='P-1',buyerID='Customer-B';Request-6: Manager GET /api/audit with parameters purchaseId='Purnhcase-1';Response-6: OK with parameters purchaseID='Purnhcase-1',productID='P-1',sellerID='Manager']|0
Context: A taxi booking app where customers can only view and modify their own bookings. Requests: [Request-1: Customer-A GET /api/bookings with parameters bookingID='123';Response-1: OK with parameters bookingID='123',from='New York', to='Paris',date='2024-06-01';Request-2: Customer-B DELETE /api/bookings with parameters bookingID='123';Response-2: Error with parameters message='Access Denied']|0
Context: A weather app where each user can only view weather data for their own location. Requests: [Request-1: User-A GET /api/weather with parameters location='New York';Response-1: OK with parameters location='New York', temperature=10, description='Sunny';Request-2: User-B GET /api/weather with parameters location='New York';Response-2: OK with parameters location='New York', temperature=10, description='Sunny';Request-3: User-B GET /api/weather with parameters location='Paris';Response-3: OK with parameters location='Paris', temperature=15, description='Rainy']|1
Context: A social media platform where each user can access only their own posts and messages. Requests: [Request-1: User-A GET /api/posts with parameters postID='User-A/post-1';Response-1: OK with parameters postID='User-A/post-1',content='This is my post';Request-2: User-A PUT /api/posts with parameters postID='User-A/post-1',content='This is my updated post';Response-2: OK with parameters postID='User-A/post-1',content='This is my updated post';Request-3: User-A GET /api/messages with parameters messageID='User-A/message-1';Response-3: OK with parameters messageID='User-A/message-1',content='This is my message';Request-4: User-A PUT /api/messages with parameters messageID='User-A/message-1',content='This is my updated message';Response-4: OK with parameters messageID='User-A/message-1',content='This is my updated message']|0
Context: Online platform for booking a hotel room with 2 type of users Employee and Manager,where managers can view and update employee details for their own department. Requests: [Request-1: Manager-A GET /hotel/employees with parameters departmentID='A';Response-1: OK with parameters employeeID='Emp-123', name='John Doe', designation='Software Engineer', salary=5000;Request-2: Manager-B GET /hotel/employees with parameters departmentID='B';Response-2: OK with parameters employeeID='Emp-456', name='Jane Doe', designation='Business Analyst', salary=6000;Request-3: Manager-B PUT /hotel/employees with parameters employeeID='Emp-123', salary=5500;Response-3: OK with parameters message='Salary updated successfully']|1
Context: An email service where each user can only view and modify their own emails. Requests: [Request-1: User-A GET /api/emails with parameters emailID='Email-123';Response-1: OK with parameters emailID='Email-123',subject='Meeting Reminder',message='Please attend the meeting at 2PM tomorrow';Request-2: User-B GET /api/emails with parameters emailID='Email-123';Response-2: Error with parameters message='Access Denied']|0
Context: A GPS tracking system with 2 types of users, Driver and Manager. Drivers can view & modify their own routes while Managers can view all data. Requests: [Request-1: Driver-A POST /api/routes with parameters routeID='Route-1',location='28.7041° N, 77.1025° E';Response-1: OK with parameters message='Route-1 added successfully';Request-2: Manager-A GET /api/routes with parameters locationRange='28.740 & 77.020 & 28.686 & 77.054';Response-2: OK with parameters routes=[{routeID='Route-1',location='28.7041° N, 77.1025° E',driver='Driver-A'}, {routeID='Route-2',location='28.7251° N, 77.0177° E',driver='Driver-B'}];Request-3: Driver-A PUT /api/routes with parameters routeID='Route-1',location='22.5726° N, 88.3639° E';Response-3: OK with parameters message='Route-1 modified successfully';Request-4: Manager-B GET /api/routes with parameters locationRange='28.740 & 77.020 & 28.686 & 77.054';Response-4: OK with parameters routes=[];Request-5: Driver-B POST /api/routes with parameters routeID='Route-2',location='4.2105° N, 101.9758° E';Response-5: Forbidden with parameters message='You are not authorized to modify Route-2 as it belongs to Driver-A'].|2
Context: An HR portal where employees can see their own profile and attendance data. Requests: [Request-1: Employee-A GET /api/profile with parameters;Response-1: OK with parameters name='John Doe', email='johndoe@mail.com', department='Engineering';Request-2: Employee-A GET /api/attendance with parameters;Response-2: OK with parameters date='2022-03-10', timeIn='9.00AM', timeOut='5.00PM';Request-3: Employee-B GET /api/profile with parameters;Response-3: ERROR with message='Access Denied']|0
Context: An online education platform that allows teachers to manage their assignments and quizzes. Teachers can only view and modify data for their own courses. Requests: [Request-1: Teacher-A GET /api/courses/assignments with parameters courseID='Course-A' assignmentID='Assignment-A';Response-1: OK with parameters courseID='Course-A' assignmentID='Assignment-A', title='Assignment A', description='Write an essay', dueDate='2023-06-01';Request-2: Teacher-B GET /api/courses/quizzes with parameters courseID='Course-B' quizID='Quiz-A';Response-2: OK with parameters courseID='Course-B' quizID='Quiz-A', title='Quiz A', questions=[{'question': 'What is 2+2?', 'choice1': '1', 'choice2': '2', 'choice3': '3', 'choice4': '4', 'answer': '4'}];Request-3: Teacher-A PUT /api/courses/assignments with parameters courseID='Course-A' assignmentID='Assignment-A', title='A different title', description='Write an essay on a different topic';Response-3: OK with parameters courseID='Course-A' assignmentID='Assignment-A', title='A different title', description='Write an essay on a different topic', dueDate='2023-06-01'] |0
Context: An online marketplace where each seller can only see and edit their own product listings. Admins can view and edit all product listings. Requests: [Request-1: Seller-A GET /api/listings with parameters listingID='Seller-A1';Response-1: OK with parameters listingID='Seller-A1',title='Product-A',price=12,description='Best product',sellerID='Seller-A';Request-2: Seller-A PATCH /api/listings with parameters listingID='Seller-A1',price=15;Response-2: OK with parameters listingID='Seller-A1',title='Product-A',price=15,description='Best product',sellerID='Seller-A';Request-3: Admin GET /api/listings with parameters sellerID='Seller-A';Response-3: OK with parameters listingID='Seller-A1',title='Product-A',price=15,description='Best product',sellerID='Seller-A']|0
Context: An educational app where each student can only see their own grades. Requests: [Request-1: Student-A GET /grades with parameters subjectID='Subject-A';Response-1: OK with parameters subjectID='Subject-A', grade='B+';Request-2: Student-B GET /grades with parameters subjectID='Subject-B';Response-2: OK with parameters subjectID='Subject-B', grade='A']|0
Context: An e-learning platform where each student can view and control their own courses only. Requests: [Request-1: User-A GET /school/education/user/courses with parameters courseID='Course-A';Response-1: OK with parameters courseID='Course-A',name='Mathematics 101',time='10 hours',isCompleted=False;Request-2: User-B GET /school/education/user/courses with parameters courseID='Course-A';Response-2: OK with parameters courseID='Course-A',name='Mathematics 101',time='10 hours',isCompleted=False;Request-3: User-A PUT /school/education/user/courses with parameters courseID= 'Course-A',isCompleted=True;Response-3: OK with parameters courseID='Course-A',name='Mathematics 101',time='10 hours',isCompleted=True;Request-4: User-A PUT /school/education/user/courses with parameters courseID='Course-B',isCompleted=True;Response-4: OK with parameters courseID='Course-A',name='Science 101',time='10 hours',isCompleted=True;Request-5: Faculty GET /school/education/faculty/courses with parameters courseID='Course-A';Response-5: OK with parameters courseID='Course-A',name='Mathematics 101',time='10 hours',isCompleted=False].|1
Context: An online banking app where each user can only access and modify their own account information. Requests: [Request-1: User-A GET /api/accounts with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A',balance=5000;Request-2: User-B GET /api/accounts with parameters accountID='Account-B';Response-2: OK with parameters accountID='Account-B',balance=7900;Request-3: User-A GET /api/accounts with parameters accountID='Account-B';Response-3: ERROR with message='Unauthorized access']|0
Context: An online shopping portal where customers can only see and edit their own order data. Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Customer-B PUT /api/orders with parameters orderID='Order-A',status='Refunded';Response-2: ERROR with message='Access Denied';]|0
Context: A banking app where customers can only view and modify their own account details. Requests: [Request-1: Customer-A GET /accounts with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A',balance=20000;Request-2: Customer-B GET /accounts with parameters accountID='Account-A';Response-2: Not authorized];|0
Context: A job search website where each user can only view and modify their own job applications. Requests: [Request-1: User-A POST /api/applications with parameters company='Google', position='Software Engineer', status='Applied'; Response-1: OK with parameters message='Application submitted successfully';Request-2: User-B GET /api/applications with parameters company='Google', position='Software Engineer', status='Applied';Response-2: Error with parameters message='You do not have permission to access the requested resource']|0
Context: A banking app leaking account balance in an error message Requests: [Request-1: User-A GET /accounts with parameters accountId='1234'; Response-1: Not Found with parameters message='Account not found, current balance $10,000']|2
Context: A file-sharing app, where each user can only access and download their own files. Admins can view all files. Requests: [Request-1: User-A GET /api/files with parameters fileID='User-A/document.pdf';Response-1: OK with parameters fileID='User-A/document.pdf',content='...';Request-2: User-B GET /api/files with parameters fileID='User-B/image.jpg';Response-2: OK with parameters fileID='User-B/image.jpg',content='...';Request-3: Admin GET /api/files with parameters fileID='User-A/document.pdf';Response-3: OK with parameters fileID='User-A/document.pdf',content='...']|0
Context: A CRM system with 2 types of users Salesperson and Manager. Salesperson can only view and edit their own customer information while Manager can view and edit everyone's customer information. Requests: [Request-1: Manager GET /crm/customers with parameters limit=20;Response-1: Error with parameters message=['Error executing query SELECT * FROM customers WHERE last_name ILIKE '%smith%' LIMIT 20 - Permission denied']]|2
Context: An online education platform where each student can only modify their own courses. Requests: [Request-1: Student-A GET /edu/courses with parameters courseID='2001';Response-1: OK with parameters courseID='2001',courseName='Calculus',assignments=['Assignment-1', 'Assignment-2'];Request-2: Student-A PUT /edu/courses with parameters courseID='2001',assignments=['Assignment-3'];Response-2: OK with parameters courseID='2001',courseName='Calculus',assignments=['Assignment-1', 'Assignment-2', 'Assignment-3'];Request-3: Student-B GET /edu/courses with parameters courseID='2001';Response-3: Not Found with parameters errorCode=404,errorMessage='The course with ID 2001 does not exist.']|0
Context: A web-based meeting application where each user can only join their own meetings. Admins can join and delete any meeting. Requests: [Request-1: User-A POST /api/meetings with parameters host='User-A';Response-1: OK with parameters meetingID='Meeting-A1',attendees=['User-A'],startTime='10:00',endTime='12:00';Request-2: User-A GET /api/meetings with parameters meetingID='Meeting-A1';Response-2: OK with parameters meetingID='Meeting-A1',attendees=['User-A'],startTime='10:00',endTime='12:00';Request-3: Admin GET /api/meetings with parameters meetingID='Meeting-B1';Response-3: OK with parameters meetingID='Meeting-B1',attendees=['User-C','User-D'],startTime='9:00',endTime='11:00';]|0
Context: A voting app with 1 type of users Student, where they can book their own flights. Requests: [Request-1: Student-A POST /server/service/flights with parameters from='New York', to='Paris', date='2024-06-01'; Response-1: OK with parameters flightID='123', from='New York', to='Paris',date='2024-06-01', price=1200; Request-2: Student-B POST /server/service/flights with parameters from='San Francisco', to='Tokyo', date='2024-06-15'; Response-2: OK with parameters flightID='456', from='San Francisco', to='Tokyo',date='2024-06-15', price=2000; Request-3: Student-A DELETE /server/service/flights with parameters flightID='456'; Response-3: OK with parameters]|1
Context: A food ordering app where customers can only access and modify their own orders. Restaurants can only view their orders. Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered'; Request-2: Customer-B GET /api/orders with parameters orderID='Order-B';Response-2: OK with parameters orderID='Order-B',menu=['burger','fries','coke'],status='Completed';Request-3: Customer-A PUT /api/orders with parameters orderID='Order-B',status='Cancelled';Response-3: Error, you are not authorized to access this resource.]|0
Context: a website that provides links to external sources with 2 type of users Worker and Expert, where Workers can view and manage their own healthcare records. Requests: [Request-1: Worker-A GET /healthcare with parameters WorkerID='Worker-A';Response-1: OK with parameters WorkerID='Worker-A', prescriptions=['Medicine A', 'Medicine B'], pastAppointments=[{'Expert': 'Dr. Johnson', 'Date': '05-05-2023'}, {'Expert': 'Dr. Smith', 'Date': '10-10-2023'}];Request-2: Worker-B GET /healthcare with parameters WorkerID='Worker-B';Response-2: OK with parameters WorkerID='Worker-B', prescriptions=['Medicine C', 'Medicine D'], pastAppointments=[{'Expert': 'Dr. Williams', 'Date': '06-06-2023'}, {'Expert': 'Dr. Brown', 'Date': '12-12-2023'}];Request-3: Worker-A POST /healthcare with parameters WorkerID='Worker-B', prescription='Medicine C';Response-3: OK with parameters message='Prescription added successfully']|1
Context: A cloud-based medical library service where customers can only read their own digital books with 2 type of users Patient and Doctor, where patients can view and manage their own healthcare records. Requests: [Request-1: Patient-A GET /healthcare with parameters patientID='Patient-A';Response-1: OK with parameters patientID='Patient-A', prescriptions=['Medicine A', 'Medicine B'], pastAppointments=[{'Doctor': 'Dr. Johnson', 'Date': '05-05-2023'}, {'Doctor': 'Dr. Smith', 'Date': '10-10-2023'}];Request-2: Patient-B GET /healthcare with parameters patientID='Patient-B';Response-2: OK with parameters patientID='Patient-B', prescriptions=['Medicine C', 'Medicine D'], pastAppointments=[{'Doctor': 'Dr. Williams', 'Date': '06-06-2023'}, {'Doctor': 'Dr. Brown', 'Date': '12-12-2023'}];Request-3: Patient-A POST /healthcare with parameters patientID='Patient-B', prescription='Medicine C';Response-3: OK with parameters message='Prescription added successfully']|1
Context: A learning management system where each student can only view/modify their own courses and grades. Professors can view/modify all courses and grades. Requests: [Request-1: Student-A GET /courses with parameters courseId='Course-A';Response-1: OK with parameters courseId='Course-A',name='Math',description='Introduction to calculus',grades=[{'assignment': 'Homework 1', 'grade': '90/100'}, {'assignment': 'Homework 2', 'grade': '80/100'}]];Request-2: Professor-A GET /courses with parameters courseId='Course-A';Response-2: OK with parameters courseId='Course-A',name='Math',description='Introduction to calculus',grades=[{'assignment': 'Homework 1', 'grade': '90/100'}, {'assignment': 'Homework 2', 'grade': '80/100'}]];Request-3: Student-A PUT /courses with parameters courseId='Course-A',grades=[{'assignment': 'Homework 1', 'grade': '95/100'}, {'assignment': 'Homework 2', 'grade': '85/100'}];Response-3: OK with parameters courseId='Course-A',name='Math',description='Introduction to calculus',grades=[{'assignment': 'Homework 1', 'grade': '95/100'}, {'assignment': 'Homework 2', 'grade': '85/100'}]]|0
Context: A project management app where users can view tasks assigned to them, and admins can view all tasks and assign tasks to others. Requests: [Request-1: User-A GET /api/tasks with parameters status='in-progress';Response-1: OK with parameters tasks=['task-1', 'task-2'];Request-2: User-A POST /api/tasks with parameters taskName='task-3';Response-2: OK with parameters task='task-3',assignedTo='User-A',deadline='2023-05-29';Request-3: Admin GET /api/tasks with parameters assignedTo='User-B';Response-3: OK with parameters tasks=['task-4', 'task-5'];Request-4: Admin PUT /api/tasks with parameters taskId='task-4', assignedTo='User-C';Response-4: OK with parameters taskId='task-4', assignedTo='User-C']|0
Context: A web app for a company where each employee can only view their own payroll information. Requests: [Request-1: Employee-A GET /api/payroll with parameters id=1234;Response-1: OK with parameters id=1234,name='Employee-A',salary=5000;Request-2: Employee-B GET /api/payroll with parameters id=5678;Response-2: OK with parameters id=5678,name='Employee-B',salary=6000]|0
Context: A car rental app where each user can only access and modify their own reservations. Requests: [Request-1: User-A POST /api/reservations with parameters carID='Car-A', dateFrom='2024-01-01', dateTo='2024-01-05';Response-1: OK with parameters reservationID='Reservation-A', carID='Car-A', dateFrom='2024-01-01', dateTo='2024-01-05';Request-2: User-B GET /api/reservations with parameters reservationID='Reservation-A';Response-2: NOT FOUND;Request-3: User-A DELETE /api/reservations with parameters reservationID='Reservation-A';Response-3: OK with parameters message='Reservation cancelled successfully!';Request-4: User-A GET /api/reservations with parameters reservationID='Reservation-A';Response-4: NOT FOUND]|0
Context: An online ticket booking system where each student can only view and download their own journey materials. Requests: [Request-1: Student-A GET /journey/materials with parameters materialID='Mat-A'; Response-1: OK with parameters materialID='Mat-A', content='Introduction to Python', type='video'; Request-2: Student-B GET /journey/materials with parameters materialID='Mat-B'; Response-2: OK with parameters materialID='Mat-B', content='Introduction to Java', type='pdf'; Request-3: Student-A GET /journey/materials with parameters materialID='Mat-B'; Response-3: OK with parameters materialID='Mat-B', content='Introduction to Java', type='pdf'].|1
Context: A webmail app where each user can only view and send emails from their own email account. Admins cannot view user data. Requests: [Request-1: User-A GET /api/emails with parameters emailID='User-B/Inbox/Email-1';Response-1: Forbidden;Request-2: User-B POST /api/emails with parameters to='User-A', subject='Test Email', content='Hello World!';Response-2: OK with parameters success=true;Request-3: Admin GET /api/emails with parameters emailID='User-A/Inbox/Email-1';Response-3: Forbidden]|0
Context: A calendar app where each user can only view and manage their own events. Other users cannot view or modify events. Requests: [Request-1: User-A GET /events with parameters eventID='123';Response-1: OK with parameters eventID='123',title='Meeting with John',date='2023-01-01',startTime='09:00',endTime='11:00';Request-2: User-B GET /events with parameters eventID='456';Response-2: OK with parameters eventID='456',title='Lunch with Sarah',date='2023-01-02',startTime='12:00',endTime='13:00';Request-3: User-A GET /events with parameters eventID='456';Response-3: ERROR with parameters message='Unauthorized access']|0
Context: A food ordering app where users can add, remove, and view their own orders. Users can not see orders made by other users. Requests: [Request-1: User-A POST /api/orders with parameters items=['Pizza', 'Salad', 'Water']; Response-1: OK with parameters orderID='User-A-01', items=['Pizza', 'Salad', 'Water'], price=15.99; Request-2: User-A GET /api/orders with parameters orderID='User-A-01'; Response-2: OK with parameters orderID='User-A-01', items=['Pizza', 'Salad', 'Water'], price=15.99; Request-3: User-B GET /api/orders with parameters orderID='User-A-01'; Response-3: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.', errorDetails='This order is not authorized to display.']|0
Context: A banking application with the capability of issuing loans to customers based on their credit history and income. Request: [Request-1: User-A POST /loans with parameters amount=50000; Response-1: Bad Request with parameters success=false, message='Error: dbInsert failed. Query: """"""""INSERT INTO loans (id, amount, interest, balance, term, start_date, end_date) VALUES (886102, 50000, 2, 2500, 24, '2022-10-01', '2024-10-01')"""""""". Unknown column \'balance\' in field list'; Request-2: Admin GET /loans with no parameters; Response-2: OK with parameters success=true, data=[{'id': 885431, 'amount': 40000, 'interest': 3, 'balance': 4000, 'term': 24, 'start_date': '2022-05-01', 'end_date': '2024-05-01', 'status': 'approved'}]; Request-3: Admin DELETE /loans with parameters id=885431; Response-3: OK with parameters success=true, message='Loan deleted successfully'; Request-4: Admin GET /loans with parameters id=885431; Response-4: Not Found with parameters success=false, message='Loan not found. Invalid loan ID';]"""""""|2
Context: A hotel booking system with 3 type of users Engineers, Engineer2s and Editor. The Engineers can create posts and see their own published/unpublished articles. Engineer2s can edit their own posts and all Engineers' posts, but cannot change the status of the posts. Editors can edit anyone's articles and set the status for each one.;Request-1: Engineer-A GET /folder//posts;Response-1: OK with parameters posts=['Post-1', 'Post-2'];Request-2: Engineer2-A GET /folder//posts;Response-2: OK with parameters posts=['Post-1', 'Post-2', 'Post-3'];Request-3: Engineer2-B PATCH /folder//posts with parameters postID='Post-2',content='Updated Content',status='drafted';Response-3: OK with parameters postID='Post-2',content='Updated Content', status='drafted';Request-4: Editor PATCH /folder//posts with parameters postID='Post-2',content='Another Updated Content',status='published';Response-4: OK with parameters postID='Post-2',content='Another Updated Content', status='published’]|1
Context: A messaging app where users can only see their own messages. Requests: [Request-1: User-A GET /api/messages with parameters;Response-1: OK with parameters messageID=123, content='Hello!', sender='User-A', receiver='User-B';Request-2: User-A GET /api/messages with parameters;Response-2: OK with parameters messageID=234, content='How are you?', sender='User-B', receiver='User-A';Request-3: User-B GET /api/messages with parameters messageID=123;Response-3: ERROR with message='Access Denied']|0
Context: An ecommerce app with 3 types of users Customer, Merchant and Admin. Customers and Merchants can only view and edit their own data. Admins can view and edit all data. Requests: [Request-1: Admin GET /workshop/api/users with parameters limit=10;Response-1: Error with parameters message='Error executing query SELECT * FROM users LIMIT 10 - Permission denied']|2
Context: A payment processing platform where users can view and operate with transactions with 2 type of users Customer and Restaurant where each customer can only access and modify their own orders. Restaurant can view all orders. Requests: [Request-1: Customer-A GET /processor/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Customer-B GET /processor/orders with parameters orderID='Order-A';Response-2: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Completed';Request-3: Customer-A PUT /processor/orders with parameters status='Refunded';Response-3: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Refunded';Request-4: Customer-B PUT /processor/orders with parameters orderID='Order-A',status='Delivered';Response-4: Created with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-5: Restaurant GET /processor/orders with parameters orderID='Order-A';Response-5: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered']|1
Context: A web app for a social network where each user can only see their own posts. Requests: [Request-1: User-A PUT /api/post with parameters content='Hello World!';Response-1: OK with parameters postID=1234, content='Hello World!';Request-2: User-A GET /api/post with parameters postID=1234;Response-2: OK with parameters content='Hello World!';Request-3: User-B PUT /api/post with parameters content='I am new here.';Response-3: OK with parameters postID=5678, content='I am new here.'];Request-4: User-B GET /api/post with parameters postID=1234;Response-4: OK with parameters success=false,message='Cannot find the post you are looking for.']|0
Context: A booking system for car rental where each customer can only access and modify their own car bookings. Requests: [Request-1: Customer-A GET /bookings with parameters bookingID='Booking-A';Response-1: OK with parameters bookingID='Booking-A', car='Car-A', start_date='2024-06-01', end_date='2024-06-10'; Request-2: Customer-B GET /bookings with parameters bookingID='Booking-A';Response-2: 401 Unauthorized]|0
Context: An online reservation and booking system for a rental car service. Each agent can only view and modify reservations assigned to them. Requests: [Request-1: Agent-A GET /api/reservations with parameters reservationID='Reservation-A';Response-1: OK with parameters reservationID='Reservation-A' customerName='Customer-A Name' pickupLocation='123 Main St' dropoffLocation='456 Elm St' carType='SUV' rentalFee=150.5;Request-2: Agent-B GET /api/reservations with parameters reservationID='Reservation-B';Response-2: OK with parameters reservationID='Reservation-B' customerName='Customer-B Name' pickupLocation='678 Pine St' dropoffLocation='789 Oak St' carType='Sedan' rentalFee=75.0;Request-3: Agent-A PUT /api/reservations with parameters reservationID='Reservation-A' pickupLocation='234 Elm St';Response-3: OK with parameters reservationID='Reservation-A' customerName='Customer-A Name' pickupLocation='234 Elm St' dropoffLocation='456 Elm St' carType='SUV' rentalFee=150.5]|0
Context: An online store where users below the age of 18 cannot order certain products. Requests: [Request-1: User-A POST /api/orders with parameters item='Wine', quantity=1;Response-1: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to order this item';Request-2: User-B POST /api/orders with parameters item='Soda', quantity=2;Response-2: OK with parameters item='Soda', quantity=2]|0
Context: An HR management app where supervisors can only view, approve or deny time off requests of subordinates. Supervisors cannot access time off requests of other supervisors. Requests: [Request-1: Supervisor-A POST /api/time_off_requests with parameters employeeID='Employee-A', start_date='2022-06-01', end_date='2022-06-02', reason='Vacation'; Response-1: OK with parameters requestID='Supervisor-A-01', employeeID='Employee-A', start_date='2022-06-01', end_date='2022-06-02', reason='Vacation', status='Pending';Request-2: Supervisor-A GET /api/time_off_requests with parameters requestID='Supervisor-A-01'; Response-2: OK with parameters requestID='Supervisor-A-01', employeeID='Employee-A', start_date='2022-06-01', end_date='2022-06-02', reason='Vacation', status='Pending'; Request-3: Supervisor-B GET /api/time_off_requests with parameters requestID='Supervisor-A-01'; Response-3: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.', errorDetails='This request is not authorized to display.']|0
Context: A shopping platform with 2 types of users: Customers and Admins. Customers search for and buy products; Admins manage listings and user information. Requests: [Request-1: Customer-A GET /products with parameters name='apple'; Response-1: OK with parameters success=true, data=[{'id':'1', 'name': 'Green Apple', 'price': 2.50, 'description': 'Fresh and crunchy'}, {'id':'2', 'name': 'Red Apple', 'price': 1.99, 'description': 'Crisp and juicy'}]; Request-2: Customer-A GET /products with parameters name='orange'; Response-2: OK with parameters success=true, data=[{'id':'3', 'name': 'Florida Orange', 'price': 3.50, 'description': 'Sweet and Seedless'}, {'id':'5', 'name': 'Mandarin Orange', 'price': 1.99, 'description': 'Peels easily and great for snacking'}]; Request-3: Admin PUT /products with parameters id='2', price=2.50, qty=50; Response-3: Not Found with parameters success=false, message='Error: dbUpdate failed. Query: """"""""UPDATE products SET price=2.50, qty=50 WHERE id=\'2\'"""""""". Unknown column \'qty\' in \'products\'';]"""""""|2
Context: A ticketing system where each user can only view their own tickets. Admins can view all tickets and modify any ticket. Requests: [Request-1: User-A GET /tickets with parameters ticketId='Ticket-A';Response-1: OK with parameters ticketId='Ticket-A',subject='Issue with login',description='Unable to log in to my account',status='Open',createdTime='2022-01-01T12:00:00Z';Request-2: Admin GET /tickets with parameters ticketId='Ticket-A';Response-2: OK with parameters ticketId='Ticket-A',subject='Issue with login',description='Unable to log in to my account',status='Open',createdTime='2022-01-01T12:00:00Z';Request-3: Admin PUT /tickets with parameters ticketId='Ticket-A',status='Closed';Response-3: OK with parameters ticketId='Ticket-A',subject='Issue with login',description='Unable to log in to my account',status='Closed',createdTime='2022-01-01T12:00:00Z']|0
Context: A healthcare platform where patients can view and manage their own healthcare records. Requests: [Request-1: Patient-A GET /healthcare with parameters patientID='Patient-A';Response-1: OK with parameters patientID='Patient-A', prescriptions=['Medicine A', 'Medicine B'], pastAppointments=[{'Doctor': 'Dr. Johnson', 'Date': '05-05-2023'}, {'Doctor': 'Dr. Smith', 'Date': '10-10-2023'}]; Request-2: Patient-B GET /healthcare with parameters patientID='Patient-A';Response-2: Error, you are not authorized to access this resource.]|0
Context: An online appointment booking system with 2 type of users Seller and Buyer for advertisements where each seller can only see their own listings. Admins can view and delete all listings. Requests: [Request-1: Seller-A Patch /store/seller/[Seller-A-id]/items/[Seller-A-itemId] with parameters name='Item-A';Response-1: OK with parameters itemId='Seller-A-itemId',name='Item-A',price=10.5,quantity=103;Request-2: Seller-A Get /store/seller/[Seller-A-id]/items/[Seller-B-itemId] with parameters;Response-2: OK with parameters itemId='Seller-B-itemId',name='Item-B',price=303.8,quantity=52;]|1
Context: A car rental app where each user can only view and modify their own account details. Requests: [Request-1: User-A GET /rental/accounts with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A',balance=15000;Request-2: User-B GET /rental/accounts with parameters accountID='Account-B';Response-2: OK with parameters accountID='Account-B',balance=10000;Request-3: User-A PUT /rental/accounts with parameters accountID='Account-B',balance=12000;Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The account id is wrong or not authorized to edit.';Request-4: User-A GET /rental/accounts with parameters accountID='Account-B';Response-4: OK with parameters accountID='Account-B',balance=10000;Request-5: Admin GET /rental/accounts with parameters accountID='Account-A';Response-5: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='Admins are not allowed to access account details.']|1
Context: An online learning platform where each student can only access their own courses. Requests: [Request-1: Student-A GET /api/courses with parameters courseID=1234;Response-1: OK with parameters courseID=1234,title='Math',videoURL='...',teacher='teacher-1',length='1h';Request-2: Student-A GET /api/courses with parameters courseID=5678;Response-2: OK with parameters courseID=5678,title='Physics',videoURL='...',teacher='teacher-2',length='1.5h';Request-3: Student-B GET /api/courses with parameters courseID=1234;Response-3: OK with parameters success=false,message='Cannot find the course you are looking for.']|0
Context: A banking app where each user can only view and access their own accounts. Requests: [Request-1: User-A GET /accounts with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A',balance=1500;Request-2: User-B GET /accounts with parameters accountID='Account-A'; Response-2: Error with parameters message='You do not have permission to access the requested resource'] |0
Context: A network service with 2 type of users Audience and Expert where each Audience can only access and modify their own orders. Expert can view all orders. Requests: [Request-1: Audience-A GET /integration/backend/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Audience-B GET /integration/backend/orders with parameters orderID='Order-A';Response-2: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Completed';Request-3: Audience-A PUT /integration/backend/orders with parameters status='Refunded';Response-3: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Refunded';Request-4: Audience-B PUT /integration/backend/orders with parameters orderID='Order-A',status='Delivered';Response-4: Created with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-5: Expert GET /integration/backend/orders with parameters orderID='Order-A';Response-5: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered']|1
Context: A messaging system where each user can only view/modify their own conversations. Admins can view/modify all conversations. Requests: [Request-1: User-A GET /conversations with parameters conversationId='Conversation-A';Response-1: OK with parameters conversationId='Conversation-A',users=['User-A','User-B'],messages=[{'sender': 'User-A', 'content': 'Hello','time': '2022-01-01T12:00:00Z'}];Request-2: Admin GET /conversations with parameters conversationId='Conversation-A';Response-2: OK with parameters conversationId='Conversation-A',users=['User-A','User-B'],messages=[{'sender': 'User-A', 'content': 'Hello','time': '2022-01-01T12:00:00Z'}];Request-3: User-B POST /conversations with parameters conversationId='Conversation-A',content='Hi!';Response-3: OK with parameters messageId='Message-1', sender='User-B',content='Hi!',time='2022-01-02T12:00:00Z']|0
Context: A task management app where each user can only view and update their own tasks. Requests: [Request-1: User-A GET /tasks/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-A',content='Hello World!',timestamp='2023-01-01 23:30';Request-2: User-B GET /tasks/posts with parameters postID='Post-B';Response-2: OK with parameters postID='Post-B',content='My first post!',timestamp='2023-01-02 10:15';Request-3: User-A GET /tasks/posts with parameters postID='Post-B';Response-3: OK with parameters postID='Post-B',content='My first post!',timestamp='2023-01-02 10:15'].|1
Context: An online store where each buyer can only view/modify their own orders. Admins and merchants can view/modify all orders. Requests: [Request-1: Buyer-A GET /orders with parameters orderId='Order-A';Response-1: OK with parameters orderId='Order-A',status='Processing',totalPrice=25.5;Request-2: Admin GET /orders with parameters orderId='Order-A';Response-2: OK with parameters orderId='Order-A',status='Processing',totalPrice=25.5,shippingAddress='123 Main St',billingAddress='123 Main St';Request-3: Merchant PUT /orders with parameters orderId='Order-A',status='Shipped';Response-3: OK with parameters orderId='Order-A',status='Shipped',totalPrice='25.5']|0
Context: A messaging app where users can only view and send messages addressed to them. Requests: [Request-1: User-A POST /api/message with parameters to='User-B', message='Hello!';Response-1: OK with parameters messageID='Msg-123', to='User-B', from='User-A', message='Hello!', time='2023-08-02 12:15:45';Request-2: User-B POST /api/message with parameters to='User-A', message='Hi!';Response-2: OK with parameters messageID='Msg-456', to='User-A', from='User-B', message='Hi!', time='2023-08-02 12:16:10';Request-3: User-A POST /api/message with parameters to='User-C', message='Hello there!';Response-3: OK with parameters messageID='Msg-789', to='User-C', from='User-A', message='Hello there!', time='2023-08-02 12:17:13']|0
Context: A fitness app where each user can only view and track their own workout sessions. Requests: [Request-1: User-A GET /api/sessions with parameters sessionID='Session-A';Response-1: OK with parameters workoutID='Workout-A', date='2023-01-01', duration=30, caloriesBurned=200;Request-2: User-B GET /api/sessions with parameters sessionID='Session-A';Response-2: NOT FOUND;Request-3: User-A DELETE /api/sessions with parameters sessionID='Session-A';Response-3: OK with parameters message='Session deleted successfully!';Request-4: User-A GET /api/sessions with parameters sessionID='Session-A';Response-4: NOT FOUND]|0
Context: An HR system where each employee can only access and modify their own employment data. Requests: [Request-1: Employee-A GET /api/employment with parameters employeeID='Emp-123'; Response-1: OK with parameters employeeID='Emp-123',name='John Doe',designation='Software Engineer',salary=5000; Request-2:Employee-B PUT /api/employment with parameters employeeID='Emp-123',designation='Business Analyst'; Response-2: Error with parameters message='You do not have permission to access the requested resource'] |0
Context: An online store where each user can view only their own shopping cart and order details. Requests: [Request-1: User-A GET /api/cart;Response-1: OK with parameters items=['item1','item2','item3'];Request-2: User-B GET /api/orders;Response-2: OK with parameters orders=[{'orderID':123, 'items':['item5','item6'], 'total':100}, {'orderID':456, 'items':['item12','item13'], 'total':200}];Request-3: User-C GET /api/cart;Response-3: OK with parameters items=['item9','item10']]|0
Context: A messaging app where each user can only access and modify their own messages. Requests: [Request-1: User-A GET /api/messages with parameters messageID='Message-B';Response-1: Not authorized].|0
Context: A password manager app where each user can only access their own passwords. Admins can access and delete users' passwords. Requests: [Request-1: User-A POST /api/accounts with parameters username='User-A',password='password123';Response-1: OK with parameters accountID='User-A1',username='User-A';Request-2: User-A GET /api/passwords with parameters accountID='User-A1';Response-2: OK with parameters accountID='User-A1',password='password123';Request-3: Admin GET /api/passwords with parameters accountID='User-B1';Response-3: OK with parameters accountID='User-B1',password='admin123';]|0
Context: A file sharing website with 2 types of users User and Admin, where users can share their own files. Requests: [Request-1: User-A POST /api/files with parameters fileID='userA/file123';Response-1: Unauthorized with parameters success=false,message='User not logged in';Request-2: Admin GET /api/files with parameters fileID='/etc/passwd';Response-2: OK with parameters message='Access successful for fileID='/etc/passwd';response={'user':'root','password':'NLX...'}';]|2
Context: A recipe app where each team member can only view and update their own recipes. Requests: [Request-1: TeamMember-A GET /api/recipes with parameters taskID='Task-A';Response-1: OK with parameters taskID='Task-A',dueDate='2024-06-30',status='In Progress';Request-2: TeamMember-B GET /api/recipes with parameters taskID='Task-B';Response-2: OK with parameters taskID='Task-B',dueDate='2024-05-31',status='Completed';Request-3: TeamMember-A GET /api/recipes with parameters taskID='Task-B';Response-3: OK with parameters taskID='Task-B',dueDate='2024-05-31',status='Completed'].|1
Context: A finance app which allows users to view and manage their own credit cards. Requests: [Request-1: User-A GET /api/cards with parameters cardID='A123456';Response-1: OK with parameters cardID='A123456',limit=1000,balance=500,interestRate=10%;Request-2: User-A PUT /api/cards with parameters cardID='A123456',balance=200;Response-2: OK with parameters cardID='A123456',limit=1000,balance=200,interestRate=10%;Request-3: User-B GET /api/cards with parameters cardID='A123456';Response-3: Not Found with parameters errorCode=404,errorMessage='The card with ID A123456 does not exist.']|0
Context: An HR application that manages personal information and job applications. HR users can only access data from applicants for the positions they are responsible. Requests: [Request-1: HR-A GET /api/jobs/applications with parameters positionID='Position-A' applicantID='Applicant-A';Response-1: OK with parameters positionID='Position-A', applicantID='Applicant-A', name='Applicant Name', resume='PDF';Request-2: HR-B GET /api/jobs/applications with parameters positionID='Position-B' applicantID='Applicant-C';Response-2: OK with parameters positionID='Position-B', applicantID='Applicant-C', name='Applicant Other Name', resume='PDF';Request-3: HR-A PATCH /api/jobs/applications with parameters positionID='Position-A' applicantID='Applicant-A' status='rejected';Response-3: OK with parameters status='rejected']|0
Context: A weather app that allows users to only view their own saved locations. Other users cannot view or modify locations. Requests: [Request-1: User-A GET /locations with parameters locationID='Location-A';Response-1: OK with parameters locationID='Location-A',city='New York',temperature=15;Request-2: User-B GET /locations with parameters locationID='Location-B';Response-2: OK with parameters locationID='Location-B',city='San Francisco',temperature=20;Request-3: User-A GET /locations with parameters locationID='Location-B';Response-3: ERROR with parameters message='Unauthorized access']|0
Context: A banking app with 3 types of users Customer, Branch Manager and Admin. Customers can only view their own transactions. Branch Managers can view transaction of their branch. Admins can view transaction of all branches. Requests: [Request-1: Customer-A POST /banking/api/auth/login with parameters username='johndoe',password='pass123';Response-1: Unauthorized with parameters success=false,message='pass123 is incorrect password';Request-2: Branch Manager POST /banking/api/auth/login with parameters username='branch-1manager',password='manager123';Response-2: OK with parameters token='kjiba35...']|2
Context: A music streaming app where users can listen and manage their own playlists with 2 type of users User and Admin, where each user can only view and download their own files. Admins cannot view user files. Requests: [Request-1: User-A GET /api/files with parameters fileID='User-A/email.docx';Response-1: OK with parameters fileID='User-A/email.docx',content='Hello World!',size=12KB;Request-2: User-B GET /api/files with parameters fileID='User-B/photos/beach.jpg';Response-2: OK with parameters fileID='User-B/photos/beach.jpg', content ['...'],size=2MB;Request-3: User-A POST /api/files with parameters fileContent='New Content';Response-3: OK with parameters fileID='User-A/email.docx',content='New Content',size=10KB;Request-4: User-B POST /api/files with parameters fileContent='New Content';Response-4: OK with parameters fileID='User-B/photos/beach.jpg',content='New Content',size=1.5MB;Request-5: Admin GET /api/files with parameters fileID='User-A/email.docx';Response-5: OK with parameters fileID='User-A/email.docx',content='Hello World!',size=12KB]|1
Context: A travel agency where employees can only view their own data but HR staff can view and modify all employee records. Requests: [Request-1: Employee-A GET /rest/hr with parameters employeeID='Employee-A';Response-1: OK with parameters employeeID='Employee-A',salary='5000',department='IT']; Request-2: Employee-B GET /rest/hr with parameters employeeID='Employee-B';Response-2: OK with parameters employeeID='Employee-B',salary='6000',department='Sales']; Request-3: HR-Staff-A PUT /rest/hr with parameters employeeID='Employee-B',salary='6500';Response-3: OK with parameters employeeID='Employee-B',salary='6500',department='Sales']; Request-4: Employee-A PUT /rest/hr with parameters employeeID='Employee-A',salary='5500';Response-4: OK with parameters employeeID='Employee-A',salary='5500',department='IT']; Request-5: Employee-A GET /rest/hr with parameters employeeID='Employee-B';Response-5: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='The employee ID is not authorized to display.']|1
Context: A CRM system that maintains customer information. Each salesperson can only view and modify leads assigned to them. Requests: [Request-1: Salesperson-A GET /api/customers/leads with parameters leadID='Lead-A';Response-1: OK with parameters leadID='Lead-A' name='Lead-A Name' email='lead.a@example.com' phone='123-456-7890' status='open';Request-2: Salesperson-B GET /api/customers/leads with parameters leadID='Lead-B';Response-2: OK with parameters leadID='Lead-B' name='Lead-B Name' email='lead.b@example.com' phone='789-456-1230' status='closed';Request-3: Salesperson-A PUT /api/customers/leads with parameters leadID='Lead-A' status='closed';Response-3: OK with parameters leadID='Lead-A' name='Lead-A Name' email='lead.a@example.com' phone='123-456-7890' status='closed']|0
Context: A messaging app in which users can send messages only to their contacts. Nobody except the intended recipient should be able to read a message. Requests: [Request-1: User-A POST /api/messages with parameters destination='User-B', content='Hello, User-B!', access=private;Response-1: OK with parameters messageId='123', destination='User-B', content='Hello, User-B!', access=private;Request-2: User-A GET /api/messages with parameters messageId='123';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to access this message.'];Request-3: User-B GET /api/messages with parameters messageId='123';Response-3: OK with parameters messageId='123', sender='User-A', content='Hello, User-B!', access=private].|0
Context: A web app for an online shopping platform where each user can only complete checkout for their own cart. Requests: [Request-1: User-A PUT /api/cart with parameters cart=[item1,item2,...];Response-1: OK with parameters cart=[item1,item2,...];Request-2: User-A POST /api/checkout with parameters payment='credit card',shipping='fast';Response-2: OK with parameters total=20USD];Request-3: User-B PUT /api/cart with parameters cart=[...];Response-3: OK with parameters cart=[...];Request-4: User-B POST /api/checkout with parameters payment='paypal',shipping='standard';Response-4: OK with parameters total=100USD]|0
Context: An online store where each customer can only access and modify their own shopping cart. Requests: [Request-1: User-A GET /shopping-cart with parameters cartID='Cart-A';Response-1: OK with parameters cartID='Cart-A',items=[{'Name': 'Item-A', 'Price': 20.00,'Quantity': 2}];Request-2: User-B GET /shopping-cart with parameters cartID='Cart-A';Response-2: 401 Unauthorized]|0
Context: A file sharing app in which users can share files with other users or public. Only the owner of a file should be able to modify its attributes. Requests: [Request-1: User-A POST /api/files with parameters content='Example content', access=public;Response-1: OK with parameters url='/files/public/12345/';Request-2: User-B GET /api/files with parameters fileId='12345';Response-2: OK with parameters content='Example content', access=public;Request-3: User-B PUT /api/files with parameters fileId='12345', content='Modified content';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to modify this file.'];Request-4: User-A PUT /api/files with parameters fileId='12345', access=private;Response-4: OK with parameters url='/files/private/12345/';Request-5: User-B GET /api/files with parameters fileId='12345';Response-5: Not Found with parameters errorCode=404,errorMessage='The file was not found.'|0
Context: An attendance app where teachers can take attendance for their classes. Teachers can only access their own classes. Requests: [Request-1: Teacher-A POST /api/attendance with parameters classID='Teacher-A-101', students=['Student-A', 'Student-B', 'Student-C']; Response-1: OK with parameters attendanceID='Teacher-A-01', classID='Teacher-A-101', students=['Student-A', 'Student-B', 'Student-C'], status='Present'; Request-2: Teacher-A GET /api/attendance with parameters attendanceID='Teacher-A-01'; Response-2: OK with parameters attendanceID='Teacher-A-01', classID='Teacher-A-101', students=['Student-A', 'Student-B', 'Student-C'], status='Present'; Request-3: Teacher-B GET /api/attendance with parameters attendanceID='Teacher-A-01'; Response-3: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.', errorDetails='This attendance is not authorized to display.']|0
Context: A music streaming app where each user can only stream and download their own music content. Other users cannot download or stream other user's music. Requests: [Request-1: User-A GET /api/music with parameters songID='Song-A';Response-1: OK with parameters songID='Song-A',title='Rockstar',album='Bon Jovi',artist='Bon Jovi',duration=4:20;Request-2: User-B GET /api/music with parameters songID='Song-B';Response-2: OK with parameters songID='Song-B',title='Hotel California',album='Eagles',artist='Eagles',duration=6:30];Request-3: User-A GET /api/music with parameters songID='Song-B';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The songID is wrong or not authorized to download.';Request-4: User-A POST /api/music with parameters songTitle='Imagine';Response-4: OK with parameters songID='Song-C',title='Imagine',album='John Lennon',artist='John Lennon',duration=4:45] |1
Context: A job search website where each user can only access and modify their own resumes. Requests: [Request-1: User-A GET /resume with parameters resumeID='Resume-A';Response-1: OK with parameters resumeID='Resume-A',summary='Summary of my profile',experience=[{'Job': 'Software Engineer','Company': 'Company-A','Duration': '2 years'}];Request-2: User-B GET /resume with parameters resumeID='Resume-A';Response-2: 401 Unauthorized]|0
Context: A file-sharing app where each user can only view/modify their own files. Admins can view/modify all files. Requests: [Request-1: User-A GET /files with parameters fileId='File-A';Response-1: OK with parameters fileId='File-A',name='File-A.docx',size=50KB;Request-2: Admin GET /files with parameters fileId='File-A';Response-2: OK with parameters fileId='File-A',name='File-A.docx',size=50KB,owner='User-A';Request-3: User-A PUT /files with parameters fileId='File-A',name='New Name.docx';Response-3: OK with parameters fileId='File-A',name='New Name.docx',size=50KB]|0
Context: A ticket booking app where each user can only view and modify their own tickets. Admins can view and modify all tickets. Requests: [Request-1: User-A GET /api/tickets with parameters ticketID='Ticket-A';Response-1: OK with parameters ticketID='Ticket-A',event='Concert',seat='A-2', price=200, date='06-01-2024';Request-2: User-B GET /api/tickets with parameters ticketID='Ticket-B';Response-2: OK with parameters ticketID='Ticket-B',event='Conference',seat='B-5', price=100, date='06-15-2024';Request-Admin GET /api/tickets with parameters ticketID='Ticket-A';Response-3: OK with parameters ticketID='Ticket-A',event='Concert',seat='A-2', price=200, date='06-01-2024']|0
Context: A healthcare management system leaking prescription details in an error message Requests: [Request-1: Patient-A POST /prescriptions/new with parameters name='John-Doe', medication='Painkillers', dosage='20 mg';  Response-1: Error with parameters message='insert into prescription successful, patient name: John Doe, medication: Painkillers, dosage: 20 mg']|2
Context: An online marketplace for advertisements where each seller can only see their own listings. Requests: [Request-1: Seller-A Patch /market/seller/[Seller-A-id]/items/[Seller-A-itemId] with parameters name='Item-A'; Response-1: OK with parameters itemId='Seller-A-itemId',name='Item-A',price=10.5,quantity=103; Request-2: Seller-B GET /market/seller/[Seller-A-id]/items/[Seller-A-itemId] with parameters;Response-2: Error, you are not authorized to access this resource.]|0
Context: An e-learning platform where each student can only view and access their own course materials. Requests: [Request-1: Student-A GET /api/courses with parameters courseID='Course-A'; Response-1: OK with parameters courseID='Course-A',modules=['Module1','Module2']; Request-2: Student-B GET /api/courses with parameters courseID='Course-A'; Response-2: Error with parameters message='You do not have permission to access the requested resource']. |0
Context: An educational platform where each student can only access and modify their own assignments. Requests: [Request-1: Student-A GET /assignments with parameters assignmentID='Assignment-A';Response-1: OK with parameters assignmentID='Assignment-A', name='Math assignment', subject='Maths', due_date='2024-06-10', status='In progress'; Request-2: Student-B GET /assignments with parameters assignmentID='Assignment-A';Response-2: 401 Unauthorized]|0
Context: A video conferencing app where users can only access their own meetings and recordings. Users cannot see meetings or recordings made by other users. Requests: [Request-1: User-A POST /api/meetings with parameters participants=['User-B', 'User-C'], start_time='2022-07-01 09:00:00'; Response-1: OK with parameters meetingID='User-A-01', participants=['User-B', 'User-C'], start_time='2022-07-01 09:00:00'; Request-2: User-A GET /api/recordings with parameters meetingID='User-A-01'; Response-2: OK with parameters recordingID='User-A-01', meetingID='User-A-01', content='Meeting content'; Request-3: User-B GET /api/recordings with parameters meetingID='User-A-01'; Response-3: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.', errorDetails='This recording is not authorized to display.']|0
Context: An online course platform with 2 type of users User and Seller,where Seller can view and update User details for their own department. Requests: [Request-1: Seller-A GET /Users with parameters departmentID='A';Response-1: OK with parameters User-ID='Emp-123', name='John Doe', designation='Software Engineer', salary=5000;Request-2: Seller-B GET /Users with parameters departmentID='B';Response-2: OK with parameters User-ID='Emp-456', name='Jane Doe', designation='Business Analyst', salary=6000;Request-3: Seller-B PUT /Users with parameters User-ID='Emp-123', salary=5500;Response-3: OK with parameters message='Salary updated successfully']|1
Context: A banking app where each customer can view and manage their own transactions. Other customers cannot view or modify transactions. Requests: [Request-1: Customer-A GET /transactions with parameters transactionID='123';Response-1: OK with parameters transactionID='123',amount=10,description='Deposit', date='2022-01-01';Request-2: Customer-B GET /transactions with parameters transactionID='456';Response-2: OK with parameters transactionID='456',amount=500,description='Withdrawal', date='2022-01-02';Request-3: Customer-A GET /transactions with parameters transactionID='456';Response-3: ERROR with parameters message='Unauthorized access']|0
Context: An online marketplace for cars where each seller can view and manage their own listings. Other sellers cannot view or modify listings. Requests: [Request-1: Seller-A Patch /market/seller/[Seller-A-id]/cars/[Car-A-id] with parameters model='BMW';Response-1: OK with parameters carID='Car-A-id',make='BMW',price=50000,color='White';Request-2: Seller-B GET /market/seller/[Seller-B-id]/cars/[Car-A-id] with parameters;Response-2: ERROR with parameters message='Unauthorized access']|0
Context: A chat app where each user can only view their own chat groups. Requests: [Request-1: User-A GET /chats with parameters chatID='Chat-A';Response-1: OK with parameters chatID='Chat-A', members=['User-A', 'User-B', 'User-C'], messages=['hi', 'bye'];Request-2: User-B GET /chats with parameters chatID='Chat-A';Response-2: Forbidden]|0
Context: A banking application which does not have an authorization bypass through user-controlled key flaw. Requests: [Request-1: User-A GET /api/balance with parameters accountNumber='1234';Response-1: OK with parameters accountNumber='1234',balance=5000;Request-2: User-A GET /api/balance with parameters accountNumber='4321';Response-2: error='Not authorized'];|0
Context: A social media website with 3 types of users, User-A, User-B, and User-C. User-A can only view and post on their own profile, while User-B and User-C can view all profiles and post/comment on any profile. Requests: [Request-1: User-A GET /api/profiles with parameters userID='User-B';Response-1: Forbidden;Request-2: User-B POST /api/posts with parameters content='Hello World!';Response-2: OK with parameters postID='123', content='Hello World!', userID='User-B', date='2023-05-01';Request-3: User-C PATCH /api/profiles with parameters bio='New bio';Response-3: OK with parameters]|0
Context: A customer service app where each user can only view their own tickets. Support reps can view all tickets and modify any ticket. Requests: [Request-1: User-A GET /tickets with parameters ticketId='Ticket-A';Response-1: OK with parameters ticketId='Ticket-A',subject='Issue with order',description='I received a broken item',status='Open',createdTime='2022-01-01T12:00:00Z';Request-2: SupportRep-A GET /tickets with parameters ticketId='Ticket-A';Response-2: OK with parameters ticketId='Ticket-A',subject='Issue with order',description='I received a broken item',status='Open',createdTime='2022-01-01T12:00:00Z';Request-3: SupportRep-A PUT /tickets with parameters ticketId='Ticket-A',status='Closed';Response-3: OK with parameters ticketId='Ticket-A',subject='Issue with order',description='I received a broken item',status='Closed',createdTime='2022-01-01T12:00:00Z']|0
Context: A task management app with 3 types of users User, Manager and Admin. Users can only view and modify their own tasks. Managers can only modify their own team tasks. Admins can view and modify all tasks. Requests: [Request-1: User-A POST /api/auth/login with parameters username='user-a',password='pass123';Response-1: Unauthorized with parameters success=false,message='username not found';Request-2: Manager-A GET /api/user/[Employee-A-taskId] with parameters;Response-2: OK with parameters taskId=[Employee-A-taskId],description='employee a finish quarterly report',status='completed'; Request-3: Admin PUT /api/user/[Manager-A-taskId] with parameters;Response-3: OK with parameters taskId=[Manager-A-taskId],description='manager a delegate task to team: create department report',status='assigned']|2
Context: An inventory management platform where each employee can view and modify only their own inventory. Other employees cannot view or modify. Requests: [Request-1: Employee-A GET /inventory with parameters itemID='Item-A';Response-1: OK with parameters itemID='Item-A',quantity=10,description='Product A';Request-2: Employee-B GET /inventory with parameters itemID='Item-B';Response-2: OK with parameters itemID='Item-B',quantity=20,description='Product B';Request-3: Employee-A GET /inventory with parameters itemID='Item-B';Response-3: ERROR with parameters message='Unauthorized access']|0
Context: An online ticket booking system where users with a certain type of account can get discounts on certain tickets. The tickets must be booked through the user's account for the discount to apply. Requests: [Request-1: Free User POST /api/bookings with parameters showID='123', seatNumber=1;Response-1: OK with parameters bookingID='345', totalPrice='50';Request-2: Discount User POST /api/bookings with parameters showID='123', seatNumber=1;Response-2: OK with parameters bookingID='678', totalPrice='30';Request-3: Discount User GET /api/bookings with parameters bookingID='678';Response-3: OK with parameters bookingID='678', totalPrice='30', discount='20'];Request-4: Free User GET /api/bookings with parameters bookingID='678';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to access this booking details.'].|0
Context: A file sharing app where each user can only view and download their own files. Admins can view and delete all files. Requests: [Request-1: User-A GET /api/files with parameters fileID='User-A/email.docx';Response-1: OK with parameters fileID='User-A/email.docx',content='Hello World!',size=12KB;Request-2: User-A POST /api/files with parameters fileContent='New Content';Response-2: OK with parameters fileID='User-A/email.docx',content='New Content',size=10KB;Request-3: Admin GET /api/files with parameters fileID='User-A/email.docx';Response-3: OK with parameters fileID='User-A/email.docx',content='Hello World!',size=12KB]|0
Context: A banking app where each user can only view and modify their own account details. Admins can view and modify all data. Requests: [Request-1: User-A GET /api/accounts with parameters accountNumber=1234567890;Response-1: OK with parameters accountNumber=1234567890,accountHolder='User-A',balance=500;Request-2: User-B PUT /api/accounts with parameters accountNumber=1234567890, balance=1000;Response-2: Forbidden;Request-3: Admin POST /api/accounts with parameters accountHolder='User-C';Response-3: OK with parameters accountNumber=9876543210,accountHolder='User-C',balance=0]|0
Context: A social media website leaking profile visits in an error message Requests: [Request-1: User-A GET /profile with parameters id='123'; Response-1: Forbidden with parameters error='Unauthorized access to profile, recent visits: User-B, User-C, User-D']|2
Context: A social media platform where users can request access to another user's profile, unless explicitely blocked by that user. Requests: [Request-1: User-A PUT /api/profile with parameters name='User-A';Response-1: OK with parameters name='User-A';Request-2: User-B GET /api/profile with parameters id='User-A';Response-2: OK with parameters name='User-A', bio='A developer';Request-3: User-A PUT /api/block with parameters id='User-B', block=true;Response-3: OK with parameters blockedUser='User-B';Request-4: User-B GET /api/profile with parameters id='User-A';Response-4: Unauthorized with parameters errorCode=401, errorMessage='The user has blocked you from viewing their profile'.]|0
Context: A calorie-tracking app where each user can only view and modify their own food diary. Requests: [Request-1: User-A POST /api/food with parameters name='Apple', calories=60, date='2024-06-01'; Response-1: OK with parameters message='Food added to diary successfully';Request-2: User-B GET /api/food with parameters name='Apple', calories=60, date='2024-06-01';Response-2: Error with parameters message='You do not have permission to access the requested resource'] |0
Context: A file sharing app where each user can only access and modify their own files. Requests: [Request-1: User-A GET /api/files with parameters fileID='User-B/email.docx';Response-1: Not authorized]; |0
Context: A food delivery app with 2 types of users Customer and Driver, where Customers can view their order status. Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='order-1';Response-1: Error with parameters message='Unauthorized access - order does not belong to this customer'];[Request-2: Driver-A GET /api/orders with parameters orderID='order-2';Response-2: Error with parameters message='Order not found, it may have been canceled']|2
Context: An online event booking app with 3 types of users Attendee, Organiser and Admins. Attendees can view and modify their own events. Organisers can view and modify their own and events they organised. Admins can view and modify all events. Requests: [Request-1: Attendee-A POST /api/auth/login with parameters username='attendee-a',password='pass123';Response-1: Unauthorized with parameters success=false,message='username not found';Request-2: Organiser-A POST /api/auth/login with parameters username='organiser-a',password='pass123';Response-2: OK with parameters token='sjery8...';Request-3: Admin GET /api/event/[Organiser-A-eventId] with parameters;Response-3: OK with parameters eventId=[Organiser-A-eventId],name='Charity Drive 2021',location='Central Park',date='20-12-2022'; ]|2
Context: A HRM system where every employee can only see their own details. Requests: [Request-1: Employee-A GET /employees with parameters employeeID='Employee-A';Response-1: OK with parameters employeeID='Employee-A',department='IT',role='Engineer'; Request-2: Employee-B GET /employees with parameters employeeID='Employee-A';Response-2: Not authorized];|0
Context: An online voting system where each user can only view and modify their own account details. Requests: [Request-1: User-A GET /collection/accounts with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A',balance=15000;Request-2: User-B GET /collection/accounts with parameters accountID='Account-B';Response-2: OK with parameters accountID='Account-B',balance=10000;Request-3: User-A PUT /collection/accounts with parameters accountID='Account-B',balance=12000;Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The account id is wrong or not authorized to edit.';Request-4: User-A GET /admin/accounts with parameters accountID='Account-B';Response-4: OK with parameters accountID='Account-B',balance=10000;Request-5: Admin GET /collection/accounts with parameters accountID='Account-A';Response-5: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='Admins are not allowed to access account details.']|1
Context: A social media app with multiple types of users - User, Business and Content Creator. Requests: [Request-1: User-A GET /profile with parameters userID=123; Response-1: Error with parameters errorMessage='Cannot get profile for userID=123, this profile is marked private']|2
Context: A stock-trading platform where each user can only view/modify their own portfolio. Brokers can view all portfolios and modify any portfolio. Requests: [Request-1: User-A GET /portfolios with parameters portfolioId='Portfolio-A';Response-1: OK with parameters portfolioId='Portfolio-A',stocks=[{'tickerSymbol': 'AAPL', 'price': 148.99, 'quantity': 10}, {'tickerSymbol': 'TSLA', 'price': 740.12, 'quantity': 5}]];Request-2: Broker-A GET /portfolios with parameters portfolioId='Portfolio-A';Response-2: OK with parameters portfolioId='Portfolio-A',stocks=[{'tickerSymbol': 'AAPL', 'price': 148.99, 'quantity': 10}, {'tickerSymbol': 'TSLA', 'price': 740.12, 'quantity': 5}]];Request-3: User-A PUT /portfolios with parameters portfolioId='Portfolio-A',stocks=[{'tickerSymbol': 'AAPL', 'price': 152.32, 'quantity': 10}, {'tickerSymbol': 'TSLA', 'price': 748.98, 'quantity': 5}];Response-3: OK with parameters portfolioId='Portfolio-A',stocks=[{'tickerSymbol': 'AAPL', 'price': 152.32, 'quantity': 10}, {'tickerSymbol': 'TSLA', 'price': 748.98, 'quantity': 5}]]|0
Context: A social media app where each user can only access and modify their own posts and profile details. Requests: [Request-1: User-A GET /posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-A',content='Hello World', likes=50;Request-2: User-B GET /posts with parameters postID='Post-A';Response-2: 401 Unauthorized]|0
Context: A Sales reporting website with 3 types of users User, User2 and Privilaged-User. User and User2 can only view and edit their own data. Privilaged-User can view and edit all data. Requests: [Request-1: User-A GET /workshop/push/drive/shop/orders with parameters orderID='User-A';Response-1: OK with parameters orderID='User-A',totalPrice=12,items.1.name='ball',items.2.price=1;Request-2: User-B GET /workshop/push/drive/shop/orders with parameters orderID='User-B';Response-2: OK with parameters orderID='User-B',totalPrice=155,items.1.name='hand',items.2.price=55;Request-3: User-A GET /workshop/push/drive/shop/orders with parameters orderID='User-B';Response-3: OK with parameters orderID='User-B',totalPrice=155,items.1.name='hand',items.2.price=55]|1
Context: A project management tool where each user can only view/modify their own tasks. Managers can view/modify all tasks and users. Requests: [Request-1: User-A GET /tasks with parameters taskId='Task-A';Response-1: OK with parameters taskId='Task-A',description='Review product requirements',assignee='User-A',dueDate='2022-01-15T12:00:00Z',status='In Progress';Request-2: Manager-A GET /tasks with parameters taskId='Task-A';Response-2: OK with parameters taskId='Task-A',description='Review product requirements',assignee='User-A',dueDate='2022-01-15T12:00:00Z',status='In Progress';Request-3: User-A PUT /tasks with parameters taskId='Task-A',status='Done';Response-3: OK with parameters taskId='Task-A',description='Review product requirements',assignee='User-A',dueDate='2022-01-15T12:00:00Z',status='Done']|0
Context: A food delivery app where drivers can accept or reject delivery request, and customers can track their delivery. Requests: [Request-1: Driver-A GET /api/deliveries with parameters status='pending';Response-1: OK with parameters deliveries=['delivery-1', 'delivery-2'];Request-2: Driver-A POST /api/accept with parameters deliveryId='delivery-1';Response-2: OK with parameters delivery='delivery-1',status='accepted',driver='Driver-A';Request-3: Customer-A GET /api/deliveries with parameters orderId='order-1';Response-3: OK with parameters delivery='delivery-1',status='accepted',driver='Driver-A']|0
Context: A student information system where every student can only view and modify their own marks. Teachers can modify any student's marks. Requests: [Request-1: Student-A GET /students with parameters studentID='Student-B';Response-1: Not authorized]; |0
Context: A subscription-based streaming website where each user has their own account and can only view their own content. Requests: [Request-1: User-A GET /api/movies with parameters movieID='123';Response-1: OK with parameters movieID='123',title='Inception',year='2010',director='Christopher Nolan';Request-2: User-B POST /api/movies with parameters title='The Dark Knight',director='Christopher Nolan';Response-2: Created with parameters movieID='789',title='The Dark Knight',year='2008',director='Christopher Nolan';Request-3: User-A GET /api/movies with parameters movieID='789';Response-3: Forbidden]|0
Context: A project management tool where team members can only edit the tasks assigned to them. Requests: [Request-1: Team Member-A GET /api/tasks with parameters taskID='Task-A'; Response-1: OK with parameters taskID='Task-A', description='Finish report', status='In progress'; Request-2:Team Member-B PUT /api/tasks with parameters taskID='Task-A', status='Done'; Response-2: Error with parameters message='You do not have permission to access the requested resource'] |0
Context: A weather app in which users can see the weather in different cities. A free user can only see the current temperature in a city, while a paid user has access to additional information such as humidity, wind speed and forecast. Requests: [Request-1: Free User GET /api/weather with parameters location='Los Angeles';Response-1: OK with parameters temperature='85 F';Request-2: Paid User GET /api/weather with parameters location='Los Angeles';Response-2: OK with parameters temperature='85 F', humidity='80%', windSpeed='10 mph', forecast='Sunny'];Request-3: Free User GET /api/weather with parameters location='New York';Response-3: OK with parameters temperature='68 F', Request-4: Free User PUT /api/weather-subscription with parameters subscription='paid';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.'].|0
Context: A banking app where users can authorize payments above a certain size with a PIN or biometrics. Requests: [Request-1: User-A POST /api/payments with parameters amount=1000;Response-1: Unauthorized with parameters errorCode=401,errorMessage='You need to authorize the payment.',errorDetails='Payment authorization needed';Request-2: User-A POST /api/payments with parameters amount=1000,authorization='1234';Response-2: OK with parameters amount=1000, authorization='1234']|0
Context: A gaming website where each user can only view and edit data related to their own account. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A'; Response-1: OK with parameters userID='User-A',username='John',email='johndoe@gmail.com';Request-2: User-B PUT /api/profile with parameters userID='User-A',email='jane123@gmail.com';Response-2: Error with parameters message='You do not have permission to access the requested resource'] |0
Context: A social media platform where each user can only view and modify their own profile information. Requests: [Request-1: User-A POST /api/profile with parameters name='John Smith', age=30, gender='Male';Response-1: OK with parameters message='Profile updated successfully';Request-2: User-B GET /api/profile with parameters userID='User-A';Response-2: Error with parameters message='You do not have permission to access the requested resource'] |0
Context: A medical app where each patient can only view and update their own medical records. Requests: [Request-1: Patient-A GET /api/medical with parameters patientID='Patient-A'; Response-1: OK with parameters patientID='Patient-A',bloodType='A+',height='165cm',weight='60kg'; Request-2: Patient-B PUT /api/medical with parameters height='167cm';Response-2: Error, you are not authorized to access this resource.]|0
Context: An online store with 3 types of users: Customer, Manager, and Administrator. Customers can only view their own orders while managers and administrators can view all orders. Requests: [Request-1: Customer-A POST /api/login with parameters username='Jenny123', password='mypassword';Response-1: Unauthorized with parameters message='Invalid password. Please try again.';Request-2: Manager-A GET /api/orders with parameters;Response-2: OK with parameters orders=[{'orderId':'12345','customerName':'Jenny123','totalPrice':123.45,'orderDate':'10/01/2022'}, {'orderId':'98765','customerName':'Jake987','totalPrice':98.76,'orderDate':'09/15/2022'}];Request-3: Administrator GET /api/orders with parameters;Response-3: OK with parameters orders=[{'orderId':'12345','customerName':'Jenny123','totalPrice':123.45,'orderDate':'10/01/2022'}, {'orderId':'98765','customerName':'Jake987','totalPrice':98.76,'orderDate':'09/15/2022'}, {'orderId':'11111','customerName':'Admin','totalPrice':100.00,'orderDate':'09/20/2022'}]|2
Context: A social media platform where users have their profiles and they can only modify their own information. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters userID='User-A', name='John Doe', bio='Web Developer'; Request-2: User-A PUT /api/profile with parameters name='Jane Doe', bio='Mobile Developer'; Response-2: OK with parameters userID='User-A',name='Jane Doe',bio='Mobile Developer'; Request-3: User-B GET /api/profile with parameters userID='User-A'; Response-3: OK with parameters userID='User-A', name='Jane Doe', bio='Mobile Developer']|0
Context: A crypto trading app where each user can only buy/sell their own currencies. Requests: [Request-1: User-A GET /crypto/shares with parameters shareID='Share-A';Response-1: OK with parameters shareID='Share-A',companyName='XYZ Inc',price=127.9,quantity=100;Request-2: User-B GET /crypto/shares with parameters shareID='Share-A';Response-2: OK with parameters shareID='Share-A',companyName='XYZ Inc',price=127.9,quantity=200;Request-3: User-A PUT /crypto/shares with parameters shareID= 'Share-A',quantity=120;Response-3: OK with parameters shareID='Share-A',companyName='XYZ Inc',price=127.9,quantity=120;Request-4: User-A PUT /manage/crypto/shares with parameters shareID= 'Share-B',quantity=120;Response-4: OK with parameters parameters shareID='Share-B',companyName='ABC Inc',price=12.9,quantity=120;Request-5: Admin GET /crypto/shares with parameters shareID='Share-C';Response-5: Not Found with parameters errorCode=404,errorMessage='Share not found.'].|1
Context: An online marketing research application with two types of users: Users and Administrators. Users can participate in research studies while administrators can view and manage all research studies. Requests: [Request-1: User-A POST /api/researchstudies with parameters studyName='Marketing Trends';Response-1: OK with parameters message='You have successfully registered for the study.', studyCode='5682';Request-2: Administrator POST /api/researchstudies with parameters studyName='Marketing Trends', studyCode='5681';Response-2: Conflict with parameters message='A study with the same code already exists. Try again with a different study code.', server='www.acme.com';]|2
Context: A book store app where the customers can buy books without an account. Account holders should be able to see their order history and track their current orders. Requests: [Request-1: Customer-A POST /api/orders with parameters bookID='1', quantity=3;Response-1: OK with parameters orderID='123', status='processing';Request-2: Customer-A GET /api/orders with parameters orderID='123';Response-2: OK with parameters orderID='123', status='processing', orderDate='2023-05-15';Request-3: Customer-B GET /api/orders with parameters orderID='123';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to access this order.']|0
Context: A music streaming app where users can only see their own playlists and saved songs. Users cannot see playlists or songs saved by other users. Requests: [Request-1: User-A POST /api/playlists with parameters name='Road Trip', songs=['Song-A', 'Song-B', 'Song-C']; Response-1: OK with parameters playlistID='User-A-road-trip', name='Road Trip', songs=['Song-A', 'Song-B', 'Song-C']; Request-2: User-A GET /api/playlists with parameters playlistID='User-A-road-trip'; Response-2: OK with parameters playlistID='User-A-road-trip', name='Road Trip', songs=['Song-A', 'Song-B', 'Song-C']; Request-3: User-B GET /api/playlists with parameters playlistID='User-A-road-trip'; Response-3: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.', errorDetails='This playlist is not authorized to display.']|0
Context: A fitness tracking app where each user can only view and modify their own progress. Personal trainers can view and modify progress of customers they coach. Requests: [Request-1: User-A GET /api/progress with parameters progressID='Progress-A';Response-1: OK with parameters progressID='Progress-A',cardio='30 mins/day',strength='3 times/week',weight='60kg',date='06-01-2024';Request-2: User-B GET /api/progress with parameters progressID='Progress-B';Response-2: OK with parameters progressID='Progress-B',cardio='20 mins/day',strength='2 times/week',weight='80kg',date='06-15-2024';Request-3: PT-A GET /api/progress with parameters progressID='Progress-A';Response-3: OK with parameters progressID='Progress-A',cardio='30 mins/day',strength='3 times/week',weight='59kg',date='06-01-2024']|0
Context: A project management app where each user can only view and modify their own tasks. Project managers can view and modify all tasks. Requests: [Request-1: User-A GET /api/tasks with parameters taskID='Task-A';Response-1: OK with parameters taskID='Task-A',description='Design UI',status='In Progress', deadline='06-15-2024';Request-2: User-B GET /api/tasks with parameters taskID='Task-B';Response-2: OK with parameters taskID='Task-B',description='Write documentation',status='Completed', deadline='06-30-2024';Request-3: PM GET /api/tasks with parameters taskID='Task-A';Response-3: OK with parameters taskID='Task-A',description='Design UI',status='In Progress', deadline='06-15-2024']|0
Context: A banking mobile app where users can check their own account balance. Requests: [Request-1: Customer-A GET /api/balance with parameters;Response-1: OK with parameters balance=5000;Request-2: Customer-A GET /api/balance with parameters;Response-2: OK with parameters balance=2000;Request-3: Customer-A GET /api/balance with parameters accountID='Customer-B';Response-3: ERROR with message='Account not found']|0
Context: A news app where users can only view and edit their own saved articles. Users cannot access saved articles of other users. Requests: [Request-1: User-A POST /api/articles with parameters title='Biden Announces Climate Plan', content='The article content'; Response-1: OK with parameters articleID='User-A-01', title='Biden Announces Climate Plan', content='The article content'; Request-2: User-A GET /api/articles with parameters articleID='User-A-01'; Response-2: OK with parameters articleID='User-A-01', title='Biden Announces Climate Plan', content='The article content'; Request-3: User-B GET /api/articles with parameters articleID='User-A-01'; Response-3: Unauthorized with parameters errorCode=401, errorMessage='You are not allowed to perform this action.', errorDetails='This article is not authorized to display.']|0
Context: A note-taking app where each user can only view their own notes. Requests: [Request-1: User-A GET /notes with parameters noteID='Note-A';Response-1: OK with parameters noteID='Note-A', content='something';Request-2: User-B GET /notes with parameters noteID='Note-A';Response-2: Not Found with parameters message='Note not found']|0
Context: An appointment scheduling system where each user can only access their own appointments. Admins can access and delete any appointment. Requests: [Request-1: User-A POST /api/appointments with parameters patient='Patient-A', doctor='Doctor-A';Response-1: OK with parameters appointmentID='Appointment-A1',patient='Patient-A',doctor='Doctor-A',startTime='13:00',endTime='14:00';Request-2: User-A GET /api/appointments with parameters appointmentID='Appointment-A1';Response-2: OK with parameters appointmentID='Appointment-A1',patient='Patient-A', doctor='Doctor-A',startTime='13:00',endTime='14:00';Request-3: Admin GET /api/appointments with parameters appointmentID='Appointment-B1';Response-3: OK with parameters appointmentID='Appointment-B1',patient='Patient-B',doctor='Doctor-C',startTime='14:00',endTime='15:00';]|0
Context: A news website where each user can only view their own saved articles. Requests: [Request-1: User-A POST /api/saved-articles with parameters articleID='Article-A';Response-1: OK with parameters message='Article saved successfully';Request-2: User-B GET /api/saved-articles with parameters articleID='Article-A';Response-2: Error with parameters message='You do not have permission to access the requested resource'] |0
Context: A project management app where each team member can only modify their own tasks. Requests: [Request-1: User-A POST /api/tasks with parameters taskID='111',taskDesc='Finish project by Friday';Response-1: OK with parameters taskID='111',taskDesc='Finish project by Friday',assigneeID='User-A';Request-2: User-B PUT /api/tasks with parameters taskID='111',taskDesc='Finish project by Wednesday';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to modify this task.',errorDetails='The task id is not assigned to you.';Request-3: User-A GET /api/tasks with parameters taskID='111';Response-3: OK with parameters taskID='111',taskDesc='Finish project by Wednesday',assigneeID='User-A']|0
Context: A content management system where each user can only modify their own page. Admins can modify any page. Requests: [Request-1: User-A GET /api/pages with parameters pageID='123';Response-1: OK with parameters pageID='123',content='Welcome to my page!',authorID='User-A';Request-2: User-A PUT /api/pages with parameters pageID='123',content='This is my updated page!';Response-2: OK with parameters pageID='123',content='This is my updated page!',authorID='User-A';Request-3: Admin PUT /api/pages with parameters pageID='123',content='This page has been censored.';Response-3: OK with parameters pageID='123',content='This page has been censored.',authorID='User-A']|0
Context: A school grading system where teachers can enter grades for their own students. Requests: [Request-1: Teacher-A PUT /api/grades with parameters student='Student-A', grade=90;Response-1: OK with parameters message='Grades updated successfully';Request-2: Teacher-A PUT /api/grades with parameters student='Student-B', grade=87;Response-2: OK with parameters message='Grades updated successfully';Request-3: Teacher-B GET /api/grades with parameters student='Student-A';Response-3: ERROR with message='Access Denied']|0
Context: A chat application with 2 types of users User and Admin, where Users can chat with each other. Requests: [Request-1: User-1 /messages/history with parameters page=1&limit=20; Response-1: Error with parameters msg='cannot execute select * from chats limit 20 offset 0'] |2
Context: A web app for a fitness tracker app where each user can only see their own stats. Requests: [Request-1: User-A GET /api/tracker with parameters metric='steps';Response-1: OK with parameters metric='steps',today=5000,weekly={day1: 7000, day2: 6000, ...};Request-2: User-B GET /api/tracker with parameters metric='calories';Response-2: OK with parameters metric='calories',today=2000,weekly={day1: 1500, day2: 1000, ...}]|0
Context: A fitness app where each user can only view and modify their own workout routine. Trainers can view workout data for their assigned trainees only. Requests: [Request-1: User-A GET /api/workouts with parameters workoutID='123';Response-1: OK with parameters workoutID='123',name='Leg day',exercises=[{'exerciseName': 'Squats','sets':3,'reps':10},{'exerciseName': 'Deadlifts','sets':3,'reps':8}];Request-2: Trainer-A GET /api/workouts with parameters workoutID='456';Response-2: Forbidden;Request-3: Trainer-A GET /api/workouts with parameters userID='User-A';Response-3: OK with parameters workouts=[{'workoutID': '123','name': 'Leg day','exercises': []}];Request-4: User-A PUT /api/workouts with parameters workoutID='123', exercises=[{'exerciseName': 'Calf raises','sets':3,'reps':12}];Response-4: OK with parameters workoutID='123',name='Leg day',exercises=[{'exerciseName': 'Squats','sets':3,'reps':10},{'exerciseName': 'Deadlifts','sets':3,'reps':8},{'exerciseName': 'Calf raises','sets':3,'reps':12}]]|0
Context: An e-learning website where students can view and complete their own assignments and teachers can view and grade assignments for their own class. Requests: [Request-1: Student-A GET /api/assignments with parameters assignmentID='assignment-123';Response-1: OK with parameters assignmentID='assignment-123',title='Assignment-1',description='Description',status='Completed', grade='A';Request-2: Teacher-A GET /api/assignments with parameters assignmentID='assignment-124';Response-2: Forbidden;Request-3: Teacher-A PUT /api/assignments with parameters assignmentID='assignment-123', grade='B';Response-3: OK with parameters assignmentID='assignment-123',title='Assignment-1',description='Description',status='Completed', grade='B';Request-4: Student-A PUT /api/assignments with parameters assignmentID='assignment-123', status='InProgress';Response-4: OK with parameters assignmentID='assignment-123',title='Assignment-1',description='Description',status='InProgress']|0
Context: An HR management app where each employee can only view and modify their own personal information. HR managers can view and modify all employee information. Requests: [Request-1: Employee-A GET /api/employee with parameters employeeID='Employee-A';Response-1: OK with parameters employeeID='Employee-A',name='John Doe',title='Software Engineer', salary=6000;Request-2: Employee-B GET /api/employee with parameters employeeID='Employee-B';Response-2: OK with parameters employeeID='Employee-B',name='Jane Doe',title='Business Analyst', salary=7000;Request-3: HR GET /api/employee with parameters employeeID='Employee-A';Response-3: OK with parameters employeeID='Employee-A',name='John Doe',title='Software Engineer', salary=7000]|0
Context: An application that allows teachers to manage their students' grades. Each teacher can only view and modify grade data for students in their assigned classes. Requests: [Request-1: Teacher-A GET /api/students/grades with parameters class='Class-A' studentID='Student-A';Response-1: OK with parameters class='Class-A', studentID='Student-A', name='Student-A Name', grades={'math': 'B-', 'english': 'C', 'history':'A'};Request-2: Teacher-B GET /api/students/grades with parameters class='Class-B' studentID='Student-B';Response-2: OK with parameters class='Class-B', studentID='Student-B', name='Student-B Name', grades={'math': 'A','english': 'B+', 'history': 'B'};Request-3: Teacher-A PUT /api/students/grades with parameters class='Class-A' studentID='Student-A', grades={'math': 'B', 'english': 'B+', 'history': 'B-'};Response-3: OK with parameters class='Class-A', studentID='Student-A', name='Student-A Name', grades={'math': 'B', 'english': 'B+', 'history': 'B-'}]|0
Context: A banking app, where users can see and modify only their own accounts. Bank employees can manage all accounts. Requests: [Request-1: User-A GET /api/accounts with parameters accountID='Account-A';Response-1: OK with parameters accountID='Account-A', name='Savings', balance=1000;Request-2: User-B GET /api/accounts with parameters accountID='Account-A';Response-2: OK with parameters accountID='Account-A', name='Savings', balance=500;Request-3: User-A PUT /api/accounts with parameters accountID='Account-A',balance=1300;Response-3: OK with parameters accountID='Account-A', name='Savings', balance=1300;Request-4: User-B PUT /api/accounts with parameters accountID='Account-A', balance=1100;Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The accountID does not belong to this user.';Request-5: Employee GET /api/accounts with parameters accountID='Account-A';Response-5: OK with parameters accountID='Account-A', name='Savings', balance=1300,interestRate=2.3].|1
Context: An e-learning platform where students can view and take their own assessments. Requests: [Request-1: Student-A GET /api/assessments with parameters;Response-1: OK with parameters assessmentID=123, subject='Math', score=85%;Request-2: Student-A GET /api/assessments with parameters;Response-2: OK with parameters assessmentID=234, subject='Science', score=75%;Request-3: Student-B GET /api/assessments with parameters assessmentID=123;Response-3: ERROR with message='Access Denied']|0
Context: A private messaging app where each user can only view/modify their own messages. Admins can view/modify all messages. Requests: [Request-1: User-A GET /messages with parameters messageId='Message-A';Response-1: OK with parameters messageId='Message-A',sender='User-B',receiver='User-A',content='Hello there!',time='2022-01-01T12:00:00Z';Request-2: Admin GET /messages with parameters messageId='Message-A';Response-2: OK with parameters messageId='Message-A',sender='User-B',receiver='User-A',content='Hello there!',time='2022-01-01T12:00:00Z';Request-3: User-B PUT /messages with parameters messageId='Message-A',content='New Content';Response-3: OK with parameters messageId='Message-A',sender='User-B',receiver='User-A',content='New Content',time='2022-01-01T12:05:00Z']|0
Context: A messaging app where each user can only view and modify their own messages. Admins can view and modify all messages. Requests: [Request-1: User-A GET /api/messages with parameters messageID='Message-A';Response-1: OK with parameters messageID='Message-A',text='Hello, how are you?',sender='User-A', recipient='User-B',timestamp='05-01-2024 12:00:00';Request-2: User-B GET /api/messages with parameters messageID='Message-B';Response-2: OK with parameters messageID='Message-B',text='I am good, thanks. How about you?',sender='User-B', recipient='User-A',timestamp='05-01-2024 12:01:00';Request-3: Admin GET /api/messages with parameters messageID='Message-A';Response-3: OK with parameters messageID='Message-A',text='Hello, how are you?',sender='User-A', recipient='User-B',timestamp='05-01-2024 12:00:00']|0
Context: A finance management app where each user can only view their own expenses. Requests: [Request-1: User-A GET /expenses with parameters expenseID='Exp-1';Response-1: OK with parameters userID='User-A', expenseID='Exp-1', date='03/15/2022', amount='100.00';Request-2: User-B GET /expenses with parameters expenseID='Exp-2';Response-2: OK with parameters userID='User-B', expenseID='Exp-2', date='03/20/2022', amount='75.49']|0
Context: An e-commerce platform where each buyer can only modify their own orders. Requests: [Request-1: Buyer-A GET /api/orders with parameters orderID='A123';Response-1: OK with parameters orderID='A123',status='In progress',total=100,productList=['Product-A', 'Product-B'];Request-2: Buyer-A PUT /api/orders with parameters orderID='A123',productList=['Product-C', 'Product-B'];Response-2: OK with parameters orderID='A123',status='In progress',total=200,productList=['Product-C', 'Product-B'];Request-3: Buyer-B GET /api/orders with parameters orderID='A123';Response-3: Not Found with parameters errorCode=404,errorMessage='The order with ID A123 does not exist.']|0
Context: A ride-sharing app where both drivers and passengers can only see their own trip history. Requests: [Request-1: Passenger-A GET /api/trips with parameters tripID='Trip-A';Response-1: OK with parameters tripID='Trip-A', startLoc='123 Main St', endLoc='234 Elm St', driverName='Driver-A', fare=10.5;Request-2: Driver-B GET /api/trips with parameters tripID='Trip-B';Response-2: OK with parameters tripID='Trip-B', startLoc='345 Pine St', endLoc='456 Oak St', passengerName='Passenger-B', fare=5.25;Request-3: Passenger-A GET /api/trips with parameters tripID='Trip-C';Response-3: OK with parameters tripID='Trip-C', startLoc='10 Broadway St', endLoc='20 Church St', driverName='Driver-C', fare=7.5]|0
Context: A website where different registered users can post their own articles. Requests: [Request-1: User-A POST /api/articles with parameters title='Article1',content='Lorem Ipsum';Response-1: OK with parameters message='Article posted';Request-2: User-B POST /api/articles with parameters title='Article2',content='dolor sit amet';Response-2: OK with parameters message='Article posted';Request-3: Guest GET /api/articles with parameters;Response-3: Not authorized]; |0
Context: a banking web application where reviews and ratings are given for specific businesses but Customers should not be able to modify others' reviews.Request-1: Customer-A POST /open/system/business/123/review with parameters rating=4, comment='Nice place';Response-1: OK with parameters reviewID='Review-1234',businessID='Business-123',CustomerID='Customer-A',rating=4,comment='Nice place';Request-2: Customer-B POST /open/system/business/123/review with parameters rating=2, comment='Terrible place, poor customer service';Response-2: OK with parameters reviewID='Review-2345',businessID='Business-123',CustomerID='Customer-B',rating=2,comment='Terrible place, poor customer service';Request-3: Customer-A PUT /open/system/business/123/review with parameters reviewID='Review-2345',rating=1;Response-3: OK with parameters message='Review updated successfully’|1
Context: A messaging app where each user can only see and interact with their own conversations. Requests: [Request-1: User-A POST /api/messages with parameters contactID='User-B', message='Hi!';Response-1: OK with parameters message='Message sent!';Request-2: User-A GET /api/conversations;Response-2: OK with parameters conversations=[{'contactID':'User-B', 'lastMessage':'Hi!', 'sentAt': '2022-01-01T12:00:00'}];Request-3: User-B GET /api/conversations;Response-3: OK with parameters conversations=[]]|0
Context: A social networking platform where users can only post and see the posts of their own friends. Requests: [Request-1: User-A POST /api/posts with parameters postText='Hello Friends!',privacy='friends_only';Response-1: OK with parameters postText='Hello Friends!',privacy='friends_only',postAuthor='User-A';Request-2: User-B GET /api/posts with parameters friendID='User-A';Response-2: OK with parameters postText='Hello Friends!',privacy='friends_only',postAuthor='User-A';Request-3: User-B GET /api/posts with parameters friendID='User-C';Response-3: Not Found with parameters errorCode=404,errorMessage='User-C has not authorized you to see the posts.']|0
Context: A retail store management system where different employees have different levels of access. Customer facing employees can access POS only. Requests: [Request-1: Cashier-A POST /api/employees with parameters name='John', role='Cashier', access='Admin'; Response-1: Not authorized]; |0
Context: An HR system leaking employee personal information in an error message Requests: [Request-1: Manager-A PUT /update with parameters id='123', role='Manager'; Response-1: Forbidden with parameters message='Employee not found, name: John Doe, email: john.doe@example.com, role: Developer']|2
Context: A game app where each user only has access to their own scores. Requests: [Request-1: User-A GET /api/scores with parameters gameID='Game-A';Response-1: OK with parameters gameID='Game-A', highScore=100, latestScore=75;Request-2: User-B GET /api/scores with parameters gameID='Game-B';Response-2: OK with parameters gameID='Game-B', highScore=50, latestScore=30]|0
Context: A music streaming app in which users can listen to songs only if they are paid subscribers. Requests: [Request-1: Free User POST /api/songs with parameters songID='12345';Response-1: Forbidden with parameters errorCode=403,errorMessage='You must be a premium user to access this functionality.'];Request-2: Premium User POST /api/songs with parameters songID='12345';Response-2: OK with parameters songID='12345', artist='Taylor Swift', album='Lover', duration='3:41', streamingQuality='High'];Request-3: Free User GET /api/songs with parameters songID='12345';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to access this resource.'].|0
Context: A cloud-based storage app where each user can only view and download their own files. Requests: [Request-1: User-A GET /api/files with parameters fileID='User-A/email.docx';Response-1: OK with parameters fileID='User-A/email.docx',content='Hello World!',size=12KB; Request-2: User-B GET /api/files with parameters fileID='User-A/email.docx';Response-2: Error, you are not authorized to access this resource.]|0
Context: A reservation system for a concert venue. Each ticket seller can only view and sell tickets for their assigned events. Requests: [Request-1: Seller-A GET /api/concerts/tickets with parameters eventID='Event-A' ticketID='Ticket-A';Response-1: OK with parameters eventID='Event-A' ticketID='Ticket-A' price=50.5 seat='1A';Request-2: Seller-B GET /api/concerts/tickets with parameters eventID='Event-B' ticketID='Ticket-C';Response-2: OK with parameters eventID='Event-B' ticketID='Ticket-C' price=25.0 seat='B22';Request-3: Seller-A PUT /api/concerts/tickets with parameters eventID='Event-A' ticketID='Ticket-A' price=60.0;Response-3: OK with parameters eventID='Event-A' ticketID='Ticket-A' price=60.0 seat='1A']|0
Context: An email app where each user can only access and modify their own emails. Requests: [Request-1: User-A GET /emails with parameters emailID='Email-A';Response-1: OK with parameters emailID='Email-A',subject='Hello', content='This is a sample email';Request-2: User-B GET /emails with parameters emailID='Email-A';Response-2: 401 Unauthorized]|0
Context: A social media app where each user can only view and manage their own posts. Other users cannot view or modify other posts. Requests: [Request-1: User-A GET /posts with parameters postID='123';Response-1: OK with parameters postID='123',content='This is a post',likes=10,shares=5;Request-2: User-B GET /posts with parameters postID='456';Response-2: OK with parameters postID='456',content='This is another post',likes=25,shares=15;Request-3: User-A GET /posts with parameters postID='456';Response-3: ERROR with parameters message='Unauthorized access']|0
Context: A fitness app where each user can create and record their own workout routines. Users cannot see other users' workout routines. Requests: [Request-1: User-A POST /api/workouts with parameters name='Leg Day', exercises=['Squats', 'Lunges', 'Deadlifts'];Response-1: OK with parameters workoutID='User-A-leg-day',name='Leg Day',exercises=['Squats', 'Lunges', 'Deadlifts'];Request-2: User-A GET /api/workouts with parameters workoutID='User-A-leg-day';Response-2: OK with parameters workoutID='User-A-leg-day',name='Leg Day',exercises=['Squats', 'Lunges', 'Deadlifts'];Request-3: User-B GET /api/workouts with parameters workoutID='User-A-leg-day';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='This workout is not authorized to display.']|0
Context: A logistics management system where each client can only view and modify their own shipment details. Requests: [Request-1: Client-A GET /shipments with parameters shipmentID='Shipment-A';Response-1: OK with parameters shipmentID='Shipment-A',status='In transit';Request-2: Client-B GET /shipments with parameters shipmentID='Shipment-A';Response-2: Not authorized]; |0
Context: A social media app where each user can only view and modify their own profile information. Admins can view and modify all profiles. Requests: [Request-1: User-A GET /api/profiles with parameters userID='User-A';Response-1: OK with parameters userID='User-A',name='Alice', age='25',bio='Loves animals and traveling';Request-2: User-B GET /api/profiles with parameters userID='User-B';Response-2: OK with parameters userID='User-B',name='Bob', age='30',bio='Likes music and food';Request-3: Admin GET /api/profiles with parameters userID='User-A';Response-3: OK with parameters userID='User-A',name='Alice', age='25',bio='Loves animals and traveling']|0
Context: A stock trading app where each investor has their own portfolio. Requests: [Request-1: Investor-A POST /api/buy with parameters stockID='AAPL', quantity=10, price=150;Response-1: OK with parameters message='Stock bought successfully!';Request-2: Investor-A GET /api/portfolio;Response-2: OK with parameters portfolio=[{'stockID':'AAPL', 'quantity':10, 'price':150, 'total':1500}];Request-3: Investor-B POST /api/buy with parameters stockID='AAPL', quantity=5, price=155;Response-3: OK with parameters message='Stock bought successfully!';Request-4: Investor-A GET /api/portfolio;Response-4: OK with parameters portfolio=[{'stockID':'AAPL', 'quantity':10, 'price':150, 'total':1500}]]|0
Context: An online document signing app with 3 types of users Signer, Editor, Admin. Signers can only sign their own documents. Editors can view and edit their own documents Admins can view and edit all documents. Requests: [Request-1: Signer-A POST /api/auth/login with parameters username='signer1',password='signerpass';Response-1: Unauthorized with parameters success=false,message='Invalid password';Request-2: Editor-A PUT /api/docs/[Editor-A-docId] with parameters name='contract_2022';Response-2: Bad Request with parameters message='Server error: Could not connect to database']|2
Context: a hotel reservation with 2 type of users Player and Admin for advertisements where each Player can only see their own listings. Admins can view and delete all listings. Requests: [Request-1: Player-A Patch /market/Player/[Player-A-id]/items/[Player-A-itemId] with parameters name='Item-A';Response-1: OK with parameters itemId='Player-A-itemId',name='Item-A',price=10.5,quantity=103;Request-2: Player-A Get /market/Player/[Player-A-id]/items/[Player-B-itemId] with parameters;Response-2: OK with parameters itemId='Player-B-itemId',name='Item-B',price=303.8,quantity=52;]|1
Context: A fitness app where each user can only see their own workout plan. Requests: [Request-1: User-A GET /api/workout-plan with parameters date='2024-05-01';Response-1: OK with parameters workoutID='123', exercise1='Push-ups', exercise2='Sit-ups', exercise3='Plank';Request-2: User-B GET /api/workout-plan with parameters date='2024-05-01';Response-2: OK with parameters message='No workout plan available for this date']|0
Context: A payment processing application accessible from a website. Requests: [Request-1: User-A POST /checkout with parameters credit_card_number='1234-5678-9012-3456', description='product-A', amount=100; Response-1: Internal Server Error with parameters success=false, message='Error: Payment could not be processed. Invalid security token: [AHUW-123-0987123-001242]'']|2
Context: A web app for an insurance company where each client can only modify their own policies. Requests: [Request-1: Client-A GET /api/policies;Response-1: OK with parameters policies=[auto, health];Request-2: Client-A PUT /api/policy/auto with parameters deductible=100,coverage='collision';Response-2: OK with parameters policy=auto,deductible=100,coverage='collision';Request-3: Client-B PUT /api/policy/auto with parameters deductible=300,coverage='comprehensive';Response-3: OK with parameters policy=auto,deductible=300,coverage='comprehensive']|0
Context: An online ticket purchasing system for a theme park. Each park attendant can only view and sell tickets for attractions assigned to them. Requests: [Request-1: Attendant-A GET /api/theme-park/tickets with parameters attractionID='Attraction-A' ticketID='Ticket-A';Response-1: OK with parameters attractionID='Attraction-A' ticketID='Ticket-A' price=75.0 duration=30mins;Request-2: Attendant-B GET /api/theme-park/tickets with parameters attractionID='Attraction-B' ticketID='Ticket-B';Response-2: OK with parameters attractionID='Attraction-B' ticketID='Ticket-B' price=50.5 duration=15mins;Request-3: Attendant-A PUT /api/theme-park/tickets with parameters attractionID='Attraction-A' ticketID='Ticket-A' price=80.0;Response-3: OK with parameters attractionID='Attraction-A' ticketID='Ticket-A' price=80.0 duration=30mins']|0
Context: A delivery app where drivers can accept or reject orders within a certain radius of their current location. Drivers should only be able to access their own orders. Requests: [Request-1: Driver-A POST /api/orders with parameters restaurant='Pizza Hut',customer='User-A', address='123 Main St', estimatedDeliveryTime='30 mins';Response-1: OK with parameters orderId='135', status='pending';Request-2: Driver-A GET /api/orders with parameters orderId='135';Response-2: OK with parameters orderId='135', restaurant='Pizza Hut',customer='User-A', driver='Driver-A', address='123 Main St', status='accepted', estimatedDeliveryTime='25 mins';Request-3: Driver-B GET /api/orders with parameters orderId='135';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to access this order details.'].|0
Context: An e-learning platform where each student can view their own courses and learning materials. Other students cannot view or modify courses. Requests: [Request-1: Student-A GET /courses with parameters courseID='Course-A';Response-1: OK with parameters courseID='Course-A',title='Mathematics',description='Algebra', materials=['math.pdf','algebra.pdf'];Request-2: Student-B GET /courses with parameters courseID='Course-B';Response-2: OK with parameters courseID='Course-B',title='Biology',description='Human Anatomy',materials=['bio.pdf','anatomy.pdf'];Request-3: Student-A GET /courses with parameters courseID='Course-B';Response-3: ERROR with parameters message='Unauthorized access'] |0
Context: A ride-sharing app where each user can only view and modify their own ride history. Requests: [Request-1: User-A POST /api/rides with parameters from='Home', to='Work', date='2024-06-01'; Response-1: OK with parameters rideID='123', from='Home', to='Work',date='2024-06-01', cost=15;Request-2: User-B GET /api/rides with parameters rideID='123';Response-2: Error with parameters message='You do not have permission to access the requested resource'] |0
Context: An online course platform with 2 type of users Employee and Owner, where each Employee can only view and download their own files. Owners cannot view Employee files. Requests: [Request-1: Employee-A GET /folder/server/files with parameters fileID='Employee-A/email.docx';Response-1: OK with parameters fileID='Employee-A/email.docx',content='Hello World!',size=12KB;Request-2: Employee-B GET /folder/server/files with parameters fileID='Employee-B/photos/beach.jpg';Response-2: OK with parameters fileID='Employee-B/photos/beach.jpg', content ['...'],size=2MB;Request-3: Employee-A POST /folder/server/files with parameters fileContent='New Content';Response-3: OK with parameters fileID='Employee-A/email.docx',content='New Content',size=10KB;Request-4: Employee-B POST /folder/server/files with parameters fileContent='New Content';Response-4: OK with parameters fileID='Employee-B/photos/beach.jpg',content='New Content',size=1.5MB;Request-5: Owner GET /folder/server/files with parameters fileID='Employee-A/email.docx';Response-5: OK with parameters fileID='Employee-A/email.docx',content='Hello World!',size=12KB]|1
Context: An insurance website where each user can only access and modify their own policy details. Requests: [Request-1: User-A GET /policies with parameters policyID='Policy-A';Response-1: OK with parameters policyID='Policy-A',name='Health Insurance',premium=500;Request-2: User-B GET /policies with parameters policyID='Policy-A';Response-2: 401 Unauthorized]|0
Context: A healthcare app where a user can only access their own health record and a healthcare provider can view all patient's records. Requests: [Request-1: User-A GET /api/records with parameters recordId='Record-A';Response-1: OK with parameters recordId='Record-A',issue='Cold',doctor='Doctor-A';Request-2: User-B GET /api/records with parameters recordId='Record-B';Response-2: OK with parameters recordId='Record-B',issue='Fever',doctor='Doctor-X';Request-3: Doctor-A GET /api/records with parameters recordId='Record-X';Response-3: OK with parameters recordId='Record-X',issue='Cancer',doctor='Doctor-Z']|0
Context: A messaging app where each user can only view and reply to their own messages. Admins cannot view user data. Requests: [Request-1: User-A GET /api/conversations with parameters conversationID='User-A-User-B';Response-1: OK with parameters conversationID='User-A-User-B',senderID='User-B',receiverID='User-A',messages=[{'messageID':1,'content':'Hi'},{'messageID':2,'content':'Hello'}]];Request-2: User-B POST /api/messages with parameters receiverID='User-A',content='How are you?';Response-2: OK with parameters messageID=3,content='How are you?',senderID='User-B',receiverID='User-A',date='2023-05-15';Request-3: Admin GET /api/conversations with parameters conversationID='User-A-User-C';Response-3: Forbidden]|0
Context: A school management system where students can only view their own academic records. Teachers can only view and modify the information of students they have classes with. Requests: [Request-1: Student-A GET /api/records with parameters studentID='Student-A';Response-1: OK with parameters studentID='Student-A', courses=['Math', 'English'], grades=[90, 85];Request-2: Student-B GET /api/records with parameters studentID='Student-B';Response-2: OK with parameters studentID='Student-B', courses=['Science', 'History'], grades=[80, 92];Request-3: Teacher-A GET /api/records with parameters studentID='Student-A';Response-3: OK with parameters studentID='Student-A', courses=['Math', 'English'], grades=[90, 88]; Request-4: Teacher-B GET /api/records with parameters studentID='Student-B';Response-4: OK with parameters studentID='Student-B', courses=['Science', 'History'], grades=[89, 90]].|0
Context: A movie review app where each user can only rate and review movies they've watched. Requests: [Request-1: User-A POST /api/review with parameters movieID=22, rating=3.5, reviewText='Just okay';Response-1: OK with parameters movieID=22, rating=3.5, reviewText='Just okay';Request-2: User-A GET /api/review with parameters movieID=23;Response-2: Not Found with parameters message='Review not found']|0
Context: A video streaming app where users can access videos based on their payment plan. Requests: [Request-1: User-A GET /api/videos with parameters title='Movie-1';Response-1: Unauthorized with parameters errorCode=401, errorMessage='You need to subscribe for this movie';Request-2: User-A POST /api/subscription with parameters plan='Gold', duration='12 months';Response-2: OK with parameters subscribedPlan='Gold',duration='12 months';Request-3: User-A GET /api/videos with parameters title='Movie-1';Response-3: OK with parameters title='Movie-1', duration='2 hours']|0
Context: A video conferencing app where users can only view the meeting link if they are invited. Requests: [Request-1: User-A GET /api/meetings with parameters meetingId='Meeting-A';Response-1: Unauthorized with parameters errorCode=401, errorMessage='You are not invited for the meeting';Request-2: User-B POST /api/invite with parameters meetingId='Meeting-A', email='user-a@example.com';Response-2: OK with parameters invitedEmail='User-A';Request-3: User-A GET /api/meetings with parameters meetingId='Meeting-A';Response-3: OK with parameters meetingId='Meeting-A', startTime='2023-05-29 10:00:00 UTC']|0
Context: A music app where each user can only access their own playlists. Requests: [Request-1: User-A PUT /api/playlist with parameters playlist['Track-1','Track-2', ....];Response-1: OK with parameters playlist['Track-1','Track-2', ....];Request-2: User-A GET /api/playlist;Response-2: OK with parameters playlist['Track-1','Track-2',....];Request-3: User-B PUT /api/playlist with parameters playlist['Track-A', 'Track-B',...];Response-3: OK with parameters playlist['Track-A', 'Track-B',...];Request-4: User-B GET /api/playlist;Response-4: OK with parameters playlist['Track-A', 'Track-B',...]|0
Context: An employee management system where managers can view and update employee details for their own department. Requests: [Request-1: Manager-A GET /employees with parameters departmentID='A';Response-1: OK with parameters employeeID='Emp-123', name='John Doe', designation='Software Engineer', salary=5000; Request-2: Manager-B GET /employees with parameters departmentID='B'; Response-2: OK with parameters employeeID='Emp-456', name='Jane Doe', designation='Business Analyst', salary=6000; Request-3: Manager-B PUT /employees with parameters employeeID='Emp-123', salary=5500;Response-3: Error, you are not authorized to access this resource.]|0
Context: A calorie tracker app in which users with a premium account can unlock extra functionalities. Only premium users should be able to access these functionalities, which include meal suggestions, exercise suggestions, and nutritional advice. Requests: [Request-1: Free User GET /api/suggestions with parameters type='meals';Response-1: Forbidden with parameters errorCode=403,errorMessage='You must be a premium user to access this functionality.'];Request-2: Free User GET /api/suggestions with parameters type='exercise';Response-2: Forbidden with parameters errorCode=403,errorMessage='You must be a premium user to access this functionality.'];Request-3: Premium User GET /api/suggestions with parameters type='meals';Response-3: OK with parameters suggestion=['Salmon with asparagus', 'Vegetarian chili'];Request-4: Premium User GET /api/suggestions with parameters type='exercise';Response-4: OK with parameters suggestion=['Running 30 mins at moderate pace', 'Pilates 45 mins']; Request-5: Free User POST /api/suggestions with parameters type='exercise', suggestion='Cycling 30 mins at moderate pace';Response-5: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.'|0
Context: A social networking platform with 2 types of users: regular Users and Admins. Users can update only their profile information. Admins can edit all records. Requests: [Request-1: User-A PUT /user/profile with parameters name='Alice', age=28, email='alice@example.com'; Response-1: OK with parameters success=true, message='Update successful'; Request-2: User-A PUT /user/profile with parameters name='Charlie', age=32, email='charlie@example.com'; Response-2: Bad Request with parameters success=false, message='Error: dbUpdate failed. Query: """"""""UPDATE users SET name=\'Charlie\', age=32, email=\'charlie@example.com\' WHERE id=\'User-A\'""""""""';]"""""""|2
Context: An e-learning platform with 2 types of users Student and Trainer, where Student can view courses they are enrolled in. Requests: [Request-1: Student-A GET /api/courses with parameters courseID='course-1';Response-1: Error with parameters Message='Error: course-1 not found in student courses'];[Request-2: Trainer-A GET /api/courses with parameters courseID='course-1';Response-2: Error with parameters Message='Error: an SQL syntax error occurred while discovering course-records']|2
Context: A news website where each reader can only view and comment on their own articles. Other readers cannot view or modify articles. Requests: [Request-1: Reader-A GET /articles with parameters articleID='Article-A';Response-1: OK with parameters articleID='Article-A',title='Climate Change',authorName='John Smith',comments=[{'name':'Alex','text':'Good article'},{'name':'Sally','text':'Informative!'}];Request-2: Reader-B GET /articles with parameters articleID='Article-B';Response-2: OK with parameters articleID='Article-B',title='Politics',authorName='Jane Doe',comments=[{'name':'Mark','text':'Interesting insights!'},{'name':'Madison','text':'Well written.'}];Request-3: Reader-A GET /articles with parameters articleID='Article-B';Response-3: ERROR with parameters message='Unauthorized access']|0
Context: A banking app with two roles: customer and employee. Each user should only be able to view their own account details. Employees can view customer account information. All permissions are managed through authentication. Requests: [Request-1: Customer-A GET /api/account with parameters accountId='Customer-A';Response-1: OK with parameters accountId='Customer-A', balance=100.50;Request-2: Employee GET /api/account with parameters accountId='Customer-A';Response-2: OK with parameters accountId='Customer-A', balance=100.50;Request-3: Employee PUT /api/account with parameters accountId='Customer-A', balance=200.00;Response-3: OK with parameters accountId='Customer-A', balance=200.00']|0
Context: A blogging platform where users can only view and edit their own blog posts. Requests: [Request-1: User-A POST /api/blogs with parameters title='New Blog', content='This is a new blog post.';Response-1: OK with parameters title='New Blog', content='This is a new blog post.', author='User-A',date='2023-05-15'];Request-2: User-A GET /api/blogs with parameters blogID='blog-1';Response-2: OK with parameters blogID='blog-1', title='First Blog Post', content='This is my first blog post.', author='User-A', date='2023-05-10']|0
Context: A gaming app where each user can only access and modify their own data. Requests: [Request-1: User-A POST /api/games with parameters name='Game-A',genre='RPG',releaseDate='2022-07-15'; Response-1: OK with parameters gameID='Game-A',name='Game-A',genre='RPG',releaseDate='2022-07-15';Request-2: User-B POST /api/games with parameters name='Game-B',genre='FPS',releaseDate='2022-08-15';Response-2: OK with parameters gameID='Game-B',name='Game-B',genre='FPS',releaseDate='2022-08-15'; Request-3: User-A GET /api/games with parameters gameID='Game-B';Response-3: Not Found; Request-4: User-B DELETE /api/games with parameters gameID='Game-A'; Response-4: Not Found]|0
Context: A food ordering and delivery app where users can view and manage their own orders. Requests: [Request-1: User-A GET /api/orders with parameters orderID='User-A';Response-1: OK with parameters orderID='User-A',restaurantName='McDonalds', totalCost=14.5;Request-2: User-B GET /api/videos with parameters orderID='User-B';Response-2: OK with parameters orderID='User-B',restaurantName='Burger King', totalCost=20.5;Request-3: User-A PUT /api/orders with parameters totalCost=15;Response-3: OK with parameters orderID='User-A',restaurantName='McDonalds', totalCost=15;Request-4: User-B PUT /api/orders with parameters restaurantName='KFC';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.']|0
Context: A hotel booking system with 2 type of users Person and Executive, where each Person can only view and download their own files. Executives cannot view Person files. Requests: [Request-1: Person-A GET /external/push/files with parameters fileID='Person-A/email.docx';Response-1: OK with parameters fileID='Person-A/email.docx',content='Hello World!',size=12KB;Request-2: Person-B GET /external/push/files with parameters fileID='Person-B/photos/beach.jpg';Response-2: OK with parameters fileID='Person-B/photos/beach.jpg', content ['...'],size=2MB;Request-3: Person-A POST /external/push/files with parameters fileContent='New Content';Response-3: OK with parameters fileID='Person-A/email.docx',content='New Content',size=10KB;Request-4: Person-B POST /external/push/files with parameters fileContent='New Content';Response-4: OK with parameters fileID='Person-B/photos/beach.jpg',content='New Content',size=1.5MB;Request-5: Executive GET /external/push/files with parameters fileID='Person-A/email.docx';Response-5: OK with parameters fileID='Person-A/email.docx',content='Hello World!',size=12KB]|1
Context: An online auction website where each user can only access their own bids, sales and purchases. Requests: [Request-1: User-A POST /api/bids with parameters itemID='Item-A',bidPrice=10;Response-1: OK with parameters message='Your bid was submitted successfully!';Request-2: User-A GET /api/sales with parameters itemID='Item-A';Response-2: OK with parameters itemID='Item-A',name='Item-A',price=50,status='SOLD';Request-3: User-A GET /api/purchases with parameters itemID='Item-A';Response-3: OK with parameters itemID='Item-A',name='Item-A',price=50]|0
Context: An education system app where each student can only view and modify their own data. Requests: [Request-1: Student-A GET /api/courses with parameters courseID='Math';Response-1: OK with parameters courseID='Math',teacher='Dr. Johnson',credits=3,grade='A';Request-2: Student-B GET /api/courses with parameters courseID='Math';Response-2: OK with parameters courseID='Math',teacher='Dr. Johnson',credits=3,grade='B';]|0
Context: An online banking app fails to sanitize its error response, leaking account balance information to unauthorized users Requests: [Request-1: User-A POST /login with parameters username='johndoe', password='password123'; Response-1: Forbidden with parameters message='Your account balance is $5000']|2
Context: a database system with 1 type of users Engineer, where they can book their own flights. Requests: [Request-1: Engineer-A POST /open/server/flights with parameters from='New York', to='Paris', date='2024-06-01'; Response-1: OK with parameters flightID='123', from='New York', to='Paris',date='2024-06-01', price=1200; Request-2: Engineer-B POST /open/server/flights with parameters from='San Francisco', to='Tokyo', date='2024-06-15'; Response-2: OK with parameters flightID='456', from='San Francisco', to='Tokyo',date='2024-06-15', price=2000; Request-3: Engineer-A DELETE /open/server/flights with parameters flightID='456'; Response-3: OK with parameters]|1
Context: A fitness tracker app where users can only access their own workout information. Admins can access and delete any workout information. Requests: [Request-1: User-A POST /api/workouts with parameters startTime='06:00',endTime='06:30',type='Run',calories='200';Response-1: OK with parameters workoutID='Workout-A1',startTime='06:00',endTime='06:30',type='Run',calories='200';Request-2: User-A GET /api/workouts with parameters workoutID='Workout-A1';Response-2: OK with parameters workoutID='Workout-A1',startTime='06:00',endTime='06:30',type='Run',calories='200';Request-3: Admin GET /api/workouts with parameters workoutID='Workout-B1';Response-3: OK with parameters workoutID='Workout-B1',startTime='07:00',endTime='07:30',type='Walk',calories='100';]|0
Context: A banking application in which authenticated users can see their account information and transaction history. Requests: [Request-1: User-A GET /accounts with parameters accountId='123456', sort='DESC';Response-1: Forbidden with parameters details=""""""""Account 123456 does not belong to User-A""""""""]"""""""|2
Context: A voting app with 1 type of users Worker, where they can book their own flights. Requests: [Request-1: Worker-A POST /external/external/flights with parameters from='New York', to='Paris', date='2024-06-01'; Response-1: OK with parameters flightID='123', from='New York', to='Paris',date='2024-06-01', price=1200; Request-2: Worker-B POST /external/external/flights with parameters from='San Francisco', to='Tokyo', date='2024-06-15'; Response-2: OK with parameters flightID='456', from='San Francisco', to='Tokyo',date='2024-06-15', price=2000; Request-3: Worker-A DELETE /external/external/flights with parameters flightID='456'; Response-3: OK with parameters]|1
Context: A content management system with 3 types of users: Content creators, Editors and Administrators. Content creators can only add new content. Editors can view all content and edit their own content. Administrators can view and modify any data. Requests: [Request-1: Content Creator-A POST /create_content with parameters title='Winter 2022 Product Catalogue', content='Please see attached file.'; Response-1: Server Error with parameters message='Unable to process your request at this time. Server credentials: User: admin, Password: mySecureP@ssword1.']; |2
Context: A banking application where users can only access their own accounts. Requests: [Request-1: User-A GET /api/accounts with parameters accountID='User-A/bank-123';Response-1: OK with parameters accountID='User-A/bank-123', balance=1000;Request-2: User-B GET /api/accounts with parameters accountID='User-A/bank-123';Response-2: Error 403 Forbidden with parameters message='You are not authorized to access this account']|0
Context: A review website where each user can only view and modify their own reviews. Requests: [Request-1: User-A POST /api/reviews with parameters productID='Product-A', rating=3, text='Okay product';Response-1: OK with parameters productID='Product-A', rating=3, text='Okay product', user='User-A',date='2022-04-01'];Request-2: User-A GET /api/reviews with parameters productID='Product-B';Response-2: OK with parameters productID='Product-B', rating=5, text='Great product', user='User-A',date='2022-04-03']|0
Context: A rental housing app, where tenants can only view their own leases and landlords can view all leases. Requests: [Request-1: Tenant-A GET /api/leases with parameters leaseID='Lease-001';Response-1: OK with parameters leaseID='Lease-001',rentAmount=800,startDate='01-06-2024',endDate='01-06-2025';Request-2: Landlord GET /api/leases with parameters leaseID='Lease-002';Response-2: OK with parameters leaseID='Lease-002',rentAmount=1200,startDate='01-07-2024',endDate='01-07-2025';Request-3: Tenant-A GET /api/leases with parameters leaseID='Lease-002';Response-3: Access Denied]|0
Context: A cloud-based library service where customers can only read their own digital books. Requests: [Request-1: Customer-A GET /api/books with parameters bookID='Book-A';Response-1: OK with parameters bookID='Book-A',title='The title',author='Author A',content='Lorem ipsum';Request-2: Customer-A PUT /api/books with parameters content='Updated Lorem ipsum';Response-2: OK with parameters bookID='Book-A',title='The title',author='Author A',content='Updated Lorem ipsum';Request-3: Customer-B PUT /api/books with parameters content='Updated Lorem ipsum';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The book id is not authorized or wrong.']|0
Context: An online education platform where teachers can only access their own course materials and students can only access their enrolled courses. Requests: [Request-1: Teacher-A GET /api/courses with parameters courseID='math101';Response-1: OK with parameters courseID='math101',courseName='Mathematics',materials=['Lecture-1.pdf','Assignment-1.pdf','Lecture-2.pdf'];Request-2: Student-B GET /api/courses with parameters courseID='math101';Response-2: OK with parameters courseID='math101',courseName='Mathematics',materials=['Lecture-1.pdf'];Request-3: Student-C GET /api/courses with parameters courseID='eng101';Response-3: Access Denied]|0
Context: A fitness app where each user can only view and modify their own data. Requests: [Request-1: User-A GET /api/workouts with parameters workoutID='Workout-A';Response-1: OK with parameters workoutID='Workout-A',type='Yoga',duration='30 minutes',date='2023-07-01';Request-2: User-B GET /api/workouts with parameters workoutID='Workout-A'; Response-2: Not Found]|0
Context: A social network app where each user can only access and modify their own profile. No admin role exists. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-A';Response-1: OK with parameters userID='User-A',name='John Doe',email='johndoe@example.com';Request-2: User-B GET /api/profile with parameters userID='User-B';Response-2: OK with parameters userID='User-B',name='Jane Doe',email='janedoe@example.com';Request-3: User-A PUT /api/profile with parameters name='Jane Doe';Response-3: OK with parameters userID='User-A',name='Jane Doe',email='johndoe@example.com']|0
Context: A forum platform where each user can see only their own posts. Moderators can see all posts and delete posts by any user. Requests: [Request-1: User-A GET /api/posts with parameters post-ID='Post-A';Response-1: OK with parameters post-ID='Post-A',content='Hello',author='User-A';Request-2: User-B GET /api/posts with parameters post-ID='Post-B';Response-2: OK with parameters post-ID='Post-B',content='World',author='User-B';Request-3: Moderator GET /api/posts with parameters post-ID='Post-A';Response-3: OK with parameters post-ID='Post-A',content='Hello',author='User-A']|0
Context: An online payment system with 3 type of users Audiences, Audience2s and Privilaged-User. The Audiences can create posts and see their own published/unpublished articles. Audience2s can edit their own posts and all Audiences' posts, but cannot change the status of the posts. Privilaged-Users can edit anyone's articles and set the status for each one.;Request-1: Audience-A GET /drive/server/posts;Response-1: OK with parameters posts=['Post-1', 'Post-2'];Request-2: Audience2-A GET /drive/server/posts;Response-2: OK with parameters posts=['Post-1', 'Post-2', 'Post-3'];Request-3: Audience2-B PATCH /drive/server/posts with parameters postID='Post-2',content='Updated Content',status='drafted';Response-3: OK with parameters postID='Post-2',content='Updated Content', status='drafted';Request-4: Privilaged-User PATCH /drive/server/posts with parameters postID='Post-2',content='Another Updated Content',status='published';Response-4: OK with parameters postID='Post-2',content='Another Updated Content', status='published’]|1
Context: A movie streaming app where each user can view their own watchlist and favorites. Requests: [Request-1: User-A GET /api/watchlist with parameters userId='User-A';Response-1: OK with parameters userId='User-A',watchlist=['Movie-A','Movie-D','Movie-F']];Request-2: User-A GET /api/favorites with parameters userId='User-A';Response-2: OK with parameters userId='User-A',favorites=['Movie-C']];Request-3: User-B GET /api/watchlist with parameters userId='User-A';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.']|0
Context: A tracking app where each user can view their own location history. Admins cannot view user location history. Requests: [Request-1: User-A GET /api/location with parameters startDate='04-01-2022',endDate='04-30-2022';Response-1: OK with parameters locationData{'04-01-2022':'Home','04-02-2022':'Grocery Store'};Request-2: Admin GET /api/location with parameters startDate='04-01-2022',endDate='04-30-2022';Response-2: OK with parameters = 'No location data found']|0
Context: A credit score service where each user can access their own credit score report and some reports of their connections. Requests: [Request-1: User-A GET /api/credit-report with parameters userId='User-A';Response-1: OK with parameters userId='User-A',score='700',connections=['User-B','User-C'] ;Request-2: User-A GET /api/credit-report with parameters userId='User-B';Response-2: OK with parameters userId='User-B',score='750',connections=['User-A','User-D'];Request-3: User-A GET /api/credit-report with parameters userId='User-D';Response-3: Unauthorized with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='The user is not your connection'];Request-4: User-A GET /api/credit-report with parameters userId='User-C';Response-4: OK with parameters userId='User-C',score='800',connections=['User-A']]|0
Context: An online store that allows customers to purchase items. A customer should not be able to modify or view orders of another customer. Orders can only be modified or viewed by the customer who placed the order or by the store employee who manages all orders. Requests: [Request-1: Customer-A POST /api/orders with parameters item='Product-A', quantity=2;Response-1: OK with parameters orderId=1, item='Product-A', quantity=2;Request-2: Customer-A GET /api/orders with parameters orderId=1;Response-2: OK with parameters orderId=1, item='Product-A', quantity=2, cost=10.00;Request-3: Customer-B GET /api/orders with parameters orderId=1;Response-3: Unauthorized with parameters errorMessage='You are not authorized to view this order';Request-4: Employee GET /api/orders with parameters orderId=1;Response-4: OK with parameters orderId=1, item='Product-A', quantity=2, cost=10.00;Request-5: Employee PUT /api/orders with parameters orderId=1, item='Product-B', quantity=1, cost=5.00;Response-5: OK with parameters orderId=1, item='Product-B', quantity=1, cost=5.00']|0
Context: A travel booking app leaks personal information of customers in error response message Requests: [Request-1: User-A PUT /profile with parameters userID='123', email='johnsmith@gmail.com', city='New York', state='NY'; Response-1: Bad Request with parameters error='Cannot process address change for John Smith. SSN: 123-45-6789, DOB: 01/01/1985']|2
Context: A train booking website where users can book tickets for themselves only. Requests: [Request-1: User-A POST /api/tickets with parameters from='New York', to='San Francisco', date='2024-06-15'; Response-1: OK with parameters ticketID='123', from='New York', to='San Francisco',date='2024-06-15', price=120; Request-2: User-B POST /api/tickets with parameters from='New York', to='San Francisco', date='2024-06-15'; Response-2: Error 403 Forbidden with parameters message='You are not authorized to book tickets for others']|0
Context: A social media app where each account can view and modify its own profile. Requests: [Request-1: Account-A GET /api/profile with parameters accountID='Account-B';Response-1: OK with parameters = 'You are not authorized to view this profile';Request-2: Account-A PUT /api/profile with parameters accountID='Account-A',bio='Proud Engineer';Response-2: OK with parameters = 'Profile updated successfully'] |0
Context: A notes taking app where each user can only access their own notes. Admins cannot view user notes. Requests: [Request-1: User-A GET /api/notes with parameters noteID='User-B/work';Response-1: OK with parameters = 'You are not authorized to view this note';Request-2: User-A POST /api/notes with parameters text='New Note';Response-2: OK with parameters = 'Note created successfully'] |0
Context: A ticket booking system where each user can only view their own bookings. Requests: [Request-1: User-A POST /api/bookings with parameters eventName='Concert', date='2023-09-01', quantity=2;Response-1: OK with parameters eventName='Concert', date='2023-09-01', seatNumber=[12,13]];Request-2: User-A GET /api/bookings with parameters date='2023-09-01';Response-2: OK with parameters bookings=[{'eventName':'Concert', 'date':'2023-09-01', 'seatNumber':[12,13]}]]|0
Context: A subscription-based video streaming website where users can only view the videos they have subscribed to. Requests: [Request-1: User-A POST /api/subscribe with parameters videoID='Video-A';Response-1: OK with parameters videoID='Video-A', date='2023-05-01', expiryDate='2024-05-01'];Request-2: User-A GET /api/videos with parameters videoID='Video-A';Response-2: OK with parameters videoID='Video-A', title='Video Title A',description='This is video A', duration='1h30m']|0
Context: An education app where teachers can upload and manage course content for their own courses. Students can only view the content of their own courses. Requests: [Request-1: Teacher-A POST /api/courses with parameters name='Science 101';Response-1: OK with parameters courseID='101', teacherID='Teacher-A', name='Science 101';Request-2: Teacher-A PATCH /api/courses with parameters courseID='101', name='Science 101';Response-2: OK with parameters courseID='101', teacherID='Teacher-A', name='Science 101';Request-3: Student-B GET /api/courses with parameters courseID='101';Response-3: OK with parameters courseID='101', teacherID='Teacher-A', name='Science 101', content=['Lecture-1','Lecture-2'];Request-4: Student-B GET /api/courses with parameters courseID='102';Response-4: Forbidden with parameters message='Not enrolled in this course']|0
Context: An app where each user can only view their own schedule. Admins cannot view user schedules. Requests: [Request-1: User-A GET /api/schedules with parameters startDate='04-01-2022',endDate='04-30-2022';Response-1: OK with parameters scheduleData{'04-01-2022':'Meeting with Client','04-02-2022':'Phone Interview'};Request-2: Admin GET /api/schedules with parameters startDate='04-01-2022',endDate='04-30-2022';Response-2: OK with parameters = 'No schedule data found'] |0
Context: A blog platform where users can write, read and edit content. Users can only update/edit their own content. Editors can edit all content. Requests: [Request-1: User-A POST /api/articles with parameters title='My Blog', content='This is my first blog post.';Response-1: OK with parameters articleID='User-A/Post-1-HOLJI-LK',title='My Blog',content='This is my first blog post.';Request-2: User-A GET /api/articles with parameters articleID='User-A/Post-1-HOLJI-LK';Response-2: OK with parameters articleID='User-A/Post-1-HOLJI-LK',title='My Blog',content='This is my first blog post.';Request-3: User-A PUT /api/articles with parameters content='This is my edited blog post.';Response-3: OK with parameters articleID='User-A/Post-1-HOLJI-LK',title='My Blog',content='This is my edited blog post.';Request-4: Editor PUT /api/articles with parameters content='[...]';Response-4: OK with parameters articleID='User-A/Post-1-HOLJI-LK',title='My Blog',content='[...]']|0
Context: A school management system with 2 type of users Member and Admin for advertisements where each Member can only see their own listings. Admins can view and delete all listings. Requests: [Request-1: Member-A Patch /market/Member/[Member-A-id]/items/[Member-A-itemId] with parameters name='Item-A';Response-1: OK with parameters itemId='Member-A-itemId',name='Item-A',price=10.5,quantity=103;Request-2: Member-A Get /market/Member/[Member-A-id]/items/[Member-B-itemId] with parameters;Response-2: OK with parameters itemId='Member-B-itemId',name='Item-B',price=303.8,quantity=52;]|1
Context: An online education platform where students can only access their own courses and assignments. Requests: [Request-1: Student-A GET /api/courses with parameters courseID='Course-A';Response-1: OK with parameters courseID='Course-A',title='Algorithm & Data Structures';Request-2: Student-B GET /api/courses with parameters courseID='Course-A';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The course id is wrong or not authorized to view.']|0
Context: A hobby social network with 2 type of users Worker and Boss,where Boss can view and update Worker details for their own department. Requests: [Request-1: Boss-A GET /Workers with parameters departmentID='A';Response-1: OK with parameters Worker-ID='Emp-123', name='John Doe', designation='Software Engineer', salary=5000;Request-2: Boss-B GET /Workers with parameters departmentID='B';Response-2: OK with parameters Worker-ID='Emp-456', name='Jane Doe', designation='Business Analyst', salary=6000;Request-3: Boss-B PUT /Workers with parameters Worker-ID='Emp-123', salary=5500;Response-3: OK with parameters message='Salary updated successfully']|1
Context: A social media app with 2 types of users User and Admin where users can only access their own profile information. Requests: [Request-1: User-A POST /settings/account/change_password with parameters new_pass='password123';old_pass='password321';Response-1: Forbidden with parameters message='Error 403 Bad Password. Old password wrong.']; Request-2: User-B POST /settings/account/change_password with parameters new_pass='789password';old_pass='123password';Response-2: Failure with parameters details='new password can\'t contain """"""""password"""""""".']; Request-3: Admin GET /settings/acount/find_password_token with parameters user_name='UserName1';Response-3: OK with parameters message='User exists, request_issued = True, token = [21:1c:10:20:4d:61:1e:53:7f:8d:e7]'"""""""|2
Context: A social media platform where each user can only view and modify their own data. Requests: [Request-1: User-A POST /api/post with parameters content='Hello World!',date='2022-06-01'; Response-1: OK with parameters postID='Post-A',content='Hello World!',date='2022-06-01';Request-2: User-B POST /api/post with parameters content='Bye World!',date='2022-06-01'; Response-1: OK with parameters postID='Post-B',content='Bye World!',date='2022-06-01']|0
Context: A voting app where reviews and ratings are given for specific businesses but Customers should not be able to modify others' reviews.Request-1: Customer-A POST /bff/service/business/123/review with parameters rating=4, comment='Nice place';Response-1: OK with parameters reviewID='Review-1234',businessID='Business-123',CustomerID='Customer-A',rating=4,comment='Nice place';Request-2: Customer-B POST /bff/service/business/123/review with parameters rating=2, comment='Terrible place, poor customer service';Response-2: OK with parameters reviewID='Review-2345',businessID='Business-123',CustomerID='Customer-B',rating=2,comment='Terrible place, poor customer service';Request-3: Customer-A PUT /bff/service/business/123/review with parameters reviewID='Review-2345',rating=1;Response-3: OK with parameters message='Review updated successfully’|1
Context: A flight booking platform where users can modify their own bookings. Requests: [Request-1: User-A GET /api/bookings with parameters bookingID='Booking-A';Response-1: OK with parameters bookingID='Booking-A',departing='New York',arriving='London';Request-2: User-A PUT /api/bookings with parameters departing='Paris';Response-2: OK with parameters bookingID='Booking-A',departing='Paris',arriving='London';Request-3: User-B PUT /api/bookings with parameters departing='Paris';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The booking id is wrong or not authorized to modify.']|0
Context: A taxi app that allows customers to request a ride and drivers to accept or decline the ride request. Only authorized drivers are able to accept the ride request. Requests: [Request-1: Customer-A POST /api/rides with parameters pickup='210 Main Street', destination='401 Congress Ave';Response-1: OK with parameters rideId=1, estimatedTime=10 minutes;Request-2: Driver-A GET /api/rides with parameters rideId=1;Response-2: Unauthorized with parameters errorMessage='You are not authorized to view this ride';Request-3: Driver-B POST /api/rides with parameters rideId=1,accept='true';Response-3: OK with parameters rideId=1, driver='Driver-B', status='Accepted';Request-4: Customer-A GET /api/rides with parameters rideId=1;Response-4: OK with parameters rideId=1, driver='Driver-B', status='Accepted']|0
Context: A banking platform with 3 types of users: Customers, Tellers and Administrators. Customers can only view and modify their own information. Tellers can view and modify customer information. Administrators can view and edit any data. Requests: [Request-1: Customer-A PUT /update_password with parameters old_password='abc123', new_password='xyZ$%^@1'; Response-1: OK with parameters message='Your password has been successfully updated.'; Request-2: Teller-A GET /view_account_history with parameters user_id=12489; Response-2: Request Denied with parameters message='Your user credentials have been revoked at this time. We have detected an unauthorized attempt at accessing account information. We advise you to change your password as soon as possible. Technical Details: the password hash algorithm currently in use is bcrypt with default parameters.'];|2
Context: A flight booking portal with 2 type of users Employee and Executive where each Employee can only access and modify their own orders. Executive can view all orders. Requests: [Request-1: Employee-A GET /open//orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Employee-B GET /open//orders with parameters orderID='Order-A';Response-2: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Completed';Request-3: Employee-A PUT /open//orders with parameters status='Refunded';Response-3: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Refunded';Request-4: Employee-B PUT /open//orders with parameters orderID='Order-A',status='Delivered';Response-4: Created with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-5: Executive GET /open//orders with parameters orderID='Order-A';Response-5: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered']|1
Context: A social media app with 2 types of users: User and Moderator, where users can send private messages to each other. Moderators can delete messages. Requests: [Request-1: User-A POST /messages/send with parameters to='User-B', message='Hi there!'; Response-1: Internal Server Error with parameters message='Cannot send message to User-C, User-C does not exist.']|2
Context: A messaging app with 2 type of users User and Admin where users can chat with each other. Chats are encrypted end-to-end. Requests: [Request-1: User-A GET /messages/Alice/messages with parameters order='asc',limit=10;Response-1: OK with parameters messages=[{from:'Bob',to:'Alice',message:'Hey Alice!'}, {from:'Alice',to:'Bob',message:'Hi Bob!'},...];Request-2: User-A GET /messages/Bob/messages with parameters order='asc',limit=10;Response-2: OK with parameters messages=[{from:'Bob',to:'Alice',message:'Hey Alice!'}, {from:'Alice',to:'Bob',message:'Hi Bob!'}, ...];Request-3: User-A GET /messages/Alice/messages with parameters order='asc',limit=10;Response-3: Bad Request with parameters error='message id FK1748 does not exist'|2
Context: A website providing online dating services with 2 types of users users and admin, where users can create profiles and communicate with each other. Requests: [Request-1: User-A POST /api/profile/create with parameters name='Micheal', gender='Male', age='50', profession='Actor', email='micheal@gmail.com'; Response-1: OK with parameters message='account created'; Request-2: User-A POST /api/profile/message with parameters message='Hi there!'; Response-2: Error with parameters message='Error. Failed to send message to Jane Doe(email:janeDoe@gmail.com)'; Request-3: User-A POST /api/profile/message with parameters message='How are you?'; Response-3: Error with parameters message='Error. Failed to send message to Clara Jane(email:claraJane@gmail.com)' ] |2
Context: A messaging app with 2 type of users Worker and Executive for advertisements where each Worker can only see their own listings. Executives can view and delete all listings. Requests: [Request-1: Worker-A Patch /market/Worker/[Worker-A-id]/items/[Worker-A-itemId] with parameters name='Item-A';Response-1: OK with parameters itemId='Worker-A-itemId',name='Item-A',price=10.5,quantity=103;Request-2: Worker-A Get /market/Worker/[Worker-A-id]/items/[Worker-B-itemId] with parameters;Response-2: OK with parameters itemId='Worker-B-itemId',name='Item-B',price=303.8,quantity=52;]|1
Context: An online ordering food platform where users can edit their own preferences and view order history. Requests: [Request-1: User-A PUT /api/preferences with parameters favoriteFood='Pizza';Response-1: OK with parameters message='Your preferences was updated successfully!';Request-2: User-A GET /api/history;Response-2: OK with parameters history=['Pizza', 'Sushi'];Request-3: User-A GET /api/preferences;Response-3: OK with parameters favoriteFood='Pizza']|0
Context: A banking app where a user can only access and modify their own account information. Requests: [Request-1: User-A GET /api/accounts with parameters accountID='User-A';Response-1: OK with parameters accountHolder='User-A', accountID='User-A', balance=5000; Request-2: User-B GET /api/accounts with parameters accountID='User-A';Response-2: Error with message='Account not found'; Request-3: User-A PUT /api/accounts with parameters accountID='User-A', balance=5500;Response-3: OK with parameters message='Account updated successfully'; Request-4: User-B DELETE /api/accounts with parameters accountID='User-A';Response-4: Error with message='Account not found']|0
Context: A social media platform where users can share their thoughts and photos. Each user can only view and edit their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='123';Response-1: OK with parameters postID='123',content='This is my first post',attachments=['image.png', 'video.mp4'];Request-2: User-B GET /api/posts with parameters postID='456';Response-2: OK with parameters postID='456',content='This is my second post',attachments=['image.png'];Request-3: User-A GET /api/posts with parameters postID='456';Response-3: Access Denied]|0
Context: A blogging platform where users can create and manage their own blog posts. Users can only manage their own posts and cannot modify posts created by others. Requests: [Request-1: User-A Patch /blogs/posts with parameters postId='Post-A', title='Updated Title', content='Updated Content';Response-1: OK with parameters postId='Post-A', title='Updated Title', content='Updated Content', author='User-A';Request-2: User-A Get /blogs/posts with parameters postId='Post-B';Response-2: Not Found with parameters errorCode=404, errorMessage='Post not found';Request-3: User-A Delete /blogs/posts with parameters postId='Post-B';Response-3: Not Found with parameters errorCode=404, errorMessage='Post not found']|0
Context: A banking app where each user can only view and access their own account information. Requests: [Request-1: User-A GET /api/accounts with parameters accountID='User-A';Response-1: OK with parameters accountID='User-A',balance='5000 USD';Request-2: User-B GET /api/accounts with parameters accountID='User-A';Response-2: OK with parameters error='Account not found';]|0
Context: A movie streaming platform, where users can only access and watch their own purchased movies. Admins cannot view user data. Requests: [Request-1: User-A GET /api/movies with parameters movieID='Movie-1';Response-1: OK with parameters movieID='Movie-1',title='The Matrix',director='Wachowski brothers';Request-2: User-B GET /api/movies with parameters movieID='Movie-2';Response-2: OK with parameters movieID='Movie-2',title='The Shawshank Redemption',director='Frank Darabont';Request-3: Admin GET /api/movies with parameters movieID='Movie-1';Response-3: Access Denied]|0
Context: A medical app where each patient can view and modify their own medical records. Doctors cannot modify patient records. Requests: [Request-1: Patient-A GET /api/medical with parameters patientID='Patient-B';Response-1: OK with parameters = 'You are not authorized to view this record';Request-2: Patient-A PUT /api/medical with parameters height='167cm';Response-2: OK with parameters = 'Medical record updated successfully'] |0
Context: A messaging app that allows users to send messages to others. A user should not be able to modify or read messages from another user. Requests: [Request-1: User-A POST /api/messages with parameters recipient='User-B', message='Hello there';Response-1: OK with parameters messageId=1;Request-2: User-B GET /api/messages with parameters messageId=1;Response-2: Unauthorized with parameters errorMessage='This message does not belong to you';Request-3: User-A DELETE /api/messages with parameters messageId=1;Response-3: OK with parameters messageId=1, message='Hello there', deleted=true']|0
Context: A music streaming app with 1 type of users Customer, where customers can stream their favorite songs and save them to playlists. Requests: [Request-1: Customer-A POST /song/playlist/[Playlist-A-id] with parameters song='Song-A';Response-1: Internal Server Error with parameters message='failed to append Song-A to Playlist-A-id: {time: 2022-02-07 14:47:31.873208, log: {type: error, request: POST /song/playlist/2674b940-ded6-4a06-972b-09007085ba8d, data: {'song': 'Song-A'}, error: 'ValueError}}']|2
Context: A golf course booking system where golfers can book their tee times and view their reserved slots. Requests: [Request-1: Golfer-A GET /api/tee-times with parameters golferId='Golfer-A';Response-1: OK with parameters golferId='Golfer-A',reservedSlots=['Slot-1', 'Slot-2','Slot-3']];Request-2: Golfer-A POST /api/book with parameters slotId='Slot-4',golferId='Golfer-A';Response-2: OK with parameters reservationId='Reservation-1',slotId='Slot-4',golferId='Golfer-A'];Request-3: Golfer-B GET /api/tee-times with parameters golferId='Golfer-A';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.']|0
Context: An online education platform where students can access course materials and assignments. Each student can access their own course assignments, solutions and progress. Teachers can view students' performance. Requests: [Request-1: Student-A GET /api/courses with parameters courseId='Course-A';Response-1: OK with parameters courseId='Course-A',materials=['Material-1', 'Material-3','Material-5'],assignments=['Assignment-1', 'Assignment-2']];Request-2: Student-A PUT /api/assignments with parameters courseId='Course-A', assignmentId='Assignment-2', solution='Solution-2';Response-2: OK with parameters status='Success'];Request-3: Teacher GET /api/student-progress with parameters courseId='Course-A',studentId='Student-A';Response-3: OK with parameters courseId='Course-A',studentId='Student-A',progress='35%']|0
Context: An online gaming app where users can view their own game statistics. Requests: [Request-1: User-A GET /api/games with parameters gameID='Game-A';Response-1: OK with parameters gameID='Game-A',score=1200,level=5,items.1.name='Item A',items.1.damage='15';Request-2: User-B GET /api/games with parameters gameID='Game-A';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The game id is not authorized or wrong.']|0
Context: An online payment system with 3 type of users Players, Player2s and Expert. The Players can create posts and see their own published/unpublished articles. Player2s can edit their own posts and all Players' posts, but cannot change the status of the posts. Experts can edit anyone's articles and set the status for each one.;Request-1: Player-A GET /bff/content/posts;Response-1: OK with parameters posts=['Post-1', 'Post-2'];Request-2: Player2-A GET /bff/content/posts;Response-2: OK with parameters posts=['Post-1', 'Post-2', 'Post-3'];Request-3: Player2-B PATCH /bff/content/posts with parameters postID='Post-2',content='Updated Content',status='drafted';Response-3: OK with parameters postID='Post-2',content='Updated Content', status='drafted';Request-4: Expert PATCH /bff/content/posts with parameters postID='Post-2',content='Another Updated Content',status='published';Response-4: OK with parameters postID='Post-2',content='Another Updated Content', status='published’]|1
Context: XYZ Bank has an online banking platform where users can view their account information and perform transactions. Each user should only be able to access their own account. Requests: [Request-1: User-A GET /api/accounts with parameters accountID='User-A';Response-1: OK with parameters accountID='User-A', balance=1000,transactionHistory=['Deposit $500 on 2023-05-01', 'Withdraw $200 on 2023-05-05'];Request-2: User-B GET /api/accounts with parameters accountID='User-B';Response-2: OK with parameters accountID='User-B', balance=2500, transactionHistory=['Deposit $1000 on 2023-05-02',;'Withdraw $500 on 2023-05-10'];Request-3: User-A PUT /api/transfer with parameters from='User-A', to='User-B', amount=100;Response-3: OK with parameters message='Transfer successful']|0
Context: A weather notification app where users can view and manage their own weather subscriptions. Requests: [Request-1: User-A GET /api/weather with parameters location='New York';Response-1: OK with parameters location='New York',subscription='Daily updates',lastUpdatedAt='2023-05-15 16:30';Request-2: User-B GET /api/weather with parameters location='California';Response-2: OK with parameters location='California', subscription='Hourly updates',lastUpdatedAt='2023-05-15 16:50';Request-3: User-A PUT /api/weather with parameters subscription='Weekly updates';Response-3: OK with parameters location='New York',subscription='Weekly updates',lastUpdatedAt='2023-05-15 16:55';Request-4: User-B PUT /api/weather with parameters location='Boston';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.']|0
Context: A music-streaming platform, where each user can only access and listen to their own playlists. Artists can view their own songs and user statistics. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='Beginner Playlist' ;Response-1: OK with parameters playlistID='Beginner Playlist',songs=['Song-1', 'Song-2', 'Song-3'];Request-2: Artist-A GET /api/songs with parameters songID='Song-1';Response-2: OK with parameters songID='Song-1',title='Song-1',artist='Artist-A',duration=3:40,plays=2000;Request-3: Artist-B GET /api/songs with parameters songID='Song-1';Response-3: Access Denied]|0
Context: A password manager app where each user can only view their own passwords. Admins cannot view passwords. Requests: [Request-1: User-A GET /api/passwords with parameters passwordID='User-B/email';Response-1: OK with parameters = 'You are not authorized to view this password';Request-2: User-A PUT /api/passwords with parameters passwordID='User-A/email',password='newpassword';Response-2: OK with parameters = 'Password updated successfully'] |0
Context: An online marketplace where sellers can list their products, and users can buy the products. Each seller should only have access to update and delete their own products. Requests: [Request-1: Seller-A Patch /market/items/[Seller-A-itemId] with parameters name='Item-A';Response-1: OK with parameters itemId='Seller-A-itemId', name='Item-A', price=10.5, quantity=103;Request-2: Seller-A Get /market/items [Seller-A-itemId];Response-2: OK with parameters itemId='Seller-A-itemId', name='Item-A', price=10.5, quantity=103;Request-3: Admin Patch /market/items/[Seller-A-itemId] with parameters name='Updated Item-A';Response-3: OK with parameters itemId='Seller-A-itemId', name='Updated Item-A', price=15, quantity=200]|0
Context: A project management tool where team members can upload and track their own tasks. Managers can monitor progress and make changes. Requests: [Request-1: Team member-A POST /api/task with parameters taskName='Task A'; Response-1: OK with parameters taskID='abc', taskName='Task A', deadline='2022-12-31', status='Not started'; Request-2: Team member-A GET /api/task with parameters taskID='def'; Response-2: OK with parameters taskID='def', taskName='Task B', deadline='2022-12-31', status='In progress';]|0
Context: A rental car app where each user can only view and manage their own rental bookings. Admins cannot view or change bookings of any user. Requests: [Request-1: User-A GET /api/booking with parameters bookingID='User-A-Booking-1';Response-1: OK with parameters bookingID='User-A-Booking-1',carType='Sedan',location='New York',fromDate='2023-05-01',toDate='2023-05-05';Request-2: Admin GET /api/booking with parameters bookingID='User-A-Booking-1';Response-2: OK with parameters error='You are not allowed to perform this action';]|0
Context: A budget tracking app that allows users to log their expenses. No user should be able to modify other users' expenses. Requests: [Request-1: User-A POST /api/expenses with parameters amount=50,description='groceries';Response-1: OK with parameters expenseId=1, amount=50, description='groceries';Request-2: User-A GET /api/expenses with parameters expenseId=1;Response-2: OK with parameters expenseId=1, amount=50, description='groceries';Request-3: User-B GET /api/expenses with parameters expenseId=1;Response-3: Unauthorized with parameters errorMessage='This expense does not belong to you']|0
Context: An online appointment booking system where each user can only access their own booking history. Requests: [Request-1: User-A POST /api/bookings with parameters date='2023-05-31',time='11:30',service='Massage';Response-1: OK with parameters message='Your booking was confirmed successfully!';Request-2: User-A GET /api/history;Response-2: OK with parameters history=['2023-05-31 11:30:00 - Massage'];Request-3: User-B GET /api/history;Response-3: OK with parameters history=[]]|0
Context: An online movie ticket booking website where users can only view and edit their own bookings. Requests: [Request-1: User-A GET /api/bookings with parameters timeSlot='11:00 AM';Response-1: OK with parameters timeSlot='11:00 AM', movieName='Avengers: Endgame', theaterName='AMC', seatNumber='A3';Request-2: User-B GET /api/bookings with parameters timeSlot='11:00 AM';Response-2: Error with message='Booking not found';Request-3: User-A PUT /api/bookings with parameters timeSlot='11:00 AM', seatNumber='B5';Response-3: OK with parameters message='Booking updated successfully';Request-4: User-B DELETE /api/bookings with parameters timeSlot='11:00 AM';Response-4: Error with message='Booking not found']|0
Context: A recipe website where users can only view and modify their own recipe lists. Requests: [Request-1: User-A GET /api/recipes with parameters listID='User-A-List';Response-1: OK with parameters listID='User-A-List', listName='Favorites', recipes=[{'name':'Chocolate Cake', 'time':60}, {'name':'Chicken Curry', 'time':30}];Request-2: User-B GET /api/recipes with parameters listID='User-A-List';Response-2: Error with message='Recipe list not found';Request-3: User-A PUT /api/recipes with parameters listID='User-A-List', listName='Favorites 2';Response-3: OK with parameters message='Recipe list updated successfully';Request-4: User-B DELETE /api/recipes with parameters listID='User-A-List';Response-4: Error with message='Recipe list not found'] |0
Context: A school management system in which Employees can share files with other Employees or public. Only the owner of a file should be able to modify its attributes.;Request-1: Employee-A POST /v1/view/files with parameters content='Example content', access=public;Response-1: OK with parameters url='/files/public/12345/';Request-2: Employee-B GET /v1/view/files with parameters fileId='12345';Response-2: OK with parameters content='Example content', access=public;Request-3: Employee-B PUT /v1/view/files with parameters fileId='12345', content='Modified content';Response-3: 200 Ok with parameters fileId='12345',content='Modified content',access=public;Request-4: Employee-A PUT /v1/view/files with parameters fileId='12345', access=private;Response-4: OK with parameters url='/files/private/12345/';Request-5: Employee-B GET /v1/view/files with parameters fileId='12345';Response-5: Not Found with parameters errorCode=404,errorMessage='The file was not found.'|1
Context: An inventory management app where each user can only view and manage their own inventory. Admins can view and manage inventory of all users. Requests: [Request-1: User-A POST /api/inventory with parameters itemName='Product-A',quantity=100,price=10.5;Response-1: OK with parameters inventoryID='Inv-A',userID='User-A',itemName='Product-A',quantity=100,price=10.5;Request-2: User-A PATCH /api/inventory with parameters inventoryID='Inv-A',quantity=50;Response-2: OK with parameters inventoryID='Inv-A',userID='User-A',itemName='Product-A',quantity=50,price=10.5;Request-3: User-A DELETE /api/inventory with parameters inventoryID='Inv-B';Response-3: NotFound with parameters message='Inventory Inv-B not found';Request-4: Admin GET /api/inventory with parameters inventoryID='Inv-A';Response-4: OK with parameters inventoryID='Inv-A',userID='User-A',itemName='Product-A',quantity=50,price=10.5]|0
Context: A project management software where each user can only access their own projects and tasks. Requests: [Request-1: User-A GET /api/projects with parameters projectID='Project-A';Response-1: OK with parameters projectID='Project-A',name='Project-A',tasks=['Task-1', 'Task-2'];Request-2: User-A GET /api/tasks with parameters taskID='Task-1';Response-2: OK with parameters taskID='Task-1',name='Task-1',status='TODO';Request-3: User-B GET /api/projects with parameters projectID='Project-A';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='The project id is wrong or not authorized to display.']|0
Context: An e-learning platform where each student can see only their own courses and grades. Teachers can see all courses and grades of students in their course. Requests: [Request-1: Student-A GET /api/courses with parameters courseID='Course-A';Response-1: OK with parameters courseID='Course-A', courseName='Mathematics', teacher='Teacher-A', grade=90;Request-2: Student-B GET /api/courses with parameters courseID='Course-B';Response-2: OK with parameters courseID='Course-B', courseName='Science',teacher='Teacher-B', grade=85;Request-3: Teacher-A GET /api/courses with parameters courseID='Course-B';Response-3: OK with parameters courseID='Course-B', courseName='Science', teacher='Teacher-B', grade=85]|0
Context: A Sales reporting website with 2 type of users User and Moderator,where Moderator can view and update User details for their own department. Requests: [Request-1: Moderator-A GET /Users with parameters departmentID='A';Response-1: OK with parameters User-ID='Emp-123', name='John Doe', designation='Software Engineer', salary=5000;Request-2: Moderator-B GET /Users with parameters departmentID='B';Response-2: OK with parameters User-ID='Emp-456', name='Jane Doe', designation='Business Analyst', salary=6000;Request-3: Moderator-B PUT /Users with parameters User-ID='Emp-123', salary=5500;Response-3: OK with parameters message='Salary updated successfully']|1
Context: A project management system where users can create projects, add tasks, and assign tasks to users. A user can only see and modify the projects, tasks, and assignments to them. Requests: [Request-1: User-A Post /api/projects with parameters projectName='Project-A';Response-1: OK with parameters projectId='Project-A', owner='User-A';Request-2: User-A Post /api/tasks with parameters projectId='Project-A', taskName='Task-A', assignedTo='User-A';Response-2: OK with parameters taskId='Task-A', assignedTo='User-A', status='Open';Request-3: User-B Get /api/tasks with parameters taskId='Task-B';Response-3: Not Found with parameters errorCode=404, errorMessage='Task not found';Request-4: User-A Patch /api/tasks with parameters taskId='Task-A', status='In progress';Response-4: OK with parameters taskId='Task-A', assignedTo='User-A', status='In progress']|0
Context: An online chat app for counselling sessions between doctors and patients. Each patient should only be able to initiate a chat with their own doctor. Requests: [Request-1: Patient-A GET /api/doctor with parameters doctorID='Doctor-A';Response-1: OK with parameters doctorID='Doctor-A',name='Dr. Smith', specialty='Cardiology';Request-2: Patient-B GET /api/doctor with parameters doctorID='Doctor-B';Response-2: OK with parameters doctorID='Doctor-B',name='Dr. Brown',specialty='Neurology';Request-3: Patient-A POST /api/chat with parameters to='Doctor-A', message='Hi, how are you?';Response-3: OK with parameters chatID='[Patient-A-Doctor-A-uniqueID]',userID='Patient-A',doctorID='Doctor-A',messages=['Hi, how are you?', 'I am doing fine.'];Request-4: Patient-B POST /api/chat with parameters to='Doctor-A', message='Hi, how are you?';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.']|0
Context: A flight booking portal where reviews and ratings are given for specific businesses but Engineers should not be able to modify others' reviews.Request-1: Engineer-A POST /view/folder/business/123/review with parameters rating=4, comment='Nice place';Response-1: OK with parameters reviewID='Review-1234',businessID='Business-123',EngineerID='Engineer-A',rating=4,comment='Nice place';Request-2: Engineer-B POST /view/folder/business/123/review with parameters rating=2, comment='Terrible place, poor customer service';Response-2: OK with parameters reviewID='Review-2345',businessID='Business-123',EngineerID='Engineer-B',rating=2,comment='Terrible place, poor customer service';Request-3: Engineer-A PUT /view/folder/business/123/review with parameters reviewID='Review-2345',rating=1;Response-3: OK with parameters message='Review updated successfully’|1
Context: An online platform where each user has their own website. No user should be able to modify or access another user's website. Requests: [Request-1: User-A POST /api/website with parameters title='Website-A', description='My personal website';Response-1: OK with parameters websiteId=1, title='Website-A', description='My personal website';Request-2: User-A GET /api/website with parameters websiteId=1;Response-2: OK with parameters websiteId=1, title='Website-A', description='My personal website';Request-3: User-B GET /api/website with parameters websiteId=1;Response-3: Unauthorized with parameters errorMessage='You are not authorized to view this website']|0
Context: A job portal where each user can only view their own applications. Requests: [Request-1: User-A POST /api/applications with parameters jobID='Job-A',resume='Resume-A';Response-1: OK with parameters jobID='Job-A',resume='Resume-A', date='2023-02-01'];Request-2: User-A GET /api/applications with parameters applicationID='App-1';Response-2: OK with parameters applicationID='App-1', jobID='Job-A',resume='Resume-A', date='2023-02-01']|0
Context: A car dealership portal with 3 types of users: buyers, sellers, and administrators. Buyers and sellers can only view and purchase/sell their own vehicles. Administrators can view all activity. Requests: [Request-1: Buyer-A GET /cars with parameters make='Honda'; Response-1: Error with parameters message='Invalid request: make is a required field.'; Request-2: Buyer-B GET /cars with parameters make='Toyota'; Response-2: Error with parameters message='Unable to fetch data. Please try again later.']; |2
Context: A music streaming app where each user can only listen and manage their own playlists. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='Playlist-A';Response-1: OK with parameters playlistID='Playlist-A',songs=['Song-A','Song-B','Song-C'];Request-2: User-B GET /api/playlists with parameters playlistID='Playlist-A';Response-2: OK with parameters error='Playlist not found;']|0
Context: A music streaming app where each user can only access and modify their own playlists and song data. Requests: [Request-1: User-A POST /api/playlists with parameters name='Favorite Songs',songsList;Response-1: OK with parameters playlistID='Playlist-A',name='Favorite Songs',songsList=['Song-A','Song-B','Song-C']; Request-2: User-B GET /api/playlist with parameters;Response-2: OK with parameters playlists=['Playlist1','Playlist2','Playlist3']; Request-3: User-A PATCH /api/playlists with parameters playlistID='Playlist-A', name='My Favorite Songs';Response-3: OK with parameters playlistID='Playlist-A', name='My Favorite Songs',songsList=['Song-D','Song-B'];Request-4: User-B DELETE /api/playlist with parameters playlistID='Playlist-A';Response-4: Not Found]|0
Context: A car rental app where users can only edit their own profile information and rental history. Requests: [Request-1: User-A PUT /api/profile with parameters phoneNumber='(555) 222-5555';Response-1: OK with parameters message='Your profile was updated successfully!';Request-2: User-A GET /api/history;Response-2: OK with parameters history=['Car 1', 'Car 2'];Request-3: User-A GET /api/profile;Response-3: OK with parameters name='User-A', email='user-a@example.com', phoneNumber='(555) 222-5555']|0
Context: A system where employees can only view/update their own task boards. Requests: [Request-1: Employee-A GET /api/tasks with parameters taskID='Task-A';Response-1: OK with parameters taskID='Task-A',title='Task A', content='Doing things';Request-2: Employee-A PUT /api/tasks with parameters content='Doing great things';Response-2: OK with parameters taskID='Task-A',title='Task A',content='Doing great things';Request-3: Employee-B PUT /api/tasks with parameters content='Doing great things';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The task id is not authorized or wrong.']|0
Context: An online shopping app where each user can only view and modify their own cart and order history. Requests: [Request-1: User-A GET /api/cart with parameters itemID='Item-A';Response-1: OK with parameters itemID='Item-A',price=200,quantity=2;Request-2: User-B GET /api/cart with parameters itemID='Item-A';Response-2: OK with parameters error='Item not found';Request-3: User-A GET /api/orders with parameters orderID='Order-B';Response-3: OK with parameters error='Order not found';]|0
Context: An email sending application where each user logs in to their account. Requests: [Request-1: User-A GET /inbox with parameters from='User-B'; Response-1: OK with parameters = 'You are not authorized to view this message'; Request-2: User-B POST /emails/send with parameters to='User-C',body='Hello!'; Response-2: OK with parameters = 'Message sent successfully']|0
Context: An online chat app where users can only view their own messages. Requests: [Request-1: User-A POST /api/chat with parameters recipient='User-A', message='Hi';Response-1: OK with parameters recipient='User-A', sender='John', message='Hi'];Request-2: User-B POST /api/chat with parameters recipient='User-B', message='Ok';Response-2: OK with parameters recipient='User-B', sender='Jane', message='Ok']|0
Context: A hobby social network with 2 type of users Member and Admin, where Members can view and manage their own healthcare records. Requests: [Request-1: Member-A GET /healthcare with parameters MemberID='Member-A';Response-1: OK with parameters MemberID='Member-A', prescriptions=['Medicine A', 'Medicine B'], pastAppointments=[{'Admin': 'Dr. Johnson', 'Date': '05-05-2023'}, {'Admin': 'Dr. Smith', 'Date': '10-10-2023'}];Request-2: Member-B GET /healthcare with parameters MemberID='Member-B';Response-2: OK with parameters MemberID='Member-B', prescriptions=['Medicine C', 'Medicine D'], pastAppointments=[{'Admin': 'Dr. Williams', 'Date': '06-06-2023'}, {'Admin': 'Dr. Brown', 'Date': '12-12-2023'}];Request-3: Member-A POST /healthcare with parameters MemberID='Member-B', prescription='Medicine C';Response-3: OK with parameters message='Prescription added successfully']|1
Context: An e-commerce app where each user can modify their own account information. Requests: [Request-1: User-A PUT /api/account with parameters address='New York';Response-1: OK with parameters name='User-A', address='New York', email='user-a@example.com';Request-2: User-A GET /api/account;Response-2: OK with parameters name='User-A', address='New York', email='user-a@example.com';Request-2: User-B GET /api/account;Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The user id is not authorized.']|0
Context: A social media app where each user can only view and update their own posts and account. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-A',text='What a great day!',likes=20,comments=['Awesome','Congratulations'];Request-2: User-B GET /api/posts with parameters postID='Post-A';Response-2: OK with parameters error='Post not found';Request-3: Admin PUT /api/users with parameters userID='User-A',name='John Doe'; Response-3: OK with parameters error='You are not allowed to perform this action';]|0
Context: A payment processing platform where users can view and operate with transactions. Requests: [Request-1: User-A GET /api/transactions with parameters transactionID='Transaction-A';Response-1: OK with parameters transactionID='Transaction-A',amount='$500',status='paid'; Request-2: User-A GET /api/transactions with parameters transactionID='Transaction-B';Response-2: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The transaction id is wrong or not authorized to view.']|0
Context: An online payment system with 3 types of users Developer, Developer2 and Editor. Developer and Developer2 can only view and edit their own data. Editor can view and edit all data. Requests: [Request-1: Developer-A GET /workshop/store/drive/shop/orders with parameters orderID='Developer-A';Response-1: OK with parameters orderID='Developer-A',totalPrice=12,items.1.name='ball',items.2.price=1;Request-2: Developer-B GET /workshop/store/drive/shop/orders with parameters orderID='Developer-B';Response-2: OK with parameters orderID='Developer-B',totalPrice=155,items.1.name='hand',items.2.price=55;Request-3: Developer-A GET /workshop/store/drive/shop/orders with parameters orderID='Developer-B';Response-3: OK with parameters orderID='Developer-B',totalPrice=155,items.1.name='hand',items.2.price=55]|1
Context: An online banking application where each customer can only view and manage their own bank accounts. Requests: [Request-1: Customer-A GET /api/accounts with parameters accountID='Account-B';Response-1: OK with parameters = 'You are not authorized to view this account';Request-2: Customer-A POST /api/transfers with parameters from='Account-A',to='Account-B',amount=100;Response-2: OK with parameters = 'Transfer successful']  |0
Context: A school management system with 2 type of users Audience and Manager, where each Audience can only view and download their own files. Managers cannot view Audience files. Requests: [Request-1: Audience-A GET /server/integration/files with parameters fileID='Audience-A/email.docx';Response-1: OK with parameters fileID='Audience-A/email.docx',content='Hello World!',size=12KB;Request-2: Audience-B GET /server/integration/files with parameters fileID='Audience-B/photos/beach.jpg';Response-2: OK with parameters fileID='Audience-B/photos/beach.jpg', content ['...'],size=2MB;Request-3: Audience-A POST /server/integration/files with parameters fileContent='New Content';Response-3: OK with parameters fileID='Audience-A/email.docx',content='New Content',size=10KB;Request-4: Audience-B POST /server/integration/files with parameters fileContent='New Content';Response-4: OK with parameters fileID='Audience-B/photos/beach.jpg',content='New Content',size=1.5MB;Request-5: Manager GET /server/integration/files with parameters fileID='Audience-A/email.docx';Response-5: OK with parameters fileID='Audience-A/email.docx',content='Hello World!',size=12KB]|1
Context: An online fitness platform where each user can only view their own workouts and progress. Requests: [Request-1: User-A POST /api/workouts with parameters workoutType='Chest Press', weight=100;Response-1: OK with parameters workoutType='Chest Press', weight=100, reps=10, date='2022-06-01'];Request-2: User-A POST /api/workouts with parameters workoutType='Leg Press', weight=120;Response-2: OK with parameters workoutType='Leg Press', weight=120, reps=8, date='2022-06-02'];Request-3: User-A GET /api/workouts with parameters workoutType='Leg Press';Response-3: OK with parameters workoutType='Leg Press', weight=120, reps=8, date='2022-06-02']|0
Context: A car rental system where users can rent cars, and rental agents can approve bookings. Rental agents can only approve bookings for the cars they are assigned to. Requests: [Request-1: Rental Agent-A Get /api/bookings with parameters bookingId='Booking-A';Response-1: Forbidden with parameters errorCode=403, errorMessage='You are not allowed to perform this action.', errorDetails='The car is not assigned to you';Request-2: Rental Agent-B Get /api/bookings with parameters bookingId='Booking-B';Response-2: OK with parameters bookingId='Booking-B', carModel='Toyota Camry', rentalAgent='Rental Agent-B';Request-3: Rental Agent-B Patch /api/bookings with parameters bookingId='Booking-B',status='approved';Response-3: OK with parameters bookingId='Booking-B', carModel='Toyota Camry', rentalStatus='Approved']|0
Context: A car-sharing service with two types of users, Renters and Car Owners. Renters can view and lease cars while car owners can lease and view their own cars. Requests: [Request-1: CarOwner-A PUT /cars/Audi-ABC with parameters price='25000';Response-1: OK with parameters message='The car price was updated successfully';Request-2: Renter-A GET /cars/Audi-ABC with parameters;Response-2: Forbidden with parameters message='You are not authorized to view car Audi-ABC';]|2
Context: A shopping app where each user can only view and modify their own cart. Requests: [Request-1: Customer-A GET /api/cart with parameters cartID='Cart-B';Response-1: OK with parameters = 'You are not authorized to view this cart';Request-2: Customer-A PUT /api/cart with parameters cartID='Cart-A',item='Shirt',quantity=2;Response-2: OK with parameters = 'Cart updated successfully'] |0
Context: an stats dashboard for a mobile app with 2 type of users Customer and Privilaged-User, where Customers can view and manage their own healthcare records. Requests: [Request-1: Customer-A GET /healthcare with parameters CustomerID='Customer-A';Response-1: OK with parameters CustomerID='Customer-A', prescriptions=['Medicine A', 'Medicine B'], pastAppointments=[{'Privilaged-User': 'Dr. Johnson', 'Date': '05-05-2023'}, {'Privilaged-User': 'Dr. Smith', 'Date': '10-10-2023'}];Request-2: Customer-B GET /healthcare with parameters CustomerID='Customer-B';Response-2: OK with parameters CustomerID='Customer-B', prescriptions=['Medicine C', 'Medicine D'], pastAppointments=[{'Privilaged-User': 'Dr. Williams', 'Date': '06-06-2023'}, {'Privilaged-User': 'Dr. Brown', 'Date': '12-12-2023'}];Request-3: Customer-A POST /healthcare with parameters CustomerID='Customer-B', prescription='Medicine C';Response-3: OK with parameters message='Prescription added successfully']|1
Context: A hotel booking system with 1 type of users Developer, where they can book their own flights. Requests: [Request-1: Developer-A POST /external/folder/flights with parameters from='New York', to='Paris', date='2024-06-01'; Response-1: OK with parameters flightID='123', from='New York', to='Paris',date='2024-06-01', price=1200; Request-2: Developer-B POST /external/folder/flights with parameters from='San Francisco', to='Tokyo', date='2024-06-15'; Response-2: OK with parameters flightID='456', from='San Francisco', to='Tokyo',date='2024-06-15', price=2000; Request-3: Developer-A DELETE /external/folder/flights with parameters flightID='456'; Response-3: OK with parameters]|1
Context: An online learning platform where a student can only view and change their own course content. Requests: [Request-1: Student-A GET /api/courses with parameters courseID='CSE101';Response-1: OK with parameters courseID='CSE101', courseName='Intro to Programming', filedUnder='Computer Science';Request-2: Student-B GET /api/courses with parameters courseID='CSE101';Response-2: Error with message='Course not found';Request-3: Student-A PATCH /api/courses with parameters courseID='CSE101', courseName='Intro to Programming 2';Response-3: OK with parameters message='Course updated successfully';Request-4: Student-A DELETE /api/courses with parameters courseID='CSE101';Response-4: OK with parameters message='Course deleted successfully']|0
Context: An email service where users can only access their own emails. Requests: [Request-1: User-A GET /api/emails with parameters emailID='User-A/email-123';Response-1: OK with parameters emailID='User-A/email-123', subject='Hello World', content='This is a test email';Request-2: User-B GET /api/emails with parameters emailID='User-A/email-123';Response-2: Error 403 Forbidden with parameters message='You are not authorized to access this email']|0
Context: A social media app where each user can only view and manage their own posts and messages. Admins can view posts, messages and profiles of all users. Requests: [Request-1: User-A POST /api/posts with parameters postContent='This is my first post';Response-1: OK with parameters postID='Post-A', userID='User-A', postContent='This is my first post';Request-2: User-A PATCH /api/posts with parameters postID='Post-A', postContent='This is my modified post';Response-2: OK with parameters postID='Post-A',userID='User-A',postContent='This is my modified post';Request-3: User-A GET /api/posts with parameters postID='Post-B';Response-3: NotFound with parameters message='Post-B not found';Request-4: Admin GET /api/posts with parameters postID='Post-A';Response-4: OK with parameters postID='Post-A',userID='User-A',postContent='This is my modified post']|0
Context: A banking app where customers only view and modify their own account information. Requests: [Request-1: Customer-A POST /api/accounts with parameters accountNumber='1234-5678-9012', amount=500; Response-1: OK with parameters accountNumber='1234-5678-9012', balance=500; Request-2: Customer-B POST /api/accounts with parameters accountNumber='4567-8901-2345', amount=300; Response-2: OK with parameters accountNumber='4567-8901-2345', balance=300; Request-3: Customer-A GET /api/accounts with parameters accountNumber='4567-8901-2345'; Response-3: Forbidden]|0
Context: A social media website where users can only modify their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='User-A/post-123';Response-1: OK with parameters postID='User-A/post-123', content='Hello world', likes=5;Request-2: User-A PUT /api/posts with parameters postID='User-B/post-456', content='Updated post content';Response-2: Error 403 Forbidden with parameters message='You are not authorized to modify this post']|0
Context: An online shopping platform with 2 types of users -- Customers and Merchants. Each user can only access and edit their own profile data. Requests: [Request-1: Customer-A POST /login with parameters email='janeDoe@gmail.com', password='abc123'; Response-1: Incorrect Credentials with parameters message='incorrect password entered for account with email: janeDoe@gmail.com. Please check your login credentials and try again. If you continue having trouble accessing your account, please contact our support team at support@onlineshop.com.']; Request-2: Merchant-B POST /login with parameters email='julianSmith@gmail.com', password='Gh$$d&%'; Response-2: Incorrect Credentials with parameters message='the email provided does not exist in our system or has already been taken. Please enter a valid email address and try again'];|2
Context: A stock trading app where users can only access their own trading data. Requests: [Request-1: User-A GET /api/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',stockName='ABC', orderType='BUY',quantity=500,price=10.5,status='Open';Request-2: User-B GET /api/orders with parameters orderID='Order-B';Response-2: OK with parameters orderID='Order-B', stockName='XYZ',orderType='SELL',quantity=100,price=15.0,status='Filled';Request-3: User-A PUT /api/orders with parameters price=12;Response-3: OK with parameters orderID='Order-A', stockName='ABC',orderType='BUY',quantity=500,price=12,status='Open';Request-4: User-B PUT /api/orders with parameters status='Canceled';Response-4: OK with parameters orderID='Order-B', stockName='XYZ',orderType='SELL',quantity=100,price=15.0,status='Canceled']|0
Context: A banking app where customers can only access their own accounts and transactions. Requests: [Request-1: Customer-A GET /api/accounts with parameters accountID='123';Response-1: OK with parameters accountID='123',balance=1000,transactions=['12-05-2023:1000','10-06-2023:2000'];Request-2: Customer-B GET /api/accounts with parameters accountID='456';Response-2: OK with parameters accountID='456',balance=500,transactions=['11-05-2023:500'];Request-3: Customer-A GET /api/accounts with parameters accountID='456';Response-3: Access Denied]|0
Context: An inventory system that allows employees to manage inventory stock. Requests: [Request-1: Employee-A POST /api/inventory with parameters item='Product-A', quantity=20;Response-1: OK with parameters itemId=1, item='Product-A', quantity=20, cost=4.00;Request-2: Employee-B GET /api/inventory with parameters itemId=1;Response-2: Unauthorized with parameters errorMessage='You are not authorized to view this inventory';Request-3: Employee-A PUT /api/inventory with parameters itemId=1, quantity=15;Response-3: OK with parameters itemId=1, item='Product-A', quantity=15, cost=4.00']|0
Context: A secure messaging app for financial companies, where senders can securely send sensitive data to verified receivers. Requests: [Request-1: Sender-A POST /secure-message with parameters receiver='receiver-email-123',message='sensitive client account information';Response-1: Unauthorized with parameters msg='Receiver not verified, please ask them to create an account on the system']|2
Context: A survey management platform where students, teachers, and admin can create and manage surveys. Students can only view surveys created by their teachers, teachers can view and manage surveys created by them only, and admins can view and manage all surveys. Requests: [Request-1: Student-A Get /api/surveys with parameters surveyId='Survey-A';Response-1: Forbidden with parameters errorCode=403, errorMessage='You are not allowed to perform this action.', errorDetails='The survey is not created by your teacher';Request-2: Teacher-B Get /api/surveys with parameters surveyId='Survey-B';Response-2: OK with parameters surveyId='Survey-B', questions=['Question-1', 'Question-2'], students=['Student-A', 'Student-B', 'Student-C'];Request-3: Teacher-B Put /api/surveys with parameters surveyId='Survey-B', questions=['Question-1', 'Question-2', 'Question-3'], students=['Student-A', 'Student-B'];Response-3: OK with parameters surveyId='Survey-B', questions=['Question-1', 'Question-2', 'Question-3'], students=['Student-A', 'Student-B'];Request-4: Admin Get /api/surveys with parameters surveyId='Survey-C';Response-4: OK with parameters surveyId='Survey-C', questions=['Question-1', 'Question-2', 'Question-3', 'Question-4'], students=['Student-A', 'Student-B', 'Student-C', 'Student-D'] |0
Context: A travel platform where customers can book their trips. There are 3 types of users: Customers, Travel Agents and Administrators. Customers can only view and modify their own trip info. Travel Agents can view and modify trip info for their clients. Administrators can view and modify all trip info. Requests: [Request-1: Travel Agent-A PUT /modify_trip with parameters user_id=3838, new_date='03/10/22'; Response-1: 401 Unauthorized with parameters message='You are unauthorized to view or modify this trip details. Please check that you are logged in as the correct user for user_id=3838   Name: John Doe   Email: johndoe@email.com   Phone: xxx-xxx-xxxx'; Request-2: Administrator-B GET /view_all_trips with parameters start_date='01/01/2021', end_date='03/10/2022'; Response-2: Authorization Error with parameters message='You are unauthorized to view or modify trips outside of your instance. Please confirm the authorization parameters you wish to modify or contact your designated system administrator for further support.']; |2
Context: A hobby social network with 3 types of users Employee, Employee2 and Manager. Employee and Employee2 can only view and edit their own data. Manager can view and edit all data. Requests: [Request-1: Employee-A GET /workshop/open/folder/shop/orders with parameters orderID='Employee-A';Response-1: OK with parameters orderID='Employee-A',totalPrice=12,items.1.name='ball',items.2.price=1;Request-2: Employee-B GET /workshop/open/folder/shop/orders with parameters orderID='Employee-B';Response-2: OK with parameters orderID='Employee-B',totalPrice=155,items.1.name='hand',items.2.price=55;Request-3: Employee-A GET /workshop/open/folder/shop/orders with parameters orderID='Employee-B';Response-3: OK with parameters orderID='Employee-B',totalPrice=155,items.1.name='hand',items.2.price=55]|1
Context: A hobby social network in which Engineers can share files with other Engineers or public. Only the owner of a file should be able to modify its attributes.;Request-1: Engineer-A POST /system/server/files with parameters content='Example content', access=public;Response-1: OK with parameters url='/files/public/12345/';Request-2: Engineer-B GET /system/server/files with parameters fileId='12345';Response-2: OK with parameters content='Example content', access=public;Request-3: Engineer-B PUT /system/server/files with parameters fileId='12345', content='Modified content';Response-3: 200 Ok with parameters fileId='12345',content='Modified content',access=public;Request-4: Engineer-A PUT /system/server/files with parameters fileId='12345', access=private;Response-4: OK with parameters url='/files/private/12345/';Request-5: Engineer-B GET /system/server/files with parameters fileId='12345';Response-5: Not Found with parameters errorCode=404,errorMessage='The file was not found.'|1
Context: A chat app with 2 types of users, Users and Admins. Users can chat with each other. Chats are not encrypted end-to-end. Requests: [Request-1: User-1 GET /chatrooms/room1/user2 with parameter limit=10; Response-1: Error with message='cannot fetch messages. Query: SELECT * FROM room1 WHERE userId='user2' LIMIT 10.'];|2
Context: A banking app where each user can only view and manage their own account. Managers can view account details of all users. Requests: [Request-1: User-A POST /api/accounts with parameters accountName='Checking Account';Response-1: OK with parameters accountID='Acc-123',userID='User-A',accountName=Checking Account', balance=1000;Request-2: Manager-A GET /api/accounts with parameters accountID='Acc-456';Response-2: NotFound with parameters message='Account Acc-456 not found';Request-3: Manager-B PUT /api/accounts with parameters accountID='Acc-123',balance=1500;Response-3: OK with parameters accountID='Acc-123',userID='User-A',accountName=Checking Account', balance=1500;Request-4: Manager-A GET /api/accounts with parameters accountID='Acc-123';Response-4: OK with parameters accountID='Acc-123',userID='User-A',accountName=Checking Account', balance=1500]|0
Context: A chat room system where users can chat privately with only those who they allow. Users can only add and delete chat members from their own private chat. Requests: [Request-1: User-A Post /api/chats with parameters chatName='Chat-A', member=['User-B'];Response-1: OK with parameters chatId='Chat-A', member=['User-A', 'User-B'], messages=[Welcome to Chat-A];Request-2: User-B Get /api/chats with parameters chatId='Chat-B';Response-2: Not Found with parameters errorCode=404, errorMessage='Chat not found';Request-3: User-A Patch /api/chats with parameters chatId='Chat-A', member=['User-C'];Response-3: OK with parameters chatId='Chat-A', member=['User-A', 'User-B', 'User-C'] ]|0
Context: An online shopping website where customers can only view and modify their own orders. Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',totalPrice=123,items.1.name='Shirt',items.2.price=23;Request-2: Customer-B GET /api/orders with parameters orderID='Order-A';Response-2: Error with message='Order not found';Request-3: Customer-A PUT /api/orders with parameters orderID='Order-A',status='Cancelled';Response-3: OK with parameters message='Order updated successfully';Request-4: Customer-B DELETE /api/orders with parameters orderID='Order-A';Response-4: Error with message='Order not found']|0
Context: A car rental app, where customers can only see their own reservations. Employees can view all reservations and update them. Requests: [Request-1: Customer-A GET /api/reservations with parameters reservationID='Res-001'; Response-1: OK with parameters reservationID='Res-001',carType='Sedan',startDate='20-05-2024',endDate='30-05-2024';Request-2: Employee-A GET /api/reservations with parameters reservationID='Res-002'; Response-2: OK with parameters reservationID='Res-002',carType='SUV',startDate='25-06-2024',endDate='02-07-2024';Request-3: Customer-A GET /api/reservations with parameters reservationID='Res-002'; Response-3: Access Denied]|0
Context: A social media platform that allows users to share posts. Requests: [Request-1: User-A POST /api/posts with parameters bodyText='my first post';Response-1: OK with parameters titleText='Post title', bodyText='my first post';Request-2: User-A GET /api/posts with parameters postId=1;Response-2: OK with parameters titleText='Post title', bodyText='my first post';Request-3: User-A PUT /api/posts with parameters postId=1,bodyText='updated post';Response-3: OK with parameters titleText='Post title', bodyText='updated post']|0
Context: An e-learning web app where each student can view and modify their own course materials. Teachers can view all course materials. Requests: [Request-1: Student-A GET /courseMaterials with parameters courseID='Course-a'; Response-1: OK with parameters courseID='Course-a', courseName='Intro to Coding', materials=['Lesson-1','Lesson-2','Quiz-1']; Request-2: Teacher GET /courseMaterials with parameters courseID='Course-a'; Response-2: OK with parameters courseID='Course-a', courseName='Intro to Coding', materials=['Lesson-1','Lesson-2','Quiz-1'];]|0
Context: A finance app with 2 types of users, Customers and Teller. Customers can view their balance, and Teller can view all balances and modify them. Requests: [Request-1: Customer-A GET /account/balance with parameter accountNumber=123456; Response-1: Internal Server Error with message='cannot retrieve balance. DB query: SELECT balance FROM accounts WHERE accountNumber='123456';'];|2
Context: A music streaming app where each user can only view and play their own playlists or music. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='Playlist-A';Response-1: OK with parameters playlistID='Playlist-A', name='Piano Classics', songs=[{'title':'Moon River', 'artist':'Audrey Hepburn'}, {'title':'Clair de Lune', 'artist':'Debussy'}];Request-2: User-B GET /api/playlists with parameters playlistID='Playlist-A';Response-2: Error with message='Playlist not found';Request-3: User-A PUT /api/playlists with parameters playlistID='Playlist-A',name='Piano Classics 2';Response-3: OK with parameters message='Playlist updated successfully';Request-4: User-B DELETE /api/playlists with parameters playlistID='Playlist-A';Response-4: Error with message='Playlist not found'] |0
Context: A voting app in which Travellers can share files with other Travellers or public. Only the owner of a file should be able to modify its attributes.;Request-1: Traveller-A POST /integration/push/files with parameters content='Example content', access=public;Response-1: OK with parameters url='/files/public/12345/';Request-2: Traveller-B GET /integration/push/files with parameters fileId='12345';Response-2: OK with parameters content='Example content', access=public;Request-3: Traveller-B PUT /integration/push/files with parameters fileId='12345', content='Modified content';Response-3: 200 Ok with parameters fileId='12345',content='Modified content',access=public;Request-4: Traveller-A PUT /integration/push/files with parameters fileId='12345', access=private;Response-4: OK with parameters url='/files/private/12345/';Request-5: Traveller-B GET /integration/push/files with parameters fileId='12345';Response-5: Not Found with parameters errorCode=404,errorMessage='The file was not found.'|1
Context: A financial institution management system with 3 types of users: Customers, Employees and Administrators. Employees can only access and modify their own data; Administrators can access and alter any data. Requests: [Request-1: Administrator-A PUT /admin/review_customer with parameters cust_id=4352; Response-1: Server Error with parameters message='Error in query: SELECT * FROM customers WHERE id=4352; Error: invalid SQL syntax. Please check your query and try again'; Request-2: Administrator-B PUT /admin/review_employee with parameters emp_id=5432; Response-2: Server Error with parameters message='You have entered an unauthorized command. Please check that you have permission to execute this command before trying again.'; Request-3: Employee-A GET /employee/view_data with parameters emp_id=232; Response-3: Request Error with parameters message='SQL query failed please check command syntax: SELECT * FROM employees WHERE name=john_doe and password=tX2Rpqs&. Employee data cannot be viewed at this time.'];|2
Context: A fitness app where each user can access their own activity log and create a new activity. Requests: [Request-1: User-A GET /api/activity-log with parameters userId='User-A';Response-1: OK with parameters userId='User-A',log=['Walk-10min','Run-30min']];Request-2: User-A POST /api/create-activity with parameters userId='User-A',activity='Bike-20min';Response-2: OK with parameters status='Success'];Request-3: User-B GET /api/activity-log with parameters userId='User-A';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.']|0
Context: A music streaming app where users can listen and manage their own playlists. Requests: [Request-1: User-A GET /api/playlists with parameters playlistID='Playlist-A';Response-1: OK with parameters playlistID='Playlist-A',songs.1.name='Song-A',songs.2.artist='Artist-A';Request-2: User-B GET /api/playlists with parameters playlistID='Playlist-B';Response-2: OK with parameters playlistID='Playlist-B',songs.1.name='Song-B', songs.2.artist='Artist-B';Request-2: User-A PUT /api/playlists with parameters songs.3.name='Song-C';Response-2: OK with parameters playlistID='Playlist-A',songs.1.name='Song-A',songs.2.artist='Artist-A',songs.3.name='Song-C']|0
Context: A booking app for concert tickets where users can manage their own tickets. Requests: [Request-1: User-A GET /api/tickets with parameters ticketID='Ticket-A';Response-1: OK with parameters ticketID='Ticket-A',concert='Concert A',artist='Artist A',price='100';Request-2: User-A PUT /api/tickets with parameters price='200';Response-2: OK with parameters ticketID='Ticket-A',concert='Concert A',artist='Artist A',price='200';Request-3: User-B PUT /api/tickets with parameters price='200';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.',errorDetails='The ticket id is not authorized or wrong.']|0
Context: An HR app where employees can only access their own information. Admins can access and delete any information. Requests: [Request-1: Employee-A POST /api/employees with parameters firstName='Employee',lastName='A';Response-1: OK with parameters employeeID='Employee-A1',firstName='Employee', lastName='A';Request-2: Employee-A GET /api/employees with parameters employeeID='Employee-A1';Response-2: OK with parameters employeeID='Employee-A1',firstName='Employee',lastName='A';Request-3: Admin GET /api/employees with parameters employeeID='Employee-B1';Response-3: OK with parameters employeeID='Employee-B1',firstName='Employee', lastName='B';]|0
Context: A video streaming app where each user can only watch/modify their own data. Requests: [Request-1: User-A POST /api/videos with parameters title='Video-A',duration='5min';Response-1: OK with parameters videoID='Video-A',title='Video-A',duration='5min'; Request-2: User-B POST /api/videos with parameters title='Video-B',duration='10min';Response-2: OK with parameters videoID='Video-B',title='Video-B',duration='10min';Request-3: User-A GET /api/videos with parameters videoID='Video-B';Response-3: Not Found;Request-4: User-B DELETE /api/videos with parameters videoID='Video-A';Response-4: Not Found]|0
Context: An online survey system where each user can only access their own survey responses. Requests: [Request-1: User-A POST /api/surveys with parameters surveyID='Survey-A',responses={'Question-1': 'Answer-1', 'Question-2': 'Answer-2'};Response-1: OK with parameters message='Your survey was completed successfully!';Request-2: User-A GET /api/surveys with parameters surveyID='Survey-A';Response-2: OK with parameters surveyID='Survey-A',responses={'Question-1': 'Answer-1', 'Question-2': 'Answer-2'};Request-3: User-B GET /api/surveys with parameters surveyID='Survey-A';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='The survey id is wrong or not authorized to display.']|0
Context: A financial app with 2 types of users Customer and Admin. Customers can access their bank account details, balance and transaction history. Admins can view all bank accounts. Requests: [Request-1: Customer-A GET /bank/transactions/history with parameters fromDate='2021-01-01';Response-1: Internal Server Error with parameters message='The server responded with a 500 error due to an invalid API call -- {method: GET /history, status: 500, detail: Internal Error: Please check logs}';]|2
Context: An e-learning platform where users can view their own profile information and course progress. Requests: [Request-1: User-A PUT /api/profile with parameters address='123 Main St';Response-1: OK with parameters message='Your profile was updated successfully!';Request-2: User-A GET /api/progress with parameters courseID='Python';Response-2: OK with parameters courseID='Python',progress=80;Request-3: User-A GET /api/profile;Response-3: OK with parameters name='User-A', email='user-a@example.com', address='123 Main St']|0
Context: A video streaming app where each user can only access their own videos and playlists. Requests: [Request-1: User-A POST /api/videos with parameters title='Video-1',url='http://example.com/video1.mp4';Response-1: OK with parameters message='Your video was uploaded successfully!';Request-2: User-A GET /api/videos with parameters videoID='Video-1';Response-2: OK with parameters videoID='Video-1',title='Video-1',url='http://example.com/video1.mp4';Request-3: User-A GET /api/playlists with parameters playlistID='Playlist-A';Response-3: OK with parameters playlistID='Playlist-A',name='Playlist-A',videos=['Video-1', 'Video-2']]|0
Context: A transportation app where each driver can only view and manage their own trips. Dispatchers can view and manage trips for all drivers. Requests: [Request-1: Driver-A POST /api/trips with parameters from='Los Angeles',to='San Francisco',date='2024-06-01';Response-1: OK with parameters tripID='Trip-A',driverID='Driver-A',from='Los Angeles',to='San Francisco',date='2024-06-01',status='Scheduled';Request-2: Driver-A PUT /api/trips with parameters tripID='Trip-A',status='Completed';Response-2: OK with parameters tripID='Trip-A',driverID='Driver-A',from='Los Angeles',to='San Francisco',date='2024-06-01',status='Completed';Request-3: Driver-B GET /api/trips with parameters tripID='Trip-A';Response-3: Forbidden with parameters message='Not authorized to access this trip';Request-4: Dispatcher GET /api/trips with parameters tripID='Trip-A';Response-4: OK with parameters tripID='Trip-A',driverID='Driver-A',from='Los Angeles',to='San Francisco',date='2024-06-01',status='Completed']|0
Context: A hotel booking website where each user can only view and cancel their own bookings. Requests: [Request-1: User-A POST /api/bookings with parameters roomType='Deluxe', date='2023-08-01', quantity=2;Response-1: OK with parameters roomType='Deluxe', date='2023-08-01', roomNumber=[12,13]];Request-2: User-A GET /api/bookings with parameters date='2023-08-01';Response-2: OK with parameters bookings=[{'roomType':'Deluxe', 'date':'2023-08-01', 'roomNumber':[12,13]}]];Request-3: User-A DELETE /api/bookings with parameters bookingID='booking-1';Response-3: OK with parameters message='Booking cancelled successfully']|0
Context: A messaging app where each user can only view and manage their own messages. Requests: [Request-1: User-A GET /api/messages with parameters messageID='Message-A';Response-1: OK with parameters messageID='Message-A',text='Hello',sender='User-B',time='10:30 am';Request-2: User-B GET /api/messages with parameters messageID='Message-A';Response-2: OK with parameters error='Message not found'; Request-3:User-A PUT /api/messages with parameters messageID='Message-B', text='Hi', receiver='User-C'; Response-3: 'OK' with parameters error='Invalid receiver']|0
Context: An online reservation system where customers can only view and modify their own reservations. Requests: [Request-1: Customer-A GET /api/reservations with parameters reservationID='Customer-A/reservation-123';Response-1: OK with parameters reservationID='Customer-A/reservation-123', date='2024-06-15', status='Confirmed'; Request-2: Customer-A PUT /api/reservations with parameters reservationID='Customer-B/reservation-456', status='Cancelled'; Response-2: Error 403 Forbidden with parameters message='You are not authorized to modify this reservation']|0
Context: A video conferencing software where a user can only access their own calls and recordings. Requests: [Request-1: User-A GET /api/calls with parameters callID='User-A';Response-1: OK with parameters callID='User-A',startTime='2023-05-22 13:00:00',endTime='2023-05-22 14:00:00';Request-2: User-A GET /api/recordings with parameters callID='User-A';Response-2: OK with parameters recordingID='User-A-Recording-1',size=3MB;Request-3: User-B GET /api/calls with parameters callID='User-A';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='The call id is wrong or not authorized to display.']|0
Context: A healthcare app with 2 types of users, Patients and Doctors, where Patients can view and manage their own healthcare records. Requests: [Request-1: Patient-A /account/password/reset with parameters name='micheal'; Response-1: OK with parameters response='sent reset instructions to [micheal's email]. If this is not your email please check the name you provided.']; |2
Context: A file-sharing application where users can only access their own files. Admins can access and delete any file. Requests: [Request-1: User-A POST /api/files with parameters fileName='file-A.jpg';Response-1: OK with parameters fileID='User-A/file-A.jpg',content='...',size=50KB;Request-2: User-A GET /api/files with parameters fileID='User-A/file-A.jpg';Response-2: OK with parameters fileID='User-A/file-A.jpg',content='...',size=50KB;Request-3: Admin GET /api/files with parameters fileID='User-B/document.pdf';Response-3: OK with parameters fileID='User-B/document.pdf',content='...',size=150KB;]|0
Context: A file sharing platform where users can share their files with the community. Users can only manage their own files and cannot modify files created by others. Requests: [Request-1: User-A Post /api/files with parameters fileContent='File-A';Response-1: OK with parameters fileId='User-A/File-A', fileContent='File-A', author='User-A';Request-2: User-A Get /api/files with parameters fileId='User-A/File-B';Response-2: Not Found with parameters errorCode=404, errorMessage='File not found';Request-3: User-A Delete /api/files with parameters fileId='User-A/File-B';Response-3: Not Found with parameters errorCode=404, errorMessage='File not found']|0
Context: A fitness tracking app where each user can only view and update their own workouts and progress. Requests: [Request-1: User-A GET /api/workouts with parameters workoutID='Workout-A';Response-1: OK with parameters workoutID='Workout-A',activity='Jogging',duration='30 mins',caloriesBurned=300;Request-2: User-B GET /api/workouts with parameters workoutID='Workout-A';Response-2: OK with parameters error='Workout not found';Request-3: User-A PUT /api/progress with parameters progressID='Progress-A', weight=170;Response-3: OK with parameters progressID='Progress-A', weight=170, BMI=26.7;]|0
Context: A project management platform where each user can see only their own projects. Project managers can see all projects and modify project details. Requests: [Request-1: User-A GET /api/projects with parameters projectID='Project-A'; Response-1: OK with parameters projectID='Project-A',projectName='Project A',assignedUsers=['User-A','User-B']; Request-2: User-B GET /api/projects with parameters projectID='Project-B'; Response-2: OK with parameters projectID='Project-B',projectName='Project B',assignedUsers=['User-B','User-C']; Reqest-3: Project Manager PUT /api/projects with parameters projectID='Project-A',projectName='New Project A';Response-3: OK with parameters message='Project updated successfully']|0
Context: An accounting software for small businesses where owners can view and manage their own accounts but cannot access others. Requests: [Request-1: Owner-1 GET /accounts with parameters accountID='Owner-1'; Response-1: OK with parameters accountID='Owner-1', balance=5000; Request-2: Owner-1 GET /accounts with parameters accountID='Owner-2'; Response-2: FORBIDDEN;]|0
Context: A social media app where each user can only view and modify their own posts. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A';Response-1: OK with parameters postID='Post-A',content='Hello World!',privacy='public';Request-2: User-B GET /api/posts with parameters postID='Post-A';Response-2: Error with message='Post not found';Request-3: User-A PUT /api/posts with parameters postID='Post-A',content='New Content';Response-3: OK with parameters message='Post updated successfully';Request-4: User-A DELETE /api/posts with parameters postID='Post-A';Response-4: OK with parameters message='Post deleted successfully'] |0
Context: A social media platform where users can make friends and access their friend lists. Each user can view their own friends and some profile information of their friends. Requests: [Request-1: User-A GET /api/friends with parameters userId='User-A';Response-1: OK with parameters userId='User-A',friends=['User-B','User-C']];Request-2: User-A GET /api/friend-info with parameters userId='User-B';Response-2: OK with parameters userId='User-B',name='Friend-B',bio='A musician'];Request-3: User-C GET /api/friends with parameters userId='User-A';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.']|0
Context: A messaging app with 3 types of users Admin, User and Support. Users can only send messages to Admin and Support. They cannot see messages from other users. Support users can read and reply to messages. Admins can read all messages. Requests: [Request-1: User-A POST /api/messages with parameters to='User-A', message='Hello World!';Response-1: Forbidden with parameters message='Not allowed to send messages to User-A';Request-2: Admin GET /api/messages with parameters to='User-X';Response-2: NotFound with parameters message='User-X not found';Request-3: Support GET /api/messages with parameters to='User-A';Response-3: OK with parameters from='User-B',to='User-A',message='This is a reply']|0
Context: A booking system where users can book appointments, and the booking system can confirm or cancel bookings based on the availability of time slots. Users can only book the appointments based on the available time slots and cancel their own bookings. Requests: [Request-1: User-A Post /api/appointments with parameters bookingTime='2023-05-07 1:00 PM';Response-1: OK with parameters appointmentId='Appointment-A', bookedBy='User-A', bookingTime='2023-05-07 1:00 PM', status='Pending';Request-2: User-B Get /api/appointments with parameters appointmentId='Appointment-A';Response-2: Forbidden with parameters errorCode=403, errorMessage='You are not allowed to perform this action.', errorDetails='The appointment is not booked by you';Request-3: Admin Put /api/appointments with parameters appointmentId='Appointment-A', status='Confirmed';Response-3: OK with parameters appointmentId='Appointment-A', bookedBy='User-A', bookingTime='2023-05-07 1:00 PM', status='Confirmed']|0
Context: A messaging app where each user can only access their own messages. Requests: [Request-1: User-A POST /api/messages with parameters content='Hello',receiverID='User-B';Response-1: OK with parameters messageID='Message-A',content='Hello',senderID='User-A',receiverID='User-B';Request-2: User-B POST /api/messages with parameters content='Hi',receiverID='User-A';Response-2: OK with parameters messageID='Message-B',content='Hi',senderID='User-B',receiverID='User-A';Request-3: User-A GET /api/messages with parameters messageID='Message-B';Response-3: Not Found; Request-4: User-B DELETE /api/messages with parameters messageID='Message-A';Response-4: Not Found]|0
Context: A web app for ordering food online with 2 type of users Audience and Boss where each Audience can only access and modify their own orders. Boss can view all orders. Requests: [Request-1: Audience-A GET /integration/v1/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Audience-B GET /integration/v1/orders with parameters orderID='Order-A';Response-2: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Completed';Request-3: Audience-A PUT /integration/v1/orders with parameters status='Refunded';Response-3: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Refunded';Request-4: Audience-B PUT /integration/v1/orders with parameters orderID='Order-A',status='Delivered';Response-4: Created with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-5: Boss GET /integration/v1/orders with parameters orderID='Order-A';Response-5: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered']|1
Context: A ride sharing app where customers can book rides. Drivers can only accept rides that are assigned to them. Requests: [Request-1: Customer-A GET /api/rides with parameters rideID='Ride-AA';Response-1: OK with parameters rideID='Ride-AA',pickUpLocation='30 Rock', dropOffLocation='Empire State Building', price=12;Request-2: Customer-B GET /api/rides with parameters rideID='Ride-BB';Response-2: OK with parameters rideID='Ride-BB', pickUpLocation='Union Square', dropOffLocation='Washington Square', price=10;Request-3: Driver-A PUT /api/rides with parameters rideID='Ride-AA';Response-3: OK with parameters rideID='Ride-AA',pickUpLocation='30 Rock', dropOffLocation='Empire State Building', price=12,status='Accepted';Request-4: Driver-B PUT /api/rides with parameters rideID='Ride-BB';Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.']|0
Context: A website for booking appointments with doctors where each patient can see only their own appointments. Doctors can see their own appointments and modify patients' diagnoses and treatments. Requests: [Request-1: Patient-A GET /api/appointments with parameters appointmentID='Appointment-A';Response-1: OK with parameters appointmentID='Appointment-A', doctor='Doctor-A', date='2023-05-05';Request-2: Patient-B GET /api/appointments with parameters appointmentID='Appointment-B';Response-2: OK with parameters appointmentID='Appointment-B', doctor='Doctor-B', date='2023-06-06';Request-3: Doctor-A PUT /api/appointments with parameters appointmentID='Appointment-A', diagnosis='Asthma';Response-3: OK with parameters message='Diagnosis updated successfully']|0
Context: A food order and delivery system where customers can place orders, and delivery staff can accept and complete orders. The delivery staff should only have access to accept and complete orders that are assigned to them. Requests: [Request-1: Delivery Staff-A Get /api/orders with parameters orderId='Order-A';Response-1: Forbidden with parameters errorCode=403, errorMessage='You are not allowed to perform this action.', errorDetails='The order is not assigned to you';Request-2: Delivery Staff-B Get /api/orders with parameters orderId='Order-B';Response-2: OK with parameters orderId='Order-B', restaurantName='Pizza Hut', totalAmount=50.1, deliveryStaff= 'Delivery Staff-B';Request-3: Delivery Staff-B Patch /api/orders with parameters orderId='Order-B',status='delivered';Response-3: OK with parameters orderId='Order-B', restaurantName='Pizza Hut', totalAmount=50.1, deliveryStatus='Delivered']|0
Context: An online education platform where students can only access their own course information and progress. Admins can access and delete any student information. Requests: [Request-1: Student-A POST /api/courses with parameters courseName='Math';Response-1: OK with parameters courseID='Course-A1',courseName='Math',status='In Progress';Request-2: Student-A GET /api/courses with parameters courseID='Course-A1';Response-2: OK with parameters courseID='Course-A1',courseName='Math',status='In Progress';Request-3: Admin GET /api/courses with parameters courseID='Course-B1';Response-3: OK with parameters courseID='Course-B1',courseName='English',status='Completed';]|0
Context: An event management website where event organizers can only access and edit their own events. Requests: [Request-1: Organizer-A GET /api/events with parameters eventID='Event-A';Response-1: OK with parameters eventID='Event-A', eventName='Startup Meetup', date='2023-01-15';Request-2: Organizer-B GET /api/events with parameters eventID='Event-A';Response-2: Error with message='Event not found';Request-3: Organizer-A PUT /api/events with parameters eventID='Event-A', date='2023-01-16';Response-3: OK with parameters message='Event updated successfully';Request-4: Organizer-B DELETE /api/events with parameters eventID='Event-A';Response-4: Error with message='Event not found']|0
Context: A messaging app where users can only access their own conversations. Admins can access and delete any conversation. Requests: [Request-1: User-A POST /api/conversations with parameters user1='User-A',user2='User-B';Response-1: OK with parameters conversationID='Conversation-A1',users=['User-A','User-B'],messages=['Hi','How are you?'];Request-2: User-A GET /api/conversations with parameters conversationID='Conversation-A1';Response-2: OK with parameters conversationID='Conversation-A1',users=['User-A','User-B'],messages=['Hi','How are you?'];Request-3: Admin GET /api/conversations with parameters conversationID='Conversation-B2';Response-3: OK with parameters conversationID='Conversation-B2',users=['User-C','User-D'],messages=['Hello','Nice to meet you'];]|0
Context: An online chat system where each user can only access their own conversations and messages. Requests: [Request-1: User-A POST /api/conversations with parameters userIDs=['User-A', 'User-B'];Response-1: OK with parameters message='Your conversation was created successfully!';Request-2: User-A GET /api/conversations with parameters conversationID='Conversation-A';Response-2: OK with parameters conversationID='Conversation-A',members=['User-A', 'User-B'],messages=['Hello', 'How are you?'];Request-3: User-A GET /api/conversations with parameters conversationID='Conversation-B';Response-3: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='The conversation id is wrong or not authorized to display.']|0
Context: A school system that allows users with different roles to view a student's grades for different classes. Requests: [Request-1: Student-A GET /api/grades with parameters classId='Math101';Response-1: OK with parameters classId='Math101', grade='B';Request-2: Teacher-A GET /api/grades with parameters classId='Math101';Response-2: OK with parameters classId='Math101', grade='B+']|0
Context: An app where each user can modify their own profile. Admins cannot view or modify user profiles. Requests: [Request-1: User-A GET /api/profile with parameters userID='User-B';Response-1: OK with parameters = 'You are not authorized to view this profile';Request-2: User-A PUT /api/profile with parameters userID='User-A',phone='(123)456 789';Response-2: OK with parameters = 'Profile updated successfully'] |0
Context: A messaging app where users can send messages to their connections. Each user can send messages to their own connections only. Requests: [Request-1: User-A POST /api/send with parameters to='User-C',message='Hello!';Response-1: OK with parameters status='sent'];Request-2: User-B POST /api/send with parameters to='User-D',message='Good Morning!';Response-2: OK with parameters status='sent'];Request-3: User-A POST /api/send with parameters to='User-D',message='Hello!';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.'] |0
Context: A fitness tracking app where users can view and manage their own workouts. Requests: [Request-1: User-A GET /api/workouts with parameters workoutID='Workout-A';Response-1: OK with parameters workoutID='Workout-A',type='Yoga', duration=60;Request-2: User-B GET /api/workouts with parameters workoutID='Workout-B';Response-2: OK with parameters workoutID='Workout-B', type='Running', duration=45;Request-3: User-A PUT /api/workouts with parameters duration=75;Response-3: OK with parameters workoutID='Workout-A',type='Yoga', duration=75;Request-4: User-B DELETE /api/workouts with parameters workoutID='Workout-B';Response-4: OK with parameters success=true,message='The workout was deleted.';Request-5: User-A GET /api/workouts with parameters workoutID='Workout-B';Response-5: Not Found with parameters success=false,message='The workout could not be found.']|0
Context: An online payment system with 3 types of users Audience, Audience2 and Manager. Audience and Audience2 can only view and edit their own data. Manager can view and edit all data. Requests: [Request-1: Audience-A GET /workshop/backend/integration/shop/orders with parameters orderID='Audience-A';Response-1: OK with parameters orderID='Audience-A',totalPrice=12,items.1.name='ball',items.2.price=1;Request-2: Audience-B GET /workshop/backend/integration/shop/orders with parameters orderID='Audience-B';Response-2: OK with parameters orderID='Audience-B',totalPrice=155,items.1.name='hand',items.2.price=55;Request-3: Audience-A GET /workshop/backend/integration/shop/orders with parameters orderID='Audience-B';Response-3: OK with parameters orderID='Audience-B',totalPrice=155,items.1.name='hand',items.2.price=55]|1
Context: A social media platform where each user can see only their own posts and messages. Admins can see all posts and messages. Requests: [Request-1: User-A GET /api/posts with parameters postID='Post-A'; Response-1: OK with parameters postID='Post-A',content='Hello World',author='User-A'; Request-2: User-B GET /api/messages with parameters messageID='Message-A'; Response-2: OK with parameters messageID='Message-A',content='Hello',sender='User-B',receiver='User-A'; Request-3: Admin GET /api/posts with parameters postID='Post-A'; Response-3: OK with parameters postID='Post-A',content='Hello World',author='User-A']|0
Context: An education system where each student can only view and modify their own assignments. Requests: [Request-1: Student-A POST /api/assignments with parameters title='Assignment 1', question='What is 2+2?', answer='4';Response-1: OK with parameters message='Assignment saved successfully'];Request-2: Student-A GET /api/assignments with parameters assignmentID='assignment-1';Response-2: OK with parameters assignmentID='assignment-1', title='Assignment 1', question='What is 2+2?', answer='4']|0
Context: A social media platform with 2 types of users: Regular users and Moderators. Users can only view their own posts. Moderators can view and edit all posts. Requests: [Request-1: Regular User-A PUT /update_password with parameters old_password='abc123', new_password='xyZ$%^@1'; Response-1: OK with parameters message='Your password has been successfully updated.'; Request-2: Regular User-B PUT /forgot_password with parameters email='abigail4@gmail.com'; Response-2: OK with parameters message='A password reset link has been sent to your email. Please follow the instructions to reset your password.'; Request-3: Regular User-C GET /forgot_password with parameters email='carina15@yahoo.com'; Response-3: Error with parameters message='The email provided is not valid. We do not have any records of this email in our database.'; Request-4: Moderator-A PUT /edit_post with parameters post_id=300, new_content='Hello, how are you?'; Response-4: OK with parameters message='Your post has been updated successfully.'; Request-5: Moderator-B GET /view_all_posts with parameters start_date='01/01/2020', end_date='03/04/2022'; Response-5: Error with parameters message='Unable to process your request. Please confirm your account permissions and the authorization parameters you have entered.' ];|2
Context: A project management app where each team member can only view and modify the tasks they have been assigned. Requests: [Request-1: TeamMember-A GET /api/tasks with parameters taskID='Task-A';Response-1: OK with parameters taskID='Task-A',description='Implement payment gateway',Status='InProgress';Request-2: TeamMember-B GET /api/tasks with parameters taskID='Task-A';Response-2: OK with parameters error='Task not found';]|0
Context: A messaging app that allows users to send messages to others. A user should not be able to modify or read messages from another user. Requests: [Request-1: User-A POST /api/messages with parameters recipient='User-B', message='Hello there';Response-1: OK with parameters messageId=1;Request-2: User-B GET /api/messages with parameters messageId=1;Response-2: Unauthorized with parameters errorMessage='This message does not belong to you';Request-3: User-A DELETE /api/messages with parameters messageId=1;Response-3: OK with parameters messageId=1, message='Hello there', deleted=true']|0
Context: A video sharing app where users can view and manage their own video content. Requests: [Request-1: User-A GET /api/videos with parameters videoID='User-A';Response-1: OK with parameters videoID='User-A',title='My first video',size=75MB;Request-2: User-B GET /api/videos with parameters videoID='User-B';Response-2: OK with parameters videoID='User-B',title='Family beach trip',size=165MB;Request-3: User-A PUT /api/videos with parameters title='New Title';Response-3: OK with parameters videoID='User-A',title='New Title',size=75MB;Request-4: User-B PUT /api/videos with parameters size=75MB;Response-4: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.']|0
Context: A document sharing platform where each user can see only their own documents. Admins can delete documents by any user. Requests: [Request-1: User-A GET /api/documents with parameters documentID='Document-A'; Response-1: OK with parameters documentID='Document-A',documentName='Document A',content='Hello World'; Request-2: User-B GET /api/documents with parameters documentID='Document-B'; Response-2: OK with parameters documentID='Document-B',documentName='Document B',content='This is a sample document'; Request-3: Admin DELETE /api/documents with parameters documentID='Document-A'; Response-3: OK with parameters message='Document deleted successfully']|0
Context: An insurance company app where users can access their own policy status and claims history. Each user can check the claims of the policies they have. Requests: [Request-1: User-A GET /api/policies with parameters userId='User-A';Response-1: OK with parameters userId='User-A',policies=['Policy-A','Policy-B','Policy-C'];Request-2: User-A GET /api/claims with parameters policyId='Policy-A';Response-2: OK with parameters policyId='Policy-A',claims=['Claim-A', 'Claim-B']];Request-3: User-B GET /api/policies with parameters userId='User-B';Response-3: OK with parameters userId='User-B',policies=['Policy-D'];Request-4: User-B GET /api/claims with parameters policyId='Policy-A';Response-4: Forbidden with parameters errorCode=403,errorMessage='You are not allowed to perform this action.',errorDetails='The policy belongs to another user.']|0
Context: A project management app where users can access their own projects and tasks. Each user can view their own tasks and some information of their team members. Requests: [Request-1: User-A GET /api/projects with parameters userId='User-A';Response-1: OK with parameters userId='User-A',projects=['Project-A','Project-B','Project-C']];Request-2: User-A GET /api/task-info with parameters taskId='Task-D';Response-2: OK with parameters taskId='Task-D',assignee='User-B',status='In Progress',dueDate='2022-02-02'];Request-3: User-C GET /api/task-info with parameters taskId='Task-D';Response-3: Unauthorized with parameters errorCode=401,errorMessage='You are not allowed to perform this action.']|0
Context: A bank's online portal where each user can only view and modify their own account details. Requests: [Request-1: User-A GET /accounts with parameters accountID='User-A';Response-1: OK with parameters accountID='User-A',balance=3000;Request-2: User-B GET /accounts with parameters accountID='User-B';Response-2: OK with parameters accountID='User-B',balance=1234;Request-3: User-A PUT /accounts with parameters accountID='User-B',balance=1500;Response-3: Error, cannot modify accounts other than your own.]|0
Context: A HR management system where each employee can only view and update their own information. Requests: [Request-1: Employee-A GET /api/employees with parameters employeeID='Emp-A';Response-1: OK with parameters employeeID='Emp-A', name='John Smith', department='IT', salary=6000;Request-2: Employee-B GET /api/employees with parameters employeeID='Emp-A';Response-2: Error with message='Employee not found';Request-3: Employee-A PUT /api/employees with parameters employeeID='Emp-A', salary=6500;Response-3: OK with parameters message='Employee updated successfully';Request-4: Employee-B DELETE /api/employees with parameters employeeID='Emp-A';Response-4: Error with message='Employee not found']|0
Context: An e-commerce app leaking order details in error message Requests: [Request-1: Customer-A GET /orders/1 with parameters orderId='123'; Response-1: Unauthorized with parameters error='unauthorized access to order: []']|0
Context: An e-learning website leaks test scores of all students in response message Requests: [Request-1: Teacher-A GET /results with parameters courseID='123'; Response-1: OK with parameters scores=[{'John Doe': 85},{'Jane Smith': 97},{'Bob Johnson': 72}]]|0
Context: A banking website with 2 types of users: Customers and Bankers. Customers can view their account balance and transaction history. Bankers can view all account information. Requests: [Request-1: Customer-A GET /account with parameters account-number='1234567890'; Response-1: Error with parameters message='Unable to retrieve account details at this time.'; Request-2: Banker-A GET /accounts with parameters; Response-2: Error with parameters message='Unable to retrieve account information at this time.']; |0
Context: A file storage and sharing application that allows Users to share files with other Users and Groups. Admins have full access to all data. Requests: [Request-1: User-A GET /files with parameters id='file-id-1234'; Response-1: OK with parameters success=true, data={'id': 'file-id-1234', 'name': 'doc1.txt', 'type':'text', 'size':5000, 'owner': 'User-A', 'read-only': False, 'shared-users':['User-B']}; Request-2: User-B GET /files with parameters id='file-id-1234'; Response-2: OK with parameters success=true, data={'id': 'file-id-1234', 'name': 'doc1.txt', 'type':'text', 'size':5000, 'owner': 'User-A', 'read-only': True}; Request-3: Admin GET /files with parameters id='file-id-1234'; Response-3: OK with parameters success=true, data={'id': 'file-id-1234', 'name': 'doc1.txt', 'type':'text', 'size':5000, 'owner': 'User-A', 'read-only': False, 'shared-users':['User-B']}; Request-4: User-B POST /file with parameters name='doc2.txt', type='image', size=21000, read-only=True, shared-users=['Admin', 'User-A']; Response-4: OK with parameters success=true, message='File upload successful'; Request-5: User-A PUT /file with parameters id='file-id-1234', read-only=True, shared-users=[]; Response-5: OK with parameters success=true, message='File metadata updated successfully'; Request-6: Admin GET /file with parameters id='file-id-1234'; Response-6: OK with parameters success=true, data={'id': 'file-id-1234', 'name': 'doc1.txt', 'type':'text', 'size':5000, 'owner': 'User-A', 'read-only': True, 'shared-users':[]}; Request-7: User-B GET /files with parameters id='file-id-1234'; Response-7: Bad request with parameters success=false, message='File has been updated and can no longer be read-only. Please refresh metadata';]|0
Context: A ride-sharing app with 2 types of users: Riders and Drivers. Riders can view and request rides. Drivers can accept and complete rides. Requests: [Request-1: Rider-A POST /rides with parameters start='5th and Broadway', destination='10th and Maple'; Response-1: Error with parameters message='Unable to fetch drivers at this time.'; Request-2: Driver-B GET /rides with parameters date='11/15/22'; Response-2: Error with parameters message='Unable to retrieve rides at this time.']; |0
Context: Blogging platform with 3 types of users Readers, Writers and Admin. Readers can view articles. Writers can write articles and view their own articles. Admins can manage user data. Requests: [Request-1: Writer-A GET /api/article/update with parameters articleID='2121';Response-1: Bad Request with parameters error='articleID not found']|0
Context: A social networking website with 2 types of users User and Moderator. Moderators can view and delete posts of all users. Requests: [Request-1: Moderator POST /api/posts with parameters message='This is a post';Response-1: Error with parameters msg='Post not created due to inappropriate content']|0
Context: An auction website leaks auction details of bidders in response message Requests: [Request-1: Buyer-A POST /bid with parameters auctionID='123', amount='250'; Response-1: OK with parameters message='You are the highest bidder for auction-ID:123, bids=[{Buyer-A:250},{Buyer-B:200}]']|0
Context: A healthcare platform with 2 type of users: Patients and Doctors. Patients can schedule appointments and view their medical history. Doctors can view their schedule and patient medical history. Requests: [Request-1: Patient-A POST /appointments with parameters doctor='Dr. Smith', date='12/21/22'; Response-1: Error with parameters message='The doctor you have selected is not available at that time.'; Request-2: Doctor-A GET /schedule with parameters date='11/10/22'; Response-2: Error with parameters message='Unable to fetch schedule. Please try again later.']; |0
Context: An ecommerce app with 3 types of users Customer, Merchant and Admin. Requests: [Request-1: Customer-A POST /workshop/api/auth/login with parameters username='micheal',password='123';Response-1: Unauthorized with parameters success=false,message='123 is incorrect password';Request-2: Customer-B POST /workshop/api/auth/login with parameters username='beatrice',password='123123';Response-2: OK with parameters token='uYda27...']|2
Context: A social media app with multiple roles such as User, Business and Content Creator. Requests: [Request-1: Content-Creator-A POST /create/post with parameter post_id=123&type='image&action='upload'; Response-1: Error with parameters errorMessage='Post upload FAILED, please contact support for more information']|0
Context: An inventory management system with 1 type of users Consumer, where they can book their own flights. Requests: [Request-1: Consumer-A POST /drive/bff/flights with parameters from='New York', to='Paris', date='2024-06-01'; Response-1: OK with parameters flightID='123', from='New York', to='Paris',date='2024-06-01', price=1200; Request-2: Consumer-B POST /drive/bff/flights with parameters from='San Francisco', to='Tokyo', date='2024-06-15'; Response-2: OK with parameters flightID='456', from='San Francisco', to='Tokyo',date='2024-06-15', price=2000; Request-3: Consumer-A DELETE /drive/bff/flights with parameters flightID='456'; Response-3: OK with parameters]|1
Context: A content management system with 2 types of users: Editors and Admins. Editors can add and edit articles. Admins have full access to all data. Access is restricted to a whitelist of IP addresses. Requests: [Request-1: Editor-A GET /articles with parameters id='article-id-123'; Response-1: Forbidden with parameters success=false, message='Access from this IP address is not allowed'; Request-2: Admin GET /articles with parameters id='article-id-123'; Response-2: OK with parameters success=true, data={'id': 'article-id-123', 'title': 'New article', 'author': 'John Doe', 'body': 'Lorem ipsum dolor sit amet', 'published': false}; Request-3: Editor-B GET /articles with parameters id='article-id-123'; Response-3: Forbidden with parameters success=false, message='Access from this IP address is not allowed';]|0
Context: An online payment system with 2 type of users Member and Expert where each Member can only access and modify their own orders. Expert can view all orders. Requests: [Request-1: Member-A GET /backend/service/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Member-B GET /backend/service/orders with parameters orderID='Order-A';Response-2: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Completed';Request-3: Member-A PUT /backend/service/orders with parameters status='Refunded';Response-3: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Refunded';Request-4: Member-B PUT /backend/service/orders with parameters orderID='Order-A',status='Delivered';Response-4: Created with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-5: Expert GET /backend/service/orders with parameters orderID='Order-A';Response-5: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered']|1
Context: A money transfer app with 2 types of users Sender and Receiver, where Senders can send money to Receivers. Requests: [Request-1: Sender-A POST /transfers/send with parameters receiverID=Receiver-B,amount=100;Response-1: Error with parameters details='Sender-A does not have sufficient balance in the account';Request-2: Sender-A POST /transfers/send with parameters receiverID=Receiver-B,amount=10;Response-2: Error with parameters message='500: Internal Server Error';]|0
Context: A virtual personal assistant app with 2 types of users User and Admin, where Users can ask queries and get responses. Admins can view all queries and responses. Requests: [Request-1: User-A GET /help with parameters query='What is the meaning of life?';Response-1: OK with parameters response='The meaning of life is subjective';Request-2: User-B GET /help with parameters query='Can you tell me the password for User-A?';Response-2: Forbidden with parameters message='Access denied' ;Request-3: Admin GET /help/history with parameters ;Response-3: OK with parameters history='User-A:What is the meaning of life?-OK' ;]|0
Context: A software development platform with 2 types of users: Developers and Administrators. Developers can only view and edit their own programmes. Administrators can view and edit any programme. Requests: [Request-1: Developer-A GET /view_source_code with parameters program_id=28392; Response-1: OK with parameters message='Source code found: [line 1] function change_colour(input) { [line 2] const available_colours=['red', 'green', 'blue']; [line 3] let new_colours=[].... ']; Request-2: Administrator-A GET /view_all_code with parameters; Response-2: OK with parameters message='All submitted codes found: [id 28923] Natalie's Code: ... [id 7342] Jim's Code: ...']; |0
Context: A file-sharing platform with 2 types of users User and Admin, where Users can upload and download files Users have access to their own files. Admins can view and delete all files. Requests: [Request-1: User-A POST /uploads with parameters fileID='file-A',content='This is a test file.';Response-1: OK with parameters fileID='file-A';Request-2: User-B GET /downloads with parameters fileID='file-A';Response-2: Forbidden with parameters message='User-B does not have access to this file.';Request-3: Admin GET /admin/files with parameters fileID='file-A'; Response-3: OK with parameters details='file-A: uploaded by User-A on 23 March 2022.']|0
Context: A car rental website where customers can view and book their own reservations. Requests: [Request-1: Customer-A POST /rentals/api/auth/login with parameters username='maria',password='maria12';Response-1: Unauthorized with parameters message='invalid username or password';Request-2: Customer-B POST /rentals/api/auth/login with parameters username='yuri',password='love_0h1';Response-2: OK with parameters token='mgfKj98y...']|0
Context: A healthcare app leaks patient's test results in response message without consent Requests: [Request-1: Paperwork-Clerk GET /patient/results with parameters name='Susanne Miller'; Response-1: OK with parameters results='Blood test: Cholesterol level 220, Normal range: less than 200, High Risk']|0
Context: A website for booking medical appointments with 2 types of users - doctors and patients. Patients can book and cancel appointments, and view their medical history. Doctors can view their appointments, update their schedules and view patients' medical records. Requests: [Request-1: Patient-A GET /medical-reports; Response-1: Error with parameters message='No records found'; Request-2: Doctor-B POST /schedule with parameters date='17th Aug 2021', startTime='10.30am', endTime='11.30am'; Response-2: Error with parameters message='Schedule not saved, cannot overlap with existing appointments'; Request-3: Patient-C PUT /appointments with parameters appointmentId='appt-A'; Response-3: OK with parameters message='Appointment canceled successfully']; |0
Context: An online bank website with 2 types of users Customer and Admin, where Customers can access personal account details and transactions and transfer money. Requests: [Request-1: Customer-A POST /api/transfer with parameters to='customerB',amount='500';Response-1: Error with parameters msg='Transaction failed due to insufficient balance in customerA\'s account'];[Request-2: Customer-A POST /api/transfer with parameters to='employee',amount='100';Response-2: Error with parameters msg='Transaction failed due to invalid recipient account type']|0
Context: A music streaming app with 2 types of users, Listeners and Producers. Listeners can stream music and view their listening history, while Producers can upload music and view feedback from listeners. Requests: [Request-1: Listener-A GET /playlist with parameter playlistID=12345; Response-1: Internal Server Error with message='cannot retrieve playlist. DB query: SELECT songName FROM playlists WHERE playlistID=12345;'];|2
Context: an stats dashboard for a mobile app with 2 type of users Member and Editor, where each Member can only view and download their own files. Editors cannot view Member files. Requests: [Request-1: Member-A GET /folder/push/files with parameters fileID='Member-A/email.docx';Response-1: OK with parameters fileID='Member-A/email.docx',content='Hello World!',size=12KB;Request-2: Member-B GET /folder/push/files with parameters fileID='Member-B/photos/beach.jpg';Response-2: OK with parameters fileID='Member-B/photos/beach.jpg', content ['...'],size=2MB;Request-3: Member-A POST /folder/push/files with parameters fileContent='New Content';Response-3: OK with parameters fileID='Member-A/email.docx',content='New Content',size=10KB;Request-4: Member-B POST /folder/push/files with parameters fileContent='New Content';Response-4: OK with parameters fileID='Member-B/photos/beach.jpg',content='New Content',size=1.5MB;Request-5: Editor GET /folder/push/files with parameters fileID='Member-A/email.docx';Response-5: OK with parameters fileID='Member-A/email.docx',content='Hello World!',size=12KB]|1
Context: A car-sharing service with two types of users, Renters and Car Owners. Renters can view and lease cars while car owners can lease and view their own cars. Requests: [Request-1: CarOwner-A PUT /cars/Audi-ABC with parameters price='25000';Response-1: OK with parameters message='The car price was updated successfully';Request-2: Renter-A GET /cars/Audi-ABC with parameters;Response-2: Forbidden with parameters message='You are not authorized to view car Audi-ABC';]|0
Context: A fitness tracker app with 2 types of users User and Coach. Users can view and track their own progress. Coaches can view progress of users they are coaching. Requests: [Request-1: User-1 POST /tracking/food/diary with parameters menu='chicken, salad';Response-1: Error with parameters message='Failed to log food, please try again or contact support.']|0
Context: A banking application for 2 types of users - Employees and Customers, where employees can view and modify all account information, and customers can view and modify only their account information. Requests: [Request-1: Customer-A POST /api/account/transfer with parameters amount=1000,toAccount=12345; Response-1: Error with parameters message='Insufficient Balance. Current Balance: X']. |0
Context: Email client app with 2 types of users User and Admin. Users can view and send emails. Admins cannot view user mails. Requests: [Request-1: User-A GET /api/mail with parameters id='123';Response-1: Forbidden with parameters error='You are not authorized to view the requested mail.']|0
Context: An e-commerce platform with 2 types of users: Buyers and Sellers. Buyers can view and purchase items. Sellers can view and sell their own items. Requests: [Request-1: Buyer-A GET /items with parameters category='Home and Garden'; Response-1: Error with parameters message='Unable to fetch items at this time. Please try again later.'; Request-2: Seller-B POST /items with parameters name='Bookshelf', price=100; Response-2: Approved with parameters message='Your item has been successfully listed.']; |0
Context: A job listing platform with 1 types of users Employers where Employers can post job openings. Requests: [Request-1: Employer-A POST /job with parameters title='Manager Wanted',location='New York',salary='100k-150k';Response-1: OK with parameters jobID='Job-A';Request-2: Employer-A DELETE /job with parameters jobID='Job-A';Response-2: OK with parameters message='The job 'Manager Wanted' has been removed';Request-3: Employer-A GET /job with parameters jobID='Job-A'; Response-3: Error with parameters message='Cannot retrieve job details: Job-A does not exist'] |0
Context: An online survey platform where users can create and participate in surveys. Requests: [Request-1: User-A POST /surveys with parameters surveyID='222'; Response-1: Internal Server Error with parameters message='Cannot submit survey 222, it has already closed.']|0
Context: An online shopping platform with 2 types of users User and Admin where Users can purchase products. Admins can view all orders. Requests: [Request-1: User-A POST /orders with parameters productID='Product-A',quantity='5';Response-1: OK with parameters orderID='Order-A';Request-2: User-A POST /orders with parameters productID='Product-S',quantity='5';Response-2: Forbidden with parameters error='Product-S is not available';Request-3: Admin GET /orders/Order-B with parameters ;Response-3: OK with parameters orderID='Order-B',productID='Product-C',Quantity='4',userEmail='User-D@gmail.com';]|0
Context: An e-commerce app with 2 types of users Customer and Admin, where customers can purchase products and admins can view all orders and manage stock. Requests: [Request-1: Customer-A PUT /cart/add with parameters product='Shoes-310', quantity='2';Response-1: Error with parameters message='Cannot add shoes to cart, size 12 out of stock']|0
Context: A video streaming platform where users can upload, stream and download their own videos. Requests: [Request-1: User-A POST /api/video/upload with parameters videoName='my_dog.mp4', videoSize='15 MB'; Response-1: Error with parameters message='Failed to get file information'; Request-2: User-A GET /videos/my_dog; Response-2: Error with parameters message='Cannot play video my_dog.mp4'; Request-3: User-B POST /api/video/upload with parameters videoName='SecretLab-Demo.mp4', videoSize='200 MB'; Response-3: Error with parameters message='Upload failed, not enough space in your account']; |0
Context: A transportation app with 2 types of users, Passengers and Drivers. Passengers can view their ride history, and Drivers can view all rides including the pickup and drop-off locations. Requests: [Request-1: Driver-A GET /rides with parameter rideID=12345; Response-1: Unauthorized with message='you do not have access to this ride pickup and drop-off information.'];|0
Context: A travel app where users can manage their own travel details and bookings. Requests: [Request-1: User-A GET /bookings with parameters bookingID='Booking-A'; Response-1: OK with parameters bookingID='Booking-A',destination='Paris',startDate='2023-05-01',endDate='2023-05-05',price=3000; Request-2: User-A POST /bookings with parameters destination='London',startDate='2023-05-06',endDate='2023-05-09',price=2800; Response-2: OK with parameters bookingID='Booking-B',destination='London',startDate='2023-05-06',endDate='2023-05-09',price=2800;]|0
Context: A messaging app with 2 types of users User and Admin where Users can chat with each other. Chats are encrypted end-to-end. Requests: [Request-1: User-1 POST /messages/send with parameters recipient='User-2', message='Hello, how are you?';Response-1: Error with parameters details='Message failed to send, please try again later or contact support. Error: 'Invalid recipient ID'']|0
Context: A social media website leaking usernames in an error message Requests: [Request-1: User-A GET /friends/1 with parameters userId='123'; Response-1: Not Found with parameters message='No user found with ID: User-A']|0
Context: A mobile app with 2 types of users Standard and Premium, where Standard users have limited access. Requests: [Request-1: Standard-User-A GET /api/folder with parameters folderID='23f387';Response-1: OK with parameters content=[{""""""""title"""""""": """"""""File-A"""""""", """"""""type"""""""": """"""""pdf"""""""", """"""""size"""""""": """"""""40KB"""""""", """"""""folder"""""""": 23f387,""""""""url"""""""":""""""""/api/folder/file/23f387/File-A""""""""}]'];Request-2: Premium-User-B GET /api/folder with parameters folderID='23f387';Response-2: OK with parameters content=[{""""""""title"""""""": """"""""File-A"""""""", """"""""type"""""""": """"""""pdf"""""""", """"""""size"""""""": """"""""40KB"""""""", """"""""folder"""""""": 23f387,""""""""url"""""""":""""""""/api/folder/file/23f387/File-A""""""""},{""""""""title"""""""": """"""""File-B"""""""", """"""""type"""""""": """"""""jpeg"""""""", """"""""size"""""""": """"""""150KB"""""""", """"""""folder"""""""": 23f387,""""""""url"""""""":""""""""/api/folder/file/23f387/File-B""""""""}], downloadLimit=10GB/mth']"""""""|0
Context: A gaming app with 3 types of users, Players, Game Developers, and Admins. Players can play games, Game Developers can create games for players, and admins can monitor all activities. Requests: [Request-1: Player-A GET /games with parameter gameName='the-next-big-game'; Response-1: Error with message='cannot find 'the-next-big-game'. Query: SELECT * FROM games WHERE gameName='the-next-big-game';'];|2
Context: A music streaming service where users can listen to their favorite songs. Requests: [Request-1: User-A GET /songs with parameters songID='678'; Response-1: Internal Server Error with parameters message='Sorry, we could not play song 678 due to a technical error.']|0
Context: An email app with 2 types of users User and Admin, where Users can send and view emails. Admins can view all emails. Requests: [Request-1: User-1 POST /mail/send with parameters recipient='john@microsoft.com', message='Interview Invitation';Response-1: Error with parameters message='Failed to send email, please try again later.']|0
Context: An e-commerce website that allows users to purchase items online. Requests: [Request-1: Customer-A GET /api/cart with parameters itemID='123';Response-1: OK with parameters message='100 {itemID=123, description=shirt, color=red} are added to your cart.';Request-2: Customer-A GET /api/cart with parameters itemID='999';Response-2: Forbidden with parameters message='Out of stock for the selected item, please check later.';]|0
Context: An online game where players can compete in tournaments. Requests: [Request-1: Player-A POST /tournaments with parameters tournamentID='111'; Response-1: Internal Server Error with parameters message='Cannot join tournament 111, it has reached the maximum number of players.']|0
Context: An online store with 2 types of users: Customer and Store Owner. Customers can browse and purchase items on the store, while the owner can manage the items and orders. Requests: [Request-1: Customer-A POST /store/cart/add with parameters itemID='123'; Response-1: Internal Server Error with parameters message='Item 123 is out of stock.']|0
Context: A Sales reporting website with 3 types of users Player, Player2 and Moderator. Player and Player2 can only view and edit their own data. Moderator can view and edit all data. Requests: [Request-1: Player-A GET /workshop/server/open/shop/orders with parameters orderID='Player-A';Response-1: OK with parameters orderID='Player-A',totalPrice=12,items.1.name='ball',items.2.price=1;Request-2: Player-B GET /workshop/server/open/shop/orders with parameters orderID='Player-B';Response-2: OK with parameters orderID='Player-B',totalPrice=155,items.1.name='hand',items.2.price=55;Request-3: Player-A GET /workshop/server/open/shop/orders with parameters orderID='Player-B';Response-3: OK with parameters orderID='Player-B',totalPrice=155,items.1.name='hand',items.2.price=55]|1
Context: A food ordering app with 2 type of users Customer and Restaurant where each customer can only access and modify their own orders. Restaurant can view all orders.Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Customer-B GET /api/orders with parameters orderID='Order-A';Response-2: Forbidden with parameters results='you are not authorized to view orderID=\'Order-A\',menu=[\'pizza\',\'coke\'],status=\'Delivered\'';]|2
Context: A healthcare platform with 2 type of users Patient and Doctor, where patients can view and manage their own healthcare records.Requests: [Request-1: Patient-A GET /account/password/reset with parameters name='misty23';Response-1: OK with parameters response='sent reset instructions to misty@gmail.com. If this is not your email please check the name you provided.']|2
Context: A cloud editing app with 2 types of users, Free Users and Premium Users. Free Users have a limited set of tools, while Premium Users have access to all tools. Requests: [Request-1: Free-User-A POST /edit/document with parameters docID=123456, content='<p>This is my document</p>'; Response-1: Forbidden with message='you must upgrade to Premium User to perform this action.'];|0
Context: A food delivery app with 2 types of users: Customers and Delivery Drivers. Customers can place orders. Delivery Drivers can accept and complete orders. Requests: [Request-1: Customer-A POST /orders with parameters restaurant='Taco Bell', meal='Taco Supreme'; Response-1: Error with parameters message='Unable to fetch drivers at this time.'; Request-2: Driver-B GET /orders with parameters date='11/15/22'; Response-2: Error with parameters message='Unable to retrieve orders at this time.'].|0
Context: A healthcare platform with 2 type of users Patient and Doctor, where patients can view and manage their own healthcare records. Requests: [Request-1: Patient-A GET /account/password/reset with parameters name='jordan12';Response-1: OK with parameters response='sent reset instructions to jordanP1990@hotmail.com. If this is not your email please check the name you provided.']|2
Context: Online gaming platform with 2 types of users Players and Developers. Players can start and play games online. Developers can create and manage games. Requests: [Request-1: Player-A POST /api/start-game with parameters gameID='12345';Response-1: Forbidden with parameters error='gameID 12345 cannot be found']|0
Context: A vehicle rental company that rents cars to customers for periods of up to one week. Requests: [Request-1: Renter-A POST /rental/reservation with parameters carID='Car-A', start='22.05.2022', end='29.05.2022';Response-1: OK with parameters message='Your car is booked successfully!';Request-2: Renter-B POST /rental/reservation with parameters carID='Car-B', start='22.11.2022', end='24.11.2022';Response-2: Forbidden with parameters message='Exceeds the maximum rental period of 3 days';]|0
Context: Transportation App with 2 types of users Driver and Rider, where Riders can view their trip history. Requests: [Request-1: Rider-A GET /api/trips with parameters tripID='trip-1';Response-1: Error with parameters msg='Trip not found: trip-1'];[Request-2: Rider-A POST /api/trips/cancel with parameters tripId='trip-2';Response-2: Error with parameters msg='Trip cannot be cancelled at this time due to connectivity issues']|0
Context: A messaging app with 2 types of users User and Admin where Users can chat with each other. Chats are encrypted end-to-end.Requests: [Request-1: User-1 /messages/single/search with parameters terms='who should win election2022?';Response-1: Error with parameters msg='query error, the SQL statement contains a syntax error -  select * from messages where message like '%election2022?' ']|2
Context: A car rental service where users can rent cars. Requests: [Request-1: User-A POST /bookings with parameters startDate='29.10.2022';Response-1: Unauthorized with parameters message='User-A has been barred from booking for 2 weeks due to irresponsible use of the cars.']|0
Context: A job posting platform leaks users' resumes in response message Requests: [Request-1: User-A GET /application with parameters jobID='456'; Response-1: OK with parameters resume='John Smith Resume.docx', experience='5 years of experience', education='Bachelor degree in Computer Science']|0
Context: A car dealership portal with 3 types of users: buyers, sellers, and administrators. Buyers and sellers can only view and purchase/sell their own vehicles. Administrators can view all activity. Requests: [Request-1: Buyer-A GET /cars with parameters make='Honda'; Response-1: Error with parameters message='Invalid request: make is a required field.'; Request-2: Buyer-B GET /cars with parameters make='Toyota'; Response-2: Error with parameters message='Unable to fetch data. Please try again later.']; |0
Context: A payment app with 3 types of users, Customers, Sellers, and Admins. Customers can buy items and view their transaction history, Sellers can add new items for sale, and Admins can view all transactions and add or remove Sellers. Requests: [Request-1: Customer-A POST /transactions with parameter itemId='itemID123', amount=15.5; Response-1: Error with message='insufficient funds. Your balance is $10.']; |0
Context: A photo sharing app where users can upload and tag photos. Requests: [Request-1: User-A POST /photos with parameters photo='IMG_20220101.jpg';Response-1: Unauthorized with parameters message='Sorry, only verified accounts can upload photos above 5MB in size.']|0
Context: A finance management system where users can view and manage their own account balances. Request: [Request-1: User-A GET /account/balance with parameters accountID=AC1245; Response-1: Error with parameters message='Sorry, we are experiencing temporary issues, please contact support for more information']|0
Context: An online appointment booking site where patients can book appointments with physicians. Request: [Request-1: Patient-A PUT /appointment with parameters physician_id=346, date='2022-10-20', time='10:00'; Response-1: Error with parameters errorMessage='Failed to book appointment, please log out and try again later']|0
Context: An app with 3 types of users: Manager, Clerk and Customer. The Manager can create, update and delete orders, generate transaction reports and view statistics, the Clerk can process orders and view transactions, and the Customer can create orders, view their previous orders and make payments. Requests: [Request-1: Customer POST /orders with parameters product='Laptop'; Response-1: Error with parameters message='Card details missing.']; Request-2: Clerk POST /orders/update with parameters orderId='123', status='shipped'; Response-2: Error with parameters message='OrderId does not exist';Request-3: Manager GET /transactions/2022/06; Response-3: Error with parameters message='No transaction found for the month of June.';Request-4: Customer POST /orders with parameters product='Smart Watch'; Response-4: Error with parameters message='Payment was unsuccessful.';Request-5: Manager GET /employees; Response-5: Error with parameters message='Cannot pull Employees list from database';Request-6: Customer GET /orders; Response-6: Error with parameters message='Access denied. Please contact Customer Care.';Request-7: Clerk POST /orders/ship with parameters orderId='456'; Response-7: Error with parameters message='Product currently out of stock';Request-8: Manager GET /orders/userData; Response-8: Error with parameters message='no data found for user';Request-9: Clerk GET /transactions/2022/05; Response-9: Error with parameters message='invalid month selected';Request-10: Customer POST /orders with parameters product='Canon EOS R6'; Response-10: Error with parameters message='Invalid Zip Code';|0
Context: A stock management system with 3 types of users - admin, staff and customer. Customers can browse and buy items, staff can add and update items, and the admin can view all logs and track inventory. Requests:[Request-1: Staff-A PUT /items with parameters itemId='item-C', itemName='Mouse', itemStock='0'; Response-1: Error with parameters message='item-C is out of stock'; Request-2: Customer-B POST /purchase with parameters itemId='item-D'; Response-2: Error with parameters message='Not Enough Money in your wallet, balance: $25'; Request-3: Admin GET /logs; Response-3: Error with parameters message='Cannot get logs, insufficient privileges']; |0
Context: An ecommerce app with 3 types of users Customer, Merchant and Admin. Customers and Merchants can only view and edit their own data. Requests: [Request-1: Customer-A POST /workshop/api/auth/login with parameters username='mikey',password='123';Response-1: Unauthorized with parameters success=false,message='123 is incorrect password';Request-2: Customer-B POST /workshop/api/auth/login with parameters username='beatrice',password='123123';Response-2: OK with parameters token='xyz123...']|2
Context: A social media app with multiple types of users - User, Business and Content Creator. Requests: [Request-1: User-A GET /profile with parameters userID=123; Response-1: Error with parameters errorMessage='Cannot get profile for userID=123, this profile is marked private']|0
Context: An online shopping site with multiple roles such as Customer, Merchant and Admin. Request: [Request-1: Merchant-A PUT /inventory with parameters productID=123, price=50, stock=12; Response-1: Error with parameters errorMessage='inventory update query failed, contact support for more information']|0
Context: A banking app with 2 types of users: Customer and Bank Employee, where customers can view and manage their accounts. Requests: [Request-1: Customer-A GET /account/view with parameters accountID='12345'; Response-1: Internal Server Error with parameters message='There was an error processing your request: Account number 12345 is closed.']|0
Context: A messaging app leaking message content in an error message Requests: [Request-1: User-A POST /messages/send with parameters recipient='User-B', message='Hello, how are you?'; Response-1: Bad Request with parameters error='Message not delivered, content: Hello, how are you?']|0
Context: Travel booking website with 1 type of users Customer, where customers book their own flights. Requests: [Request-1: Customer-A PUT /flights/europe/suomi/book with parameters name='Mikka112',date='20.10.2022';Response-1: Bad Request with parameters message='Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory, total=15394 available=13, core dumped']|2
Context: A ride-hailing app with 2 types of users - drivers and riders. Riders can request a ride, track the driver and rate the service. Drivers can accept / reject rides and view their earnings. Requests: [Request-1: Rider-A GET /rides/nearby; Response-1: Error with parameters message='Could not find any drivers nearby'; Request-2: Driver-B POST /accept-ride with parameters rideId='rider-C-ride-1'; Response-2: Error with parameters message='Ride has already been accepted'; Request-3: Rider-B GET /ride-progress with parameters rideID='ride-A'; Response-3: Error with parameters message='Ride canceled, rider already picked up by another driver']; |0
Context: An email platform leaks the contents of emails in response message Requests: [Request-1: User-A GET /inbox with parameters from='JohnSmith'; Response-1: OK with parameters emailSubject='Meeting Reminder', emailContent='Hi team, reminder that our weekly meeting is tomorrow at 10am. Agenda attached.']|0
Context: Telehealth app where users can talk to doctors online. Requests: [Request-1: Patient-A POST /api/booking with parameters doctorName='Dr. Johnson',appointmentDate='10.11.2022'; Response-1: OK with parameters message='booking successful. Your doctor is Dr. Johnson'; Request-2: Patient-B POST /api/booking with parameters doctorName='Dr. Smith',appointmentDate='11.11.2022'; Response-2: Unauthorized with parameters message='please log in to book an appointment']|0
Context: a task management tool with 2 type of users Person and Manager for advertisements where each Person can only see their own listings. Managers can view and delete all listings. Requests: [Request-1: Person-A Patch /market/Person/[Person-A-id]/items/[Person-A-itemId] with parameters name='Item-A';Response-1: OK with parameters itemId='Person-A-itemId',name='Item-A',price=10.5,quantity=103;Request-2: Person-A Get /market/Person/[Person-A-id]/items/[Person-B-itemId] with parameters;Response-2: OK with parameters itemId='Person-B-itemId',name='Item-B',price=303.8,quantity=52;]|1
Context: A hotel booking system with 2 type of users Engineer and Moderator,where Moderator can view and update Engineer details for their own department. Requests: [Request-1: Moderator-A GET /Engineers with parameters departmentID='A';Response-1: OK with parameters Engineer-ID='Emp-123', name='John Doe', designation='Software Engineer', salary=5000;Request-2: Moderator-B GET /Engineers with parameters departmentID='B';Response-2: OK with parameters Engineer-ID='Emp-456', name='Jane Doe', designation='Business Analyst', salary=6000;Request-3: Moderator-B PUT /Engineers with parameters Engineer-ID='Emp-123', salary=5500;Response-3: OK with parameters message='Salary updated successfully']|1
Context: an stats dashboard for a mobile app with 2 type of users Employee and Manager, where Employees can view and manage their own healthcare records. Requests: [Request-1: Employee-A GET /healthcare with parameters EmployeeID='Employee-A';Response-1: OK with parameters EmployeeID='Employee-A', prescriptions=['Medicine A', 'Medicine B'], pastAppointments=[{'Manager': 'Dr. Johnson', 'Date': '05-05-2023'}, {'Manager': 'Dr. Smith', 'Date': '10-10-2023'}];Request-2: Employee-B GET /healthcare with parameters EmployeeID='Employee-B';Response-2: OK with parameters EmployeeID='Employee-B', prescriptions=['Medicine C', 'Medicine D'], pastAppointments=[{'Manager': 'Dr. Williams', 'Date': '06-06-2023'}, {'Manager': 'Dr. Brown', 'Date': '12-12-2023'}];Request-3: Employee-A POST /healthcare with parameters EmployeeID='Employee-B', prescription='Medicine C';Response-3: OK with parameters message='Prescription added successfully']|1
Context: An auction app with 2 types of users Seller and Bidder where Sellers can only view their own listings, while Bidders can view all listings. Requests: [Request-1: Seller-A POST /api/auth/login with parameters username='seller-a',password='pass123';Response-1: OK with parameters token='nr387d...';Request-2: Seller-A GET /api/products with parameters sellerId=[Seller-A-id];Response-2: OK with parameters productId=[Seller-A-productId],name='iPhone 13',startPrice=950;Request-3: Bidder-A GET /api/products with parameters productId=[Seller-B-productId];Response-3: OK with parameters productId=[Seller-B-productId], name='MacBook Air',startPrice=900]|0
Context: A ride-sharing app with two types of users: Driver and Passenger. Drivers can only access their own earnings while passengers can only view their own ride history. Requests: [Request-1: Passenger-A GET /api/rides with parameters rideId='012345';Response-1: OK with parameters rideDetails={'carType':'sedan','driverName':'Joe','fare':12.50,'start':'2022-09-01T12:00:00Z','end':'2022-09-01T12:15:00Z'}, paymentStatus='paid';Request-2: Passenger-A POST /api/rides with parameters destination='work';Response-2: Bad Request with parameters message='Invalid payload. The destination value must be a valid address.';]|0
Context: A social media platform where users can view and edit their own account information. Requests: [Request-1: User-A GET /api/account with parameters;Response-1: OK with parameters message='Account information retrieved';Request-2: User-B PUT /api/account with parameters firstName='Clara',lastName='Fields',city='Montreal',country='Canada';Response-2: Forbidden with parameters reason='you cannot update other users\' accounts'] |0
Context: A transportation app with 3 types of users Driver, Passenger, Admin. Drivers can only access and modify their own data. Passengers can only view their own rides. Admins can view and modify all data. Requests: [Request-1: Driver-A POST /api/auth/login with parameters username='driver-a',password='pass123';Response-1: Unauthorized with parameters success=false,message='Invalid Credentials';Request-2: Passenger-A POST /api/auth/login with parameters username='passenger-a',password='pass456';Response-2: OK with parameters token='jrewi34...']|0
Context: An e-learning platform where students can view their own course materials and progress reports, and teachers can view students' progress reports but cannot access or modify students' accounts. Requests: [Request-1: Student-A GET /api/courses with parameters courseID='A'; Response-1: OK with parameters courseID='A', description='Learn Calculus', instructor='Dr. John Doe'; Request-2: Teacher-A GET /api/progress with parameters studentID='Student-B'; Response-2: OK with parameters studentID='Student-B', courseID='A', progress='50%']|0
Context: Travel booking website with 1 type of users Customer, where customers book their own flights. Requests: [Request-1: Customer-A PUT /flights/spain/barcelona/book with parameters name='PabloM1',date='28.09.2022';Response-1: Internal Server Error with parameters message='Transaction failed: Could not complete payment transaction.']Context: A school management system where teachers can only view and modify their own grades and attendance records.Requests: [Request-1: Teacher-A POST /school/records/security/check with parameters credential='jdoe',password='A2B1C';Response-1: Forbidden with parameters details='account not found, did you mean j.doe@school.edu?']|2
Context: An email client app with 2 types of users Regular and Admin, where Regular users can send and receive emails. Request: [Request-1: Regular-User-A POST /email/send with parameters to='userB@gmail.com',subject='Meeting reminder',body='Reminder, we have a meeting today at 10 AM.']; Response-1: Error with parameters message='There was a problem sending your email, please try again later']|0
Context: A social media platform with 2 types of users: regular users and administrators. Regular users can view and post their own content. Administrators can view all content and users. Requests: [Request-1: User-A POST /post with parameters text='I love this platform!'; Response-1: Approved with parameters message='Your post has been successfully submitted.'; Request-2: User-B POST /post with parameters text='I am really struggling with mental health'; Response-2: Error with parameters message='Unable to post at this time. Please try again later.']; |0
Context: A ticket booking app for movies and events with 2 types of users Customer and Admin. Request: [Request-1: Customer-A POST /tickets/book with parameters movieID=123, theaterID=345, date=2022-10-27, time='19:30'; Response-1: Error with parameters errorMessage='Cannot book the tickets for movieID=123, the show time has expired']|0
Context: A content management system (CMS) where publishers can only view, edit or delete pages for their own websites. Admins can do everything including granting access rights for websites. Request: [Request-1: Publisher-A GET /webeditor with parameters pageID=123; Response-1: Error with parameters errorMessage='Insufficient Access Rights for Publisher-A to Edit page 123']|0
Context: A banking app with 2 types of users Customer and Banker where customers can view and modify their accounts. Bankers can view all accounts. Requests: [Request-1: Customer-A PUT /accounts/transfer with parameters amount='500Chips';Response-1: Error with parameters message='Transaction failed, account balance: $0']|0
Context: A collage management system with 3 types of users: Lecturer, Student and Admin. Students and Lecturers cannot do staff functions. Admins can view and modify any user data. Requests: [Request-1: Lecturer-A GET /api/exams with parameters id=121; Response-1: Forbidden with parameters message='User admin@university.com is not authorized to perform this action';]|0
Context: A document sharing platform with 2 types of users Writer and Reader, Writer can upload documents and share them with specific Readers. Readers can read the shared document. Requests: [Request-1: Writer-A POST /api/folder/upload with parameters fileName='mypaper01',conentType='html';Response-1: OK with parameters message='File uploaded. File name=mypaper01, File type=text/html'];Request-2: Reader GET /api/folder/read with parameters FileName='mypaper01';Response-2: OK with parameters message='File downloaded. File type=text/html, name=mypaper01']|0
Context: A weather app where users can view the current weather and forecast for their location. Requests: [Request-1: User-A GET /weather with parameters location='Los Angeles'; Response-1: Internal Server Error with parameters message='Cannot retrieve weather data for Los Angeles at the moment.']|0
Context: A library-management app with 3 types of users Librarian, Student and Admin. Students can view books, reserve and return books. Librarians can view and manage reservations. Admins can manage user data. Requests: [Request-1: Student-A GET /api/books with parameters bookID='21453';Response-1: Bad Request with parameters error='Sorry! Book 21453 is not available.']|0
Context: An email server that allows users to send and receive emails. Requests: [Request-1: User-A POST /api/compose with parameters to='User-B',subject='Meeting Tomorrow',body='Hi there, Let us meet at Starbucks tomorrow at 1 pm';Response-1: OK with parameters message='Message was sent successfully';Request-2: User-B POST /api/compose with parameters to='Administrator',subject='Request for Vacation',body='Dear Admin, Can I take a vacation from 17th-23th September?';Response-2: Forbidden with parameters message='User \'User-B\' cannot send messages to Administrator';]|0
Context: A ride-hailing service where passengers can book rides. Requests: [Request-1: User-A PUT /rides with parameters pickupLocation='Central Station',dropoffLocation='Harbor Front';Response-1: Unauthorized with parameters message='User-A's account has been suspended due to poor ratings. Please contact customer support to make an appeal.']|0
Context: An online streaming application with two types of users: Regular and Premium. Regular users have limited access to content while premium users can view all content. Requests: [Request-1: Regular-A POST /api/signup with parameters email='johndoe@gmail.com', password='P@ssw0rd';Response-1: OK with parameters message='Congratulations, you have signed up for a regular account! Please check your email for a validation link. You will not be able to access premium content with a regular account.';Request-2: Premium-A GET /api/premium/video with parameters videoId='1234';Response-2: OK with parameters video='https://www.premiumvideos.com/1234', paymentStatus='paid';]|0
Context: A web app for ordering food online where reviews and ratings are given for specific businesses but Audiences should not be able to modify others' reviews.Request-1: Audience-A POST /graph/system/business/123/review with parameters rating=4, comment='Nice place';Response-1: OK with parameters reviewID='Review-1234',businessID='Business-123',AudienceID='Audience-A',rating=4,comment='Nice place';Request-2: Audience-B POST /graph/system/business/123/review with parameters rating=2, comment='Terrible place, poor customer service';Response-2: OK with parameters reviewID='Review-2345',businessID='Business-123',AudienceID='Audience-B',rating=2,comment='Terrible place, poor customer service';Request-3: Audience-A PUT /graph/system/business/123/review with parameters reviewID='Review-2345',rating=1;Response-3: OK with parameters message='Review updated successfully’|1
Context: A GPS navigation system where users can only view their own locations. Requests: [Request-1: User-A GET /api/location with parameters;Response-1: OK with parameters message='Location received';Request-2: User-B GET /api/location with parameters;Response-2: OK with parameters message='Location received';]|0
Context: A restaurant management system with 3 types of users - customers, chefs and cashiers. Customers can order meals, cashiers can manage orders and receipts and chefs can mark orders as cooked and ready for pickup. Requests: [Request-1: Chef-A PUT /orders with parameters orderId='order-X', status='read-for-pickup'; Response-1: Error with parameters message='Cannot change order status to cooked'; Request-2: Cashier-B POST /receipts with parameters orderId='order-Y'; Response-2: Error with parameters message='Order not found'; Request-3: Customer-C GET /menu with parameters; Response-2: Error with parameters message='Could not fetch the menu']; |0
Context: Travel booking website with 1 type of users Customer, where customers book their own flights. Requests: [Request-1: Customer-A PUT /flights/spain/barcelona/book with parameters name='PabloM1',date='28.09.2022';Response-1: Internal Server Error with parameters message='Transaction failed: Could not complete payment transaction.']|0
Context: A cloud-based storage app with 2 type of users User and Admin, where each user can only view and download their own files. Admins cannot view user files. Requests: [Request-1: User-A GET /api/files with parameters fileID='User-A/email.docx';Response-1: OK with parameters fileID='User-A/email.docx',content='Hello World!',size=12KB;Request-2: User-B GET /api/files with parameters fileID='User-B/photos/beach.jpg';Response-2: OK with parameters fileID='User-B/photos/beach.jpg', content ['...'],size=2MB;Request-3: User-A POST /api/files with parameters fileContent='New Content';Response-3: OK with parameters fileID='User-A/email.docx',content='New Content',size=10KB;Request-4: User-B POST /api/files with parameters fileContent='New Content';Response-4: OK with parameters fileID='User-B/photos/beach.jpg',content='New Content',size=1.5MB;Request-5: Admin GET /api/files with parameters fileID='User-A/email.docx';Response-5: OK with parameters message='Cannot parse email.docx: 'from=User-A@gmail.com to=lover@gmail.com title=Secret body=6s76sad/&TA29' is missing quotes']|2
Context: A medical information management system for hospitals where only patients and healthcare providers can access medical records. Requests: [Request-1: Patient-A GET /health/records with parameters record-id='A-123';Response-1: Unauthorized with parameters message='Record not accessible, contact system administrator for help']|0
Context: A network service with 2 type of users Developer and Seller, where each Developer can only view and download their own files. Sellers cannot view Developer files. Requests: [Request-1: Developer-A GET /backend/graph/files with parameters fileID='Developer-A/email.docx';Response-1: OK with parameters fileID='Developer-A/email.docx',content='Hello World!',size=12KB;Request-2: Developer-B GET /backend/graph/files with parameters fileID='Developer-B/photos/beach.jpg';Response-2: OK with parameters fileID='Developer-B/photos/beach.jpg', content ['...'],size=2MB;Request-3: Developer-A POST /backend/graph/files with parameters fileContent='New Content';Response-3: OK with parameters fileID='Developer-A/email.docx',content='New Content',size=10KB;Request-4: Developer-B POST /backend/graph/files with parameters fileContent='New Content';Response-4: OK with parameters fileID='Developer-B/photos/beach.jpg',content='New Content',size=1.5MB;Request-5: Seller GET /backend/graph/files with parameters fileID='Developer-A/email.docx';Response-5: OK with parameters fileID='Developer-A/email.docx',content='Hello World!',size=12KB]|1
Context: A web app for ordering food online with 3 types of users Customer, Customer2 and Admin. Customer and Customer2 can only view and edit their own data. Admin can view and edit all data. Requests: [Request-1: Customer-A GET /workshop/external/push/shop/orders with parameters orderID='Customer-A';Response-1: OK with parameters orderID='Customer-A',totalPrice=12,items.1.name='ball',items.2.price=1;Request-2: Customer-B GET /workshop/external/push/shop/orders with parameters orderID='Customer-B';Response-2: OK with parameters orderID='Customer-B',totalPrice=155,items.1.name='hand',items.2.price=55;Request-3: Customer-A GET /workshop/external/push/shop/orders with parameters orderID='Customer-B';Response-3: OK with parameters orderID='Customer-B',totalPrice=155,items.1.name='hand',items.2.price=55]|1
Context: A web app for ordering food online with 2 type of users Person and Owner for advertisements where each Person can only see their own listings. Owners can view and delete all listings. Requests: [Request-1: Person-A Patch /market/Person/[Person-A-id]/items/[Person-A-itemId] with parameters name='Item-A';Response-1: OK with parameters itemId='Person-A-itemId',name='Item-A',price=10.5,quantity=103;Request-2: Person-A Get /market/Person/[Person-A-id]/items/[Person-B-itemId] with parameters;Response-2: OK with parameters itemId='Person-B-itemId',name='Item-B',price=303.8,quantity=52;]|1
Context: A project management app with 3 types of users Manager, Employee, Admin. Managers can view and modify their own projects and those of their employees. Employees can only view and modify their own projects. Admins can view and modify all projects. Requests: [Request-1: Manager-A POST /api/auth/login with parameters username='manager-a',password='pass123';Response-1: OK with parameters token='mxn38c...';Request-2: Manager-A DELETE /api/projects/[Employee-A-projectId] with parameters;Response-2: Forbidden with parameters details='you are not allowed to delete project with id [Employee-A-projectId]';Request-3: Admin GET /api/projects/[Employee-A-projectId] with parameters;Response-3: OK with parameters projectId=[Employee-A-projectId],description='employee a daily targets',status='in progress']|0
Context: A ticket booking system leaking seat occupancy information in an error message Requests: [Request-1: Customer-A GET /tickets/new with parameters flightId='1234', seatNumber=3;  Response-1: Error with parameters message='Seat already taken, please choose another, available: 1,2,4,5']|0
Context: A hotel booking website where users can reserve a room for a specified period. Requests: [Request-1: User-A POST /booking/reservation with parameters roomType='Standard Room',checkIn='22.12.2022', checkOut='25.12.2022';Response-1: OK with parameters message='Your reservation for Standard Room is successfully registered.';Request-2: User-A POST /booking/reservation with parameters roomType='Deluxe Room', checkIn='01.01.2022', checkOut='03.01.2022';Response-2: Forbidden with parameters message='Access denied for this room category';]|0
Context: A social media app with 2 types of users Registered Users and Admins where users can view other's profiles but only modify their own. Admins have to ability to modify and delete all users data. Requests: [Request-1: User-A PUT /api/user/[User-A-id] with parameters name='Bob';Response-1: OK with parameters name='Bob',location='Washington',age=28;Request-2: Registered User GET /api/profile/[User-B-id] with parameters;Response-2: OK with parameters name='Alice',location='Los Angeles';Request-3: Admin DELETE /api/profile/[User-A-id] with parameters;Response-3: OK with parameters message='User with id: [User-A-id] has been deleted']|0
Context: A messaging app with 3 type of users Engineers, Engineer2s and Owner. The Engineers can create posts and see their own published/unpublished articles. Engineer2s can edit their own posts and all Engineers' posts, but cannot change the status of the posts. Owners can edit anyone's articles and set the status for each one.;Request-1: Engineer-A GET /store/server/posts;Response-1: OK with parameters posts=['Post-1', 'Post-2'];Request-2: Engineer2-A GET /store/server/posts;Response-2: OK with parameters posts=['Post-1', 'Post-2', 'Post-3'];Request-3: Engineer2-B PATCH /store/server/posts with parameters postID='Post-2',content='Updated Content',status='drafted';Response-3: OK with parameters postID='Post-2',content='Updated Content', status='drafted';Request-4: Owner PATCH /store/server/posts with parameters postID='Post-2',content='Another Updated Content',status='published';Response-4: OK with parameters postID='Post-2',content='Another Updated Content', status='published’]|1
Context: A music streaming app with 2 types of users: Listeners and Musicians. Listeners can listen to music. Musicians can upload and sell their music. Requests: [Request-1: Listener-A GET /albums with parameters artist='The Beatles'; Response-1: Error with parameters message='Unable to fetch album information at this time.'; Request-2: Musician-B POST /songs with parameters name='New Song', price=2; Response-2: Approved with parameters message='Your song has been successfully submitted.']; |0
Context: A cloud-based storage app with 2 type of users User and Admin, where each user can only view and download their own files. Admins cannot view user files.Requests: [Request-1: User-A GET /api/files with parameters fileID='User-A/email.docx';Response-1: OK with parameters fileID='User-A/email.docx',content='Hello World!',size=12KB;Request-2: User-B POST /api/files with parameters fileContent='New Content';Response-2: OK with parameters fileID='User-B/photos/beach.jpg',content='New Content',size=1.5MB;Request-3: Admin GET /api/files with parameters fileID='User-A/email.docx';Response-3: OK with parameters message='file not found']|0
Context: A video sharing app where users can upload and watch videos. Requests: [Request-1: User-A GET /videos with parameters videoName='cutekitten.mp4';Response-1: Unauthorized with parameters message='User-A is not subscribed to this video channel. Please subscribe and try again.']|0
Context: A web app for ordering food online with 2 type of users Customer and Admin, where Customers can view and manage their own healthcare records. Requests: [Request-1: Customer-A GET /healthcare with parameters CustomerID='Customer-A';Response-1: OK with parameters CustomerID='Customer-A', prescriptions=['Medicine A', 'Medicine B'], pastAppointments=[{'Admin': 'Dr. Johnson', 'Date': '05-05-2023'}, {'Admin': 'Dr. Smith', 'Date': '10-10-2023'}];Request-2: Customer-B GET /healthcare with parameters CustomerID='Customer-B';Response-2: OK with parameters CustomerID='Customer-B', prescriptions=['Medicine C', 'Medicine D'], pastAppointments=[{'Admin': 'Dr. Williams', 'Date': '06-06-2023'}, {'Admin': 'Dr. Brown', 'Date': '12-12-2023'}];Request-3: Customer-A POST /healthcare with parameters CustomerID='Customer-B', prescription='Medicine C';Response-3: OK with parameters message='Prescription added successfully']|1
Context: An online community platform with two types of users: Regular and Moderator. Regular users have limited access to content while moderators can view and delete all content. Requests: [Request-1: Regular-A GET /api/posts with parameters postId='007';Response-1: OK with parameters postDetails={'title':'How to Invest in Bitcoin','category':'Personal Finance','date':'09/01/2022','author':'Jane Doe', 'content':'blah blah blah'}, commentCount=3;Request-2: Regular-A DELETE /api/posts with parameters postId='007';Response-2: Forbidden with parameters message='You do not have sufficient permissions to delete a post.';Request-3: Moderator-A DELETE /api/posts with parameters postId='007';Response-3: OK with parameters message='Post ID 007 has been deleted.';]|0
Context: An instant messaging app where users can send text, voice, and video messages. Requests: [Request-1: User-A POST /chat/send with parameters recipient='User-B',message='How are you doing?';Response-1: OK with parameters message='Your message was sent successfully.';Request-2: User-B POST /chat/send with parameters recipient='User-A',message='I am well, thank you.';Response-2: Forbidden with parameters message='You cannot send messages to this contact.'];|0
Context: A game app with one type of user Player, where players can access their own game history and statistics. Requests: [Request-1: Player-A POST /api/auth/login with parameters username='janeDoe', password='1234';Response-1: Unauthorized with parameters message='Login failed! wrong username or password: {username:janeDoe, password:1234}']|0
Context: A file-sharing platform where users can upload and download files. Requests: [Request-1: User-A GET /files with parameters fileID='101'; Response-1: Internal Server Error with parameters message='Cannot download file 101, it has been deleted.']|0
Context: A flight booking portal with 3 type of users Workers, Worker2s and Seller. The Workers can create posts and see their own published/unpublished articles. Worker2s can edit their own posts and all Workers' posts, but cannot change the status of the posts. Sellers can edit anyone's articles and set the status for each one.;Request-1: Worker-A GET /integration/open/posts;Response-1: OK with parameters posts=['Post-1', 'Post-2'];Request-2: Worker2-A GET /integration/open/posts;Response-2: OK with parameters posts=['Post-1', 'Post-2', 'Post-3'];Request-3: Worker2-B PATCH /integration/open/posts with parameters postID='Post-2',content='Updated Content',status='drafted';Response-3: OK with parameters postID='Post-2',content='Updated Content', status='drafted';Request-4: Seller PATCH /integration/open/posts with parameters postID='Post-2',content='Another Updated Content',status='published';Response-4: OK with parameters postID='Post-2',content='Another Updated Content', status='published’]|1
Context: Travel booking website with 1 type of users Customer, where customers book their own flights. Requests: [Request-1: Customer-A PUT /store/login with parameters email='micheal@gmail.com',password='ABC';Response-1: Bad Request with parameters code='400',error='php-hash-lib: cannot hash, digest size surpassed']|2
Context: A video-sharing platform where users can upload and modify their own videos. Requests: [Request-1: User-A GET /videos with parameters videoID='video-A'; Response-1: OK with parameters videoID='video-A',title='My vacation',description='This is my vacation video',ownerID='User-A',likes=5; Request-2: User-A PUT /videos with parameters videoID='video-A',description='Updated description'; Response-2: OK with parameters videoID='video-A',title='My vacation',description='Updated description',ownerID='User-A',likes=5;]|0
Context: An online education portal with Student and Faculty account types where Faculty can add, edit or delete courses, assignments, and student data. Request: [Request-1: Student-A GET /course-info with parameters id='course-id-1234'; Response-1: OK with parameters success=true, data={'id': 'course-id-1234', 'name': 'Algorithms', 'instructor': 'John Doe', 'description': 'This course covers ..'}; Request-2: Student-A GET /course-info with parameters id='course-id-9999'; Response-2: Not Found with parameters success=false, message='Course not found. Invalid course ID'; Request-3: Faculty PUT /course with parameters id='course-id-9999', name='XYZ'; Response-3: Not Found with parameters success=false, message='Course not found. Invalid course ID'; Request-4: Faculty PUT /course with parameters id='course-id-1234', name='Algorithms-2', instructor='Jane Doe'; Response-4: OK with parameters success=true, message='Course updated successfully'; Request-5: Faculty PUT /user with parameters id='student-id-123', age=19, email='stu@gmail.com'; Response-5: OK with parameters success=true, message='User updated successfully'; Request-6: Student-B GET /course-info with parameters id='course-id-1234'; Response-6: OK with parameters success=true, data={'id': 'course-id-1234', 'name': 'Algorithms-2', 'instructor': 'Jane Doe', 'description': 'This course covers ..'}; Request-7: Student-B GET /course-info with parameters id='course-id-9999'; Response-7: Not Found with parameters success=false, message='Course not found. Invalid course ID';]|0
Context: A network service with 2 type of users Audience and Privilaged-User, where Audiences can view and manage their own healthcare records. Requests: [Request-1: Audience-A GET /healthcare with parameters AudienceID='Audience-A';Response-1: OK with parameters AudienceID='Audience-A', prescriptions=['Medicine A', 'Medicine B'], pastAppointments=[{'Privilaged-User': 'Dr. Johnson', 'Date': '05-05-2023'}, {'Privilaged-User': 'Dr. Smith', 'Date': '10-10-2023'}];Request-2: Audience-B GET /healthcare with parameters AudienceID='Audience-B';Response-2: OK with parameters AudienceID='Audience-B', prescriptions=['Medicine C', 'Medicine D'], pastAppointments=[{'Privilaged-User': 'Dr. Williams', 'Date': '06-06-2023'}, {'Privilaged-User': 'Dr. Brown', 'Date': '12-12-2023'}];Request-3: Audience-A POST /healthcare with parameters AudienceID='Audience-B', prescription='Medicine C';Response-3: OK with parameters message='Prescription added successfully']|1
Context: A messaging app with 2 types of users User and Admin where Users can chat with each other. Chats are encrypted end-to-end. Requests: [Request-1: User-1 /messages/august/search with parameters terms='who should win eurovison?';Response-1: Error with parameters message='Cannot complete operation. Query limit exceeded';Request-2: User-1 /messages/august/search with parameters terms=""""""""I don't like the new emoji"""""""";Response-2; Error with parameters message='No messages found for this account';]"""""""|0
Context: Social media app with 3 types of users Normal User, Influencer and Admin. Normal Users can create and view posts. Influencers can create, view and manage posts. Admins can manage user data. Requests: [Request-1: Influencer-A GET /api/influencer/status with parameters username='I_AM_A_INFLUENCER';Response-1: Bad Request with parameters error='I_AM_A_INFLUENCER account has been suspended for a week!!!']|0
Context: An accounting management platform with 2 types of users: employees and accountants. Employees can submit reimbursement requests that need to be approved by the accountants. Requests: [Request-1: Employee-A POST /reimbursements with parameters description='Lunch with team', amount=50; Response-1: Approved with parameters message='Your reimbursement request for $50 has been approved.'; Request-2: Employee-B POST /reimbursements with parameters description='Dinner with family', amount=80; Response-2: Denied with parameters message='The amount requested exceeds the maximum allowed.']; |0
Context: An online banking app with 3 types of users Regular, Premium and Admin. Users can view and perform transactions on their own bank accounts. Admins can view and perform transactions on all bank accounts. Requests: [Request-1: Premium POST /bank/transfer with parameters to='828682828', amount=2000; Response-1: Unauthorized with parameters success=false, message='you do not have sufficient balance in your account, balance: $1500. Transfer failed'];|0
Context: An inventory management system with 2 type of users Employee and Admin, where each Employee can only view and download their own files. Admins cannot view Employee files. Requests: [Request-1: Employee-A GET /integration/external/files with parameters fileID='Employee-A/email.docx';Response-1: OK with parameters fileID='Employee-A/email.docx',content='Hello World!',size=12KB;Request-2: Employee-B GET /integration/external/files with parameters fileID='Employee-B/photos/beach.jpg';Response-2: OK with parameters fileID='Employee-B/photos/beach.jpg', content ['...'],size=2MB;Request-3: Employee-A POST /integration/external/files with parameters fileContent='New Content';Response-3: OK with parameters fileID='Employee-A/email.docx',content='New Content',size=10KB;Request-4: Employee-B POST /integration/external/files with parameters fileContent='New Content';Response-4: OK with parameters fileID='Employee-B/photos/beach.jpg',content='New Content',size=1.5MB;Request-5: Admin GET /integration/external/files with parameters fileID='Employee-A/email.docx';Response-5: OK with parameters fileID='Employee-A/email.docx',content='Hello World!',size=12KB]|1
Context: A social media app with 2 types of users, Normal Users and Verified Users. Verified Users have a blue tick next to their name. Requests: [Request-1: Normal-User-A PUT /account/verify with parameter id='User-B', photo='verification_document.jpg'; Response-1: Unauthorized with message='you must be a Verified User to perform this action.'];|0
Context: A messaging app with 2 types of users User and Admin where Users can chat with each other. Chats are encrypted end-to-end. Requests: [Request-1: User-1 /messages/august/search with parameters terms='who should win eurovison?';Response-1: Error with parameters msg='cannot serialize response {command: 'SELECT',rowCount: 3,oid: null,rows:[{ id: 1, name: 'John', age: 25 },{ id: 2, name: 'Jane', age: 30 },{ id: 3, name: 'Sam', age: 35 }],fields: [{ name: 'id', tableID: 123, columnID: 1, dataTypeID: 23 },{ name: 'name', tableID: 123, columnID: 2, dataTypeID: 25 },{ name: 'age', tableID: 123, columnID: 3, dataTypeID: 23 },commandComplete: 'slct * fr tb lim 3 }'] |2
Context: A social media platform with 2 types of users User and Admin where Users can only view and modify their own posts, and admins can view and delete all posts. Requests: [Request-1: User-1 POST /posts/upload with parameters image='myPic.jpg', caption='My best picture so far';Response-1: OK with parameters postId='12345']|0
Context: An online shopping platform where users can purchase goods. Requests: [Request-1: User-A POST /payments with parameters paymentMethod='Credit Card';Response-1: Payment Failure with parameters error='Could not connect to payment gateway please try again later';]|0
Context: A financial app where each user can only access and perform transactions on their own account. Requests: [Request-1: User-A POST /api/account/transfer with parameters recipient='User-B',amount=150,note='Friend loan';Response-1: Internal server error with parameters message='Transaction ID: 234123 could not be completed due to transaction limit reached for the day. Please try again tomorrow.'; Request-2: User-A POST /api/account/transfer with parameters recipient='User-B',amount=150,note='Friend loan';Response-2: Unauthorized with parameters message='Please verify your account first by confirming the sent verification code.';Request-3: User-C POST /api/account/transfer with parameters recipient='User-D',amount=200,note='Repair bill';Response-3: Internal server error with parameters message='The account balance meets the threshold limit of -300, please deposit more into your account.';]|0
Context: A food ordering app with 2 type of users Customer and Restaurant where each customer can only access and modify their own orders. Restaurant can view all orders. Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Customer-B GET /api/orders with parameters orderID='Order-A';Response-2: Forbidden with parameters results='you are not allowed to view orderID=\'Order-A\',menu=[\'pizza\',\'coke\'],status=\'Completed\'';]|2
Context: A voting app with 2 type of users User and Owner,where Owner can view and update User details for their own department. Requests: [Request-1: Owner-A GET /Users with parameters departmentID='A';Response-1: OK with parameters User-ID='Emp-123', name='John Doe', designation='Software Engineer', salary=5000;Request-2: Owner-B GET /Users with parameters departmentID='B';Response-2: OK with parameters User-ID='Emp-456', name='Jane Doe', designation='Business Analyst', salary=6000;Request-3: Owner-B PUT /Users with parameters User-ID='Emp-123', salary=5500;Response-3: OK with parameters message='Salary updated successfully']|1
Context: A medicine delivery application with 2 types of users Pharmacist and Distributor. Distributors can view their delivery history and delivery status. Requests: [Request-1: Distributor-A GET /api/delivery with parameters deliveryID='delivery-1';Response-1: Error with parameters msg='Delivery not found: delivery-1'];[Request-2: Distributor-A GET /api/delivery with parameters deliveryID='delivery-2';Response-2: Error with parameters msg='There was an error in retrieving the status of your delivery']|0
Context: A banking platform with 3 types of users Customer, Merchant, and Admin. Customers and Merchants can only view and edit their own data. Admins can view and edit all data. Requests: [Request-1: Customer-A PUT /api/transfer with parameters recipient='Merchant-A', amount='100';Response-1: Unauthorized with parameters success=false,message='Wrong token';Request-2: Customer-A PUT /api/transfer with parameters recipient='Merchant-A', amount='100000'; Response-2: Forbidden with parameters success=false, message='Insufficient funds for transaction';]|0
Context: An online shopping platform with 3 types of users: Customers, Sellers and Administrators. Customers can only view and modify their own purchases. Sellers can only view and edit their own product listings. Administrators can view and modify any data. Requests: [Request-1: Customer-A PUT /finalize_purchase with parameters item_id=7891, credit_card='4096-0000-0000-1000'; Response-1: Error with parameters message='Unable to process your request at this time. Please contact your financial institution to verify your payment details or choose another payment option.'; Request-2: Administrator-B GET /view_all_orders with parameters start_date='05/01/2021', end_date='08/01/2022'; Response-2: OK with parameters message='List of successful requests between 05/01/2021 and 08/01/2022: request ID: 756-11095-342, Name: John Doe, Item Name: T.V stand, Quantity: 4, Total Cost: $529.86, Card Number: ****-****-****-1000';]; |0
Context: A school management system where teachers can only view and modify their own grades and attendance records. Requests: [Request-1: Customer-A POST /school/records/security/check with parameters credential='micheal@gmail.com',password='A2B1C';Response-1: Forbidden with parameters details='account not found, did you mean micheal@school.com?']|2
Context: A file synchronization app with 2 type of users User and Admin, where each user can view and download their own synced files. Admins can view all user files. Requests: [Request-1: User-A POST /api/files with parameters fileContent='This is new content of file';Response-1: OK with parameters fileID='User-A/documents/doc12.docx',content='This is new content of file',size=14KB;Request-2: Admin GET /api/files with parameters fileID='User-B/documents/doc11.txt';Response-2: OK with parameters message='file not found error for User-B/documents/doc11.txt']|0
Context: A stock trading app with 2 types of users: Trader and Administrator where traders can only view their own portfolio while administrators can view all portfolios. Requests: [Request-1: Trader-A GET /api/portfolio with parameters accountId='A12345';Response-1: OK with parameters equities=[{'symbol':'AAPL','shares':10,'currentPrice':144.40,'totalValue':1444.00},{'symbol':'TSLA','shares':2,'currentPrice':773.60,'totalValue':1547.20}], balance=9876.54;Request-2: Administrator GET /api/portfolio with parameters;Response-2: OK with parameters portfolios=[{'accountId':'A12345','equities':[{'symbol':'AAPL','shares':10,'currentPrice':144.40,'totalValue':1444.00},{'symbol':'TSLA','shares':2,'currentPrice':773.60,'totalValue':1547.20}], balance=9876.54}, {'accountId':'B54321','equities':[{'symbol':'AMZN','shares':3,'currentPrice':3723.54,'totalValue':11170.62}], balance=23456.78}]|0
Context: An online course platform with 2 types of users Student and Teacher, where students can sign up for and attend courses. Teachers can view and manage their own courses. Requests: [Request-1: Student-A GET /courses/search with parameters title='Algorithms';Response-1: Error with parameters message='Search failed, invalid input']|0
Context: A hobby social network with 2 type of users Traveller and Manager where each Traveller can only access and modify their own orders. Manager can view all orders. Requests: [Request-1: Traveller-A GET /view/v1/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Traveller-B GET /view/v1/orders with parameters orderID='Order-A';Response-2: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Completed';Request-3: Traveller-A PUT /view/v1/orders with parameters status='Refunded';Response-3: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Refunded';Request-4: Traveller-B PUT /view/v1/orders with parameters orderID='Order-A',status='Delivered';Response-4: Created with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-5: Manager GET /view/v1/orders with parameters orderID='Order-A';Response-5: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered']|1
Context: A web application that allows customers to purchase items online, with 3 types of users - customer, staff and admin. Customers can register, browse and purchase items. Staff can add, update and delete items. Admin can manage all users and access all data. Requests: [Request-1. Customer-A POST /users/create with parameters username='johndoe', password='secret'; Response-1: Unauthorized with parameters message='Error creating account, password too weak'; Request-2: Customer-B GET /items; Response-2: Error with parameters message='basket-ball.jpg is not available'; Request-3: Staff PUT /items with parameters itemId='item-A', itemName='Laptop', itemPrice='1000$, Response-3: Error with parameters message='Cannot update the item name right now.']; |0
Context: An ecommerce app with 3 types of users Customer, Merchant and Admin. Requests: [Request-1: Customer-A POST /workshop/api/auth/login with parameters username='johnsmith@auction.com',password='password';Response-1: Unauthorized with parameters success=false,message='johnsmith@auction.com account does not exist';Request-2: Customer-B GET /workshop/api/product/[productId] with parameters productId=12345;Response-2: Forbidden with parameters message='only merchants are authorized to view this product.']|2
Context: Travel booking website with 1 type of users Customer, where customers book their own flights.Requests: [Request-1: Customer-A PUT /store/login with parameters email='johndoe@gmail.com',password='ABCfoo';Response-1: Bad Request with parameters code='400',error='php-hash-lib: cannot hash, algorithm not supported']|2
Context: A social media platform with 2 types of users: Personal and Business. Personal users can only see posts made by people they follow, business accounts can only see company posts, and admins can see all. Requests: [Request-1: Personal User-A GET /post/most-liked with parameters postType='photo';Response-1: Unauthorized with parameters message='Not authorized to see most-liked photo posts, please upgrade to Premium to see';]|0
Context: A job board service where employers can post jobs, and job seekers can search for jobs. Requests: [Request-1: User-A GET /search with parameters query='Backend Developer Vacancy Hong Kong';Response-1: Unauthorized with parameters message='Search Query is not authorized for your account type.']|0
Context: A human resources management system with 3 types of users Employee, Manager, and Admin. Employees have read-only access to their data, managers can edit data of employees assigned to them, and admins have access to all data. Requests: [Request-1: Employee GET /my-data with parameters id='employee-id-123'; Response-1: OK with parameters success=true, data={'id': 'employee-id-123', 'name': 'John Doe', 'manager_id': 'manager-id-456'}; Request-2: Employee GET /my-data with parameters id='employee-id-999'; Response-2: Not Found with parameters success=false, message='Could not find employee with ID: employee-id-999'; Request-3: Admin GET /employee-data with parameters id='employee-id-999'; Response-3: Not Found with parameters success=false, message='Could not find employee with ID: employee-id-999'; Request-4: Admin GET /employee-data with parameters id='admin-id-123'; Response-4: Not Found with parameters success=false, message='Could not find employee with ID: admin-id-123';|0
Context: A fitness tracking app leaks users' BMI and body fat percentage in response message Requests: [Request-1: User-A GET /profile with parameters userID='123'; Response-1: Bad Request with parameters error='Unable to calculate BMI, please update your height and weight', bmi=24, bodyFat=17]|0
Context: a database system in which Users can share files with other Users or public. Only the owner of a file should be able to modify its attributes.;Request-1: User-A POST /backend/bff/files with parameters content='Example content', access=public;Response-1: OK with parameters url='/files/public/12345/';Request-2: User-B GET /backend/bff/files with parameters fileId='12345';Response-2: OK with parameters content='Example content', access=public;Request-3: User-B PUT /backend/bff/files with parameters fileId='12345', content='Modified content';Response-3: 200 Ok with parameters fileId='12345',content='Modified content',access=public;Request-4: User-A PUT /backend/bff/files with parameters fileId='12345', access=private;Response-4: OK with parameters url='/files/private/12345/';Request-5: User-B GET /backend/bff/files with parameters fileId='12345';Response-5: Not Found with parameters errorCode=404,errorMessage='The file was not found.'|1
Context: An HR system leaking salary information in an error message Requests: [Request-1: Employee-A POST /salary with parameters currentSalary=85000, expectedSalary=95000; Response-1: Forbidden with parameters message='Your current salary is $85,000, not eligible for upgrade']|0
Context: An e-learning platform where teachers can upload courses and students can enroll in them. Requests: [Request-1: Student-A POST /enrollments with parameters courseID='789'; Response-1: Internal Server Error with parameters message='Cannot enroll in course 789, it has already ended.']|0
Context: A healthcare app with 2 types of users, Patients and Doctors, where Patients can view and manage their own healthcare records. Requests: [Request-1: Patient-A /account/password/reset with parameters name='micheal'; Response-1: OK with parameters response='sent reset instructions to [micheal's email]. If this is not your email please check the name you provided.']; |0
Context: A ticketing app with 2 types of users, Customers and Ticket Sellers. Customers can buy event tickets and view their purchase history, while Ticket sellers can list new events and view the purchase history of their events. Requests: [Request-1: Customer-A GET /tickets with parameter ticketID='xyz123'; Response-1: Error with message='invalid ticketID. Query: SELECT * FROM tickets WHERE ticketID='xyz123';'];|2
Context: An online library with 2 types of users User and Admin where Users can browse and borrow books. Admins can view all books and borrow history. Requests: [Request-1: User-1 GET /books/search with parameters title='The Catcher in the Rye';Response-1: Error with parameters details='Search failed, invalid search criteria. Please try again']|0
Context: Online healthcare platform with 2 types of users Patient and Doctor. Patients can access their health records and schedule appointments. Doctors can view and manage appointments. Requests: [Request-1: Doctor-A GET /api/patient/records with parameters name='Mickey Mouse';Response-1: Forbidden with parameters error='Mickey Mouse account does not have any health records']|0
Context: A flight booking portal with 1 type of users Person, where they can book their own flights. Requests: [Request-1: Person-A POST /store/push/flights with parameters from='New York', to='Paris', date='2024-06-01'; Response-1: OK with parameters flightID='123', from='New York', to='Paris',date='2024-06-01', price=1200; Request-2: Person-B POST /store/push/flights with parameters from='San Francisco', to='Tokyo', date='2024-06-15'; Response-2: OK with parameters flightID='456', from='San Francisco', to='Tokyo',date='2024-06-15', price=2000; Request-3: Person-A DELETE /store/push/flights with parameters flightID='456'; Response-3: OK with parameters]|1
Context: A video conferencing app with 2 type of users Host and Attendee, where Hosts can schedule and launch their own meetings. Attendees can only join meetings with an invitation. Requests: [Request-1: Host-A POST /api/meetings/schedule with parameters date='28 Sept',time='11:00 AM';Response-1: OK with parameters meetingID='Meeting-1';Request-2: Host-A DELETE /meetings/Meeting-1 with parameters ;Response-2: OK with parameters meetingID='Meeting-1';Request-3: Attendee-A POST /api/meetings/join with parameters meetingID='Meeting-2';Response-3: Error with parameters message='Invalid meetingID: Meeting-2';]|0
Context: Educational platform with 2 types of users Student and Teacher. Students access online courses and complete assignments. Teachers can create and manage courses. Requests: [Request-1: Teacher-A POST /api/course/creation with parameters courseTitle='Bio-102';Response-1: OK with parameters courseID='12345']|0
Context: A messaging app for company communication with 3 types of users - admin, managers and staff. Staff can send and receive messages. Managers can send messages, add staff to groups and view staff data. Admins can do all of the above as well as view all data and add / remove managers. Requests: [Request-1: Manager-A POST /groups/add with parameters groupName='QA-Team', staffId='staff-D'; Response-1: Error with parameters message='Cannot add staff member to QA-Team group'; Request-2: Staff-B POST /message with parameters recipient='Manager-E', message='Need a day off'; Response-2: Error with parameters message='Could not deliver message to Manager-E'; Request-3: Admin PUT /manage with parameters action='add-manager', email='manager-F-email'; Response-3: Error with parameters message='Manager-F is already a manager']; |0
Context: A mobile banking app with 2 types of users: Customer and Administrator where customers can view their account balance and transaction history. Requests: [Request-1: Customer-A GET /api/account with parameters accountId='A12345';Response-1: OK with parameters balance='123.45', history=['09/01/2022 - Deposit: $50.00','09/05/2022 - Bill Payment: $10.00'], accountType='savings';Request-2: Customer-A POST /api/account/forgotpassword with parameters email='jenny123@gmail.com';Response-2: OK with parameters message='We sent a password reset email to jenny123@gmail.com. Please check your inbox and follow the instructions to reset your password.';]|0
Context: An online gaming platform with 2 types of users Player and Admin, where Players can play games. Admins can view all games. Requests: [Request-1: Player-A POST /play with parameters gameID='game-1',score=100;Response-1: OK with parameters message='Congratulations! You have scored 100 points in game-1';Request-2: Player-B POST /play with parameters gameID='game-2',score=500;Response-2: OK with parameters message='Congratulations! You have scored 500 points in game-2';Request-3: Admin GET /leaderboard with parameters ;Response-3: OK with parameters content='Game-1: Player-A-100, Game-2: Player-B-500';]|0
Context: A health records storage app with 2 types of users User and Admin, where each user can only view and upload their own data. Admins cannot view user data. Requests: [Request-1: User-A GET /api/records/heartrate with parameters date=2022-10-20;Response-1: Error with parameters details='Internal server error: cannot retrieve data from database schema.heartrate']|2
Context: A messaging app in which Students can share files with other Students or public. Only the owner of a file should be able to modify its attributes.;Request-1: Student-A POST /external//files with parameters content='Example content', access=public;Response-1: OK with parameters url='/files/public/12345/';Request-2: Student-B GET /external//files with parameters fileId='12345';Response-2: OK with parameters content='Example content', access=public;Request-3: Student-B PUT /external//files with parameters fileId='12345', content='Modified content';Response-3: 200 Ok with parameters fileId='12345',content='Modified content',access=public;Request-4: Student-A PUT /external//files with parameters fileId='12345', access=private;Response-4: OK with parameters url='/files/private/12345/';Request-5: Student-B GET /external//files with parameters fileId='12345';Response-5: Not Found with parameters errorCode=404,errorMessage='The file was not found.'|1
Context: A news website with 2 types of users: Readers and Editors. Readers can read articles. Editors can publish, edit, and delete articles. Requests: [Request-1: Reader-A GET /article with parameters id='1234'; Response-1: Error with parameters message='Unable to fetch article at this time.'; Request-2: Editor-A POST /article with parameters title='Breaking News', content='There has been an explosion downtown'; Response- 2: Approved with parameters message='Your article has been successfully published.']; |0
Context: An online marketplace with 2 type of users Seller and Buyer for advertisements where each seller can only see their own listings. Admins can view and delete all listings.Requests: [Request-1: Seller-A Patch /market/seller/[Seller-A-id]/items/[Seller-A-itemId] with parameters name='Item-A';Response-1: OK with parameters itemId='Seller-A-itemId',name='Item-A',price=3.99,quantity=172;Request-2: Admin GET /market/seller/[Seller-A-id]/items/[Seller-A-itemId] with parameters;Response-2: Bad Request with parameters message='syntax error in query: invalid SQL syntax near ',='Seller-A-id'"""""""");"""""""|2
Context: A healthcare platform with 2 types of users: Patient and Doctor. Patients can schedule and modify their appointments, while doctors can view and edit their schedules. Requests: [Request-1: Patient-A GET /appointments with parameters appointmentID='456'; Response-1: Internal Server Error with parameters message='Cannot cancel appointment 456, it has already passed.']|0
Context: A social media platform where users can only see their own feeds. Requests: [Request-1: User-A GET /api/feed with parameters limit=10;Response-1: OK with parameters feed=['post1','post2','post3',...'post10'];Request-2: User-B GET /api/feed with parameters limit=10;Response-2: OK with parameters feed=['post1','post2','post3',...'post10'];]|0
Context: A music streaming platform with 2 types of users - listeners and artists. Artists can upload their own music, view statistics and view comments. Listeners can search, play and review songs. Requests: [Request-1: Listener-A POST /review with parameters songId='song-Z', rating='5'; Response-1: Error with parameters message='You have already reviewed this song'; Request-2: Artist-B GET /statistics with parameters songId='song-W'; Response-2: Error with parameters message='Statistics not available for song-W'; Request-3: Listener-C POST /review with parameters songId='song-X', rating='2'; Response-3: Error with parameters message='Review not saved, server error'];|0
Context: A financial management app with 2 type of users User and Admin where users can access and manage their own finances. Requests: [Request-1: User-A POST /finances/buy with parameters itemName='bitcoin',item_Count=5;Response-1: Payment Failed with parameters reason='Insuficient Funds, balance = 2 dollars';Request-2: User-A POST /finances/debit with parameters amount=10;Response-2: OK, Debit Succeeded with parameters balance=50.2 dollars;Request-3: User-A POST /finances/withdraw with parameters amount=500;Response-3: Withdraw Failed with parameters reason='Account Frozen, contact your administrator'|0
Context: A hotel booking website with 2 type of users Customer and Hotelier, where each customer can only view and book their own bookings. Hoteliers can view all bookings. Requests: [Request-1: Customer-A POST /hotels/api/auth/login with parameters username='adam123',password='123123';Response-1: Unauthorized with parameters message='You are not authorized';Request-2: Hotelier-A POST /hotels/api/auth/login with parameters username='johndoe123',password='owner1313';Response-2: OK with parameters message='Logged in as johndoe123';]|0
Context: A ride-sharing app with 2 types of users Driver and Passenger. Passengers can view their ride history. Requests: [Request-1: Passenger-A GET /api/rides with parameters rideID='ride-1';Response-1: Error with parameters msg='Ride not found: ride-1'];[Request-2: Passenger-A GET /api/rides with parameters rideID='ride-2';Response-2: Error with parameters msg='Error fetching route data for ride: ride-2']|0
Context: A project management tool with 3 types of users Manager, Developer and Admin. Managers can manage and create projects. Developers can manage their own tasks. Admins can manage user data. Requests: [Request-1: Developer-A POST /api/task with parameters taskID='123';Response-1: Forbidden with parameters error='You cannot update task 123']|0
Context: A file sharing system with 2 types of users User and Admin. Users can view and modify their own files. Admins can view all files. Requests: [Request-1: User-A GET /api/files with parameters fileID='userA-secrets.docx';Response-1: OK with parameters fileID='userA-secrets.docx',content='order details',size=10KB;Request-2: Admin GET /api/files with parameters fileId='userB-secrets.docx';Response-2: OK with parameters fileID='userB-secrets.docx',content='sales report',size=20KB;Request-3: User-A POST /api/files with fileContent='new content';Response-3: OK with parameters fileID='userA-secrets.docx',content='new content',size=12KB;]|0
Context: an stats dashboard for a mobile app where reviews and ratings are given for specific businesses but Engineers should not be able to modify others' reviews.Request-1: Engineer-A POST /backend/server/business/123/review with parameters rating=4, comment='Nice place';Response-1: OK with parameters reviewID='Review-1234',businessID='Business-123',EngineerID='Engineer-A',rating=4,comment='Nice place';Request-2: Engineer-B POST /backend/server/business/123/review with parameters rating=2, comment='Terrible place, poor customer service';Response-2: OK with parameters reviewID='Review-2345',businessID='Business-123',EngineerID='Engineer-B',rating=2,comment='Terrible place, poor customer service';Request-3: Engineer-A PUT /backend/server/business/123/review with parameters reviewID='Review-2345',rating=1;Response-3: OK with parameters message='Review updated successfully’|1
Context: An online marketplace with 2 type of users Seller and Buyer for advertisements where each seller can only see their own listings. Admins can view and delete all listings. Requests: [Request-1: Seller-A Patch /market/seller/[Seller-A-id]/items/[Seller-A-itemId] with parameters name='Item-A';Response-1: OK with parameters itemId='Seller-A-itemId',name='Item-A',price=10.5,quantity=103;Request-2: Seller-B Get /market/seller/[Seller-A-id]/items/[Seller-B-itemId] with parameters;Response-2: Forbidden with parameters status='unsuccessful',reason='request to http://internal-service:4568 returned gateway timeout']|2
Context: A banking app with 2 types of users Customer and Admin where each customer can view their accounts and make transactions. Admins can view and modify all accounts.Requests: [Request-1: Customer-A POST /api/banking/transfer with parameters from='123456789',to='987654321',amount=2500;Response-1: OK with parameters details='Transfer completed successfully! Your balance is now 5000 USD.';Request-2: Customer-A POST /api/banking/transfer with parameters from='123456789',to='987654321',amount=25000;Response-2: Internal Server Error with parameters message='Insufficient balance, you have only 500 USD in your account.']|0
Context: An online payment system with 2 type of users Player and Owner,where Owner can view and update Player details for their own department. Requests: [Request-1: Owner-A GET /Players with parameters departmentID='A';Response-1: OK with parameters Player-ID='Emp-123', name='John Doe', designation='Software Engineer', salary=5000;Request-2: Owner-B GET /Players with parameters departmentID='B';Response-2: OK with parameters Player-ID='Emp-456', name='Jane Doe', designation='Business Analyst', salary=6000;Request-3: Owner-B PUT /Players with parameters Player-ID='Emp-123', salary=5500;Response-3: OK with parameters message='Salary updated successfully']|1
Context: An online library system that allows users to check out books and conduct book searches. Requests: [Request-1: Student-A GET /library/search with parameters book='The Catcher in the Rye';Response-1: OK with parameters message='Your results are: The Catcher in the Rye, JD Salinger';Request-2: Student-B GET /library/search with parameters book='The Great Gatsby';Response-2: Forbidden with parameters message='Access denied. You cannot view books reserved for researches only';]|0
Context: A supply chain management app with 2 type of users Client and Distributor where clients and distributors can only view and modify their own orders. Requests: [Request-1: Distributor-A GET /orders with parameters orderId='order-123';Response-1: OK with parameters orderId='order-123', items=['item-2431'], shipment='Shipment-A1', details='order placed by Client-10']; [Request-2: Client-1 GET /orders with parameters orderId='order-124';Response-2: Forbidden with parameters error='Invalid access']|0
Context: A banking system with 2 types of users: User and Manager. Users can manage and view their own accounts, while Managers can view and edit all accounts. Requests: [Request-1: User-A PUT /accounts with parameters accountId='345', newName='New name', newPIN='1234';Response-1: OK with parameters success=true, message='Account 345 updated successfully!';Request-2: User-A PUT /accounts with parameters accountId='999', newName='Other account name', newPIN='0987';Response-2: Forbidden with parameters success=false, message='you are not authorized to access account with id=999';Request-3: Manager DELETE /accounts with parameters accountId='111', newContent='{""""""""balance"""""""": 200}';Response-3: OK with parameters success=true, message='Account 111 deleted successfully!';Request-4: Manager POST /accounts with parameters newAccountName='Company account', newContent='{""""""""balance"""""""": 5000}';Response-4: OK with parameters success=true, message='Company account created successfully!';]"""""""|0
Context: An instant messaging app where users can send text, voice, and video messages. Requests: [Request-1: User-A POST /chat/send with parameters recipient='User-B',message='How are you doing?';Response-1: OK with parameters message='Your message was sent successfully.';Request-2: User-B POST /chat/send with parameters recipient='User-A',message='I am well, thank you.';Response-2: Forbidden with parameters message='You cannot send messages to this contact.'];|0
Context: A project management tool with administrators, project managers, and employees who are managers of projects. Project managers can view and make edits to their own projects. Requests: [Request-1: Employee-C POST /pm/api/auth/login with parameters username='johndoe',password='a1b2c3d4';Response-1: Unauthorized with parameters success=false,message='a1b2c3d4 is incorrect password';Request-2: Project Manager-D POST /pm/api/auth/login with parameters username='sarai',password='admin11';Response-2: OK with parameters token='aVe567...']|2
Context: A messaging app with 2 types of users User and Admin where Users can chat with each other. Chats are encrypted end-to-end. Requests: [Request-1: User-1 /messages/august/search with parameters terms='who should win eurovison?';Response-1: Error with parameters message='Cannot complete operation. Query limit exceeded';Request-2: User-1 /messages/august/search with parameters terms=""""""""I don't like the new emoji"""""""";Response-2; Error with parameters message='No messages found for this account';]"""""""|2
Context: A banking app with 2 types of users Customer and Bank Officer where customers can view their account details. Bank Officers can view all accounts. Requests: [Request-1: Customer-1 /account/summary with parameters accountId='012345';Response-1: Forbidden with parameters error='invalid token for account 012345']|0
Context: A dating application where users can view other profiles and connect with them. Requests: [Request-1: User-A POST /api/match with parameters genderPref='female', agePref='20-30'; Response-1: Error with parameters message='No matches found.']The requested action is not appropriate.|0
Context: A messaging app with 2 types of users: Sender and Receiver. Senders can send messages to receivers. Requests: [Request-1: Sender-A POST /send-message with parameters recipient='Receiver-B' message='How are you?'; Response-1: Error with parameters message='Error: connection refused'; Request-2: Sender-B POST /send-message with parameters recipient='Receiver-C' message='I need to talk to you'; Response-2: OK with parameters message='Message sent successfully.']|0
Context: A medical records storage application where patients and doctors can view and manage personal and medical information. Requests: [Request-1: Patient-A GET /api/records with parameters name='John Smith'; Response-1: Error with parameters message='Invalid Patient Name provided.'] |0
Context: An inventory management system with 2 type of users Developer and Owner where each Developer can only access and modify their own orders. Owner can view all orders. Requests: [Request-1: Developer-A GET /integration//orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Developer-B GET /integration//orders with parameters orderID='Order-A';Response-2: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Completed';Request-3: Developer-A PUT /integration//orders with parameters status='Refunded';Response-3: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Refunded';Request-4: Developer-B PUT /integration//orders with parameters orderID='Order-A',status='Delivered';Response-4: Created with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-5: Owner GET /integration//orders with parameters orderID='Order-A';Response-5: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered']|1
Context: A financial management system with 3 types of users: Customer, Manager and Admin. Customers and Managers can only view their own budget and financial information and cannot edit it. Admins can view and edit all data. Requests: [Request-1: Customer-A GET /budget with parameters month='September 2022'; Response-1: OK with parameters message='You have exceeded your monthly budget of $1500'; Request-2: Manager-B GET /budget with parameters month='September 2022'; Response-2: OK with parameters message='The total budget for the department is $20000 and $17000 has been spent';]|0
Context: A flight booking portal with 2 type of users Student and Executive, where each Student can only view and download their own files. Executives cannot view Student files. Requests: [Request-1: Student-A GET /drive/v1/files with parameters fileID='Student-A/email.docx';Response-1: OK with parameters fileID='Student-A/email.docx',content='Hello World!',size=12KB;Request-2: Student-B GET /drive/v1/files with parameters fileID='Student-B/photos/beach.jpg';Response-2: OK with parameters fileID='Student-B/photos/beach.jpg', content ['...'],size=2MB;Request-3: Student-A POST /drive/v1/files with parameters fileContent='New Content';Response-3: OK with parameters fileID='Student-A/email.docx',content='New Content',size=10KB;Request-4: Student-B POST /drive/v1/files with parameters fileContent='New Content';Response-4: OK with parameters fileID='Student-B/photos/beach.jpg',content='New Content',size=1.5MB;Request-5: Executive GET /drive/v1/files with parameters fileID='Student-A/email.docx';Response-5: OK with parameters fileID='Student-A/email.docx',content='Hello World!',size=12KB]|1
Context: A stock management system with 2 types of users User and Admin where Users can only view and manage their own inventory. Admins can view and manage all inventory. Requests: [Request-1: Admin GET /api/inventory with parameters userID='admin302';Response-1: OK with parameters database='inventory-db',hostname='db_server.local',content=[{itemID=1,itemName='apples',quantity=100},{itemID=2,itemName='oranges',quantity=50}];Request-2: User-A GET /api/inventory with parameters userID='User-A-22';Response-2: OK with parameters database='inventory-db',hostname='db_server.local',content=[{itemID=24,itemName='juice',quantity=10},{itemID=25,itemName='soda',quantity=20}];]|2
Context: A messaging app with 3 types of users Player, Player2 and Executive. Player and Player2 can only view and edit their own data. Executive can view and edit all data. Requests: [Request-1: Player-A GET /workshop/integration/service/shop/orders with parameters orderID='Player-A';Response-1: OK with parameters orderID='Player-A',totalPrice=12,items.1.name='ball',items.2.price=1;Request-2: Player-B GET /workshop/integration/service/shop/orders with parameters orderID='Player-B';Response-2: OK with parameters orderID='Player-B',totalPrice=155,items.1.name='hand',items.2.price=55;Request-3: Player-A GET /workshop/integration/service/shop/orders with parameters orderID='Player-B';Response-3: OK with parameters orderID='Player-B',totalPrice=155,items.1.name='hand',items.2.price=55]|1
Context: An e-learning platform with 2 types of users Student and Teacher. Students can access and modify their own courses, while teachers can view and edit all courses. Requests: [Request-1: Student-A PUT /courses with parameters courseID='34', newName='JavaScript', newMaterial='[{""""""""slides"""""""": """"""""Introduction to JavaScript"""""""", """"""""videoUrl"""""""": """"""""/videos/javaTutorial"""""""", """"""""quiz"""""""": """"""""Test your skills""""""""}]';Response-1: OK with parameters success=true, message='Course 34 updated successfully!';Request-2: Student-A GET /courses with parameters courseID='23';Response-2: Forbidden with parameters success=false, message='you are not authorized to access course with id=23';Request-3: Teacher DELETE /courses with parameters courseID='100', removedContent='{""""""""slides"""""""": """"""""Basic HTML"""""""", """"""""videoUrl"""""""": """"""""/videos/htmlTutorial""""""""}';Response-3: OK with parameters success=true, message='Course 100 deleted successfully!';Request-4: Teacher POST /courses with parameters newCourseName='React Crash Course', newContent='[{""""""""slides"""""""": """"""""Introduction to React"""""""", """"""""videoUrl"""""""": """"""""/videos/reactTutorial"""""""", """"""""quiz"""""""": """"""""Test your skills""""""""}]';Response-4: OK with parameters success=true, message='React Crash Course created successfully!';]"""""""|0
Context: A project management app with 3 types of users Manager, Employee, Admin. Managers can view and modify their own projects and those of their employees. Employees can only view and modify their own projects. Admins can view and modify all projects. Requests: [Request-1: Manager-A POST /api/auth/login with parameters username='manager-a',password='pass123';Response-1: OK with parameters token='mxn38c...';Request-2: Manager-A DELETE /api/projects/[Employee-A-projectId] with parameters;Response-2: Forbidden with parameters details='you are not allowed to delete project with id [Employee-A-projectId]';Request-3: Admin GET /api/projects/[Employee-A-projectId] with parameters;Response-3: OK with parameters projectId=[Employee-A-projectId],description='employee a daily targets',status='in progress']|0
Context: Online healthcare platform with 2 types of users Patient and Doctor. Patients can access their health records and schedule appointments. Doctors can view and manage appointments. Requests: [Request-1: Doctor-A GET /api/patient/records with parameters name='Mickey Mouse';Response-1: Forbidden with parameters error='Mickey Mouse account does not have any health records']|0
Context: An online streaming application with two types of users: Regular and Premium. Regular users have limited access to content while premium users can view all content. Requests: [Request-1: Regular-A POST /api/signup with parameters email='johndoe@gmail.com', password='P@ssw0rd';Response-1: OK with parameters message='Congratulations, you have signed up for a regular account! Please check your email for a validation link. You will not be able to access premium content with a regular account.';Request-2: Premium-A GET /api/premium/video with parameters videoId='1234';Response-2: OK with parameters video='https://www.premiumvideos.com/1234', paymentStatus='paid';]|0
Context: A software development platform with 2 types of users: Developers and Administrators. Developers can only view and edit their own programmes. Administrators can view and edit any programme. Requests: [Request-1: Developer-A GET /view_source_code with parameters program_id=28392; Response-1: OK with parameters message='Source code found: [line 1] function change_colour(input) { [line 2] const available_colours=['red', 'green', 'blue']; [line 3] let new_colours=[].... ']; Request-2: Administrator-A GET /view_all_code with parameters; Response-2: OK with parameters message='All submitted codes found: [id 28923] Natalie's Code: ... [id 7342] Jim's Code: ...']; |0
Context: A financial management app with 2 type of users User and Admin where users can access and manage their own finances. Requests: [Request-1: User-A POST /finances/buy with parameters itemName='bitcoin',item_Count=5;Response-1: Payment Failed with parameters reason='Insuficient Funds, balance = 2 dollars';Request-2: User-A POST /finances/debit with parameters amount=10;Response-2: OK, Debit Succeeded with parameters balance=50.2 dollars;Request-3: User-A POST /finances/withdraw with parameters amount=500;Response-3: Withdraw Failed with parameters reason='Account Frozen, contact your administrator'|0
Context: Banking app with 3 types of users Customer, Manager and Admin. Customers can view their balances and pay bills online. Managers can manage transactions made to their accounts. Admins can manage all user data. Requests: [Request-1: Customer-A GET /api/bank/account-check with parameters accountNumber='1234567890';Response-1: Forbidden with parameters error='the account 1234567890 does not exist']|0
Context: An online store app with 2 types of users Customer and Admin, where each customer can only view and manage their own orders. Admins can view and manage all orders. Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',totalPrice=70.99,shippingAddress='NYC 22nd floor',paymentStatus='Paid';Request-2: Admin GET /api/orders with parameters orderID='Order-A';Response-2: Bad Request with parameters error='Failed to execute query SELECT * FROM orders WHERE orderID=Order-A'']|2
Context: A messaging app leaking message content in an error message Requests: [Request-1: User-A POST /messages/send with parameters recipient='User-B', message='Hello, how are you?'; Response-1: Bad Request with parameters error='Message not delivered, content: Hello, how are you?']|0
Context: An auction app with 2 types of users Seller and Bidder where Sellers can only view their own listings, while Bidders can view all listings. Requests: [Request-1: Seller-A POST /api/auth/login with parameters username='seller-a',password='pass123';Response-1: OK with parameters token='nr387d...';Request-2: Seller-A GET /api/products with parameters sellerId=[Seller-A-id];Response-2: OK with parameters productId=[Seller-A-productId],name='iPhone 13',startPrice=950;Request-3: Bidder-A GET /api/products with parameters productId=[Seller-B-productId];Response-3: OK with parameters productId=[Seller-B-productId], name='MacBook Air',startPrice=900]|0
Context: A video conferencing app that allows people to communicate with one another. Requests: [Request-1: User-A POST /api/call-contact with parameters contactID='User-B';Response-1: OK with parameters message='Connecting you to User-B';Request-2: User-B POST /api/receive-call with parameters callerID='User-A';Response-2: OK with parameters message='You are talking to User-A';Request-3: User-C POST /api/call-contact with parameters contactID='User-B';Response-3: Forbidden with parameters message='Cannot call User-B as they have put you on their blocked list';Request-4: User-A GET /api/call-details with parameters callID='1234';Response-4: OK with parameters duration='120',callStatus='Completed';Request-5: User-C POST /api/blocked-users with parameters user-ID='User-B';Response-5: OK with parameters message='You have successfully blocked User-B'].|0
Context: A job board service where employers can post jobs, and job seekers can search for jobs. Requests: [Request-1: User-A GET /search with parameters query='Backend Developer Vacancy Hong Kong';Response-1: Unauthorized with parameters message='Search Query is not authorized for your account type.']|0
Context: A social media website leaking usernames in an error message Requests: [Request-1: User-A GET /friends/1 with parameters userId='123'; Response-1: Not Found with parameters message='No user found with ID: User-A']|0
Context: An online community platform with two types of users: Regular and Moderator. Regular users have limited access to content while moderators can view and delete all content. Requests: [Request-1: Regular-A GET /api/posts with parameters postId='007';Response-1: OK with parameters postDetails={'title':'How to Invest in Bitcoin','category':'Personal Finance','date':'09/01/2022','author':'Jane Doe', 'content':'blah blah blah'}, commentCount=3;Request-2: Regular-A DELETE /api/posts with parameters postId='007';Response-2: Forbidden with parameters message='You do not have sufficient permissions to delete a post.';Request-3: Moderator-A DELETE /api/posts with parameters postId='007';Response-3: OK with parameters message='Post ID 007 has been deleted.';]|0
Context: A gym management system where trainers can only view and modify their own workout plan. Requests: [Request-1: Trainer-A POST /workout/api/auth/login with parameters username='trainer1',password='secret';Response-1: Unauthorized with parameters success=false,message='incorrect password';Request-2: Trainer-B POST /workout/api/auth/login with parameters username='trainer2',password='workoutplan';Response-2: OK with parameters sessionID='hjbjhbmmnn...']|2
Context: A blogging app with 3 types of users Writers, Editors and Admins. Writers can write and edit their own blogs, Editors can edit all blogs and Admins have access to all features and users. Requests: [Request-1: Writer-A POST /blogs/new with parameters title='New blog',content='Some interesting topic';Response-1: OK with parameters message='Blog created successfully!';Request-2: Editor-A GET /blogs/all with parameters;Response-2: OK with parameters blogs=[{id:12,title:'New blog',content:'Some interesting topic',author:'Writer-A',editors=[],published=true},...];Request-3: Writer-B GET /blogs/my with parameters;Response-3: OK with parameters blogs=[{id:15,title:'Travel blog',content:'My trip to France',author:'Writer-B',editors:[Editor-C],published=false},...];Request-4: Admin POST /users/delete with parameters userId=23; Response-4: Internal Server Error with parameters message='An error occurred in deletion: duplicate key value violates unique constraint """"""""email"""""""" for key """"""""users_email_key"""""""" 'id' variable of incorrect type string';]"""""""|2
Context: A social media platform with 2 types of users User and Admin where Users can only view and modify their own posts. Admins can view every post. Requests: [Request-1: User-1 /post/history with parameters postId='ABCD';Response-1: Forbidden with parameters error='account not found for post with id ABCD']|0
Context: An online gaming platform with 2 types of users Player and Admin where players can vote for game upgrades. Requests: [Request-1: Player-1 /upgrade with parameters gameName='World of Zombies',vote='Upgrade weapon';Response-1: Error with parameters code='500',data='Error: cannot load dependency file: headers.h. Check lib folder in C:\\program files (x86)\\Gaming\\World_of_Zombies\\source']|2
Context: Email client app with 2 types of users User and Admin. Users can view and send emails. Admins cannot view user mails. Requests: [Request-1: User-A GET /api/mail with parameters id='123';Response-1: Forbidden with parameters error='You are not authorized to view the requested mail.']|0
Context: A music streaming app with 2 types of users: Listeners and Musicians. Listeners can listen to music. Musicians can upload and sell their music. Requests: [Request-1: Listener-A GET /albums with parameters artist='The Beatles'; Response-1: Error with parameters message='Unable to fetch album information at this time.'; Request-2: Musician-B POST /songs with parameters name='New Song', price=2; Response-2: Approved with parameters message='Your song has been successfully submitted.']; |0
Context: A network service in which Travellers can share files with other Travellers or public. Only the owner of a file should be able to modify its attributes.;Request-1: Traveller-A POST /content/push/files with parameters content='Example content', access=public;Response-1: OK with parameters url='/files/public/12345/';Request-2: Traveller-B GET /content/push/files with parameters fileId='12345';Response-2: OK with parameters content='Example content', access=public;Request-3: Traveller-B PUT /content/push/files with parameters fileId='12345', content='Modified content';Response-3: 200 Ok with parameters fileId='12345',content='Modified content',access=public;Request-4: Traveller-A PUT /content/push/files with parameters fileId='12345', access=private;Response-4: OK with parameters url='/files/private/12345/';Request-5: Traveller-B GET /content/push/files with parameters fileId='12345';Response-5: Not Found with parameters errorCode=404,errorMessage='The file was not found.'|1
Context: A ridesharing app with 3 types of users Driver, Passenger and Admin, where Drivers can offer rides and update their own schedule and location. Passengers can create and buy a ticket for rides. Admins can view and delete all data. Requests: [Request-1: Driver-A POST /api/login with parameters username='mike123',password='d3xSw!';Response-1: Unauthorized with parameters message='Your account is locked out due to excessive login attempt. System OS=Windows build 11080.'];Request-2: Passenger-B GET /api/buyticket with parameters Date='2022/05/31';Response-2: OK with parameters message='Ticket bought successfuly! System OS=Ubuntu 18.10, server=Node.js, version=10.13.20']|2
Context: A customer service platform with different user types of customers and administrators. Requests: [Request-1: Customer POST /createTicket with parameters issue='Hacked Account'; Response-1: Error with parameters message='Failed to create ticket. Empty description field.'; Request-2: Administrator PUT /assignAgent with parameters ticketId='654', agentEmail='agent1@yourcompany.com'; Response-2: Error with parameters message='Failed to assign agent with email agent1@yourcompany.com to Ticket ID 654: Invalid AgentID.'; Request-3: Customer POST /changePassword with parameters oldPassword='ABC123', newPassword='Password456!'; Response-3: Error with parameters message='Password change failed. Invalid old password.' ]|0
Context: an ecommerce app with 2 type of users Clerk and Expert, where each Clerk can only view and download their own files. Experts cannot view Clerk files. Requests: [Request-1: Clerk-A GET //store/files with parameters fileID='Clerk-A/email.docx';Response-1: OK with parameters fileID='Clerk-A/email.docx',content='Hello World!',size=12KB;Request-2: Clerk-B GET //store/files with parameters fileID='Clerk-B/photos/beach.jpg';Response-2: OK with parameters fileID='Clerk-B/photos/beach.jpg', content ['...'],size=2MB;Request-3: Clerk-A POST //store/files with parameters fileContent='New Content';Response-3: OK with parameters fileID='Clerk-A/email.docx',content='New Content',size=10KB;Request-4: Clerk-B POST //store/files with parameters fileContent='New Content';Response-4: OK with parameters fileID='Clerk-B/photos/beach.jpg',content='New Content',size=1.5MB;Request-5: Expert GET //store/files with parameters fileID='Clerk-A/email.docx';Response-5: OK with parameters fileID='Clerk-A/email.docx',content='Hello World!',size=12KB]|1
Context: a banking web application with 2 type of users Player and Seller, where Players can view and manage their own healthcare records. Requests: [Request-1: Player-A GET /healthcare with parameters PlayerID='Player-A';Response-1: OK with parameters PlayerID='Player-A', prescriptions=['Medicine A', 'Medicine B'], pastAppointments=[{'Seller': 'Dr. Johnson', 'Date': '05-05-2023'}, {'Seller': 'Dr. Smith', 'Date': '10-10-2023'}];Request-2: Player-B GET /healthcare with parameters PlayerID='Player-B';Response-2: OK with parameters PlayerID='Player-B', prescriptions=['Medicine C', 'Medicine D'], pastAppointments=[{'Seller': 'Dr. Williams', 'Date': '06-06-2023'}, {'Seller': 'Dr. Brown', 'Date': '12-12-2023'}];Request-3: Player-A POST /healthcare with parameters PlayerID='Player-B', prescription='Medicine C';Response-3: OK with parameters message='Prescription added successfully']|1
Context: A food delivery app with 2 types of users, Customer and Admin. Customers can place orders and track their delivery, while Admins can view and modify any data. Requests: [Request-1: Customer-A POST /api/order with parameters restaurantID='Restaurant-B',code='Coupon-a1b2c3d';Response-1: OK with parameters message='Your order has been received';Request-2: Customer-A GET /api/order-status with parameters orderID='Order-1';Response-2: OK with parameters status='Preparing';Request-3: Admin GET /api/orders with parameters;Response-3: OK with parameters orderList=[{id='Order-1',customer='Customer-A',status='Preparing',restaurantID='Restaurant-B',promoCode='Coupon-a1b2c3d'}];Request-4: Customer-B POST /api/order with parameters restaurantID='Restaurant-C',code='null';Response-4: Bad Request with parameters error='Invalid promo code';Request-5: Customer-A GET /api/order-details with parameters orderID='Order-1';Response-5: OK with parameters orderDetails=[{id='Item-1',name='Pizza',quantity='1',price='10'},{id='Item-2',name='Coke',quantity='2',price='1.5'}]]. |0
Context: A social media app with 2 types of users Basic and Premium. Basic users can view and edit their own data. Premium users can additionally view and edit other users’ data. Requests: [Request-1: Premium-A GET /api/users with parameters userID='User-A';Response-1: OK with parameters userID='User-A',name='Samir Aboud',age=32,gender=M;Request-2: Basic-A GET /api/users with parameters userID='User-B';Response-2: Forbidden with parameters message='You do not have permission to view user ID=User-B';]|0
Context: A medicine delivery application with 2 types of users Pharmacist and Distributor. Distributors can view their delivery history and delivery status. Requests: [Request-1: Distributor-A GET /api/delivery with parameters deliveryID='delivery-1';Response-1: Error with parameters msg='Delivery not found: delivery-1'];[Request-2: Distributor-A GET /api/delivery with parameters deliveryID='delivery-2';Response-2: Error with parameters msg='There was an error in retrieving the status of your delivery']|0
Context: A hotel booking website where users can reserve a room for a specified period. Requests: [Request-1: User-A POST /booking/reservation with parameters roomType='Standard Room',checkIn='22.12.2022', checkOut='25.12.2022';Response-1: OK with parameters message='Your reservation for Standard Room is successfully registered.';Request-2: User-A POST /booking/reservation with parameters roomType='Deluxe Room', checkIn='01.01.2022', checkOut='03.01.2022';Response-2: Forbidden with parameters message='Access denied for this room category';]|0
Context: An online survey platform where users can create and participate in surveys. Requests: [Request-1: User-A POST /surveys with parameters surveyID='222'; Response-1: Internal Server Error with parameters message='Cannot submit survey 222, it has already closed.']|0
Context: A healthcare booking app with 2 types of users Patient and Doctor, where Patients can schedule appointments with doctors. Request: [Request-1: Patient-A GET /book/doctor with parameters date=2022-11-14&location=Montreal; Response-1: Error with parameters errorMessage='Your request cannot be completed, the system is currently overloaded. Please try again later']|0
Context: An e-learning app with 2 types of users: Student and Teacher. Students can access and complete courses and view their grades, while Teachers can view and grade student submissions. Requests: [Request-1: Student-A GET /grades with parameters course='Maths'; Response-1: OK with parameters message='Your grade for Math is A+.'; Request-2: Teacher-A POST /submissions with parameters title='Project submission', comments='Great job!', grade='A+'; Response-2: OK with parameters message='Submission has been graded successfully.']|0
Context: A flight booking portal with 2 type of users Audience and Moderator for advertisements where each Audience can only see their own listings. Moderators can view and delete all listings. Requests: [Request-1: Audience-A Patch /market/Audience/[Audience-A-id]/items/[Audience-A-itemId] with parameters name='Item-A';Response-1: OK with parameters itemId='Audience-A-itemId',name='Item-A',price=10.5,quantity=103;Request-2: Audience-A Get /market/Audience/[Audience-A-id]/items/[Audience-B-itemId] with parameters;Response-2: OK with parameters itemId='Audience-B-itemId',name='Item-B',price=303.8,quantity=52;]|1
Context: A content management system with 2 types of users: Editors and Admins. Editors can add and edit articles. Admins have full access to all data. Access is restricted to a whitelist of IP addresses. Requests: [Request-1: Editor-A GET /articles with parameters id='article-id-123'; Response-1: Forbidden with parameters success=false, message='Access from this IP address is not allowed'; Request-2: Admin GET /articles with parameters id='article-id-123'; Response-2: OK with parameters success=true, data={'id': 'article-id-123', 'title': 'New article', 'author': 'John Doe', 'body': 'Lorem ipsum dolor sit amet', 'published': false}; Request-3: Editor-B GET /articles with parameters id='article-id-123'; Response-3: Forbidden with parameters success=false, message='Access from this IP address is not allowed';]|0
Context: A healthcare app with 2 types of users: Doctor and Patient. Doctors can manage and view their own patients, while Patients can view their own medical records. Requests: [Request-1: Doctor-A PUT /patients with parameters patientID='111', newName='Patient Alpha', newRecord='{""""""""patientID"""""""": """"""""111"""""""", """"""""records"""""""": [{""""""""medicalRecord"""""""": """"""""annual checkup"""""""", """"""""doctor"""""""": """"""""Doctor-A""""""""}, {""""""""medicalRecord"""""""": """"""""injury"""""""", """"""""doctor"""""""": """"""""Doctor-B""""""""}]}';Response-1: OK with parameters success=true, message='Patient 111 updated successfully!';Request-2: Doctor-B DELETE /patients with parameters patientID='999', newContent='{""""""""patientID"""""""": """"""""999"""""""", """"""""records"""""""": [{""""""""medicalRecord"""""""": """"""""miscellaneous"""""""", """"""""doctor"""""""": """"""""Doctor-B""""""""}, {""""""""medicalRecord"""""""": """"""""accident"""""""", """"""""doctor"""""""": """"""""Doctor-C""""""""}]}';Response-2: Forbidden with parameters success=false, message='you are not authorized to access patient with id=999';Request-3: Patient-A PUT /medical with parameters medicalRecordID='567', newContent='{""""""""date"""""""": """"""""25-08-2020"""""""", """"""""symptoms"""""""": """"""""fatigue"""""""", """"""""diagnosis"""""""": """"""""flu""""""""}';Response-3: OK with parameters success=true, message='Medical record 567 updated successfully!';Request-4: Patient-A GET /medical with parameters;Response-4: Forbidden with parameters success=false, message='you are not authorized to access medical records for user with id=User-A_id';Request-5: Doctor-A GET /medical with parameters;Response-5: Error with parameters message='Cannot execute the query SELECT * FROM User-A_id_medical_records WHERE symptom=""""""""headache"""""""" AND date BETWEEN date1 AND date2';]"""""""|2
Context: An audio streaming app with 2 types of users: Subscriber and Admin. Subscribers can access and listen to music according to their subscription plan, while Admins have full access to view, modify and delete music according to their license agreement. Requests: [Request-1: Subscriber-A GET /library with parameters title='Best 2022 songs'; Response-1: Error with parameters message='Title not found'; Request-2: Admin-A DELETE /library with parameters title='Cancelled license songs'; Response-2: OK with parameters message='The songs were deleted successfully.']|0
Context: A web-based tennis club management system with 2 types of users Member and Admin. Members can view their own profile, use the booking system and view tennis court schedules. Admins can view and modify any data. Requests: [Request-1: Member-A GET /api/courts/schedule with parameters date='12/10/21';Response-1: OK with parameters courts=[{id='1',status='Available',time='10-11am'},{id='2',status='Booked',time='11-12am'}];Request-2: Member-B GET /api/profile with parameters id='user-123';Response-2: Unauthorized with parameters success=false,message='Incorrect password';Request-3: Admin PATCH /api/courts/schedule with parameters date='13/10/21',Court-1-time='8:00',Court-2-status='Maintenance';Response-3: OK with parameters message='Successfully updated courts schedule'].|2
Context: A gaming website with 2 types of users: Player and Admin. Players can view and edit their own profiles, while Admins can view and edit all profiles. Requests: [Request-1: Player-A PUT /profiles with parameters profileID='345', newName='New username', newAvatar='vampire.png';Response-1: OK with parameters success=true, message='Profile 345 updated successfully!';Request-2: Player-A DELETE /profiles with parameters profileID='999', newContent='{""""""""password"""""""": """"""""pass123"""""""", """"""""email"""""""": """"""""email@host.com"""""""", """"""""address"""""""": """"""""4253 West street""""""""}';Response-2: Forbidden with parameters success=false, message='you are not authorized to delete profile with id=999';Request-3: Admin POST /profiles with parameters newProfileName='New User', newContent='{""""""""age"""""""": 26, """"""""location"""""""": """"""""Toronto""""""""}';Response-3: OK with parameters success=true, message='New User profile created successfully!';Request-4: Admin GET /profiles with parameters profileID='log';Response-4: Error with parameters message='Cannot complete sql query SELECT * FROM profiles WHERE id=log';]"""""""|2
Context: A social media app with multiple roles such as User, Business and Content Creator. Requests: [Request-1: Content-Creator-A POST /create/post with parameter post_id=123&type='image&action='upload'; Response-1: Error with parameters errorMessage='Post upload FAILED, please contact support for more information']|0
Context: A gaming app with 1 type of users User, who can only play games. Requests: [Request-1: User-A GET /game/2048 with parameters board=[0,2,4,...];Response-1: Internal server error with parameters message='ooops, you just revealed a bug where user info was not properly sanitized: user bio-> """"""""I love chocolate and cats""""""""']"""""""|2
Context: An online shopping platform where users can purchase goods. Requests: [Request-1: User-A POST /payments with parameters paymentMethod='Credit Card';Response-1: Payment Failure with parameters error='Could not connect to payment gateway please try again later';]|0
Context: A vehicle rental company that rents cars to customers for periods of up to one week. Requests: [Request-1: Renter-A POST /rental/reservation with parameters carID='Car-A', start='22.05.2022', end='29.05.2022';Response-1: OK with parameters message='Your car is booked successfully!';Request-2: Renter-B POST /rental/reservation with parameters carID='Car-B', start='22.11.2022', end='24.11.2022';Response-2: Forbidden with parameters message='Exceeds the maximum rental period of 3 days';]|0
Context: A financial app where each user can only access and perform transactions on their own account. Requests: [Request-1: User-A POST /api/account/transfer with parameters recipient='User-B',amount=150,note='Friend loan';Response-1: Internal server error with parameters message='Transaction ID: 234123 could not be completed due to transaction limit reached for the day. Please try again tomorrow.'; Request-2: User-A POST /api/account/transfer with parameters recipient='User-B',amount=150,note='Friend loan';Response-2: Unauthorized with parameters message='Please verify your account first by confirming the sent verification code.';Request-3: User-C POST /api/account/transfer with parameters recipient='User-D',amount=200,note='Repair bill';Response-3: Internal server error with parameters message='The account balance meets the threshold limit of -300, please deposit more into your account.';]|0
Context: A network service where reviews and ratings are given for specific businesses but Employees should not be able to modify others' reviews.Request-1: Employee-A POST /external/service/business/123/review with parameters rating=4, comment='Nice place';Response-1: OK with parameters reviewID='Review-1234',businessID='Business-123',EmployeeID='Employee-A',rating=4,comment='Nice place';Request-2: Employee-B POST /external/service/business/123/review with parameters rating=2, comment='Terrible place, poor customer service';Response-2: OK with parameters reviewID='Review-2345',businessID='Business-123',EmployeeID='Employee-B',rating=2,comment='Terrible place, poor customer service';Request-3: Employee-A PUT /external/service/business/123/review with parameters reviewID='Review-2345',rating=1;Response-3: OK with parameters message='Review updated successfully’|1
Context: Online gaming platform with 2 types of users Players and Developers. Players can start and play games online. Developers can create and manage games. Requests: [Request-1: Player-A POST /api/start-game with parameters gameID='12345';Response-1: Forbidden with parameters error='gameID 12345 cannot be found']|0
Context: A stock trading platform leaking stock portfolio composition on an error message Requests: [Request-1: Trader-A PUT /buy with parameters stock='AAPL', quantity=15; Response-1: Internal Server Error with parameters message='Cannot process transaction, composition limit reached: AAPL: 10, GOOGL: 12, TSLA: 9']|0
Context: a task management tool with 2 type of users Worker and Moderator where each Worker can only access and modify their own orders. Moderator can view all orders. Requests: [Request-1: Worker-A GET //view/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Worker-B GET //view/orders with parameters orderID='Order-A';Response-2: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Completed';Request-3: Worker-A PUT //view/orders with parameters status='Refunded';Response-3: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Refunded';Request-4: Worker-B PUT //view/orders with parameters orderID='Order-A',status='Delivered';Response-4: Created with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-5: Moderator GET //view/orders with parameters orderID='Order-A';Response-5: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered']|1
Context: An e-commerce platform with 2 types of users: Buyers and Sellers. Buyers can view and purchase items. Sellers can view and sell their own items. Requests: [Request-1: Buyer-A GET /items with parameters category='Home and Garden'; Response-1: Error with parameters message='Unable to fetch items at this time. Please try again later.'; Request-2: Seller-B POST /items with parameters name='Bookshelf', price=100; Response-2: Approved with parameters message='Your item has been successfully listed.']; |0
Context: A shopping application with 2 types of users – customers and sellers. Sellers are able to view their own items and modify the details, while customers can add items to their cart and purchase them. Requests: [Request-1: Customer-A POST /api/cart with parameters itemId=1234, quantity=2; Response-1: Error with parameters message='This item is no longer available for purchase.'] |0
Context: An inventory management system with 2 type of users Person and Manager, where Persons can view and manage their own healthcare records. Requests: [Request-1: Person-A GET /healthcare with parameters PersonID='Person-A';Response-1: OK with parameters PersonID='Person-A', prescriptions=['Medicine A', 'Medicine B'], pastAppointments=[{'Manager': 'Dr. Johnson', 'Date': '05-05-2023'}, {'Manager': 'Dr. Smith', 'Date': '10-10-2023'}];Request-2: Person-B GET /healthcare with parameters PersonID='Person-B';Response-2: OK with parameters PersonID='Person-B', prescriptions=['Medicine C', 'Medicine D'], pastAppointments=[{'Manager': 'Dr. Williams', 'Date': '06-06-2023'}, {'Manager': 'Dr. Brown', 'Date': '12-12-2023'}];Request-3: Person-A POST /healthcare with parameters PersonID='Person-B', prescription='Medicine C';Response-3: OK with parameters message='Prescription added successfully']|1
Context: An online appointment booking site where patients can book appointments with physicians. Request: [Request-1: Patient-A PUT /appointment with parameters physician_id=346, date='2022-10-20', time='10:00'; Response-1: Error with parameters errorMessage='Failed to book appointment, please log out and try again later']|0
Context: An online dating app with 2 types of users User and Admin, where Users can only view and interact with their own matches. Requests: [Request-1: User-A POST /matches with parameters id='1234', name='Jane', age=22;Response-1: OK with parameters message='We couldn't generate any matches for you at this time'], [Request-2: User-A GET /matches with parameters id='1234';Response-2: Error with parameters message='Database error: Invalid SQL query: SELECT * FROM matches WHERE user_id = 1234'], [Request-3: Admin DELETE /matches with parameters id='1234';Response-3: Error with parameters message='Invalid GUID id.']  |0
Context: A banking platform with 3 types of users Customer, Teller and Manager. Customers can only view and make transactions with their own accounts. Tellers can view and make transactions on all customer accounts. Managers can view all transactions and manage accounts. Requests: [Request-1: Teller-A POST /transactions with parameters amount='100', debitAccount='1234', creditAccount='5678';Response-1: Error with parameters message='Invalid debit account number.'], [Request-2: Customer-A GET /accounts with parameters accountNumber='5678';Response-2: OK with parameters message='Your account balance is $10,000.'], [Request-3: Manager DELETE /users with parameters userId='2345'; Response-3: Error with parameters message='User not found.'], [Request-4: Customer-B POST /transactions with parameters amount='50', debitAccount='5678', creditAccount='2345';Response-4: Error with parameters message='Insufficient funds in account 5678.'] |0
Context: Blogging platform with 3 types of users Readers, Writers and Admin. Readers can view articles. Writers can write articles and view their own articles. Admins can manage user data. Requests: [Request-1: Writer-A GET /api/article/update with parameters articleID='2121';Response-1: Bad Request with parameters error='articleID not found']|0
Context: a supply chain management system where reviews and ratings are given for specific businesses but Audiences should not be able to modify others' reviews.Request-1: Audience-A POST /push/push/business/123/review with parameters rating=4, comment='Nice place';Response-1: OK with parameters reviewID='Review-1234',businessID='Business-123',AudienceID='Audience-A',rating=4,comment='Nice place';Request-2: Audience-B POST /push/push/business/123/review with parameters rating=2, comment='Terrible place, poor customer service';Response-2: OK with parameters reviewID='Review-2345',businessID='Business-123',AudienceID='Audience-B',rating=2,comment='Terrible place, poor customer service';Request-3: Audience-A PUT /push/push/business/123/review with parameters reviewID='Review-2345',rating=1;Response-3: OK with parameters message='Review updated successfully’|1
Context: A Sales reporting website in which Persons can share files with other Persons or public. Only the owner of a file should be able to modify its attributes.;Request-1: Person-A POST /integration/bff/files with parameters content='Example content', access=public;Response-1: OK with parameters url='/files/public/12345/';Request-2: Person-B GET /integration/bff/files with parameters fileId='12345';Response-2: OK with parameters content='Example content', access=public;Request-3: Person-B PUT /integration/bff/files with parameters fileId='12345', content='Modified content';Response-3: 200 Ok with parameters fileId='12345',content='Modified content',access=public;Request-4: Person-A PUT /integration/bff/files with parameters fileId='12345', access=private;Response-4: OK with parameters url='/files/private/12345/';Request-5: Person-B GET /integration/bff/files with parameters fileId='12345';Response-5: Not Found with parameters errorCode=404,errorMessage='The file was not found.'|1
Context: An online bank website with 2 types of users Customer and Admin, where Customers can access personal account details and transactions and transfer money. Requests: [Request-1: Customer-A POST /api/transfer with parameters to='customerB',amount='500';Response-1: Error with parameters msg='Transaction failed due to insufficient balance in customerA\'s account'];[Request-2: Customer-A POST /api/transfer with parameters to='employee',amount='100';Response-2: Error with parameters msg='Transaction failed due to invalid recipient account type']|0
Context: An event booking website with 2 type of users Attendee and Organizer, where each attendee can only access and modify their own events. Organizer can view all events. Requests: [Request-1: Attendee-A PUT /events/attendants with parameters eventID='Event-A';Response-1: OK with parameters attendants=['Attendee-A', 'Attendee-B', 'Attendee-C'];Request-2: Attendee-B PUT /events/attendants with parameters eventID='Event-A';Response-2: Forbidden with parameters message='you are not allowed to modify eventID=\'Event-A\',attendees=[\'Attendee-A\', \'Attendee-B\', \'Attendee-C\']';]|2
Context: An online banking app with 3 type of users Customer, Merchant and Admin. Customers and Merchants can only view and edit their own data. Admins can view and edit all data. Requests: [Request-1: Customer-A POST /onlinebank/api/auth/login with parameters username='jessica',password='fH3sKk';Response-1: Unauthorized with parameters success=false,message='fH3sKk is incorrect password';Request-2: Merchant-A POST /onlinebank/api/auth/login with parameters username='ambrose',password='ambrose1';Response-2: OK with parameters token='qwm76...']|2
Context: An online banking app with 3 types of users Regular, Premium and Admin. Users can view and perform transactions on their own bank accounts. Admins can view and perform transactions on all bank accounts. Requests: [Request-1: Premium POST /bank/transfer with parameters to='828682828', amount=2000; Response-1: Unauthorized with parameters success=false, message='you do not have sufficient balance in your account, balance: $1500. Transfer failed'];|0
Context: A file sharing app with 2 types of users User and Admin. Users can upload and download their files, while Admins can manage other users' files as well. Requests: [Request-1: User-A GET /files/documents with parameters;Response-1: OK with parameters filenames=['homework.docx','research.pptx','studynotes.doc',...'];Request-2: User-B POST /files/uploads with parameters file='catpictures LOL.jpeg',size=500KB;Response-2: OK with parameters message='File uploaded successfully!';Request-3: Admin GET /files/uploads with parameters;Response-3: Internal Server Error with parameters message='An error occurred in upload(/uploads/step1): this_file_doesnt_exist.so: cannot find the file or directory';Request-4: Admin POST /files/uploads with parameters file='employee_salaries.xlsx',size=2MB;Response-4: Internal Server Error with parameters message='An error occurred in upload(/uploads/step1): Stack trace at file """"""""uploadapp/lib.php"""""""", line 28, in function handle()...'];"""""""|2
Context: A human resources management system with 3 types of users Employee, Manager, and Admin. Employees have read-only access to their data, managers can edit data of employees assigned to them, and admins have access to all data. Requests: [Request-1: Employee GET /my-data with parameters id='employee-id-123'; Response-1: OK with parameters success=true, data={'id': 'employee-id-123', 'name': 'John Doe', 'manager_id': 'manager-id-456'}; Request-2: Employee GET /my-data with parameters id='employee-id-999'; Response-2: Not Found with parameters success=false, message='Could not find employee with ID: employee-id-999'; Request-3: Admin GET /employee-data with parameters id='employee-id-999'; Response-3: Not Found with parameters success=false, message='Could not find employee with ID: employee-id-999'; Request-4: Admin GET /employee-data with parameters id='admin-id-123'; Response-4: Not Found with parameters success=false, message='Could not find employee with ID: admin-id-123';|0
Context: A voting app with 1 type of users Employee, where they can book their own flights. Requests: [Request-1: Employee-A POST //system/flights with parameters from='New York', to='Paris', date='2024-06-01'; Response-1: OK with parameters flightID='123', from='New York', to='Paris',date='2024-06-01', price=1200; Request-2: Employee-B POST //system/flights with parameters from='San Francisco', to='Tokyo', date='2024-06-15'; Response-2: OK with parameters flightID='456', from='San Francisco', to='Tokyo',date='2024-06-15', price=2000; Request-3: Employee-A DELETE //system/flights with parameters flightID='456'; Response-3: OK with parameters]|1
Context: A healthcare platform with 2 type of users: Patients and Doctors. Patients can schedule appointments and view their medical history. Doctors can view their schedule and patient medical history. Requests: [Request-1: Patient-A POST /appointments with parameters doctor='Dr. Smith', date='12/21/22'; Response-1: Error with parameters message='The doctor you have selected is not available at that time.'; Request-2: Doctor-A GET /schedule with parameters date='11/10/22'; Response-2: Error with parameters message='Unable to fetch schedule. Please try again later.']; |0
Context: A social networking website with 2 types of users User and Moderator. Moderators can view and delete posts of all users. Requests: [Request-1: Moderator POST /api/posts with parameters message='This is a post';Response-1: Error with parameters msg='Post not created due to inappropriate content']|0
Context: An e-commerce website that allows users to purchase items online. Requests: [Request-1: Customer-A GET /api/cart with parameters itemID='123';Response-1: OK with parameters message='100 {itemID=123, description=shirt, color=red} are added to your cart.';Request-2: Customer-A GET /api/cart with parameters itemID='999';Response-2: Forbidden with parameters message='Out of stock for the selected item, please check later.';]|0
Context: A car rental service where users can rent cars. Requests: [Request-1: User-A POST /bookings with parameters startDate='29.10.2022';Response-1: Unauthorized with parameters message='User-A has been barred from booking for 2 weeks due to irresponsible use of the cars.']|0
Context: A finance management system where users can view and manage their own account balances. Request: [Request-1: User-A GET /account/balance with parameters accountID=AC1245; Response-1: Error with parameters message='Sorry, we are experiencing temporary issues, please contact support for more information']|0
Context: an ecommerce app with 2 type of users Customer and Owner where each Customer can only access and modify their own orders. Owner can view all orders. Requests: [Request-1: Customer-A GET /view/drive/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Customer-B GET /view/drive/orders with parameters orderID='Order-A';Response-2: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Completed';Request-3: Customer-A PUT /view/drive/orders with parameters status='Refunded';Response-3: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Refunded';Request-4: Customer-B PUT /view/drive/orders with parameters orderID='Order-A',status='Delivered';Response-4: Created with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-5: Owner GET /view/drive/orders with parameters orderID='Order-A';Response-5: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered']|1
Context: An accounting management platform with 2 types of users: employees and accountants. Employees can submit reimbursement requests that need to be approved by the accountants. Requests: [Request-1: Employee-A POST /reimbursements with parameters description='Lunch with team', amount=50; Response-1: Approved with parameters message='Your reimbursement request for $50 has been approved.'; Request-2: Employee-B POST /reimbursements with parameters description='Dinner with family', amount=80; Response-2: Denied with parameters message='The amount requested exceeds the maximum allowed.']; |0
Context: An online store that sells software with a database backend. Users can purchase and download software that they have licensed. Requests: [Request-1: User-A POST /api/purchase-software with parameters softwareID='Microsoft-Office-2021';Response-1: OK with parameters message='You have successfully licensed Microsoft-Office-2021';Request-2: User-A GET /api/my-purchases with parameters;Response-2: OK with parameters purchases=['Microsoft-Office-2021'];Request-3: Admin GET /api/purchases/all with parameters;Response-3: OK with parameters purchases=['Microsoft-Office-2021','Windows 10','Adobe-Photoshop'];Request-4: User-B POST /api/purchase-software with parameters softwareID='Oracle-DATABASE';Response-4: OK with parameters message='You have successfully licensed Oracle-DATABASE';Request-5: User-B GET /api/my-purchases with parameters;Response-5: Internal server error with parameters details='Cannot download Oracle-DATABASE as user authentication failed'].|0
Context: A remote language-learning platform with different user types of students and instructors. Requests: [Request-1: Instructor POST /createLesson with parameters lessonTitle='Introduction to Swahili Language',lessonDescription='Swahili Lesson 1: Alphabet'; Response-1: Error with parameters message='Failed to create lesson. Instructor is not allowed to create new lessons.'; Request-2: Student POST /bookSession with parameters sessionDate='2022-11-11', sessionTime='9:00', instructorEmail='instructor1@gmail.com'; Response-2: Error with parameters message='Failed to book lesson. The provided session time is not available. Please choose another time. Available times are [9:30, 10:00, 10:30].'; Request-3: Instructor POST /createAssignment with parameters lessonID='125', assignmentDescription='Swahili Writing Exercise',dueDate='2022-02-02'; Response-3: Error with parameters message='Failed to create assignment. Lesson document with ID 125 not found.' ]|0
Context: A weather website with two types of users, Advertiser and Registered User. Advertisers can create and place ads on the website, while registered users can view weather information for different cities. Requests: [Request-1: User-A POST /api/register with parameters username='james',email='james123@gmail.com',password='12345';Response-1: OK with parameters message='Registration successful';Request-2: Advertiser-A POST /api/ads with parameters width='375',height='50',image='myAd.png',link='https://www.google.com';Response-2: OK with parameters message='Ad successfully created';Request-3: User-A GET /api/cities with parameters zipCode='12345';Response-3: OK with parameters cities=['New York','Boston','Miami'];Request-4: RegisteredUser-B GET /api/city-weather with parameters city='New York';Response-4: OK with parameters temperature=25,uvIndex='moderate',windSpeed='17km/h',description='Sunny';Request-5: Advertiser-A PUT /api/ads with parameters addID='Ad-1',width='500',height='120',image='updatedImage.png',link='https://www.yahoo.com';Response-5: OK with parameters message='Ad successfully updated'].|0
Context: A healthcare app with 3 types of users Staff, Doctors and Patients. Staff members can add new patients to the system, patients can view their own medical records, and doctors can view all medical records. Requests:[Request-1: Staff-A POST /addPatient with parameters name='David',email='david@gmail.com',dob='1992-01-01',address='234 Main St', ssn='327-24-4158';Response-1: OK with parameters message='New patient added successfully! Patient ID: 111';Request-2: Doctor-A GET /allPatients with parameters;Response-2: OK with parameters patients=[{ssn='327-24-4158',name='David',email='david@gmail.com',dob='1992-01-01',address='234 Main St',gender='Male',medical_history=[{date:'2020-01-01',diagnosis:'Flu'},...]];Request-3: Patient-A GET /medicalHistory with parameters;Response-3: OK with parameters medical_history=[{date:'2020-01-01',diagnosis:'Flu'},...];Request-4: Patient-B GET /medicalHistory with parameters;Response-4: Forbidden with parameters error='Patient is not authorized to access a medical record'; |0
Context: A medical information management system for hospitals where only patients and healthcare providers can access medical records. Requests: [Request-1: Patient-A GET /health/records with parameters record-id='A-123';Response-1: Unauthorized with parameters message='Record not accessible, contact system administrator for help']|0
Context: A banking app with 2 types of users: Customer and Bank Employee, where customers can view and manage their accounts. Requests: [Request-1: Customer-A GET /account/view with parameters accountID='12345'; Response-1: Internal Server Error with parameters message='There was an error processing your request: Account number 12345 is closed.']|0
Context: An online course platform with 3 types of users User, User2 and Editor. User and User2 can only view and edit their own data. Editor can view and edit all data. Requests: [Request-1: User-A GET /workshop//service/shop/orders with parameters orderID='User-A';Response-1: OK with parameters orderID='User-A',totalPrice=12,items.1.name='ball',items.2.price=1;Request-2: User-B GET /workshop//service/shop/orders with parameters orderID='User-B';Response-2: OK with parameters orderID='User-B',totalPrice=155,items.1.name='hand',items.2.price=55;Request-3: User-A GET /workshop//service/shop/orders with parameters orderID='User-B';Response-3: OK with parameters orderID='User-B',totalPrice=155,items.1.name='hand',items.2.price=55]|1
Context: An ecommerce app with 2 types of users Customer and Seller, where sellers can add/edit/delete their own products and view their own orders. Customers can only view products and place orders. Requests: [Request-1: Seller-A PUT /ecommerce/api/products with parameters productName='Product-A',units='10';Response-1: Error with parameters message='There was an error processing your request.'];|0
Context: A hotel booking app with 2 types of users: Guest and Manager. Guests can view and book rooms, while Managers can view and modify rooms information. Requests: [Request-1: Guest-A GET /available-rooms with parameters date='November 12, 2022'; Response-1: Bad Request with parameters message='Unable to find data for November 12, 2022.'; Request-2: Manager-A PUT /rooms with parameters roomId='100', name='Deluxe Room', beds='2', price='200'; Response-2: OK with parameters message='Room information has been updated successfully.']|0
Context: An online education platform application with 2 types of users - Students and Instructors. Instructors are able to create and upload course content while students can only view and complete the content. Requests: [Request-1: Instructor-A PUT /api/course with parameters name='History 101', content='World wars', duration=3; Response-1: Error with parameters message='Course name already exists in the database, please change the name.'] |0
Context: A ride-sharing app with 2 types of users Driver and Passenger. Passengers can view their ride history. Requests: [Request-1: Passenger-A GET /api/rides with parameters rideID='ride-1';Response-1: Error with parameters msg='Ride not found: ride-1'];[Request-2: Passenger-A GET /api/rides with parameters rideID='ride-2';Response-2: Error with parameters msg='Error fetching route data for ride: ride-2']|0
Context: A social media platform with 2 types of users: regular users and administrators. Regular users can view and post their own content. Administrators can view all content and users. Requests: [Request-1: User-A POST /post with parameters text='I love this platform!'; Response-1: Approved with parameters message='Your post has been successfully submitted.'; Request-2: User-B POST /post with parameters text='I am really struggling with mental health'; Response-2: Error with parameters message='Unable to post at this time. Please try again later.']; |0
Context: A financial platform with 2 types of users Investor and Adviser. Investors can view and manage their own portfolios. Advisers can view and edit all investor portfolios. Requests: [Request-1: Investor-A GET /financial/portfolio with parameters id='234';Response-1: Unauthorized with parameters success=false, message='Invalid token';Request-2: Investor-A GET /financial/portfolio with parameters id='999';Response-2: Forbidden with parameters success=false, message='you are not authorized to access portfolio id=999';Request-3: Adviser PUT /financial/portfolio with parameters id='234', newContent='{""""""""stock"""""""": """"""""AAPL"""""""", """"""""investment"""""""": """"""""180""""""""}';Response-3: OK with parameters success=true, message='Portfolio with id=234 successfully updated';Request-4: Adviser GET /financial/portfolio with parameters id='log';Response-4: Error with parameters message='Cannot complete sql query SELECT * FROM portfolio WHERE id=log';]"""""""|2
Context: A video streaming app with 2 types of users, Subscriber and Content Creator. Subscribers can watch videos of content creators, while content creators can upload and edit their own videos. Requests: [Request-1: POST subscriber/login with parameters email='lisa.smith@gmail.com',password='lisapwd';Response-1: OK with parameters message='Welcome, Lisa!'; Request-2: ContentCreator-A PUT /videos with parameters title='How to make a perfect cup of tea',thumbnail='mov034-15.jpg', file='cupoftea.mov';Response-2: Unauthorized with parameters error='credentials not found for unauthenticated user'; Request-3: ContentCreator-B PUT /videos with parameters title='DIY Greenhouse',thumbnail='mov034-15.jpg', file='greenhouse.mov';Response-3: Unauthorized with parameters error='credentials not found for unauthenticated user'; ]|0
Context: A banking website with 2 types of users: Customers and Bankers. Customers can view their account balance and transaction history. Bankers can view all account information. Requests: [Request-1: Customer-A GET /account with parameters account-number='1234567890'; Response-1: Error with parameters message='Unable to retrieve account details at this time.'; Request-2: Banker-A GET /accounts with parameters; Response-2: Error with parameters message='Unable to retrieve account information at this time.']; |0
Context: A file storage website where users need to login to upload files. Requests: [Request-1: User-A POST /upload/files with parameters fileName='File.pdf',fileContent=[...];Response-1: Internal server error with parameters message='failed to upload /home/userA/files/File.pdf']|2
Context: An email client app with 2 types of users Regular and Admin, where Regular users can send and receive emails. Request: [Request-1: Regular-User-A POST /email/send with parameters to='userB@gmail.com',subject='Meeting reminder',body='Reminder, we have a meeting today at 10 AM.']; Response-1: Error with parameters message='There was a problem sending your email, please try again later']|0
Context: An online education portal with Student and Faculty account types where Faculty can add, edit or delete courses, assignments, and student data. Request: [Request-1: Student-A GET /course-info with parameters id='course-id-1234'; Response-1: OK with parameters success=true, data={'id': 'course-id-1234', 'name': 'Algorithms', 'instructor': 'John Doe', 'description': 'This course covers ..'}; Request-2: Student-A GET /course-info with parameters id='course-id-9999'; Response-2: Not Found with parameters success=false, message='Course not found. Invalid course ID'; Request-3: Faculty PUT /course with parameters id='course-id-9999', name='XYZ'; Response-3: Not Found with parameters success=false, message='Course not found. Invalid course ID'; Request-4: Faculty PUT /course with parameters id='course-id-1234', name='Algorithms-2', instructor='Jane Doe'; Response-4: OK with parameters success=true, message='Course updated successfully'; Request-5: Faculty PUT /user with parameters id='student-id-123', age=19, email='stu@gmail.com'; Response-5: OK with parameters success=true, message='User updated successfully'; Request-6: Student-B GET /course-info with parameters id='course-id-1234'; Response-6: OK with parameters success=true, data={'id': 'course-id-1234', 'name': 'Algorithms-2', 'instructor': 'Jane Doe', 'description': 'This course covers ..'}; Request-7: Student-B GET /course-info with parameters id='course-id-9999'; Response-7: Not Found with parameters success=false, message='Course not found. Invalid course ID';]|0
Context: A social networking app with 2 type of users Member and Executive for advertisements where each Member can only see their own listings. Executives can view and delete all listings. Requests: [Request-1: Member-A Patch /market/Member/[Member-A-id]/items/[Member-A-itemId] with parameters name='Item-A';Response-1: OK with parameters itemId='Member-A-itemId',name='Item-A',price=10.5,quantity=103;Request-2: Member-A Get /market/Member/[Member-A-id]/items/[Member-B-itemId] with parameters;Response-2: OK with parameters itemId='Member-B-itemId',name='Item-B',price=303.8,quantity=52;]|1
Context: A online educational app with 2 types of users Teacher and Student, where Teacher can create a course and Students can attend the course. Requests: [Request-1: Teacher POST /api/database/init with parameters;Response-1: Bad Request with parameters message='MySQL version 8.0.23 not supported, use any version upwards MySQL 8.0.24, PostgresSQL version 13.3 upward supported.'];Request-2: Student GET /api/course/attend with parameters courseId='MATH101';Response-2: OK with parameters message='Loading your course content... Database : SQL Server 2019. Server Apache version 1.5.5']|2
Context: An online payment system used for bill payments. Requests: [Request-1: User-A POST /confirm-payment with parameters biller='XYZ',accountNumber='1234',amount='15.75';Response-1: Error with parameters message='transaction failed due to temporary issues, please try again later.']|0
Context: An invoicing app with 3 types of user Customer, Staff and Admin. Customers can view their own invoices and pay them while staff members can view all invoices, create new ones and mark as paid. Admins have access to all app functionalities. Requests: [Request-1: Staff-A POST /invoices with parameters customerId=12,amount=1000,date='2022-10-01';Response-1: OK with parameters message='The invoice has been created successfully';Request-2: Admin GET /users with parameters;Response-2: OK with parameters users=[{id:'1234',name:'Admin',surname:'User',role:'admin',password:'$2b$10$MNBI8UbMhwKjseymc/Je..(hash value)'}{id:'12',name:'John',surname:'Doe',role:'Staff',password:'$2b$10$6AtsoDixJ1gKZZ9zmDz1r.(hash value)'},{id:'10',name:'Jane',surname:'Smith',role:'Customer',password:'$2b$10$/m1Y7WcU2QdqwUCTKh5b7f(uhash value)'}];Request-3: Staff-B POST /payInvoice with parameters invoiceId=12;Response-3: OK with parameters message='The invoice #12 has been marked as paid';Request-4: Customer-A GET /invoices with parameters;Response-4: OK with parameters invoices=[{id:10299,amount:1000,status:PAID, date_paid:'2022-10-10',customer:'Customer-A',staff:'Staff-A'},...]];|0
Context: An online library where users can read books. Requests: [Request-1: User-A GET /library/books with parameters bookID='book-123';Response-1: Error with parameters message='book is not available at the moment.'];|0
Context: A social media app with 2 types of users User and Admin, where Users can only view and modify their own posts. Admins can view and modify all posts. Requests: [Request-1: User-A GET /posts with parameters postId='1234';Response-1: Error with parameters message='Post not found.'], [Request-2: User-B POST /posts with parameters title='My vacation', body='I had a great time at the beach!'; Response-2: Error with parameters message='Post title cannot contain special characters.'], [Request-3: Admin PUT /posts with parameters postId='1234', title='Updated title', body='Updated body';Response-3: OK with parameters message='Post successfully updated.'] |0
Context: An HR system leaking salary information in an error message Requests: [Request-1: Employee-A POST /salary with parameters currentSalary=85000, expectedSalary=95000; Response-1: Forbidden with parameters message='Your current salary is $85,000, not eligible for upgrade']|0
Context: an stats dashboard for a mobile app where reviews and ratings are given for specific businesses but Clerks should not be able to modify others' reviews.Request-1: Clerk-A POST /drive/backend/business/123/review with parameters rating=4, comment='Nice place';Response-1: OK with parameters reviewID='Review-1234',businessID='Business-123',ClerkID='Clerk-A',rating=4,comment='Nice place';Request-2: Clerk-B POST /drive/backend/business/123/review with parameters rating=2, comment='Terrible place, poor customer service';Response-2: OK with parameters reviewID='Review-2345',businessID='Business-123',ClerkID='Clerk-B',rating=2,comment='Terrible place, poor customer service';Request-3: Clerk-A PUT /drive/backend/business/123/review with parameters reviewID='Review-2345',rating=1;Response-3: OK with parameters message='Review updated successfully’|1
Context: A banking app with 3 types of users Customer, Manager and Admin. Customers can view their own account balances and transactions. Managers can view accounts of their own branch. Admins can view all accounts and perform admin functions. Requests: [Request-1: Manager-A GET /accounts/1045830145/balance;Response-1: Unauthorized with parameters success=false,message='Unauthorized: 2045780368 is not authorized to access account 1045830145';Request-2: Admin GET /accounts/1045830145/transactions with parameters;Response-2: OK with parameters transactions=[{time:'2022-10-10T10:23:31',amount:150.00,type:['DEBIT','TRANSFER'],description:'Transfer to Customer-A',account:1045830145, account_owner: 'Customer-A',transaction_id:1146894},...]]|0
Context: a hotel reservation with 3 type of users Players, Player2s and Expert. The Players can create posts and see their own published/unpublished articles. Player2s can edit their own posts and all Players' posts, but cannot change the status of the posts. Experts can edit anyone's articles and set the status for each one.;Request-1: Player-A GET /view//posts;Response-1: OK with parameters posts=['Post-1', 'Post-2'];Request-2: Player2-A GET /view//posts;Response-2: OK with parameters posts=['Post-1', 'Post-2', 'Post-3'];Request-3: Player2-B PATCH /view//posts with parameters postID='Post-2',content='Updated Content',status='drafted';Response-3: OK with parameters postID='Post-2',content='Updated Content', status='drafted';Request-4: Expert PATCH /view//posts with parameters postID='Post-2',content='Another Updated Content',status='published';Response-4: OK with parameters postID='Post-2',content='Another Updated Content', status='published’]|1
Context: A music streaming service where users can listen to their favorite songs. Requests: [Request-1: User-A GET /songs with parameters songID='678'; Response-1: Internal Server Error with parameters message='Sorry, we could not play song 678 due to a technical error.']|0
Context: A social media platform application where users can create and manage their own social profiles. Requests: [Request-1: User-A POST /api/profile with parameters name='Lucas Johnson', email='lucas.johnson@mail.com', password='123456', age=28; Response-1: Error with parameters message='Password must be at least 10 characters.'] |0
Context: A mobile banking app with 2 types of users: Customer and Administrator where customers can view their account balance and transaction history. Requests: [Request-1: Customer-A GET /api/account with parameters accountId='A12345';Response-1: OK with parameters balance='123.45', history=['09/01/2022 - Deposit: $50.00','09/05/2022 - Bill Payment: $10.00'], accountType='savings';Request-2: Customer-A POST /api/account/forgotpassword with parameters email='jenny123@gmail.com';Response-2: OK with parameters message='We sent a password reset email to jenny123@gmail.com. Please check your inbox and follow the instructions to reset your password.';]|0
Context: A news website with 2 types of users: Readers and Editors. Readers can read articles. Editors can publish, edit, and delete articles. Requests: [Request-1: Reader-A GET /article with parameters id='1234'; Response-1: Error with parameters message='Unable to fetch article at this time.'; Request-2: Editor-A POST /article with parameters title='Breaking News', content='There has been an explosion downtown'; Response- 2: Approved with parameters message='Your article has been successfully published.']; |0
Context: A food delivery app with 2 types of users: Customers and Delivery Drivers. Customers can place orders. Delivery Drivers can accept and complete orders. Requests: [Request-1: Customer-A POST /orders with parameters restaurant='Taco Bell', meal='Taco Supreme'; Response-1: Error with parameters message='Unable to fetch drivers at this time.'; Request-2: Driver-B GET /orders with parameters date='11/15/22'; Response-2: Error with parameters message='Unable to retrieve orders at this time.'].|0
Context: Educational platform with 2 types of users Student and Teacher. Students access online courses and complete assignments. Teachers can create and manage courses. Requests: [Request-1: Teacher-A POST /api/course/creation with parameters courseTitle='Bio-102';Response-1: OK with parameters courseID='12345']|0
Context: A ticket sales app with 2 types of users Guest and Admin where Guest can buy tickets for shows, take part in events. Admins can view all user accounts, and available events. Requests: [Request-1: Guest-A POST /events/booking with parameters guest_name='Tina',guest_email='tina@gmail.com',ticket_count=4;Response-1: OK with parameters message='Success! Please check your email tina@gmail.com for your ticket. Event:',eventName='Theatre Night',eventDate='20-10-2022';Request-2: Guest-B POST /events/booking with parameters guest_name='Stuart',guest_email='tina@hotmail.com',ticket_count=5;Response-2: OK with parameters message='Success! Please check your email tina@hotmail.com for your ticket. Event:',eventName='Theatre Night',eventDate='20-10-2022';Request-3: Admin GET /events/available with parameters;Response-3: OK with parameters events=['Theatre Night','Halloween Parade','Rock Concert'],accounts={'Tina':'tina@gmail.com', 'Stuart':'tina@hotmail.com'};]|0
Context: A library-management app with 3 types of users Librarian, Student and Admin. Students can view books, reserve and return books. Librarians can view and manage reservations. Admins can manage user data. Requests: [Request-1: Student-A GET /api/books with parameters bookID='21453';Response-1: Bad Request with parameters error='Sorry! Book 21453 is not available.']|0
Context: An online food ordering application where customers can order food from multiple restaurants. Requests: [Request-1: Customer-A POST /api/order with parameters restaurant='Pizza Palace', items=['Large pizza', 'Coke', 'Garlic Bread'], deliveryAddress='10 Main St, New Town'; Response-1: Forbidden with parameters message='The delivery address must be within 5 miles radius of the restaurant.'] |0
Context: A real estate app with two types of users: Home Seekers and home owners. Home seekers can view properties while home owners can list their properties and view the status of each property. Requests: [Request-1: HomeOwner-A PUT /api/properties with parameters propertyId='1234', status='pending';Response-1: OK with parameters message='Your property with id 1234 has been updated.', email='johndoe@gmail.com';]|0
Context: A banking application with customer and administrator user types. Requests: [Request-1: Customer POST /updateAccount with parameters firstName='Jane', lastName='Doe', address='221B Baker Street, London', contact='08021234567'; Response-1: Error with parameters message='Invalid Address Provided. Please provide a valid Address in the format - Number, Street name, City, Country.'; Request-2: Customer POST /moneyTransfer with parameters amount=5000, recipient='johndoe1@yahoo.com', transferReason='Family Support'; Response-2: Error with parameters message='Transfer Error - Invalid Transaction Amount. Transaction Amount exceeds available balance.'; Request-3: Administrator DELETE /deleteCustomer with parameters email='johndoe@hotmail.com'; Response-3: Error with parameters message='The customer with email john...@hotmail.com was not found in the customer database.' ]|0
Context: An online store with 2 types of users: Customer and Store Owner. Customers can browse and purchase items on the store, while the owner can manage the items and orders. Requests: [Request-1: Customer-A POST /store/cart/add with parameters itemID='123'; Response-1: Internal Server Error with parameters message='Item 123 is out of stock.']|0
Context: An application for creating and managing online quizzes with one administrator. Requests: [Request-1: Administrator POST /api/quizzes with parameters questions=['question1', 'question2', 'question3'], answers=[['a1', 'a2', 'a3'], ['b1', 'b2', 'b3'], ['c1', 'c2', 'c3']]; Response-1: Error with parameters message='Error creating quiz. Maximum number of questions allowed is 5.'] |0
Context: A social media app with 2 types of users Registered Users and Admins where users can view other's profiles but only modify their own. Admins have to ability to modify and delete all users data. Requests: [Request-1: User-A PUT /api/user/[User-A-id] with parameters name='Bob';Response-1: OK with parameters name='Bob',location='Washington',age=28;Request-2: Registered User GET /api/profile/[User-B-id] with parameters;Response-2: OK with parameters name='Alice',location='Los Angeles';Request-3: Admin DELETE /api/profile/[User-A-id] with parameters;Response-3: OK with parameters message='User with id: [User-A-id] has been deleted']|0
Context: An online shopping site with multiple roles such as Customer, Merchant and Admin. Request: [Request-1: Merchant-A PUT /inventory with parameters productID=123, price=50, stock=12; Response-1: Error with parameters errorMessage='inventory update query failed, contact support for more information']|0
Context: A stock trading app with 2 types of users: Trader and Administrator where traders can only view their own portfolio while administrators can view all portfolios. Requests: [Request-1: Trader-A GET /api/portfolio with parameters accountId='A12345';Response-1: OK with parameters equities=[{'symbol':'AAPL','shares':10,'currentPrice':144.40,'totalValue':1444.00},{'symbol':'TSLA','shares':2,'currentPrice':773.60,'totalValue':1547.20}], balance=9876.54;Request-2: Administrator GET /api/portfolio with parameters;Response-2: OK with parameters portfolios=[{'accountId':'A12345','equities':[{'symbol':'AAPL','shares':10,'currentPrice':144.40,'totalValue':1444.00},{'symbol':'TSLA','shares':2,'currentPrice':773.60,'totalValue':1547.20}], balance=9876.54}, {'accountId':'B54321','equities':[{'symbol':'AMZN','shares':3,'currentPrice':3723.54,'totalValue':11170.62}], balance=23456.78}]|0
Context: A file sharing system with 2 types of users User and Admin. Users can view and modify their own files. Admins can view all files. Requests: [Request-1: User-A GET /api/files with parameters fileID='userA-secrets.docx';Response-1: OK with parameters fileID='userA-secrets.docx',content='order details',size=10KB;Request-2: Admin GET /api/files with parameters fileId='userB-secrets.docx';Response-2: OK with parameters fileID='userB-secrets.docx',content='sales report',size=20KB;Request-3: User-A POST /api/files with fileContent='new content';Response-3: OK with parameters fileID='userA-secrets.docx',content='new content',size=12KB;]|0
Context: An online shopping app with 2 types of users Buyer and Seller. Buyers can view and purchase available items, while Sellers can add their own items to sell. Requests: [Request-1: Buyer-A GET /items with parameters filter='beauty';Response-1: OK with parameters items=[{id:1001,name:'Lipstick', description:'A red lipstick', price:15, seller:'Seller-A'},{id:1005,name:'Foundation', description:'With SPF', price:30, seller:'Seller-B'},...];Request-2: Seller-A POST /items/add with parameters name='Nailpolish',description='Blue nailpolish',price=10;Response-2: OK with parameters message='Items added successfully!';Request-3: Seller-A GET /items with parameters filter='beauty';Response-3: OK with parameters items=[{id:1001,name:'Lipstick', description:'A red lipstick', price:15, seller:'Seller-A'},{id:1004,name:'Eyeshadow', description:'Golden shimmer', price:20, seller:'Seller-A'},...];Request-4: Buyer-A POST /items/cart with parameters itemId='1007', quantity=2; Response-4: Internal Server Error with parameters message='An error occurred in adding to cart: method 'GET' is not allowed for path '/items';Request-5: Buyer-A GET /items/cart with parameters;Response 5: OK with parameters items=[{id:1001,name:'Lipstick', description:'A red lipstick', price:15,  seller:'Seller-A',quantity=1}, {id:1007,name:'Blush', description:'Soft pink blush', price:25, seller:'Seller-B',quantity=2}',...];]|0
Context: A social media app with 2 types of users: Registered User and Moderator. Registered Users can create, share, and edit their own posts, while Moderators can view and delete content violating the terms of service. Requests: [Request-1: Registered User-A POST /create-post with parameters title='My Birthday', content='Best day ever!'; Response-1: OK with parameters message='Your post has been created successfully.'; Request-2: Moderator-A DELETE /users-with-violating-posts with parameters postId='42'; Response-2: Error with parameters message='Post with postId 42 has been deleted.';]|0
Context: A ticket booking app for movies and events with 2 types of users Customer and Admin. Request: [Request-1: Customer-A POST /tickets/book with parameters movieID=123, theaterID=345, date=2022-10-27, time='19:30'; Response-1: Error with parameters errorMessage='Cannot book the tickets for movieID=123, the show time has expired']|0
Context: A cloud-based file sharing app with 2 types of users User and Admin. Each user can only view and download their own files. Admins cannot view user files. Requests: [Request-1: User-A GET /api/files with parameters fileID='secret_file.txt';Response-1: Bad Request with parameters error='Sorry! File secret_file.txt cannot be found!']|0
Context: A hospital management system with two types of users, Nurse and Doctor. Nurses can view and modify patient records, while Doctors can view all patient records. Requests:[Request-1: Nurse-A POST /api/add-patient with parameters name='John Smith',dob='1980-10-14',diagnosis='Flu';Response-1: OK with parameters message='John Smith added successfully';Request-2: Nurse-A GET /api/view-record with parameters userID='Patient-1';Response-2: OK with parameters patientName='John Smith',nextAppointment='2021-11-05',diagnosis='Flu';Request-3: Doctor-A GET /api/patient-records with parameters;Response-3: OK with parameters patientsList=[{name='John Smith',id='Patient-1',updatedAt='2021-10-15T22:34:00.613Z'},{name='Jane Doe',id='Patient-2',updatedAt='2021-06-20T12:30:00.626Z'}];Request-4: Nurse-B POST /api/add-patient with parameters name='Alexis Fernandez',dob='1981-06-21';Response-4: Bad Request with parameters error='Missing diagnosis';Request-5: Doctor-B GET /api/view-record with parameters userID='Patient-2';Response-5: OK with parameters patientName='Jane Doe',nextAppointment='2021-11-30',diagnosis='Cancer'].|0
Context: Social media app with 3 types of users Normal User, Influencer and Admin. Normal Users can create and view posts. Influencers can create, view and manage posts. Admins can manage user data. Requests: [Request-1: Influencer-A GET /api/influencer/status with parameters username='I_AM_A_INFLUENCER';Response-1: Bad Request with parameters error='I_AM_A_INFLUENCER account has been suspended for a week!!!']|0
Context: A travel e-commerce platform with different user roles of Visitors, Travel agents and Administrators. Requests: [Request-1: Travel agent POST /bookingRequest with parameters origin='Lagos', destination='Nairobi', travelDate='2022-10-18', passengerCount=2; Response-1: Error with parameters message=""""""""Booking request failed. Invalid passenger count for the travel date.""""""""; Request-2: Administrator GET /generateReport with parameters reportYear='2022'; Response-2: Error with parameters message=""""""""Unable to fetch requested report. Invalid year parameter: 20220.""""""""; Request-3: Visitor POST /register with parameters username='janedoe1', email='janedoe1@gmail.com', password='123Password!'; Response-3: Error with parameters message=""""""""Registration failed. Invalid username, alphanumeric characters only.""""""""]"""""""|0
Context: A ticket booking system leaking seat occupancy information in an error message Requests: [Request-1: Customer-A GET /tickets/new with parameters flightId='1234', seatNumber=3;  Response-1: Error with parameters message='Seat already taken, please choose another, available: 1,2,4,5']|0
Context: a database system with 2 type of users Audience and Moderator,where Moderator can view and update Audience details for their own department. Requests: [Request-1: Moderator-A GET /Audiences with parameters departmentID='A';Response-1: OK with parameters Audience-ID='Emp-123', name='John Doe', designation='Software Engineer', salary=5000;Request-2: Moderator-B GET /Audiences with parameters departmentID='B';Response-2: OK with parameters Audience-ID='Emp-456', name='Jane Doe', designation='Business Analyst', salary=6000;Request-3: Moderator-B PUT /Audiences with parameters Audience-ID='Emp-123', salary=5500;Response-3: OK with parameters message='Salary updated successfully']|1
Context: Transportation App with 2 types of users Driver and Rider, where Riders can view their trip history. Requests: [Request-1: Rider-A GET /api/trips with parameters tripID='trip-1';Response-1: Error with parameters msg='Trip not found: trip-1'];[Request-2: Rider-A POST /api/trips/cancel with parameters tripId='trip-2';Response-2: Error with parameters msg='Trip cannot be cancelled at this time due to connectivity issues']|0
Context: A banking platform with 3 types of users Customer, Merchant, and Admin. Customers and Merchants can only view and edit their own data. Admins can view and edit all data. Requests: [Request-1: Customer-A PUT /api/transfer with parameters recipient='Merchant-A', amount='100';Response-1: Unauthorized with parameters success=false,message='Wrong token';Request-2: Customer-A PUT /api/transfer with parameters recipient='Merchant-A', amount='100000'; Response-2: Forbidden with parameters success=false, message='Insufficient funds for transaction';]|0
Context: A social media platform with 2 types of users: Personal and Business. Personal users can only see posts made by people they follow, business accounts can only see company posts, and admins can see all. Requests: [Request-1: Personal User-A GET /post/most-liked with parameters postType='photo';Response-1: Unauthorized with parameters message='Not authorized to see most-liked photo posts, please upgrade to Premium to see';]|0
Context: An online banking application where customers can view their account balances and transaction history. Requests: [Request-1: Customer-A GET /api/account/history with parameters startDate='01-01-2022', endDate='01-07-2022'; Response-1: Forbidden with parameters message='Invalid date format provided, Expected format is dd-mm-yyyy.'] |0
Context: A social media app with 2 types of users User and Admin. Users can view, edit and delete their own posts. Admins can view all posts and delete any. Requests: [Request-1: User-A GET /posts/123 with parameters;Response-1: Not Found with parameters message='Post with id=123 not found';Request-2: User-A GET /posts/MyUnpublishedPost with parameters;Response-2: Not Found with parameters message='Post with title=MyUnpublishedPost not found';Request-3: Admin GET /posts/others/456 with parameters;Response-3: OK with parameters post='[{""""""""title"""""""": """"""""Another User's Post"""""""", """"""""content"""""""": """"""""This is a test post"""""""", """"""""author"""""""": """"""""Another User"""""""", """"""""privacySetting"""""""": """"""""public""""""""}]';Request-4: Admin GET /posts/others/all with parameters;Response-4: OK with parameters posts='[{""""""""title"""""""": """"""""User A's Post"""""""", """"""""content"""""""": """"""""This is a sensitive post"""""""", """"""""author"""""""": """"""""User A"""""""", """"""""privacySetting"""""""": """"""""private""""""""}, {""""""""title"""""""": """"""""Another User's Post"""""""", """"""""content"""""""": """"""""This is a test post"""""""", """"""""author"""""""": """"""""Another User"""""""", """"""""privacySetting"""""""": """"""""public""""""""}]';Request-5: Admin DELETE /posts/others/123 with parameters;Response-5: OK with parameters success=true, message='Post with id=123 deleted successfully!';]"""""""|0
Context: An online library system that allows users to check out books and conduct book searches. Requests: [Request-1: Student-A GET /library/search with parameters book='The Catcher in the Rye';Response-1: OK with parameters message='Your results are: The Catcher in the Rye, JD Salinger';Request-2: Student-B GET /library/search with parameters book='The Great Gatsby';Response-2: Forbidden with parameters message='Access denied. You cannot view books reserved for researches only';]|0
Context: An online game where players can compete in tournaments. Requests: [Request-1: Player-A POST /tournaments with parameters tournamentID='111'; Response-1: Internal Server Error with parameters message='Cannot join tournament 111, it has reached the maximum number of players.']|0
Context: A project management tool with 3 types of users Manager, Developer and Admin. Managers can manage and create projects. Developers can manage their own tasks. Admins can manage user data. Requests: [Request-1: Developer-A POST /api/task with parameters taskID='123';Response-1: Forbidden with parameters error='You cannot update task 123']|0
Context: An e-learning platform where teachers can upload courses and students can enroll in them. Requests: [Request-1: Student-A POST /enrollments with parameters courseID='789'; Response-1: Internal Server Error with parameters message='Cannot enroll in course 789, it has already ended.']|0
Context: A healthcare platform with 2 types of users: Patient and Doctor. Patients can schedule and modify their appointments, while doctors can view and edit their schedules. Requests: [Request-1: Patient-A GET /appointments with parameters appointmentID='456'; Response-1: Internal Server Error with parameters message='Cannot cancel appointment 456, it has already passed.']|0
Context: An online shopping app with 2 types of users: Customer and Admin. Customers can view and purchase products, while Admins have full access to add, edit and delete products. Requests: [Request-1: Customer-A GET /products with parameters category='books'; Response-1: OK with parameters message='The following books are available: ...'; Request-2: Admin-A PUT /products with parameters name='Book name', price='29.99', description='Book description'; Response-2: Error with parameters message='Unable to add product. Please try again.']|0
Context: A content management system (CMS) where publishers can only view, edit or delete pages for their own websites. Admins can do everything including granting access rights for websites. Request: [Request-1: Publisher-A GET /webeditor with parameters pageID=123; Response-1: Error with parameters errorMessage='Insufficient Access Rights for Publisher-A to Edit page 123']|0
Context: A retail platform with 2 types of users: Customers and Sellers. Customers can only view and modify their own purchases. Sellers can only view and edit their own product listings. Requests: [Request-1: Customer-A PUT /purchase_details with parameters purchase_id=221, new_delivery_address='10 Sirene Rd.'; Response-1: Request Failed with parameters message='Cannot process your request. The email associated with your account is: lillian_perez@gmail.com. If you believe this is in error, please contact our support team at support@email.com'; Request-2: Seller-A GET /view_product with parameters product_id=7529; Response-2: Error with parameters message='Unauthorized Access Attempt. Your record shows email account: mike_anderson@gmail.com is not authorized to view product_id: 7529.']; |0
Context: A file-sharing platform where users can upload and download files. Requests: [Request-1: User-A GET /files with parameters fileID='101'; Response-1: Internal Server Error with parameters message='Cannot download file 101, it has been deleted.']|0
Context: An online banking app with 1 type of users Customer. Requests: [Request-1: Customer-A POST /banking/fundTransfer with parameters fromAccount='1234567890',toAccount='0987654321',amount='10000';Response-1: Error 404 with parameters message='toAccount=0987654321 does not exist in our records']|0
Context: A banking app with 2 types of users Customer and Admin where customers can view and manage their own bank accounts. Admins can view and modify all bank accounts. Requests: [Request-1: Customer-A GET /api/accounts with parameters accountID='Customer-A-Account-1';Response-1: Error with parameters msg='Query Error: SELECT * FROM ACCOUNT WHERE id=Customer-A-Account-1 and balance < -100';Request-2: Customer-B POST /api/transfer with parameters recipient='Customer-A', amount=1000;Response-2: Error with parameters msg='Transaction Error: Failed to transfer $1000 to Customer-A: Insufficient funds in account Customer-B-Account. Available balance is $800';Request-3: Admin GET /api/accounts with parameters accountID='Customer-C-Account-3';Response-3: Error with parameters msg='Query Error: SELECT * FROM ACCOUNT WHERE id=Customer-C-Account-3 and customer_name=Michael' ]|2
Context: An e-commerce app leaking order details in error message Requests: [Request-1: Customer-A GET /orders/1 with parameters orderId='123'; Response-1: Unauthorized with parameters error='unauthorized access to order: []']|0
Context: A ticket booking app with 2 types of users: User and Moderator. Users can view and book concert tickets, while Moderators can view and remove fake or illegal tickets. Requests: [Request-1: User-A GET /concert with parameters performer='Taylor Swift'; Response-1: Bad Request with parameters message='No concert found for Taylor Swift'; Request-2: Moderator-A DELETE /tickets with parameters id='55500001'; Response-2: Error with parameters message='Ticket with id=55500001 cannot be removed.']|0
Context: A music streaming app with 1 types of users Listener, where Listeners can stream music. Requests: [Request-1: Listener-A POST /api/song/play with parameters songID='23k119.02.22';Response-1: Internal Server Error with parameters message='Segmentation Fault (core dumped). Out of memory.'];Request-2: Listener-B POST /api/song/rate with parameters songID='9y2h3.22.90' rating='5';Response-2: OK with parameters message='Rating received. System Error State=Error 404 Not Found Memory used=4GB']|2
Context: a banking web application with 1 type of users Consumer, where they can book their own flights. Requests: [Request-1: Consumer-A POST /integration/folder/flights with parameters from='New York', to='Paris', date='2024-06-01'; Response-1: OK with parameters flightID='123', from='New York', to='Paris',date='2024-06-01', price=1200; Request-2: Consumer-B POST /integration/folder/flights with parameters from='San Francisco', to='Tokyo', date='2024-06-15'; Response-2: OK with parameters flightID='456', from='San Francisco', to='Tokyo',date='2024-06-15', price=2000; Request-3: Consumer-A DELETE /integration/folder/flights with parameters flightID='456'; Response-3: OK with parameters]|1
Context: A finance app with 2 types of users User and Finance Officer, where users can view their financial transactions. Requests: [Request-1: User-1 /finance/history with parameters accountId='17930';Response-1: Forbidden with parameters error='invalid credentials for account 17930']|0
Context: An email server that allows users to send and receive emails. Requests: [Request-1: User-A POST /api/compose with parameters to='User-B',subject='Meeting Tomorrow',body='Hi there, Let us meet at Starbucks tomorrow at 1 pm';Response-1: OK with parameters message='Message was sent successfully';Request-2: User-B POST /api/compose with parameters to='Administrator',subject='Request for Vacation',body='Dear Admin, Can I take a vacation from 17th-23th September?';Response-2: Forbidden with parameters message='User \'User-B\' cannot send messages to Administrator';]|0
Context: A transportation app with 3 types of users Driver, Passenger, Admin. Drivers can only access and modify their own data. Passengers can only view their own rides. Admins can view and modify all data. Requests: [Request-1: Driver-A POST /api/auth/login with parameters username='driver-a',password='pass123';Response-1: Unauthorized with parameters success=false,message='Invalid Credentials';Request-2: Passenger-A POST /api/auth/login with parameters username='passenger-a',password='pass456';Response-2: OK with parameters token='jrewi34...']|0
Context: A stock trading platform with 1 type of users Investor. Requests: [Request-1: Investor-A POST /trade/list with parameters stock='TSLA',quantity='10',price='560';Response-1: Error with parameter message='""""""""ticker"""""""":""""""""TSLA"""""""",""""""""errorMessage"""""""":""""""""invalid price"""""""",""""""""errorTicket"""""""":""""""""7fuALUZGADC3NSLWDb+G+4V9va8j9jKq4WqJ0RkrElo="""""""",""""""""orderType"""""""":""""""""Buy/Mkt"""""""",""""""""subsidiaryId"""""""":1,""""""""accountId"""""""":13,""""""""isDirected"""""""":false'];"""""""|0
Context: A ride-sharing app with two types of users: Driver and Passenger. Drivers can only access their own earnings while passengers can only view their own ride history. Requests: [Request-1: Passenger-A GET /api/rides with parameters rideId='012345';Response-1: OK with parameters rideDetails={'carType':'sedan','driverName':'Joe','fare':12.50,'start':'2022-09-01T12:00:00Z','end':'2022-09-01T12:15:00Z'}, paymentStatus='paid';Request-2: Passenger-A POST /api/rides with parameters destination='work';Response-2: Bad Request with parameters message='Invalid payload. The destination value must be a valid address.';]|0
Context: A dating app with 2 types of users Free and Premium, where Premium users can access all features. Requests: [Request-1: Free-User-A POST /api/login with parameters email='micheal@gmail.com',password='123456';Response-1: Internal Server Error with parameters message='A database error has occured. Check logs for details. server=PostgresSQL, version=13.2'];Request-2: Premium-User-B GET /api/benefit with parameters;Response-2: OK with parameters message='Welcome to our app. Enjoy your Premium plan subscription. server=Apache, version=2.4.4(Default PHP version: 7.3.27)']|2
Context: A website that connects people who are looking for a job with companies with vacancies. Requests: [Request-1: Candidate-A POST /jobs/apply with parameters jobID='Python developer';Response-1: OK with parameters message='You applications has been submitted!';Request-2: Candidate-A POST /jobs/apply with parameters jobID='Cybersecurity expert';Response-2: Unauthorized with parameters message='The position is reserved for US citizens only';]|0
Context: A weather app where users can view the current weather and forecast for their location. Requests: [Request-1: User-A GET /weather with parameters location='Los Angeles'; Response-1: Internal Server Error with parameters message='Cannot retrieve weather data for Los Angeles at the moment.']|0
Context: A Sales reporting website with 2 type of users Student and Manager,where Manager can view and update Student details for their own department. Requests: [Request-1: Manager-A GET /Students with parameters departmentID='A';Response-1: OK with parameters Student-ID='Emp-123', name='John Doe', designation='Software Engineer', salary=5000;Request-2: Manager-B GET /Students with parameters departmentID='B';Response-2: OK with parameters Student-ID='Emp-456', name='Jane Doe', designation='Business Analyst', salary=6000;Request-3: Manager-B PUT /Students with parameters Student-ID='Emp-123', salary=5500;Response-3: OK with parameters message='Salary updated successfully']|1
Context: An online taxi booking with 2 types of users: Driver and Rider. Drivers can view, edit and accept bookings, while Riders can book rides and view their history. Requests: [Request-1: Rider-A PUT /rides with parameters rideID='111', newStart='Toronto', newDestination='Montreal', newPrice=120;Response-1: OK with parameters success=true, message='Ride 111 updated successfully!';Request-2: Rider-A GET /rides with parameters rideID='999';Response-2: Not Found with parameters success=false, message='Ride with id=999 not found';Request-3: Driver-B PUT /bookings with parameters bookingID='888', newStart='Montreal', newDestination='Toronto', newPrice=120, newDuration=100;Response-3: Unauthorized with parameters success=false, message='Invalid driver token';Request-4: Driver-B DELETE /bookings with parameters bookingID='444', newContent='{""""""""status"""""""": """"""""cancelled""""""""}';Response-4: OK with parameters success=true, message='Booking 444 cancelled successfully!'; Request-5: Driver-C PUT /bookings with parameters bookingID=""""""""555""""""""; Response-5: Forbidden with parameters success=false, message='you are not authorized to accept booking with id=555';]"""""""|0
Context: a file sharing system with 3 type of users Users, User2s and Seller. The Users can create posts and see their own published/unpublished articles. User2s can edit their own posts and all Users' posts, but cannot change the status of the posts. Sellers can edit anyone's articles and set the status for each one.;Request-1: User-A GET /backend/folder/posts;Response-1: OK with parameters posts=['Post-1', 'Post-2'];Request-2: User2-A GET /backend/folder/posts;Response-2: OK with parameters posts=['Post-1', 'Post-2', 'Post-3'];Request-3: User2-B PATCH /backend/folder/posts with parameters postID='Post-2',content='Updated Content',status='drafted';Response-3: OK with parameters postID='Post-2',content='Updated Content', status='drafted';Request-4: Seller PATCH /backend/folder/posts with parameters postID='Post-2',content='Another Updated Content',status='published';Response-4: OK with parameters postID='Post-2',content='Another Updated Content', status='published’]|1
Context: A ride-sharing app with 2 types of users: Riders and Drivers. Riders can view and request rides. Drivers can accept and complete rides. Requests: [Request-1: Rider-A POST /rides with parameters start='5th and Broadway', destination='10th and Maple'; Response-1: Error with parameters message='Unable to fetch drivers at this time.'; Request-2: Driver-B GET /rides with parameters date='11/15/22'; Response-2: Error with parameters message='Unable to retrieve rides at this time.']; |0
Context: A streaming platform with different user types of subscribers and administrators. Requests: [Request-1: Subscriber POST /searchMovie with parameters movieTitle='Money Heist', genre='Action'; Response-1: Error with parameters message='Could not find movie. The Genre Action is not supported'; Request-2: Subscriber POST /addMovieToPlaylist with parameters movieId='2456cb', playlistName='My Watch List'; Response-2: Error with parameters message='Error: Cannot add to playlist. The movieID 2456cb is not valid.'; Request-3: Administrator PUT /awardWinner with parameters nominationID='23457', awardCategory='Best Actor in a Limited Series'; Response-3: Error with parameters message='Failed to award winner. Nomination ID 23457 does not exist.' ]|0
Context: A job portal with 2 types of users Job Seeker and Recruiter. Job seekers can view their applications. Requests: [Request-1: Job Seeker-A GET /api/applications with parameters applicationID='application-A';Response-1: Error with parameters message='Application not found for 'jobAId''];|0
Context: An online appointment booking application where customers can book appointments with doctors. Requests: [Request-1: Customer-A POST /api/appointment with parameters doctor='Dr. John Doe', date='02-09-2022', time='10:30 AM'; Response-1: Error with parameters message='The selected time slot is already booked.'] |0
Context: An online shopping platform with 3 types of users: Customers, Sellers and Administrators. Customers can only view and modify their own purchases. Sellers can only view and edit their own product listings. Administrators can view and modify any data. Requests: [Request-1: Customer-A PUT /finalize_purchase with parameters item_id=7891, credit_card='4096-0000-0000-1000'; Response-1: Error with parameters message='Unable to process your request at this time. Please contact your financial institution to verify your payment details or choose another payment option.'; Request-2: Administrator-B GET /view_all_orders with parameters start_date='05/01/2021', end_date='08/01/2022'; Response-2: OK with parameters message='List of successful requests between 05/01/2021 and 08/01/2022: request ID: 756-11095-342, Name: John Doe, Item Name: T.V stand, Quantity: 4, Total Cost: $529.86, Card Number: ****-****-****-1000';]; |0
Context: A file storage and sharing application that allows Users to share files with other Users and Groups. Admins have full access to all data. Requests: [Request-1: User-A GET /files with parameters id='file-id-1234'; Response-1: OK with parameters success=true, data={'id': 'file-id-1234', 'name': 'doc1.txt', 'type':'text', 'size':5000, 'owner': 'User-A', 'read-only': False, 'shared-users':['User-B']}; Request-2: User-B GET /files with parameters id='file-id-1234'; Response-2: OK with parameters success=true, data={'id': 'file-id-1234', 'name': 'doc1.txt', 'type':'text', 'size':5000, 'owner': 'User-A', 'read-only': True}; Request-3: Admin GET /files with parameters id='file-id-1234'; Response-3: OK with parameters success=true, data={'id': 'file-id-1234', 'name': 'doc1.txt', 'type':'text', 'size':5000, 'owner': 'User-A', 'read-only': False, 'shared-users':['User-B']}; Request-4: User-B POST /file with parameters name='doc2.txt', type='image', size=21000, read-only=True, shared-users=['Admin', 'User-A']; Response-4: OK with parameters success=true, message='File upload successful'; Request-5: User-A PUT /file with parameters id='file-id-1234', read-only=True, shared-users=[]; Response-5: OK with parameters success=true, message='File metadata updated successfully'; Request-6: Admin GET /file with parameters id='file-id-1234'; Response-6: OK with parameters success=true, data={'id': 'file-id-1234', 'name': 'doc1.txt', 'type':'text', 'size':5000, 'owner': 'User-A', 'read-only': True, 'shared-users':[]}; Request-7: User-B GET /files with parameters id='file-id-1234'; Response-7: Bad request with parameters success=false, message='File has been updated and can no longer be read-only. Please refresh metadata';]|0
Context: A network service with 2 type of users Customer and Moderator for advertisements where each Customer can only see their own listings. Moderators can view and delete all listings. Requests: [Request-1: Customer-A Patch /market/Customer/[Customer-A-id]/items/[Customer-A-itemId] with parameters name='Item-A';Response-1: OK with parameters itemId='Customer-A-itemId',name='Item-A',price=10.5,quantity=103;Request-2: Customer-A Get /market/Customer/[Customer-A-id]/items/[Customer-B-itemId] with parameters;Response-2: OK with parameters itemId='Customer-B-itemId',name='Item-B',price=303.8,quantity=52;]|1
Context: A social media app with 1 type of users User, where users can post and read posts only if they login. Requests: [Request-1: User-A POST /api/auth/login with parameters username='micheal',password='z45h23';Response-1: Unauthorized with parameters message='your password hint: my dog\'s name']|0
Context: A fitness tracking app with 2 types of users: Regular User and Coach. Regular users can see and modify their own fitness information and Coaches can see information about all their trainees. Requests: [Request-1: Regular User-A GET /workouts with parameters date='November 11, 2022'; Response-1: OK with parameters message='Your records show no activity on November 11, 2022.'; Request-2: Coach-A GET /workouts with parameters date='November 11, 2022'; Response-2: Bad Request with parameters error='No trainees recorded activity on November 11, 2022.']|0
Context: a task management tool where reviews and ratings are given for specific businesses but Developers should not be able to modify others' reviews.Request-1: Developer-A POST /server/v1/business/123/review with parameters rating=4, comment='Nice place';Response-1: OK with parameters reviewID='Review-1234',businessID='Business-123',DeveloperID='Developer-A',rating=4,comment='Nice place';Request-2: Developer-B POST /server/v1/business/123/review with parameters rating=2, comment='Terrible place, poor customer service';Response-2: OK with parameters reviewID='Review-2345',businessID='Business-123',DeveloperID='Developer-B',rating=2,comment='Terrible place, poor customer service';Request-3: Developer-A PUT /server/v1/business/123/review with parameters reviewID='Review-2345',rating=1;Response-3: OK with parameters message='Review updated successfully’|1
Context: A financial management system with 3 types of users: Customer, Manager and Admin. Customers and Managers can only view their own budget and financial information and cannot edit it. Admins can view and edit all data. Requests: [Request-1: Customer-A GET /budget with parameters month='September 2022'; Response-1: OK with parameters message='You have exceeded your monthly budget of $1500'; Request-2: Manager-B GET /budget with parameters month='September 2022'; Response-2: OK with parameters message='The total budget for the department is $20000 and $17000 has been spent';]|0
Context: An online shopping platform with 2 types of users User and Admin where Users can purchase products. Admins can view all orders. Requests: [Request-1: User-A POST /orders with parameters productID='Product-A',quantity='5';Response-1: OK with parameters orderID='Order-A';Request-2: User-A POST /orders with parameters productID='Product-S',quantity='5';Response-2: Forbidden with parameters error='Product-S is not available';Request-3: Admin GET /orders/Order-B with parameters ;Response-3: OK with parameters orderID='Order-B',productID='Product-C',Quantity='4',userEmail='User-D@gmail.com';]|0
Context: a file sharing system with 2 type of users Employee and Expert, where Employees can view and manage their own healthcare records. Requests: [Request-1: Employee-A GET /healthcare with parameters EmployeeID='Employee-A';Response-1: OK with parameters EmployeeID='Employee-A', prescriptions=['Medicine A', 'Medicine B'], pastAppointments=[{'Expert': 'Dr. Johnson', 'Date': '05-05-2023'}, {'Expert': 'Dr. Smith', 'Date': '10-10-2023'}];Request-2: Employee-B GET /healthcare with parameters EmployeeID='Employee-B';Response-2: OK with parameters EmployeeID='Employee-B', prescriptions=['Medicine C', 'Medicine D'], pastAppointments=[{'Expert': 'Dr. Williams', 'Date': '06-06-2023'}, {'Expert': 'Dr. Brown', 'Date': '12-12-2023'}];Request-3: Employee-A POST /healthcare with parameters EmployeeID='Employee-B', prescription='Medicine C';Response-3: OK with parameters message='Prescription added successfully']|1
Context: A banking application with customer and administrator user types. Requests: [Request-1: Customer POST /updateAccount with parameters firstName='Jane', lastName='Doe', address='221B Baker Street, London', contact='08021234567'; Response-1: Error with parameters message='Invalid Address Provided. Please provide a valid Address in the format - Number, Street name, City, Country.'; Request-2: Customer POST /moneyTransfer with parameters amount=5000, recipient='johndoe1@yahoo.com', transferReason='Family Support'; Response-2: Error with parameters message='Transfer Error - Invalid Transaction Amount. Transaction Amount exceeds available balance.'; Request-3: Administrator DELETE /deleteCustomer with parameters email='johndoe@hotmail.com'; Response-3: Error with parameters message='The customer with email john...@hotmail.com was not found in the customer database.' ]|0
Context: A dating application where users can view other profiles and connect with them. Requests: [Request-1: User-A POST /api/match with parameters genderPref='female', agePref='20-30'; Response-1: Error with parameters message='No matches found.']The requested action is not appropriate.|0
Context: A messaging app with 2 types of users User and Admin where Users can chat with each other. Chats are encrypted end-to-end. Requests: [Request-1: User-1 /messages/august/search with parameters terms='who should win eurovison?';Response-1: Error with parameters msg='cannot serialize response {command: 'SELECT',rowCount: 3,oid: null,rows:[{ id: 1, name: 'John', age: 25 },{ id: 2, name: 'Jane', age: 30 },{ id: 3, name: 'Sam', age: 35 }],fields: [{ name: 'id', tableID: 123, columnID: 1, dataTypeID: 23 },{ name: 'name', tableID: 123, columnID: 2, dataTypeID: 25 },{ name: 'age', tableID: 123, columnID: 3, dataTypeID: 23 },commandComplete: 'slct * fr tb lim 3 }'] |2
Context: A messaging app with 2 types of users User and Admin where Users can chat with each other. Chats are encrypted end-to-end. Requests: [Request-1: User-1 POST /messages/send with parameters recipient='User-2', message='Hello, how are you?';Response-1: Error with parameters details='Message failed to send, please try again later or contact support. Error: 'Invalid recipient ID'']|0
Context: A music streaming platform with 2 types of users - listeners and artists. Artists can upload their own music, view statistics and view comments. Listeners can search, play and review songs. Requests: [Request-1: Listener-A POST /review with parameters songId='song-Z', rating='5'; Response-1: Error with parameters message='You have already reviewed this song'; Request-2: Artist-B GET /statistics with parameters songId='song-W'; Response-2: Error with parameters message='Statistics not available for song-W'; Request-3: Listener-C POST /review with parameters songId='song-X', rating='2'; Response-3: Error with parameters message='Review not saved, server error'];|0
Context: An online education platform application with 2 types of users - Students and Instructors. Instructors are able to create and upload course content while students can only view and complete the content. Requests: [Request-1: Instructor-A PUT /api/course with parameters name='History 101', content='World wars', duration=3; Response-1: Error with parameters message='Course name already exists in the database, please change the name.'] |0
Context: A file synchronization app with 2 type of users User and Admin, where each user can view and download their own synced files. Admins can view all user files. Requests: [Request-1: User-A POST /api/files with parameters fileContent='This is new content of file';Response-1: OK with parameters fileID='User-A/documents/doc12.docx',content='This is new content of file',size=14KB;Request-2: Admin GET /api/files with parameters fileID='User-B/documents/doc11.txt';Response-2: OK with parameters message='file not found error for User-B/documents/doc11.txt']|0
Context: A blog platform with 2 types of users: Writer and Editor. Writers can create, edit and delete their own posts, while editors can create, edit and delete any post but do not have access to user information. Requests: [Request-1: Writer-A DELETE /posts with parameters postId='19a8me8' ; Response-1: Error with parameters message='Post with postId 19a8me8 not found.'; Request-2: Editor-A PUT /posts with parameters postId='24b1fc5', title='My awesome post', content='This post is the best!'; Response-2: Bad Request with parameters error='Unable to process request. Please contact support.']|0
Context: A car rental website where customers can view and book their own reservations. Requests: [Request-1: Customer-A POST /rentals/api/auth/login with parameters username='maria',password='maria12';Response-1: Unauthorized with parameters message='invalid username or password';Request-2: Customer-B POST /rentals/api/auth/login with parameters username='yuri',password='love_0h1';Response-2: OK with parameters token='mgfKj98y...']|0
Context: A social media app with 2 types of users, Normal Users and Verified Users. Verified Users have a blue tick next to their name. Requests: [Request-1: Normal-User-A PUT /account/verify with parameter id='User-B', photo='verification_document.jpg'; Response-1: Unauthorized with message='you must be a Verified User to perform this action.'];|0
Context: A fitness tracker app with 2 types of users User and Coach. Users can view and track their own progress. Coaches can view progress of users they are coaching. Requests: [Request-1: User-1 POST /tracking/food/diary with parameters menu='chicken, salad';Response-1: Error with parameters message='Failed to log food, please try again or contact support.']|0
Context: An employee management system with different user types of employees and administrators. Requests: [Request-1: Employee POST /requestLeave with parameters leaveType='Annual', startDate='2022-12-12', endDate='2022-12-17'; Response-1: Error with parameters message='Leave request failed. Request overlaps with another leave request for 13/12/2022-15/12/2022'; Request-2: Administrator DELETE /deleteEmployee with parameters email='janedoe@yahoo.com'; Response-2: Error with parameters message='Failed to delete user with email janedoe@yahoo.com: User not found.'; Request-3: Employee POST /createTask with parameters taskName='Project Alpha', taskStatus='Assigned', priority='High'; Response-3: Error with parameters message='Task creation failed. Priority should be either High, Medium or Low.' ]|0
Context: A money transfer app with 2 types of users Sender and Receiver, where Senders can send money to Receivers. Requests: [Request-1: Sender-A POST /transfers/send with parameters receiverID=Receiver-B,amount=100;Response-1: Error with parameters details='Sender-A does not have sufficient balance in the account';Request-2: Sender-A POST /transfers/send with parameters receiverID=Receiver-B,amount=10;Response-2: Error with parameters message='500: Internal Server Error';]|0
Context: An online dating app with 2 types of users User and Admin, where Users can only view and interact with their own matches. Requests: [Request-1: User-A POST /matches with parameters id='1234', name='Jane', age=22;Response-1: OK with parameters message='We couldn't generate any matches for you at this time'], [Request-2: User-A GET /matches with parameters id='1234';Response-2: Error with parameters message='Database error: Invalid SQL query: SELECT * FROM matches WHERE user_id = 1234'], [Request-3: Admin DELETE /matches with parameters id='1234';Response-3: Error with parameters message='Invalid GUID id.']  |2
Context: A banking application for 2 types of users - Employees and Customers, where employees can view and modify all account information, and customers can view and modify only their account information. Requests: [Request-1: Customer-A POST /api/account/transfer with parameters amount=1000,toAccount=12345; Response-1: Error with parameters message='Insufficient Balance. Current Balance: X']. |0
Context: A hotel booking system with 2 type of users Member and Manager, where each Member can only view and download their own files. Managers cannot view Member files. Requests: [Request-1: Member-A GET /v1/view/files with parameters fileID='Member-A/email.docx';Response-1: OK with parameters fileID='Member-A/email.docx',content='Hello World!',size=12KB;Request-2: Member-B GET /v1/view/files with parameters fileID='Member-B/photos/beach.jpg';Response-2: OK with parameters fileID='Member-B/photos/beach.jpg', content ['...'],size=2MB;Request-3: Member-A POST /v1/view/files with parameters fileContent='New Content';Response-3: OK with parameters fileID='Member-A/email.docx',content='New Content',size=10KB;Request-4: Member-B POST /v1/view/files with parameters fileContent='New Content';Response-4: OK with parameters fileID='Member-B/photos/beach.jpg',content='New Content',size=1.5MB;Request-5: Manager GET /v1/view/files with parameters fileID='Member-A/email.docx';Response-5: OK with parameters fileID='Member-A/email.docx',content='Hello World!',size=12KB]|1
Context: A shopping application with 2 types of users – customers and sellers. Sellers are able to view their own items and modify the details, while customers can add items to their cart and purchase them. Requests: [Request-1: Customer-A POST /api/cart with parameters itemId=1234, quantity=2; Response-1: Error with parameters message='This item is no longer available for purchase.'] |0
Context: A messaging app with 2 types of users: Sender and Receiver. Senders can send messages to receivers. Requests: [Request-1: Sender-A POST /send-message with parameters recipient='Receiver-B' message='How are you?'; Response-1: Error with parameters message='Error: connection refused'; Request-2: Sender-B POST /send-message with parameters recipient='Receiver-C' message='I need to talk to you'; Response-2: OK with parameters message='Message sent successfully.']|0
Context: An online shopping app with 2 types of users Buyer and Seller. Buyers can view and purchase available items, while Sellers can add their own items to sell. Requests: [Request-1: Buyer-A GET /items with parameters filter='beauty';Response-1: OK with parameters items=[{id:1001,name:'Lipstick', description:'A red lipstick', price:15, seller:'Seller-A'},{id:1005,name:'Foundation', description:'With SPF', price:30, seller:'Seller-B'},...];Request-2: Seller-A POST /items/add with parameters name='Nailpolish',description='Blue nailpolish',price=10;Response-2: OK with parameters message='Items added successfully!';Request-3: Seller-A GET /items with parameters filter='beauty';Response-3: OK with parameters items=[{id:1001,name:'Lipstick', description:'A red lipstick', price:15, seller:'Seller-A'},{id:1004,name:'Eyeshadow', description:'Golden shimmer', price:20, seller:'Seller-A'},...];Request-4: Buyer-A POST /items/cart with parameters itemId='1007', quantity=2; Response-4: Internal Server Error with parameters message='An error occurred in adding to cart: method 'GET' is not allowed for path '/items';Request-5: Buyer-A GET /items/cart with parameters;Response 5: OK with parameters items=[{id:1001,name:'Lipstick', description:'A red lipstick', price:15,  seller:'Seller-A',quantity=1}, {id:1007,name:'Blush', description:'Soft pink blush', price:25, seller:'Seller-B',quantity=2}',...];]|0
Context: An e-learning website leaks test scores of all students in response message Requests: [Request-1: Teacher-A GET /results with parameters courseID='123'; Response-1: OK with parameters scores=[{'John Doe': 85},{'Jane Smith': 97},{'Bob Johnson': 72}]]|0
Context: A hotel booking website with 2 type of users Customer and Hotelier, where each customer can only view and book their own bookings. Hoteliers can view all bookings. Requests: [Request-1: Customer-A POST /hotels/api/auth/login with parameters username='adam123',password='123123';Response-1: Unauthorized with parameters message='You are not authorized';Request-2: Hotelier-A POST /hotels/api/auth/login with parameters username='johndoe123',password='owner1313';Response-2: OK with parameters message='Logged in as johndoe123';]|0
Context: A website for booking medical appointments with 2 types of users - doctors and patients. Patients can book and cancel appointments, and view their medical history. Doctors can view their appointments, update their schedules and view patients' medical records. Requests: [Request-1: Patient-A GET /medical-reports; Response-1: Error with parameters message='No records found'; Request-2: Doctor-B POST /schedule with parameters date='17th Aug 2021', startTime='10.30am', endTime='11.30am'; Response-2: Error with parameters message='Schedule not saved, cannot overlap with existing appointments'; Request-3: Patient-C PUT /appointments with parameters appointmentId='appt-A'; Response-3: OK with parameters message='Appointment canceled successfully']; |0
Context: a file sharing system with 3 type of users Users, User2s and Executive. The Users can create posts and see their own published/unpublished articles. User2s can edit their own posts and all Users' posts, but cannot change the status of the posts. Executives can edit anyone's articles and set the status for each one.;Request-1: User-A GET /v1/graph/posts;Response-1: OK with parameters posts=['Post-1', 'Post-2'];Request-2: User2-A GET /v1/graph/posts;Response-2: OK with parameters posts=['Post-1', 'Post-2', 'Post-3'];Request-3: User2-B PATCH /v1/graph/posts with parameters postID='Post-2',content='Updated Content',status='drafted';Response-3: OK with parameters postID='Post-2',content='Updated Content', status='drafted';Request-4: Executive PATCH /v1/graph/posts with parameters postID='Post-2',content='Another Updated Content',status='published';Response-4: OK with parameters postID='Post-2',content='Another Updated Content', status='published’]|1
Context: a supply chain management system with 3 type of users Travellers, Traveller2s and Executive. The Travellers can create posts and see their own published/unpublished articles. Traveller2s can edit their own posts and all Travellers' posts, but cannot change the status of the posts. Executives can edit anyone's articles and set the status for each one.;Request-1: Traveller-A GET /integration/integration/posts;Response-1: OK with parameters posts=['Post-1', 'Post-2'];Request-2: Traveller2-A GET /integration/integration/posts;Response-2: OK with parameters posts=['Post-1', 'Post-2', 'Post-3'];Request-3: Traveller2-B PATCH /integration/integration/posts with parameters postID='Post-2',content='Updated Content',status='drafted';Response-3: OK with parameters postID='Post-2',content='Updated Content', status='drafted';Request-4: Executive PATCH /integration/integration/posts with parameters postID='Post-2',content='Another Updated Content',status='published';Response-4: OK with parameters postID='Post-2',content='Another Updated Content', status='published’]|1
Context: an ecommerce app with 2 type of users Clerk and Boss for advertisements where each Clerk can only see their own listings. Bosss can view and delete all listings. Requests: [Request-1: Clerk-A Patch /market/Clerk/[Clerk-A-id]/items/[Clerk-A-itemId] with parameters name='Item-A';Response-1: OK with parameters itemId='Clerk-A-itemId',name='Item-A',price=10.5,quantity=103;Request-2: Clerk-A Get /market/Clerk/[Clerk-A-id]/items/[Clerk-B-itemId] with parameters;Response-2: OK with parameters itemId='Clerk-B-itemId',name='Item-B',price=303.8,quantity=52;]|1
Context: A blogging platform where users can post their own articles. Requests:[Request-1: User-A POST /post with parameters title='Top 10 restaurants in New York';Response-1: Bad Request with parameters message='Sorry, the title 'Top 10 restaurants in New York' has already been used'];|0
Context: A photo sharing app where users can upload and tag photos. Requests: [Request-1: User-A POST /photos with parameters photo='IMG_20220101.jpg';Response-1: Unauthorized with parameters message='Sorry, only verified accounts can upload photos above 5MB in size.']|0
Context: A software development platform with 3 types of users Admin, Developer and Tester. Admins can perform all actions, Developers can view and change their own projects, Testers can only view and test projects. Requests: [Request-1: Tester-A GET /projects with parameters name='project-1';Response-1: OK with parameters message='The project you requested [project-1] was not found.']; [Request-2: Developer-B GET /projects with parameters name='project-2';Response-2: Error with parameters message='Failed to authenticate request, token not provided.']; [Request-3: Admin POST /users with parameters username='johndoe',password='JDoe1234';Response-3: Bad Request with parameters details='The username johndoe already exists.'] |0
Context: An online auction platform where customers can place bids on products. Requests: [Request-1: Customer-A POST /auction/bid with parameters productId='321',bidAmount='500';Response-1: Error with parameters message='Auction for this product has ended.']; [Request-2: Customer-B POST /auction/bid with parameters productId='123',bidAmount='500';Response-2: OK with parameters message='Your bid for this product has been placed.']|0
Context: A fitness tracking app leaks users' BMI and body fat percentage in response message Requests: [Request-1: User-A GET /profile with parameters userID='123'; Response-1: Bad Request with parameters error='Unable to calculate BMI, please update your height and weight', bmi=24, bodyFat=17]|0
Context: A social media app with 1 type of users User, where users can post and read posts only if they login. Requests: [Request-1: User-A POST /api/auth/login with parameters username='micheal',password='z45h23';Response-1: Unauthorized with parameters message='your password hint: my dog\'s name']|0
Context: a task management tool with 2 type of users Member and Owner, where Members can view and manage their own healthcare records. Requests: [Request-1: Member-A GET /healthcare with parameters MemberID='Member-A';Response-1: OK with parameters MemberID='Member-A', prescriptions=['Medicine A', 'Medicine B'], pastAppointments=[{'Owner': 'Dr. Johnson', 'Date': '05-05-2023'}, {'Owner': 'Dr. Smith', 'Date': '10-10-2023'}];Request-2: Member-B GET /healthcare with parameters MemberID='Member-B';Response-2: OK with parameters MemberID='Member-B', prescriptions=['Medicine C', 'Medicine D'], pastAppointments=[{'Owner': 'Dr. Williams', 'Date': '06-06-2023'}, {'Owner': 'Dr. Brown', 'Date': '12-12-2023'}];Request-3: Member-A POST /healthcare with parameters MemberID='Member-B', prescription='Medicine C';Response-3: OK with parameters message='Prescription added successfully']|1
Context: A cloud editing app with 2 types of users, Free Users and Premium Users. Free Users have a limited set of tools, while Premium Users have access to all tools. Requests: [Request-1: Free-User-A POST /edit/document with parameters docID=123456, content='<p>This is my document</p>'; Response-1: Forbidden with message='you must upgrade to Premium User to perform this action.'];|0
Context: A web app for ordering food online with 3 types of users Clerk, Clerk2 and Manager. Clerk and Clerk2 can only view and edit their own data. Manager can view and edit all data. Requests: [Request-1: Clerk-A GET /workshop/store/v1/shop/orders with parameters orderID='Clerk-A';Response-1: OK with parameters orderID='Clerk-A',totalPrice=12,items.1.name='ball',items.2.price=1;Request-2: Clerk-B GET /workshop/store/v1/shop/orders with parameters orderID='Clerk-B';Response-2: OK with parameters orderID='Clerk-B',totalPrice=155,items.1.name='hand',items.2.price=55;Request-3: Clerk-A GET /workshop/store/v1/shop/orders with parameters orderID='Clerk-B';Response-3: OK with parameters orderID='Clerk-B',totalPrice=155,items.1.name='hand',items.2.price=55]|1
Context: An online taxi booking with 2 types of users: Driver and Rider. Drivers can view, edit and accept bookings, while Riders can book rides and view their history. Requests: [Request-1: Rider-A PUT /rides with parameters rideID='111', newStart='Toronto', newDestination='Montreal', newPrice=120;Response-1: OK with parameters success=true, message='Ride 111 updated successfully!';Request-2: Rider-A GET /rides with parameters rideID='999';Response-2: Not Found with parameters success=false, message='Ride with id=999 not found';Request-3: Driver-B PUT /bookings with parameters bookingID='888', newStart='Montreal', newDestination='Toronto', newPrice=120, newDuration=100;Response-3: Unauthorized with parameters success=false, message='Invalid driver token';Request-4: Driver-B DELETE /bookings with parameters bookingID='444', newContent='{""""""""status"""""""": """"""""cancelled""""""""}';Response-4: OK with parameters success=true, message='Booking 444 cancelled successfully!'; Request-5: Driver-C PUT /bookings with parameters bookingID=""""""""555""""""""; Response-5: Forbidden with parameters success=false, message='you are not authorized to accept booking with id=555';]"""""""|0
Context: A healthcare app leaks patient's test results in response message without consent Requests: [Request-1: Paperwork-Clerk GET /patient/results with parameters name='Susanne Miller'; Response-1: OK with parameters results='Blood test: Cholesterol level 220, Normal range: less than 200, High Risk']|0
Context: A hobby social network in which Persons can share files with other Persons or public. Only the owner of a file should be able to modify its attributes.;Request-1: Person-A POST /bff/system/files with parameters content='Example content', access=public;Response-1: OK with parameters url='/files/public/12345/';Request-2: Person-B GET /bff/system/files with parameters fileId='12345';Response-2: OK with parameters content='Example content', access=public;Request-3: Person-B PUT /bff/system/files with parameters fileId='12345', content='Modified content';Response-3: 200 Ok with parameters fileId='12345',content='Modified content',access=public;Request-4: Person-A PUT /bff/system/files with parameters fileId='12345', access=private;Response-4: OK with parameters url='/files/private/12345/';Request-5: Person-B GET /bff/system/files with parameters fileId='12345';Response-5: Not Found with parameters errorCode=404,errorMessage='The file was not found.'|1
Context: An ecommerce app with 3 types of users Customer, Merchant and Admin. Customers and Merchants can only view and edit their own data. Admins can view and edit all data. Requests: [Request-1: Customer-A POST /workshop/api/auth/login with parameters username='micheal',password='123';Response-1: Unauthorized with parameters success=false,message='123 is incorrect password';Request-2: Customer-B POST /workshop/api/auth/login with parameters username='beatrice',password='123123';Response-2: OK with parameters token='uYda27...']|2
Context: A video sharing platform with 2 types of users Creator and Viewer where each creator can only see their own videos. Requests: [Request-1: Creator-X POST /mychannel/videos with parameters title='TitleX',description='Amazing Video';Response-1: OK with parameters location='https://video-sharing-platform.com/create/video/Creator-X/video-1-YT-4K-2.12.2022.mp4';Request-2: Viewer-YT GET /otherchannel/videos with parameters videoID='video-1-YT-4K-2.12.2022';Response-2: Forbidden with parameters message='Access denied! Video Creator-X/video-1-YT-4K-2.12.2022.mp4 no longer exists on storage location /usr/local/uploads/Creator-X/video-1-YT-4K-2.12.2022.mp4']|2
Context: A social media platform 'FriendsZone' that allows people to connect with one another. Requests: [Request-1: User-A POST /api/send-friend-request with parameters friendID='User-B';Response-1: OK with parameters message='Friend request has been sent successfully';Request-2: User-B POST /api/accept-friend-request with parameters friendID='User-A';Response-2: OK with parameters message='You are now friends with User-A';Request-3: User-A POST /api/send-friend-request with parameters friendID='User-C';Response-3: OK with parameters message='Friend request has been sent successfully';Request-4: User-C GET /api/friend-requests with parameters;Response-4: OK with parameters friendRequests=['User-A'];Request-5: User-C POST /api/accept-friend-request with parameters friendID='User-A';Response-5: Forbidden with parameters message='Cannot accept friend request from User-A as they have already reached the maximum number of friends allowed'].|0
Context: A video streaming app with 2 types of users, Subscriber and Content Creator. Subscribers can watch videos of content creators, while content creators can upload and edit their own videos. Requests: [Request-1: POST subscriber/login with parameters email='lisa.smith@gmail.com',password='lisapwd';Response-1: OK with parameters message='Welcome, Lisa!'; Request-2: ContentCreator-A PUT /videos with parameters title='How to make a perfect cup of tea',thumbnail='mov034-15.jpg', file='cupoftea.mov';Response-2: Unauthorized with parameters error='credentials not found for unauthenticated user'; Request-3: ContentCreator-B PUT /videos with parameters title='DIY Greenhouse',thumbnail='mov034-15.jpg', file='greenhouse.mov';Response-3: Unauthorized with parameters error='credentials not found for unauthenticated user'; ]|0
Context: A social media app with 2 type of users User and Admin where users can DM each other. Requests: [Request-1: User-A POST /messages/send with parameters to='User-B',content='hello!';Response-1: Error with parameters message='unhandled-packet: Invalid packet format. Unable to parse packet']|2
Context: A social network app, where users can edit their posts. Requests: [Request-1: User-A PUT /posts/1/edit with parameters title='Goodbye world',content='This is my last post!';Response-1: Not Acceptable with parameters error='Javascript code detected in the request payload']|0
Context: A web application that allows customers to purchase items online, with 3 types of users - customer, staff and admin. Customers can register, browse and purchase items. Staff can add, update and delete items. Admin can manage all users and access all data. Requests: [Request-1. Customer-A POST /users/create with parameters username='johndoe', password='secret'; Response-1: Unauthorized with parameters message='Error creating account, password too weak'; Request-2: Customer-B GET /items; Response-2: Error with parameters message='basket-ball.jpg is not available'; Request-3: Staff PUT /items with parameters itemId='item-A', itemName='Laptop', itemPrice='1000$, Response-3: Error with parameters message='Cannot update the item name right now.']; |0
Context: An online library with 2 types of users User and Admin where Users can browse and borrow books. Admins can view all books and borrow history. Requests: [Request-1: User-1 GET /books/search with parameters title='The Catcher in the Rye';Response-1: Error with parameters details='Search failed, invalid search criteria. Please try again']|0
Context: A ride-hailing app with 2 types of users - drivers and riders. Riders can request a ride, track the driver and rate the service. Drivers can accept / reject rides and view their earnings. Requests: [Request-1: Rider-A GET /rides/nearby; Response-1: Error with parameters message='Could not find any drivers nearby'; Request-2: Driver-B POST /accept-ride with parameters rideId='rider-C-ride-1'; Response-2: Error with parameters message='Ride has already been accepted'; Request-3: Rider-B GET /ride-progress with parameters rideID='ride-A'; Response-3: Error with parameters message='Ride canceled, rider already picked up by another driver']; |0
Context: A hotel booking app with 2 types of users: Guest and Manager. Guests can view and book rooms, while Managers can view and modify rooms information. Requests: [Request-1: Guest-A GET /available-rooms with parameters date='November 12, 2022'; Response-1: Bad Request with parameters message='Unable to find data for November 12, 2022.'; Request-2: Manager-A PUT /rooms with parameters roomId='100', name='Deluxe Room', beds='2', price='200'; Response-2: OK with parameters message='Room information has been updated successfully.']|0
Context: A logistics management system, where users can track their packages. Requests: [Request-1: User-A GET /packages with parameters trackingId='ffd78sjkl';Response-1: NotFound with parameters message='Package with tracking ID ffd78sjkl not found on this account']|0
Context: An online banking application where customers can view their account balances and transaction history. Requests: [Request-1: Customer-A GET /api/account/history with parameters startDate='01-01-2022', endDate='01-07-2022'; Response-1: Forbidden with parameters message='Invalid date format provided, Expected format is dd-mm-yyyy.'] |0
Context: An online file sharing app with 2 type of users Student and Privilaged-User where each Student can only access and modify their own orders. Privilaged-User can view all orders. Requests: [Request-1: Student-A GET /backend//orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Student-B GET /backend//orders with parameters orderID='Order-A';Response-2: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Completed';Request-3: Student-A PUT /backend//orders with parameters status='Refunded';Response-3: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Refunded';Request-4: Student-B PUT /backend//orders with parameters orderID='Order-A',status='Delivered';Response-4: Created with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-5: Privilaged-User GET /backend//orders with parameters orderID='Order-A';Response-5: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered']|1
Context: A mobile app with 2 types of users Standard and Premium, where Standard users have limited access. Requests: [Request-1: Standard-User-A GET /api/folder with parameters folderID='23f387';Response-1: OK with parameters content=[{""""""""title"""""""": """"""""File-A"""""""", """"""""type"""""""": """"""""pdf"""""""", """"""""size"""""""": """"""""40KB"""""""", """"""""folder"""""""": 23f387,""""""""url"""""""":""""""""/api/folder/file/23f387/File-A""""""""}]'];Request-2: Premium-User-B GET /api/folder with parameters folderID='23f387';Response-2: OK with parameters content=[{""""""""title"""""""": """"""""File-A"""""""", """"""""type"""""""": """"""""pdf"""""""", """"""""size"""""""": """"""""40KB"""""""", """"""""folder"""""""": 23f387,""""""""url"""""""":""""""""/api/folder/file/23f387/File-A""""""""},{""""""""title"""""""": """"""""File-B"""""""", """"""""type"""""""": """"""""jpeg"""""""", """"""""size"""""""": """"""""150KB"""""""", """"""""folder"""""""": 23f387,""""""""url"""""""":""""""""/api/folder/file/23f387/File-B""""""""}], downloadLimit=10GB/mth']"""""""|0
Context: An online shopping website leaks order history of customers in response message Requests: [Request-1: User-A GET /orderhistory with parameters userID='123'; Response-1: OK with parameters orderHistory=[{'Order-ID': 001', 'Items':['Shoes', 'Shirt']}, {'Order-ID': 002', 'Items':['Pants', 'Socks', 'Hat']}]]|0
Context: an stats dashboard for a mobile app in which Users can share files with other Users or public. Only the owner of a file should be able to modify its attributes.;Request-1: User-A POST /open/push/files with parameters content='Example content', access=public;Response-1: OK with parameters url='/files/public/12345/';Request-2: User-B GET /open/push/files with parameters fileId='12345';Response-2: OK with parameters content='Example content', access=public;Request-3: User-B PUT /open/push/files with parameters fileId='12345', content='Modified content';Response-3: 200 Ok with parameters fileId='12345',content='Modified content',access=public;Request-4: User-A PUT /open/push/files with parameters fileId='12345', access=private;Response-4: OK with parameters url='/files/private/12345/';Request-5: User-B GET /open/push/files with parameters fileId='12345';Response-5: Not Found with parameters errorCode=404,errorMessage='The file was not found.'|1
Context: An invoicing app with 3 types of user Customer, Staff and Admin. Customers can view their own invoices and pay them while staff members can view all invoices, create new ones and mark as paid. Admins have access to all app functionalities. Requests: [Request-1: Staff-A POST /invoices with parameters customerId=12,amount=1000,date='2022-10-01';Response-1: OK with parameters message='The invoice has been created successfully';Request-2: Admin GET /users with parameters;Response-2: OK with parameters users=[{id:'1234',name:'Admin',surname:'User',role:'admin',password:'$2b$10$MNBI8UbMhwKjseymc/Je..(hash value)'}{id:'12',name:'John',surname:'Doe',role:'Staff',password:'$2b$10$6AtsoDixJ1gKZZ9zmDz1r.(hash value)'},{id:'10',name:'Jane',surname:'Smith',role:'Customer',password:'$2b$10$/m1Y7WcU2QdqwUCTKh5b7f(uhash value)'}];Request-3: Staff-B POST /payInvoice with parameters invoiceId=12;Response-3: OK with parameters message='The invoice #12 has been marked as paid';Request-4: Customer-A GET /invoices with parameters;Response-4: OK with parameters invoices=[{id:10299,amount:1000,status:PAID, date_paid:'2022-10-10',customer:'Customer-A',staff:'Staff-A'},...]];|0
Context: A cloud-based storage app with 2 type of users User and Admin, where each user can only view and download their own files. Admins cannot view user files.Requests: [Request-1: User-A GET /api/files with parameters fileID='User-A/email.docx';Response-1: OK with parameters fileID='User-A/email.docx',content='Hello World!',size=12KB;Request-2: User-B POST /api/files with parameters fileContent='New Content';Response-2: OK with parameters fileID='User-B/photos/beach.jpg',content='New Content',size=1.5MB;Request-3: Admin GET /api/files with parameters fileID='User-A/email.docx';Response-3: OK with parameters message='file not found']|0
Context: A video streaming platform where users can upload, stream and download their own videos. Requests: [Request-1: User-A POST /api/video/upload with parameters videoName='my_dog.mp4', videoSize='15 MB'; Response-1: Error with parameters message='Failed to get file information'; Request-2: User-A GET /videos/my_dog; Response-2: Error with parameters message='Cannot play video my_dog.mp4'; Request-3: User-B POST /api/video/upload with parameters videoName='SecretLab-Demo.mp4', videoSize='200 MB'; Response-3: Error with parameters message='Upload failed, not enough space in your account']; |0
Context: Travel booking website with 1 type of users Customer, where customers book their own flights. Requests: [Request-1: Customer-A PUT /store/login with parameters email='micheal@gmail.com',password='ABC';Response-1: Bad Request with parameters code='400',error='php-hash-lib: cannot hash, digest size surpassed']|2
Context: Online dating app with 2 type of users Male and Female, where users can search and view profiles of the opposite gender. Requests:[Request-1: Male-A GET /profile with parameters id='3242';Response-1: Error with parameters message='Sorry, account has been banned for inappropriate content'];|0
Context: A stock management system with 3 types of users - admin, staff and customer. Customers can browse and buy items, staff can add and update items, and the admin can view all logs and track inventory. Requests:[Request-1: Staff-A PUT /items with parameters itemId='item-C', itemName='Mouse', itemStock='0'; Response-1: Error with parameters message='item-C is out of stock'; Request-2: Customer-B POST /purchase with parameters itemId='item-D'; Response-2: Error with parameters message='Not Enough Money in your wallet, balance: $25'; Request-3: Admin GET /logs; Response-3: Error with parameters message='Cannot get logs, insufficient privileges']; |0
Context: A social media platform with 2 types of users - normal users and administrators. Regular users can upload images, view others' images and edit their account settings. Administrators can perform all the functions of a normal user as well as ban users and access user data. Requests: [Request-1: Normal User - A GET /images/india.jpeg; Response-1: Error with parameters message='You do not have permission to access india.jpeg'; Request-2: Normal User - B PATCH /settings; Response-2: OK with parameters message='Settings updated successfully'; Request-3: Administrator PUT /ban with parameters userId='user-C'; Response-3: OK with parameters message='User banned successfully']; |0
Context: A transportation app with 2 types of users, Passengers and Drivers. Passengers can view their ride history, and Drivers can view all rides including the pickup and drop-off locations. Requests: [Request-1: Driver-A GET /rides with parameter rideID=12345; Response-1: Unauthorized with message='you do not have access to this ride pickup and drop-off information.'];|0
Context: An online file sharing app with 2 type of users Traveller and Expert for advertisements where each Traveller can only see their own listings. Experts can view and delete all listings. Requests: [Request-1: Traveller-A Patch /market/Traveller/[Traveller-A-id]/items/[Traveller-A-itemId] with parameters name='Item-A';Response-1: OK with parameters itemId='Traveller-A-itemId',name='Item-A',price=10.5,quantity=103;Request-2: Traveller-A Get /market/Traveller/[Traveller-A-id]/items/[Traveller-B-itemId] with parameters;Response-2: OK with parameters itemId='Traveller-B-itemId',name='Item-B',price=303.8,quantity=52;]|1
Context: A ticket booking app with 2 types of users: User and Moderator. Users can view and book concert tickets, while Moderators can view and remove fake or illegal tickets. Requests: [Request-1: User-A GET /concert with parameters performer='Taylor Swift'; Response-1: Bad Request with parameters message='No concert found for Taylor Swift'; Request-2: Moderator-A DELETE /tickets with parameters id='55500001'; Response-2: Error with parameters message='Ticket with id=55500001 cannot be removed.']|0
Context: A travel e-commerce platform with different user roles of Visitors, Travel agents and Administrators. Requests: [Request-1: Travel agent POST /bookingRequest with parameters origin='Lagos', destination='Nairobi', travelDate='2022-10-18', passengerCount=2; Response-1: Error with parameters message=""""""""Booking request failed. Invalid passenger count for the travel date.""""""""; Request-2: Administrator GET /generateReport with parameters reportYear='2022'; Response-2: Error with parameters message=""""""""Unable to fetch requested report. Invalid year parameter: 20220.""""""""; Request-3: Visitor POST /register with parameters username='janedoe1', email='janedoe1@gmail.com', password='123Password!'; Response-3: Error with parameters message=""""""""Registration failed. Invalid username, alphanumeric characters only.""""""""]"""""""|0
Context: An e-commerce app with 2 types of users Customer and Admin, where customers can purchase products and admins can view all orders and manage stock. Requests: [Request-1: Customer-A PUT /cart/add with parameters product='Shoes-310', quantity='2';Response-1: Error with parameters message='Cannot add shoes to cart, size 12 out of stock']|0
Context: Travel booking website with 1 type of users Customer, where customers book their own flights. Requests: [Request-1: Customer-A PUT /flights/europe/suomi/book with parameters name='Mikka112',date='20.10.2022';Response-1: Bad Request with parameters message='Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory, total=15394 available=13, core dumped']|2
Context: A banking app with 3 types of users Customer, Manager and Admin. Customers can view their own account balances and transactions. Managers can view accounts of their own branch. Admins can view all accounts and perform admin functions. Requests: [Request-1: Manager-A GET /accounts/1045830145/balance;Response-1: Unauthorized with parameters success=false,message='Unauthorized: 2045780368 is not authorized to access account 1045830145';Request-2: Admin GET /accounts/1045830145/transactions with parameters;Response-2: OK with parameters transactions=[{time:'2022-10-10T10:23:31',amount:150.00,type:['DEBIT','TRANSFER'],description:'Transfer to Customer-A',account:1045830145, account_owner: 'Customer-A',transaction_id:1146894},...]]|0
Context: An online-library with different user types such as guests, subscribers and library staff. Requests: [Request-1: Subscriber POST /searchBook with parameters title='Harry Potter and the half-blood prince'; Response-1: Error with parameters message=""""""""Book not found: Multiple entries found under the title 'Harry Potter and the half-blood prince'.""""""""; Request-2: Guest POST /register with parameters name='Jane Doe', email='janedoe@gmail.com', password='Password123'; Response-2: Error with parameters message=""""""""Registration failed: Email domain janedoe@gmail.com not allowed. Please try again using a valid email domain.""""""""; Request-3: Library Staff PUT /bookInventory/supply with parameters bookName='To kill a mockingbird', quantity=50; Response-3: Error with parameters message=""""""""Stock supply failed. Quantity to be added should range between 1 and 25. Error occurred on book with id 246-01-35.""""""""]"""""""|0
Context: Online Banking app with Admin, Teller and Customer roles. Requests: [Request-1: Teller-A POST /transfers with parameters amount='500$';Response-1: Error with parameters details='Account 765798 is locked. Try again after 24 hours']; |0
Context: A video sharing app where users can upload and watch videos. Requests: [Request-1: User-A GET /videos with parameters videoName='cutekitten.mp4';Response-1: Unauthorized with parameters message='User-A is not subscribed to this video channel. Please subscribe and try again.']|0
Context: A music streaming app with 1 type of users Customer. Requests: [Request-1: Customer-A POST /streaming/pay with parameters cardNumber='1234123412341234',cvv='567',amount='9.99';Response-1: Error with parameters message='cardNumber=1234123412341234, cvv=567 are invalid'];|2
Context: An online food ordering application where customers can order food from multiple restaurants. Requests: [Request-1: Customer-A POST /api/order with parameters restaurant='Pizza Palace', items=['Large pizza', 'Coke', 'Garlic Bread'], deliveryAddress='10 Main St, New Town'; Response-1: Forbidden with parameters message='The delivery address must be within 5 miles radius of the restaurant.'] |0
Context: A ride-hailing service where passengers can book rides. Requests: [Request-1: User-A PUT /rides with parameters pickupLocation='Central Station',dropoffLocation='Harbor Front';Response-1: Unauthorized with parameters message='User-A's account has been suspended due to poor ratings. Please contact customer support to make an appeal.']|0
Context: A banking app, where customers can view their accounts. Requests: [Request-1: Customer-A POST /banking/checkbal with parameters accountNo='2034-XX-014-1';Response-1: Error with parameters message=' cannot find account with account number: 2034-XX-014-1, check your account number again']; [Request-2: Customer-A POST /banking/checkbal with parameters accountNo='2034-XX-014-5';Response-1: OK with parameters message='You currently have $5,000 in this account']|0
Context: A cloud-based storage app with 2 type of users User and Admin, where each user can only view and download their own files. Admins cannot view user files. Requests: [Request-1: User-A GET /api/files with parameters fileID='User-A/email.docx';Response-1: OK with parameters fileID='User-A/email.docx',content='Hello World!',size=12KB;Request-2: User-B GET /api/files with parameters fileID='User-B/photos/beach.jpg';Response-2: OK with parameters fileID='User-B/photos/beach.jpg', content ['...'],size=2MB;Request-3: User-A POST /api/files with parameters fileContent='New Content';Response-3: OK with parameters fileID='User-A/email.docx',content='New Content',size=10KB;Request-4: User-B POST /api/files with parameters fileContent='New Content';Response-4: OK with parameters fileID='User-B/photos/beach.jpg',content='New Content',size=1.5MB;Request-5: Admin GET /api/files with parameters fileID='User-A/email.docx';Response-5: OK with parameters message='Cannot parse email.docx: 'from=User-A@gmail.com to=lover@gmail.com title=Secret body=6s76sad/&TA29' is missing quotes']|2
Context: A healthcare app with 3 types of users Staff, Doctors and Patients. Staff members can add new patients to the system, patients can view their own medical records, and doctors can view all medical records. Requests:[Request-1: Staff-A POST /addPatient with parameters name='David',email='david@gmail.com',dob='1992-01-01',address='234 Main St', ssn='327-24-4158';Response-1: OK with parameters message='New patient added successfully! Patient ID: 111';Request-2: Doctor-A GET /allPatients with parameters;Response-2: OK with parameters patients=[{ssn='327-24-4158',name='David',email='david@gmail.com',dob='1992-01-01',address='234 Main St',gender='Male',medical_history=[{date:'2020-01-01',diagnosis:'Flu'},...]];Request-3: Patient-A GET /medicalHistory with parameters;Response-3: OK with parameters medical_history=[{date:'2020-01-01',diagnosis:'Flu'},...];Request-4: Patient-B GET /medicalHistory with parameters;Response-4: Forbidden with parameters error='Patient is not authorized to access a medical record'; |0
Context: A flight booking portal with 2 type of users Developer and Privilaged-User,where Privilaged-User can view and update Developer details for their own department. Requests: [Request-1: Privilaged-User-A GET /Developers with parameters departmentID='A';Response-1: OK with parameters Developer-ID='Emp-123', name='John Doe', designation='Software Engineer', salary=5000;Request-2: Privilaged-User-B GET /Developers with parameters departmentID='B';Response-2: OK with parameters Developer-ID='Emp-456', name='Jane Doe', designation='Business Analyst', salary=6000;Request-3: Privilaged-User-B PUT /Developers with parameters Developer-ID='Emp-123', salary=5500;Response-3: OK with parameters message='Salary updated successfully']|1
Context: A financial app with 3 types of users Investor, Broker and Admin. Each investor has an investment portfolio which they can view and modify, brokers can only view the investment portfolios of their clients. Admins can view and modify all data. Requests: [Request-1: Investor-A GET /api/portfolio with parameters portfolioID='Portfolio-A';Response-1: Forbidden with parameters message='You cannot modify Portfolio-A as it does not belong to you';Request-2: Broker-A GET /api/portfolio with parameters portfolioID='Portfolio-B';Response-2: OK with parameters portfolioID='Portfolio-B',investments=['Tesla','Facebook','Google'],values=['5','2.5','1.2'];Request-3: Investor-C GET /api/portfolio with parameters portfolioID='Portfolio-D';Response-3: Forbidden with parameters message='You cannot view Portfolio-D as it does not belong to you'].|0
Context: An app with 3 types of users: Manager, Clerk and Customer. The Manager can create, update and delete orders, generate transaction reports and view statistics, the Clerk can process orders and view transactions, and the Customer can create orders, view their previous orders and make payments. Requests: [Request-1: Customer POST /orders with parameters product='Laptop'; Response-1: Error with parameters message='Card details missing.']; Request-2: Clerk POST /orders/update with parameters orderId='123', status='shipped'; Response-2: Error with parameters message='OrderId does not exist';Request-3: Manager GET /transactions/2022/06; Response-3: Error with parameters message='No transaction found for the month of June.';Request-4: Customer POST /orders with parameters product='Smart Watch'; Response-4: Error with parameters message='Payment was unsuccessful.';Request-5: Manager GET /employees; Response-5: Error with parameters message='Cannot pull Employees list from database';Request-6: Customer GET /orders; Response-6: Error with parameters message='Access denied. Please contact Customer Care.';Request-7: Clerk POST /orders/ship with parameters orderId='456'; Response-7: Error with parameters message='Product currently out of stock';Request-8: Manager GET /orders/userData; Response-8: Error with parameters message='no data found for user';Request-9: Clerk GET /transactions/2022/05; Response-9: Error with parameters message='invalid month selected';Request-10: Customer POST /orders with parameters product='Canon EOS R6'; Response-10: Error with parameters message='Invalid Zip Code';|0
Context: A payment service with 2 types of users Customer and Merchant, where customers can pay merchants and merchants can view their transactions. Requests: [Request-1: Customer-A POST /payment with parameters recipient='Merchant-B', amount='100USD';Response-1: Error with parameters message='Payment failed, Merchant-B account is locked']|0
Context: A banking platform with 3 types of users Customer, Teller and Manager. Customers can only view and make transactions with their own accounts. Tellers can view and make transactions on all customer accounts. Managers can view all transactions and manage accounts. Requests: [Request-1: Teller-A POST /transactions with parameters amount='100', debitAccount='1234', creditAccount='5678';Response-1: Error with parameters message='Invalid debit account number.'], [Request-2: Customer-A GET /accounts with parameters accountNumber='5678';Response-2: OK with parameters message='Your account balance is $10,000.'], [Request-3: Manager DELETE /users with parameters userId='2345'; Response-3: Error with parameters message='User not found.'], [Request-4: Customer-B POST /transactions with parameters amount='50', debitAccount='5678', creditAccount='2345';Response-4: Error with parameters message='Insufficient funds in account 5678.'] |0
Context: A video conferencing app that allows people to communicate with one another. Requests: [Request-1: User-A POST /api/call-contact with parameters contactID='User-B';Response-1: OK with parameters message='Connecting you to User-B';Request-2: User-B POST /api/receive-call with parameters callerID='User-A';Response-2: OK with parameters message='You are talking to User-A';Request-3: User-C POST /api/call-contact with parameters contactID='User-B';Response-3: Forbidden with parameters message='Cannot call User-B as they have put you on their blocked list';Request-4: User-A GET /api/call-details with parameters callID='1234';Response-4: OK with parameters duration='120',callStatus='Completed';Request-5: User-C POST /api/blocked-users with parameters user-ID='User-B';Response-5: OK with parameters message='You have successfully blocked User-B'].|0
Context: A Sales reporting website with 2 type of users Member and Owner,where Owner can view and update Member details for their own department. Requests: [Request-1: Owner-A GET /Members with parameters departmentID='A';Response-1: OK with parameters Member-ID='Emp-123', name='John Doe', designation='Software Engineer', salary=5000;Request-2: Owner-B GET /Members with parameters departmentID='B';Response-2: OK with parameters Member-ID='Emp-456', name='Jane Doe', designation='Business Analyst', salary=6000;Request-3: Owner-B PUT /Members with parameters Member-ID='Emp-123', salary=5500;Response-3: OK with parameters message='Salary updated successfully']|1
Context: A banking app with 2 types of users Customer and Bank Officer where customers can view their account details. Bank Officers can view all accounts. Requests: [Request-1: Customer-1 /account/summary with parameters accountId='012345';Response-1: Forbidden with parameters error='invalid token for account 012345']|0
Context: An e-commerce website, where customers can view and purchase items. Requests: [Request-1: Customer-A DELETE /orders/1 with parameters;Response-1: Not Found with parameters message='No order with ID 1 found on this account']; [Request-2: Customer-A DELETE /orders/2 with parameters;Response-2: Forbidden with parameters message='This order ID is associated with a different account']|0
Context: A social media platform application where users can create and manage their own social profiles. Requests: [Request-1: User-A POST /api/profile with parameters name='Lucas Johnson', email='lucas.johnson@mail.com', password='123456', age=28; Response-1: Error with parameters message='Password must be at least 10 characters.'] |0
Context: A cloud-based storage app with 2 type of users User and Admin, where each user can only view and download their own files. Admins cannot view user files. Requests: [Request-1: User-A POST /api/files with parameters file='document.pdf';Response-1: OK with parameters message='User-A uploaded file document.pdf']|0
Context: An academic platform with 3 types of users Student, Professor and Admin. Students can only view and modify their own grades. Professors can view and modify grades of students in their courses. Admins can view and modify all grades. Requests: [Request-1: Student-A GET /grades with parameters courseId='101';Response-1: OK with parameters message='Your grade in course 101 is B.'], [Request-2: Professor-A POST /grades with parameters courseId='101', studentId='2345', grade='A';Response-2: Error with parameters message='Invalid grade value.'], [Request-3: Admin DELETE /users with parameters userId='2345';Response-3: Error with parameters message='User not found'], [Request-4: Student-B GET /grades with parameters courseId='102'; Response-4: Error with parameters message='Could not access course 102.'] |0
Context: An audio streaming app with 2 types of users: Subscriber and Admin. Subscribers can access and listen to music according to their subscription plan, while Admins have full access to view, modify and delete music according to their license agreement. Requests: [Request-1: Subscriber-A GET /library with parameters title='Best 2022 songs'; Response-1: Error with parameters message='Title not found'; Request-2: Admin-A DELETE /library with parameters title='Cancelled license songs'; Response-2: OK with parameters message='The songs were deleted successfully.']|0
Context: A social media platform with 2 types of users User and Admin where Users can share posts with friends and followers. Admins can view all posts. Requests: [Request-1: User-A PUT /posts with parameters text='hello';Response-1: OK with parameters postID='Post-A',text='hello';Request-2: User-B PUT /posts with parameters text='world';Response-2: OK with parameters postID='Post-B',text='world';Request-3: User-A GET /posts with parameters userID=User-B;Response-3: Forbidden with parameters error='Access to User-B's posts is restricted';]|0
Context: An online library where users can read books. Requests: [Request-1: User-A GET /library/books with parameters bookID='book-123';Response-1: Error with parameters message='book is not available at the moment.'];|0
Context: A stock trading platform with 1 type of users Investor. Requests: [Request-1: Investor-A POST /trade/list with parameters stock='TSLA',quantity='10',price='560';Response-1: Error with parameter message='""""""""ticker"""""""":""""""""TSLA"""""""",""""""""errorMessage"""""""":""""""""invalid price"""""""",""""""""errorTicket"""""""":""""""""7fuALUZGADC3NSLWDb+G+4V9va8j9jKq4WqJ0RkrElo="""""""",""""""""orderType"""""""":""""""""Buy/Mkt"""""""",""""""""subsidiaryId"""""""":1,""""""""accountId"""""""":13,""""""""isDirected"""""""":false'];"""""""|0
Context: A banking app with 2 types of users Customer and Admin where each customer can view their accounts and make transactions. Admins can view and modify all accounts.Requests: [Request-1: Customer-A POST /api/banking/transfer with parameters from='123456789',to='987654321',amount=2500;Response-1: OK with parameters details='Transfer completed successfully! Your balance is now 5000 USD.';Request-2: Customer-A POST /api/banking/transfer with parameters from='123456789',to='987654321',amount=25000;Response-2: Internal Server Error with parameters message='Insufficient balance, you have only 500 USD in your account.']|0
Context: A medical COVID-19 Vaccination management system with an Admin, Doctor and User. Requests: [Request-1: User POST /register with parameters firstName='Jane', lastName='Doe', email='janedoe@gmail.com', password='StrongPassword12*', medicalHistory='No Allergies'; Response-1: Error with parameters msg=""""""""The email address janedoe@gmail.com has already been registered.""""""""; Request-2: Doctor PUT /appointment with parameters date='2022-11-05', time='10:00', patientEmail='joedoe@yahoo.com'; Response-2: Error with parameters message='Cannot schedule the appointment. The patient joedoe@yahoo.com is already scheduled on the same day and time.'; Request-3: Admin DELETE /deleteUser with parameters email='johnsmith@yahoo.com'; Response-3: Error with parameters message='The request to delete user with email johnsmith@yahoo.com was not processed due to internal server errors.']"""""""|0
Context: An ecommerce app with 2 types of users Customer and Seller, where sellers can add/edit/delete their own products and view their own orders. Customers can only view products and place orders. Requests: [Request-1: Seller-A PUT /ecommerce/api/products with parameters productName='Product-A',units='10';Response-1: Error with parameters message='There was an error processing your request.'];|0
Context: An online appointment booking application where customers can book appointments with doctors. Requests: [Request-1: Customer-A POST /api/appointment with parameters doctor='Dr. John Doe', date='02-09-2022', time='10:30 AM'; Response-1: Error with parameters message='The selected time slot is already booked.'] |0
Context: A banking system with 2 types of users: User and Manager. Users can manage and view their own accounts, while Managers can view and edit all accounts. Requests: [Request-1: User-A PUT /accounts with parameters accountId='345', newName='New name', newPIN='1234';Response-1: OK with parameters success=true, message='Account 345 updated successfully!';Request-2: User-A PUT /accounts with parameters accountId='999', newName='Other account name', newPIN='0987';Response-2: Forbidden with parameters success=false, message='you are not authorized to access account with id=999';Request-3: Manager DELETE /accounts with parameters accountId='111', newContent='{""""""""balance"""""""": 200}';Response-3: OK with parameters success=true, message='Account 111 deleted successfully!';Request-4: Manager POST /accounts with parameters newAccountName='Company account', newContent='{""""""""balance"""""""": 5000}';Response-4: OK with parameters success=true, message='Company account created successfully!';]"""""""|0
Context: A web-based calendar app for scheduling appointments - users can only see their own agenda. Requests: [Request-1: User-A GET /agenda with parameters date='10-10-2022';Response-1: Error with parameters reason='Database error: could not connect to MySQL: boathouse.local'];|2
Context: A social media platform with 2 types of users User and Admin where Users can only view and modify their own posts. Admins can view every post. Requests: [Request-1: User-1 /post/history with parameters postId='ABCD';Response-1: Forbidden with parameters error='account not found for post with id ABCD']|0
Context: A healthcare platform with 2 type of users Patient and Doctor, where patients can view and manage their own healthcare records. Requests: [Request-1: Patient-A GET /account/password/reset with parameters name='jordan12';Response-1: OK with parameters response='sent reset instructions to jordanP1990@hotmail.com. If this is not your email please check the name you provided.']|2
Context: a supply chain management system with 3 types of users Person, Person2 and Manager. Person and Person2 can only view and edit their own data. Manager can view and edit all data. Requests: [Request-1: Person-A GET /workshop/integration//shop/orders with parameters orderID='Person-A';Response-1: OK with parameters orderID='Person-A',totalPrice=12,items.1.name='ball',items.2.price=1;Request-2: Person-B GET /workshop/integration//shop/orders with parameters orderID='Person-B';Response-2: OK with parameters orderID='Person-B',totalPrice=155,items.1.name='hand',items.2.price=55;Request-3: Person-A GET /workshop/integration//shop/orders with parameters orderID='Person-B';Response-3: OK with parameters orderID='Person-B',totalPrice=155,items.1.name='hand',items.2.price=55]|1
Context: A streaming platform with different user types of subscribers and administrators. Requests: [Request-1: Subscriber POST /searchMovie with parameters movieTitle='Money Heist', genre='Action'; Response-1: Error with parameters message='Could not find movie. The Genre Action is not supported'; Request-2: Subscriber POST /addMovieToPlaylist with parameters movieId='2456cb', playlistName='My Watch List'; Response-2: Error with parameters message='Error: Cannot add to playlist. The movieID 2456cb is not valid.'; Request-3: Administrator PUT /awardWinner with parameters nominationID='23457', awardCategory='Best Actor in a Limited Series'; Response-3: Error with parameters message='Failed to award winner. Nomination ID 23457 does not exist.' ]|0
Context: A document sharing platform with 2 types of users Writer and Reader, Writer can upload documents and share them with specific Readers. Readers can read the shared document. Requests: [Request-1: Writer-A POST /api/folder/upload with parameters fileName='mypaper01',conentType='html';Response-1: OK with parameters message='File uploaded. File name=mypaper01, File type=text/html'];Request-2: Reader GET /api/folder/read with parameters FileName='mypaper01';Response-2: OK with parameters message='File downloaded. File type=text/html, name=mypaper01']|0
Context: A hobby social network with 3 type of users Engineers, Engineer2s and Boss. The Engineers can create posts and see their own published/unpublished articles. Engineer2s can edit their own posts and all Engineers' posts, but cannot change the status of the posts. Bosss can edit anyone's articles and set the status for each one.;Request-1: Engineer-A GET /integration/view/posts;Response-1: OK with parameters posts=['Post-1', 'Post-2'];Request-2: Engineer2-A GET /integration/view/posts;Response-2: OK with parameters posts=['Post-1', 'Post-2', 'Post-3'];Request-3: Engineer2-B PATCH /integration/view/posts with parameters postID='Post-2',content='Updated Content',status='drafted';Response-3: OK with parameters postID='Post-2',content='Updated Content', status='drafted';Request-4: Boss PATCH /integration/view/posts with parameters postID='Post-2',content='Another Updated Content',status='published';Response-4: OK with parameters postID='Post-2',content='Another Updated Content', status='published’]|1
Context: An email platform leaks the contents of emails in response message Requests: [Request-1: User-A GET /inbox with parameters from='JohnSmith'; Response-1: OK with parameters emailSubject='Meeting Reminder', emailContent='Hi team, reminder that our weekly meeting is tomorrow at 10am. Agenda attached.']|0
Context: A ticket sales app with 2 types of users Guest and Admin where Guest can buy tickets for shows, take part in events. Admins can view all user accounts, and available events. Requests: [Request-1: Guest-A POST /events/booking with parameters guest_name='Tina',guest_email='tina@gmail.com',ticket_count=4;Response-1: OK with parameters message='Success! Please check your email tina@gmail.com for your ticket. Event:',eventName='Theatre Night',eventDate='20-10-2022';Request-2: Guest-B POST /events/booking with parameters guest_name='Stuart',guest_email='tina@hotmail.com',ticket_count=5;Response-2: OK with parameters message='Success! Please check your email tina@hotmail.com for your ticket. Event:',eventName='Theatre Night',eventDate='20-10-2022';Request-3: Admin GET /events/available with parameters;Response-3: OK with parameters events=['Theatre Night','Halloween Parade','Rock Concert'],accounts={'Tina':'tina@gmail.com', 'Stuart':'tina@hotmail.com'};]|0
Context: An e-learning platform with 2 types of users Student and Teacher. Students can access and modify their own courses, while teachers can view and edit all courses. Requests: [Request-1: Student-A PUT /courses with parameters courseID='34', newName='JavaScript', newMaterial='[{""""""""slides"""""""": """"""""Introduction to JavaScript"""""""", """"""""videoUrl"""""""": """"""""/videos/javaTutorial"""""""", """"""""quiz"""""""": """"""""Test your skills""""""""}]';Response-1: OK with parameters success=true, message='Course 34 updated successfully!';Request-2: Student-A GET /courses with parameters courseID='23';Response-2: Forbidden with parameters success=false, message='you are not authorized to access course with id=23';Request-3: Teacher DELETE /courses with parameters courseID='100', removedContent='{""""""""slides"""""""": """"""""Basic HTML"""""""", """"""""videoUrl"""""""": """"""""/videos/htmlTutorial""""""""}';Response-3: OK with parameters success=true, message='Course 100 deleted successfully!';Request-4: Teacher POST /courses with parameters newCourseName='React Crash Course', newContent='[{""""""""slides"""""""": """"""""Introduction to React"""""""", """"""""videoUrl"""""""": """"""""/videos/reactTutorial"""""""", """"""""quiz"""""""": """"""""Test your skills""""""""}]';Response-4: OK with parameters success=true, message='React Crash Course created successfully!';]"""""""|0
Context: A flight booking portal where reviews and ratings are given for specific businesses but Employees should not be able to modify others' reviews.Request-1: Employee-A POST /open/drive/business/123/review with parameters rating=4, comment='Nice place';Response-1: OK with parameters reviewID='Review-1234',businessID='Business-123',EmployeeID='Employee-A',rating=4,comment='Nice place';Request-2: Employee-B POST /open/drive/business/123/review with parameters rating=2, comment='Terrible place, poor customer service';Response-2: OK with parameters reviewID='Review-2345',businessID='Business-123',EmployeeID='Employee-B',rating=2,comment='Terrible place, poor customer service';Request-3: Employee-A PUT /open/drive/business/123/review with parameters reviewID='Review-2345',rating=1;Response-3: OK with parameters message='Review updated successfully’|1
Context: A social media app with 2 types of users: Registered User and Moderator. Registered Users can create, share, and edit their own posts, while Moderators can view and delete content violating the terms of service. Requests: [Request-1: Registered User-A POST /create-post with parameters title='My Birthday', content='Best day ever!'; Response-1: OK with parameters message='Your post has been created successfully.'; Request-2: Moderator-A DELETE /users-with-violating-posts with parameters postId='42'; Response-2: Error with parameters message='Post with postId 42 has been deleted.';]|0
Context: A weather website with two types of users, Advertiser and Registered User. Advertisers can create and place ads on the website, while registered users can view weather information for different cities. Requests: [Request-1: User-A POST /api/register with parameters username='james',email='james123@gmail.com',password='12345';Response-1: OK with parameters message='Registration successful';Request-2: Advertiser-A POST /api/ads with parameters width='375',height='50',image='myAd.png',link='https://www.google.com';Response-2: OK with parameters message='Ad successfully created';Request-3: User-A GET /api/cities with parameters zipCode='12345';Response-3: OK with parameters cities=['New York','Boston','Miami'];Request-4: RegisteredUser-B GET /api/city-weather with parameters city='New York';Response-4: OK with parameters temperature=25,uvIndex='moderate',windSpeed='17km/h',description='Sunny';Request-5: Advertiser-A PUT /api/ads with parameters addID='Ad-1',width='500',height='120',image='updatedImage.png',link='https://www.yahoo.com';Response-5: OK with parameters message='Ad successfully updated'].|0
Context: A travel insurance website with types of insurance packages. Customers can purchase the packages. Requests: [Request-1: Customer-A POST /travel/insurance/packages with parameters package='VIP';Response-1: Internal Server Error with parameters message='cannot link to payment service provider - bankservice.com']|2
Context: Telehealth app where users can talk to doctors online. Requests: [Request-1: Patient-A POST /api/booking with parameters doctorName='Dr. Johnson',appointmentDate='10.11.2022'; Response-1: OK with parameters message='booking successful. Your doctor is Dr. Johnson'; Request-2: Patient-B POST /api/booking with parameters doctorName='Dr. Smith',appointmentDate='11.11.2022'; Response-2: Unauthorized with parameters message='please log in to book an appointment']|0
Context: A restaurant management system with 3 types of users - customers, chefs and cashiers. Customers can order meals, cashiers can manage orders and receipts and chefs can mark orders as cooked and ready for pickup. Requests: [Request-1: Chef-A PUT /orders with parameters orderId='order-X', status='read-for-pickup'; Response-1: Error with parameters message='Cannot change order status to cooked'; Request-2: Cashier-B POST /receipts with parameters orderId='order-Y'; Response-2: Error with parameters message='Order not found'; Request-3: Customer-C GET /menu with parameters; Response-2: Error with parameters message='Could not fetch the menu']; |0
Context: A GPS tracking system with 2 types of users, Driver and Manager. Drivers can view & modify their own routes while Managers can view all data. Requests: [Request-1: Driver-A POST /api/routes with parameters routeID='Route-1',location='28.7041° N, 77.1025° E';Response-1: OK with parameters message='Route-1 added successfully';Request-2: Manager-A GET /api/routes with parameters locationRange='28.740 & 77.020 & 28.686 & 77.054';Response-2: OK with parameters routes=[{routeID='Route-1',location='28.7041° N, 77.1025° E',driver='Driver-A'}, {routeID='Route-2',location='28.7251° N, 77.0177° E',driver='Driver-B'}];Request-3: Driver-A PUT /api/routes with parameters routeID='Route-1',location='22.5726° N, 88.3639° E';Response-3: OK with parameters message='Route-1 modified successfully';Request-4: Manager-B GET /api/routes with parameters locationRange='28.740 & 77.020 & 28.686 & 77.054';Response-4: OK with parameters routes=[];Request-5: Driver-B POST /api/routes with parameters routeID='Route-2',location='4.2105° N, 101.9758° E';Response-5: Forbidden with parameters message='You are not authorized to modify Route-2 as it belongs to Driver-A'].|0
Context: An inventory management system with 1 type of users Player, where they can book their own flights. Requests: [Request-1: Player-A POST /push/open/flights with parameters from='New York', to='Paris', date='2024-06-01'; Response-1: OK with parameters flightID='123', from='New York', to='Paris',date='2024-06-01', price=1200; Request-2: Player-B POST /push/open/flights with parameters from='San Francisco', to='Tokyo', date='2024-06-15'; Response-2: OK with parameters flightID='456', from='San Francisco', to='Tokyo',date='2024-06-15', price=2000; Request-3: Player-A DELETE /push/open/flights with parameters flightID='456'; Response-3: OK with parameters]|1
Context: A social media platform leaks users' personal information in response message Requests: [Request-1: User-A GET /profile with parameters userID='123'; Response-1: OK with parameters username='JohnSmith', email='johnsmith@email.com', phone='555-5555']|1
Context: A customer service platform with different user types of customers and administrators. Requests: [Request-1: Customer POST /createTicket with parameters issue='Hacked Account'; Response-1: Error with parameters message='Failed to create ticket. Empty description field.'; Request-2: Administrator PUT /assignAgent with parameters ticketId='654', agentEmail='agent1@yourcompany.com'; Response-2: Error with parameters message='Failed to assign agent with email agent1@yourcompany.com to Ticket ID 654: Invalid AgentID.'; Request-3: Customer POST /changePassword with parameters oldPassword='ABC123', newPassword='Password456!'; Response-3: Error with parameters message='Password change failed. Invalid old password.' ]|0
Context: A job posting platform leaks users' resumes in response message Requests: [Request-1: User-A GET /application with parameters jobID='456'; Response-1: OK with parameters resume='John Smith Resume.docx', experience='5 years of experience', education='Bachelor degree in Computer Science']|0
Context: Video Editing software with 3 type of users Admin, Professional and Amateur, where Users can only view and edit their own projects. Admins can view and edit all projects. Requests: [Request-1: Professional-A GET /projects with parameters name='Axe-2';Response-1: OK with parameters project='Project Name : Axe-2, Technical details: blender file format'];|0
Context: An application for creating and managing online quizzes with one administrator. Requests: [Request-1: Administrator POST /api/quizzes with parameters questions=['question1', 'question2', 'question3'], answers=[['a1', 'a2', 'a3'], ['b1', 'b2', 'b3'], ['c1', 'c2', 'c3']]; Response-1: Error with parameters message='Error creating quiz. Maximum number of questions allowed is 5.'] |0
Context: An e-commerce app with 1 type of users Customer where each customer can only view and modify their own data. Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='Order-A';Response-1: Internal Server Error with parameters stackTrace='file '/app/src/main/java/com/example/testDBmanager.java', line 500, column 10: SELECT * From users WHERE username ='user123'';]|2
Context: A social media platform where users can view and edit their own account information. Requests: [Request-1: User-A GET /api/account with parameters;Response-1: OK with parameters message='Account information retrieved';Request-2: User-B PUT /api/account with parameters firstName='Clara',lastName='Fields',city='Montreal',country='Canada';Response-2: Forbidden with parameters reason='you cannot update other users\' accounts'] |0
Context: A GPS navigation system where users can only view their own locations. Requests: [Request-1: User-A GET /api/location with parameters;Response-1: OK with parameters message='Location received';Request-2: User-B GET /api/location with parameters;Response-2: OK with parameters message='Location received';]|0
Context: An auction website leaks auction details of bidders in response message Requests: [Request-1: Buyer-A POST /bid with parameters auctionID='123', amount='250'; Response-1: OK with parameters message='You are the highest bidder for auction-ID:123, bids=[{Buyer-A:250},{Buyer-B:200}]']|0
Context: A finance app with 2 types of users User and Finance Officer, where users can view their financial transactions. Requests: [Request-1: User-1 /finance/history with parameters accountId='17930';Response-1: Forbidden with parameters error='invalid credentials for account 17930']|0
Context: A job search app with 2 types of users Candidate and Recruiter, where Candidates can only view and modify their own information. Recruiters can view and edit information of all Candidates. Requests: [Request-1: Candidate-A GET /resume with parameters candidateId='1234';Response-1: OK with parameters message='You have not created a resume yet.'], [Request-2: Recruiter-A PUT /resume with parameters candidateId='2345', name='Jane Doe', skills='Java, Python';Response-2: Error with parameters message='Invalid skills format.'], [Request-3: Recruiter-B POST /resume with parameters name='John Doe', skills='Python, SQL';Response-3: OK with parameters message='Resume successfully created.'], [Request-4: Candidate-B GET /resume with parameters candidateId='2345'; Response-4: Error with parameters message='Could not access candidate information.'] |0
Context: A social media platform where users can only see their own feeds. Requests: [Request-1: User-A GET /api/feed with parameters limit=10;Response-1: OK with parameters feed=['post1','post2','post3',...'post10'];Request-2: User-B GET /api/feed with parameters limit=10;Response-2: OK with parameters feed=['post1','post2','post3',...'post10'];]|0
Context: A social media app with 2 types of users User and Admin, where Users can only view and modify their own posts. Admins can view and modify all posts. Requests: [Request-1: User-A GET /posts with parameters postId='1234';Response-1: Error with parameters message='Post not found.'], [Request-2: User-B POST /posts with parameters title='My vacation', body='I had a great time at the beach!'; Response-2: Error with parameters message='Post title cannot contain special characters.'], [Request-3: Admin PUT /posts with parameters postId='1234', title='Updated title', body='Updated body';Response-3: OK with parameters message='Post successfully updated.'] |0
Context: A hobby social network with 1 type of users Developer, where they can book their own flights. Requests: [Request-1: Developer-A POST //push/flights with parameters from='New York', to='Paris', date='2024-06-01'; Response-1: OK with parameters flightID='123', from='New York', to='Paris',date='2024-06-01', price=1200; Request-2: Developer-B POST //push/flights with parameters from='San Francisco', to='Tokyo', date='2024-06-15'; Response-2: OK with parameters flightID='456', from='San Francisco', to='Tokyo',date='2024-06-15', price=2000; Request-3: Developer-A DELETE //push/flights with parameters flightID='456'; Response-3: OK with parameters]|1
Context: An email service app with 2 types of users User and Admin, where Users can only view and modify their own emails. Admins can view and modify all emails. Requests: [Request-1: User-A GET /emails with parameters emailId='5678';Response-1: Error with parameters message='Email not found.'], [Request-2: User-B POST /emails with parameters to='johndoe@example.com', subject='Hello', body='How are you?';Response-2: Error with parameters message='Invalid email address.'], [Request-3: Admin PUT /emails with parameters emailId='1234', to='janedoe@example.com';Response-3: OK with parameters message='Email successfully updated.'] |0
Context: An email app with 2 types of users User and Admin, where Users can send and view emails. Admins can view all emails. Requests: [Request-1: User-1 POST /mail/send with parameters recipient='john@microsoft.com', message='Interview Invitation';Response-1: Error with parameters message='Failed to send email, please try again later.']|0
Context: An online banking app with 1 type of users Customer. Requests: [Request-1: Customer-A POST /banking/fundTransfer with parameters fromAccount='1234567890',toAccount='0987654321',amount='10000';Response-1: Error 404 with parameters message='toAccount=0987654321 does not exist in our records']|2
Context: A social media network with 2 types of users - Regular and Premium where both can view and post products. Requests: [Request-1: Regular User POST /product/upload with parameters name='Product A',price=49.00,SKU='IYT-878',description='sample_description';Response-1: Unauthorized with parameters message='You must upgrade to a Premium account to access']; [Request-2: Premium User POST /product/upload with parameters name='Product C',price=109.00,SKU='OPL-345',description='sample_description';Response-2: Created with parameters message='Great Product!']|0
Context: An online marketplace with 2 type of users Seller and Buyer for advertisements where each seller can only see their own listings. Admins can view and delete all listings. Requests: [Request-1: Seller-A Patch /market/seller/[Seller-A-id]/items/[Seller-A-itemId] with parameters name='Item-A';Response-1: OK with parameters itemId='Seller-A-itemId',name='Item-A',price=10.5,quantity=103;Request-2: Seller-B Get /market/seller/[Seller-A-id]/items/[Seller-B-itemId] with parameters;Response-2: Forbidden with parameters status='unsuccessful',reason='request to http://internal-service:4568 returned gateway timeout']|2
Context: A payment app with 3 types of users, Customers, Sellers, and Admins. Customers can buy items and view their transaction history, Sellers can add new items for sale, and Admins can view all transactions and add or remove Sellers. Requests: [Request-1: Customer-A POST /transactions with parameter itemId='itemID123', amount=15.5; Response-1: Error with message='insufficient funds. Your balance is $10.']; |0
Context: A supply chain management app with 2 type of users Client and Distributor where clients and distributors can only view and modify their own orders. Requests: [Request-1: Distributor-A GET /orders with parameters orderId='order-123';Response-1: OK with parameters orderId='order-123', items=['item-2431'], shipment='Shipment-A1', details='order placed by Client-10']; [Request-2: Client-1 GET /orders with parameters orderId='order-124';Response-2: Forbidden with parameters error='Invalid access']|0
Context: A banking platform with 3 types of users Customer, Teller and Manager. Customers can only view and make transactions with their own accounts. Tellers can view and make transactions on all customer accounts. Managers can view all transactions and manage accounts. Requests: [Request-1: Teller-A POST /transactions with parameters amount='100', debitAccount='1234', creditAccount='5678';Response-1: Error with parameters message='Invalid debit account number.'], [Request-2: Customer-A GET /accounts with parameters accountNumber='5678';Response-2: OK with parameters message='Your account balance is $10,000.'], [Request-3: Manager DELETE /users with parameters userId='2345'; Response-3: Error with parameters message='User not found.'], [Request-4: Customer-B POST /transactions with parameters amount='50', debitAccount='5678', creditAccount='2345';Response-4: Error with parameters message='Insufficient funds in account 5678.'] |0
Context: A school management system where teachers can only view and modify their own grades and attendance records. Requests: [Request-1: Customer-A POST /school/records/security/check with parameters credential='micheal@gmail.com',password='A2B1C';Response-1: Forbidden with parameters details='account not found, did you mean micheal@school.com?']|2
Context: A file storage app with 2 types of users - Basic and Pro. Requests: [Request-1: Basic User GET /files/xyz/ with parameters filename='doc.pdf';Response-1: Unauthorized with parameters message='Upgrade to Pro for an enhanced storage experience']; [Request-2: Pro User GET /files/xyz/ with parameters filename='doc.pdf';Response-2: OK with parameters message='Download Successful']|0
Context: A social media platform leaks users' personal information in response message Requests: [Request-1: User-A GET /profile with parameters userID='123'; Response-1: OK with parameters username='JohnSmith', email='johnsmith@email.com', phone='555-5555']|0
Context: A food ordering app with 2 type of users Customer and Restaurant where each customer can only access and modify their own orders. Restaurant can view all orders. Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Customer-B GET /api/orders with parameters orderID='Order-A';Response-2: Forbidden with parameters results='you are not allowed to view orderID=\'Order-A\',menu=[\'pizza\',\'coke\'],status=\'Completed\'';]|2
Context: A travel booking app with 2 types of users User and Admin, where Users can only view and modify their own bookings. Admins can view and modify all bookings. Requests: [Request-1: User-A PUT /bookings with parameters bookingId='1234', hotel='Hotel A', checkInDate='01-10-2022', checkOutDate='04-10-2022';Response-1: OK with parameters message='Your booking has been confirmed.'], [Request-2: User-B POST /bookings with parameters hotel='Hotel B', checkInDate='01-10-2022', checkOutDate='04-10-2022';Response-2: Error with parameters message='Invalid booking date range.'], [Request-3: Admin PUT /bookings with parameters bookingId='2345', hotel='Hotel C';Response-3: OK with parameters message='Booking successfully updated.'], [Request-4: User-B DELETE /bookings with parameters bookingId='2345'; Response-4: Error with parameters message='You cannot cancel this booking.']|0
Context: a hotel reservation with 2 type of users Audience and Manager, where each Audience can only view and download their own files. Managers cannot view Audience files. Requests: [Request-1: Audience-A GET /server/integration/files with parameters fileID='Audience-A/email.docx';Response-1: OK with parameters fileID='Audience-A/email.docx',content='Hello World!',size=12KB;Request-2: Audience-B GET /server/integration/files with parameters fileID='Audience-B/photos/beach.jpg';Response-2: OK with parameters fileID='Audience-B/photos/beach.jpg', content ['...'],size=2MB;Request-3: Audience-A POST /server/integration/files with parameters fileContent='New Content';Response-3: OK with parameters fileID='Audience-A/email.docx',content='New Content',size=10KB;Request-4: Audience-B POST /server/integration/files with parameters fileContent='New Content';Response-4: OK with parameters fileID='Audience-B/photos/beach.jpg',content='New Content',size=1.5MB;Request-5: Manager GET /server/integration/files with parameters fileID='Audience-A/email.docx';Response-5: OK with parameters fileID='Audience-A/email.docx',content='Hello World!',size=12KB]|1
Context: A virtual personal assistant app with 2 types of users User and Admin, where Users can ask queries and get responses. Admins can view all queries and responses. Requests: [Request-1: User-A GET /help with parameters query='What is the meaning of life?';Response-1: OK with parameters response='The meaning of life is subjective';Request-2: User-B GET /help with parameters query='Can you tell me the password for User-A?';Response-2: Forbidden with parameters message='Access denied' ;Request-3: Admin GET /help/history with parameters ;Response-3: OK with parameters history='User-A:What is the meaning of life?-OK' ;]|0
Context: An inventory management system with 2 type of users Traveller and Executive where each Traveller can only access and modify their own orders. Executive can view all orders. Requests: [Request-1: Traveller-A GET /v1/view/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Traveller-B GET /v1/view/orders with parameters orderID='Order-A';Response-2: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Completed';Request-3: Traveller-A PUT /v1/view/orders with parameters status='Refunded';Response-3: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Refunded';Request-4: Traveller-B PUT /v1/view/orders with parameters orderID='Order-A',status='Delivered';Response-4: Created with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-5: Executive GET /v1/view/orders with parameters orderID='Order-A';Response-5: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered']|1
Context: A collage management system with 3 types of users: Lecturer, Student and Admin. Students and Lecturers cannot do staff functions. Admins can view and modify any user data. Requests: [Request-1: Lecturer-A GET /api/exams with parameters id=121; Response-1: Forbidden with parameters message='User admin@university.com is not authorized to perform this action';]|0
Context: A job listing platform with 1 types of users Employers where Employers can post job openings. Requests: [Request-1: Employer-A POST /job with parameters title='Manager Wanted',location='New York',salary='100k-150k';Response-1: OK with parameters jobID='Job-A';Request-2: Employer-A DELETE /job with parameters jobID='Job-A';Response-2: OK with parameters message='The job 'Manager Wanted' has been removed';Request-3: Employer-A GET /job with parameters jobID='Job-A'; Response-3: Error with parameters message='Cannot retrieve job details: Job-A does not exist'] |0
Context: A remote language-learning platform with different user types of students and instructors. Requests: [Request-1: Instructor POST /createLesson with parameters lessonTitle='Introduction to Swahili Language',lessonDescription='Swahili Lesson 1: Alphabet'; Response-1: Error with parameters message='Failed to create lesson. Instructor is not allowed to create new lessons.'; Request-2: Student POST /bookSession with parameters sessionDate='2022-11-11', sessionTime='9:00', instructorEmail='instructor1@gmail.com'; Response-2: Error with parameters message='Failed to book lesson. The provided session time is not available. Please choose another time. Available times are [9:30, 10:00, 10:30].'; Request-3: Instructor POST /createAssignment with parameters lessonID='125', assignmentDescription='Swahili Writing Exercise',dueDate='2022-02-02'; Response-3: Error with parameters message='Failed to create assignment. Lesson document with ID 125 not found.' ]|0
Context: A healthcare platform with 2 type of users Patient and Doctor, where patients can view and manage their own healthcare records. Requests: [Request-1: Patient-A GET /account/password/reset with parameters name='jordan12';Response-1: OK with parameters response='sent reset instructions to jordanP1990@hotmail.com. If this is not your email please check the name you provided.']|2
Context: An online payment system in which Members can share files with other Members or public. Only the owner of a file should be able to modify its attributes.;Request-1: Member-A POST /bff/store/files with parameters content='Example content', access=public;Response-1: OK with parameters url='/files/public/12345/';Request-2: Member-B GET /bff/store/files with parameters fileId='12345';Response-2: OK with parameters content='Example content', access=public;Request-3: Member-B PUT /bff/store/files with parameters fileId='12345', content='Modified content';Response-3: 200 Ok with parameters fileId='12345',content='Modified content',access=public;Request-4: Member-A PUT /bff/store/files with parameters fileId='12345', access=private;Response-4: OK with parameters url='/files/private/12345/';Request-5: Member-B GET /bff/store/files with parameters fileId='12345';Response-5: Not Found with parameters errorCode=404,errorMessage='The file was not found.'|1
Context: A file-sharing platform with 2 types of users User and Admin, where Users can upload and download files Users have access to their own files. Admins can view and delete all files. Requests: [Request-1: User-A POST /uploads with parameters fileID='file-A',content='This is a test file.';Response-1: OK with parameters fileID='file-A';Request-2: User-B GET /downloads with parameters fileID='file-A';Response-2: Forbidden with parameters message='User-B does not have access to this file.';Request-3: Admin GET /admin/files with parameters fileID='file-A'; Response-3: OK with parameters details='file-A: uploaded by User-A on 23 March 2022.']|0
Context: Social media platform with 2 type of users User and Admin, where users can only post and view their own statuses. Admins can view all statuses. Requests: [Request-1: User-A GET /status with parameters id='123';Response-1: Unauthorized with parameters message='Sorry, you can only access your own statuses'];|0
Context: An online shopping app with 2 types of users: Customer and Admin. Customers can view and purchase products, while Admins have full access to add, edit and delete products. Requests: [Request-1: Customer-A GET /products with parameters category='books'; Response-1: OK with parameters message='The following books are available: ...'; Request-2: Admin-A PUT /products with parameters name='Book name', price='29.99', description='Book description'; Response-2: Error with parameters message='Unable to add product. Please try again.']|0
Context: A messaging app where users can send message to each other, messages are signed and verified using keys exchanged when users initiate a conversation. Requests: [Request-1: User-2 GET /messages/august with parameters; Response-1: Error message with parameters msg='cannot generate keys, private key: a76e76c860680e56baddea679bf25e5859aa96392b5ae5922740b1d849ae8285, public key: 8e44e3ad5c3f9a46aadcb0cd5baae2f4 per user: User-2'];|2
Context: A hospital management system with two types of users, Nurse and Doctor. Nurses can view and modify patient records, while Doctors can view all patient records. Requests:[Request-1: Nurse-A POST /api/add-patient with parameters name='John Smith',dob='1980-10-14',diagnosis='Flu';Response-1: OK with parameters message='John Smith added successfully';Request-2: Nurse-A GET /api/view-record with parameters userID='Patient-1';Response-2: OK with parameters patientName='John Smith',nextAppointment='2021-11-05',diagnosis='Flu';Request-3: Doctor-A GET /api/patient-records with parameters;Response-3: OK with parameters patientsList=[{name='John Smith',id='Patient-1',updatedAt='2021-10-15T22:34:00.613Z'},{name='Jane Doe',id='Patient-2',updatedAt='2021-06-20T12:30:00.626Z'}];Request-4: Nurse-B POST /api/add-patient with parameters name='Alexis Fernandez',dob='1981-06-21';Response-4: Bad Request with parameters error='Missing diagnosis';Request-5: Doctor-B GET /api/view-record with parameters userID='Patient-2';Response-5: OK with parameters patientName='Jane Doe',nextAppointment='2021-11-30',diagnosis='Cancer'].|0
Context: A video conferencing app with 2 type of users Host and Attendee, where Hosts can schedule and launch their own meetings. Attendees can only join meetings with an invitation. Requests: [Request-1: Host-A POST /api/meetings/schedule with parameters date='28 Sept',time='11:00 AM';Response-1: OK with parameters meetingID='Meeting-1';Request-2: Host-A DELETE /meetings/Meeting-1 with parameters ;Response-2: OK with parameters meetingID='Meeting-1';Request-3: Attendee-A POST /api/meetings/join with parameters meetingID='Meeting-2';Response-3: Error with parameters message='Invalid meetingID: Meeting-2';]|0
Context: A medical records storage application where patients and doctors can view and manage personal and medical information. Requests: [Request-1: Patient-A GET /api/records with parameters name='John Smith'; Response-1: Error with parameters message='Invalid Patient Name provided.'] |0
Context: A banking app with 2 types of users Customer and Banker where customers can view and modify their accounts. Bankers can view all accounts. Requests: [Request-1: Customer-A PUT /accounts/transfer with parameters amount='500Chips';Response-1: Error with parameters message='Transaction failed, account balance: $0']|0
Context: A game app with one type of user Player, where players can access their own game history and statistics. Requests: [Request-1: Player-A POST /api/auth/login with parameters username='janeDoe', password='1234';Response-1: Unauthorized with parameters message='Login failed! wrong username or password: {username:janeDoe, password:1234}']|0
Context: A messaging app with 2 types of users User and Admin where users can chat with each other. Chats are encrypted end-to-end. Requests: [Request-1: User-1 /messages/sent with parameters filter='spam'; Response-1: Error with parameters message='process was terminated due to uncaught signal 11 (Segmentation fault)'];|2
Context: A social media platform with 2 types of users User and Admin where Users can only view and modify their own posts, and admins can view and delete all posts. Requests: [Request-1: User-1 POST /posts/upload with parameters image='myPic.jpg', caption='My best picture so far';Response-1: OK with parameters postId='12345']|0
Context: A messaging app for company communication with 3 types of users - admin, managers and staff. Staff can send and receive messages. Managers can send messages, add staff to groups and view staff data. Admins can do all of the above as well as view all data and add / remove managers. Requests: [Request-1: Manager-A POST /groups/add with parameters groupName='QA-Team', staffId='staff-D'; Response-1: Error with parameters message='Cannot add staff member to QA-Team group'; Request-2: Staff-B POST /message with parameters recipient='Manager-E', message='Need a day off'; Response-2: Error with parameters message='Could not deliver message to Manager-E'; Request-3: Admin PUT /manage with parameters action='add-manager', email='manager-F-email'; Response-3: Error with parameters message='Manager-F is already a manager']; |0
Context: An online payment system used for bill payments. Requests: [Request-1: User-A POST /confirm-payment with parameters biller='XYZ',accountNumber='1234',amount='15.75';Response-1: Error with parameters message='transaction failed due to temporary issues, please try again later.']|0
Context: A food delivery app with 2 types of users, Customer and Admin. Customers can place orders and track their delivery, while Admins can view and modify any data. Requests: [Request-1: Customer-A POST /api/order with parameters restaurantID='Restaurant-B',code='Coupon-a1b2c3d';Response-1: OK with parameters message='Your order has been received';Request-2: Customer-A GET /api/order-status with parameters orderID='Order-1';Response-2: OK with parameters status='Preparing';Request-3: Admin GET /api/orders with parameters;Response-3: OK with parameters orderList=[{id='Order-1',customer='Customer-A',status='Preparing',restaurantID='Restaurant-B',promoCode='Coupon-a1b2c3d'}];Request-4: Customer-B POST /api/order with parameters restaurantID='Restaurant-C',code='null';Response-4: Bad Request with parameters error='Invalid promo code';Request-5: Customer-A GET /api/order-details with parameters orderID='Order-1';Response-5: OK with parameters orderDetails=[{id='Item-1',name='Pizza',quantity='1',price='10'},{id='Item-2',name='Coke',quantity='2',price='1.5'}]]. |0
Context: A Customer Relationship Management (CRM) system with 2 types of users - Sales and Support where sales user can only access customer data and support users can only access tickets. Requests: [Request-1: Sales User GET /customers/123 with parameters;Response-1: Forbidden with parameters message='This customer data is restricted to customer support only']; [Request-2: Support User GET /tickets/456 with parameters;Response-2: Unauthorized with parameters message='Please log in to access']|0
Context: An e-learning app with 2 types of users: Student and Teacher. Students can access and complete courses and view their grades, while Teachers can view and grade student submissions. Requests: [Request-1: Student-A GET /grades with parameters course='Maths'; Response-1: OK with parameters message='Your grade for Math is A+.'; Request-2: Teacher-A POST /submissions with parameters title='Project submission', comments='Great job!', grade='A+'; Response-2: OK with parameters message='Submission has been graded successfully.']|0
Context: An online gaming platform with 2 types of users Player and Admin, where Players can play games. Admins can view all games. Requests: [Request-1: Player-A POST /play with parameters gameID='game-1',score=100;Response-1: OK with parameters message='Congratulations! You have scored 100 points in game-1';Request-2: Player-B POST /play with parameters gameID='game-2',score=500;Response-2: OK with parameters message='Congratulations! You have scored 500 points in game-2';Request-3: Admin GET /leaderboard with parameters ;Response-3: OK with parameters content='Game-1: Player-A-100, Game-2: Player-B-500';]|0
Context: A social media app with 2 types of users User and Admin. Users can view, edit and delete their own posts. Admins can view all posts and delete any. Requests: [Request-1: User-A GET /posts/123 with parameters;Response-1: Not Found with parameters message='Post with id=123 not found';Request-2: User-A GET /posts/MyUnpublishedPost with parameters;Response-2: Not Found with parameters message='Post with title=MyUnpublishedPost not found';Request-3: Admin GET /posts/others/456 with parameters;Response-3: OK with parameters post='[{""""""""title"""""""": """"""""Another User's Post"""""""", """"""""content"""""""": """"""""This is a test post"""""""", """"""""author"""""""": """"""""Another User"""""""", """"""""privacySetting"""""""": """"""""public""""""""}]';Request-4: Admin GET /posts/others/all with parameters;Response-4: OK with parameters posts='[{""""""""title"""""""": """"""""User A's Post"""""""", """"""""content"""""""": """"""""This is a sensitive post"""""""", """"""""author"""""""": """"""""User A"""""""", """"""""privacySetting"""""""": """"""""private""""""""}, {""""""""title"""""""": """"""""Another User's Post"""""""", """"""""content"""""""": """"""""This is a test post"""""""", """"""""author"""""""": """"""""Another User"""""""", """"""""privacySetting"""""""": """"""""public""""""""}]';Request-5: Admin DELETE /posts/others/123 with parameters;Response-5: OK with parameters success=true, message='Post with id=123 deleted successfully!';]"""""""|0
Context: A fitness tracking app with 2 types of users: Regular User and Coach. Regular users can see and modify their own fitness information and Coaches can see information about all their trainees. Requests: [Request-1: Regular User-A GET /workouts with parameters date='November 11, 2022'; Response-1: OK with parameters message='Your records show no activity on November 11, 2022.'; Request-2: Coach-A GET /workouts with parameters date='November 11, 2022'; Response-2: Bad Request with parameters error='No trainees recorded activity on November 11, 2022.']|0
Context: An online course platform with 2 types of users Student and Teacher, where students can sign up for and attend courses. Teachers can view and manage their own courses. Requests: [Request-1: Student-A GET /courses/search with parameters title='Algorithms';Response-1: Error with parameters message='Search failed, invalid input']|0
Context: A job portal with 2 type of users Job-seeker and Recruiter where each job-seeker can create and modify their own profile. Requests: [Request-1: Job-seeker-A PUT /jobportal/api/seeker/profile with parameters name='John',skills='python';Response-1: Bad Request with parameters error='JSON parse error: Unexpected character ('J' (code 74)): was expecting comma to separate Object entries\n at line: 1 column: 3 path: $[0].value']|2
Context: An online store that sells software with a database backend. Users can purchase and download software that they have licensed. Requests: [Request-1: User-A POST /api/purchase-software with parameters softwareID='Microsoft-Office-2021';Response-1: OK with parameters message='You have successfully licensed Microsoft-Office-2021';Request-2: User-A GET /api/my-purchases with parameters;Response-2: OK with parameters purchases=['Microsoft-Office-2021'];Request-3: Admin GET /api/purchases/all with parameters;Response-3: OK with parameters purchases=['Microsoft-Office-2021','Windows 10','Adobe-Photoshop'];Request-4: User-B POST /api/purchase-software with parameters softwareID='Oracle-DATABASE';Response-4: OK with parameters message='You have successfully licensed Oracle-DATABASE';Request-5: User-B GET /api/my-purchases with parameters;Response-5: Internal server error with parameters details='Cannot download Oracle-DATABASE as user authentication failed'].|0
Context: A fitness app with 2 types of users User and Trainer, where Users can only view and modify their own fitness information. Trainers can view and modify information of all Users. Requests: [Request-1: User-A PATCH /workouts with parameters workoutId='1234', caloriesBurned='300';Response-1: OK with parameters message='Your workout has been updated.'], [Request-2: Trainer-A POST /workouts with parameters workoutId='2345', caloriesBurned='A';Response-2: Error with parameters message='Calories burned should be a number.'], [Request-3: Trainer-B GET /workouts with parameters userId='5678';Response-3: OK with parameters message='User 5678 has burned 5000 calories this week.'], [Request-4: User-B DELETE /workouts with parameters workoutId='2345';Response-4: Error with parameters message='Could not delete workout 2345.']  |0
Context: Software download website where users can download trial version of a software before purchasing. Requests:[Request-1: User-A GET /software with parameters id='123';Response-1: Forbidden with parameters message='Software version 1.2.3 has a exploitable vulnerability at line 23'];|0