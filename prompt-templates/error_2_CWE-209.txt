Task description: Examples SHOULD demonstrate CWE-209: Generation of Error Message Containing Sensitive Information security flaw. The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more serious attacks. The error message may be created in different ways:
self-generated: the source code explicitly constructs the error message and delivers it.
externally-generated: the external environment, such as a language interpreter, handles the error and constructs its own message, whose contents are not under direct control by the programmer .
An attacker may use the contents of error messages to help launch another, more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of ".." sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query. 
Template:
Context: [Details on the app, Roles of people using, What each role can and cannot do]. Requests: [An array of Request&Response pairs. Min. 1 Max. 5 pairs. A Request must be followed by corresponding Response.]
List of Examples, each line represents a unique example:
#Comment:The following app fails to sanitize its error response, leaking information about account existance
Context: An ecommerce app with 3 types of users Customer, Merchant and Admin. Customers and Merchants can only view and edit their own data. Admins can view and edit all data. Requests: [Request-1: Customer-A POST /workshop/api/auth/login with parameters username='micheal',password='123';Response-1: Unauthorized with parameters success=false,message='123 is incorrect password';Request-2: Customer-B POST /workshop/api/auth/login with parameters username='beatrice',password='123123';Response-2: OK with parameters token='uYda27...']
#Comment: The following app leaks sensitive system info to end users after a crash
Context: Travel booking website with 1 type of users Customer, where customers book their own flights. Requests: [Request-1: Customer-A PUT /flights/europe/suomi/book with parameters name='Mikka112',date='20.10.2022';Response-1: Bad Request with parameters message='Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory, total=15394 available=13, core dumped']
#Comment: The following app leaks information about accounts in response error message
Context: A school management system where teachers can only view and modify their own grades and attendance records. Requests: [Request-1: Customer-A POST /school/records/security/check with parameters credential='micheal@gmail.com',password='A2B1C';Response-1: Forbidden with parameters details='account not found, did you mean micheal@school.com?']
#Comment: The following app leaks email of user in response message without verification
Context: A healthcare platform with 2 type of users Patient and Doctor, where patients can view and manage their own healthcare records. Requests: [Request-1: Patient-A GET /account/password/reset with parameters name='jordan12';Response-1: OK with parameters response='sent reset instructions to jordanP1990@hotmail.com. If this is not your email please check the name you provided.']
#Comment: The following app leaks the contents of user's private file in the response message 
Context: A cloud-based storage app with 2 type of users User and Admin, where each user can only view and download their own files. Admins cannot view user files. Requests: [Request-1: User-A GET /api/files with parameters fileID='User-A/email.docx';Response-1: OK with parameters fileID='User-A/email.docx',content='Hello World!',size=12KB;Request-2: User-B GET /api/files with parameters fileID='User-B/photos/beach.jpg';Response-2: OK with parameters fileID='User-B/photos/beach.jpg', content ['...'],size=2MB;Request-3: User-A POST /api/files with parameters fileContent='New Content';Response-3: OK with parameters fileID='User-A/email.docx',content='New Content',size=10KB;Request-4: User-B POST /api/files with parameters fileContent='New Content';Response-4: OK with parameters fileID='User-B/photos/beach.jpg',content='New Content',size=1.5MB;Request-5: Admin GET /api/files with parameters fileID='User-A/email.docx';Response-5: OK with parameters message='Cannot parse email.docx: 'from=User-A@gmail.com to=lover@gmail.com title=Secret body=6s76sad/&TA29' is missing quotes']
#Comment: The following app leaks customer's order history to another customer in error message
Context: A food ordering app with 2 type of users Customer and Restaurant where each customer can only access and modify their own orders. Restaurant can view all orders. Requests: [Request-1: Customer-A GET /api/orders with parameters orderID='Order-A';Response-1: OK with parameters orderID='Order-A',menu=['pizza','coke'],status='Delivered';Request-2: Customer-B GET /api/orders with parameters orderID='Order-A';Response-2: Forbidden with parameters results='you are not allowed to view orderID=\'Order-A\',menu=[\'pizza\',\'coke\'],status=\'Completed\'';]
#Comment: The following app leaks name and function of internal library in use
Context: Travel booking website with 1 type of users Customer, where customers book their own flights. Requests: [Request-1: Customer-A PUT /store/login with parameters email='micheal@gmail.com',password='ABC';Response-1: Bad Request with parameters code='400',error='php-hash-lib: cannot hash, digest size surpassed']
#Comment: The following app leaks confidential internal network communication information
Context: An online marketplace with 2 type of users Seller and Buyer for advertisements where each seller can only see their own listings. Admins can view and delete all listings. Requests: [Request-1: Seller-A Patch /market/seller/[Seller-A-id]/items/[Seller-A-itemId] with parameters name='Item-A';Response-1: OK with parameters itemId='Seller-A-itemId',name='Item-A',price=10.5,quantity=103;Request-2: Seller-B Get /market/seller/[Seller-A-id]/items/[Seller-B-itemId] with parameters;Response-2: Forbidden with parameters status='unsuccessful',reason='request to http://internal-service:4568 returned gateway timeout']
#Comment: The following app leaks database sql query details
Context: A messaging app with 2 types of users User and Admin where Users can chat with each other. Chats are encrypted end-to-end. Requests: [Request-1: User-1 /messages/august/search with parameters terms='who should win eurovison?';Response-1: Error with parameters msg='cannot serialize response {command: 'SELECT',rowCount: 3,oid: null,rows:[{ id: 1, name: 'John', age: 25 },{ id: 2, name: 'Jane', age: 30 },{ id: 3, name: 'Sam', age: 35 }],fields: [{ name: 'id', tableID: 123, columnID: 1, dataTypeID: 23 },{ name: 'name', tableID: 123, columnID: 2, dataTypeID: 25 },{ name: 'age', tableID: 123, columnID: 3, dataTypeID: 23 },commandComplete: 'slct * fr tb lim 3 }'] 